/* SAP CVOM 4.0 Â© <2012-2014> SAP SE. All rights reserved. Build Version 5.10.0, Build Context N/A */
/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.5 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.5',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && navigator && document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value !== 'string') {
                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    //Allow getting a global that expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite and existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; ary[i]; i += 1) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {
                        //End of the line. Keep at least one non-dot
                        //path segment at the front so it can be mapped
                        //correctly to disk. Otherwise, there is likely
                        //no path mapping for a path starting with '..'.
                        //This can still fail, but catches the most reasonable
                        //uses of ..
                        break;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgName, pkgConfig, mapValue, nameParts, i, j, nameSegment,
                foundMap, foundI, foundStarMap, starI,
                baseParts = baseName && baseName.split('/'),
                normalizedBaseParts = baseParts,
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name && name.charAt(0) === '.') {
                //If have a base name, try to normalize against it,
                //otherwise, assume it is a top-level require that will
                //be relative to baseUrl in the end.
                if (baseName) {
                    if (getOwn(config.pkgs, baseName)) {
                        //If the baseName is a package name, then just treat it as one
                        //name to concat the name with.
                        normalizedBaseParts = baseParts = [baseName];
                    } else {
                        //Convert baseName to array, and lop off the last part,
                        //so that . matches that 'directory' and not name of the baseName's
                        //module. For instance, baseName of 'one/two/three', maps to
                        //'one/two/three.js', but we want the directory, 'one/two' for
                        //this normalization.
                        normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    }

                    name = normalizedBaseParts.concat(name.split('/'));
                    trimDots(name);

                    //Some use of packages may use a . path to reference the
                    //'main' module name, so normalize for that.
                    pkgConfig = getOwn(config.pkgs, (pkgName = name[0]));
                    name = name.join('/');
                    if (pkgConfig && name === pkgName + '/' + pkgConfig.main) {
                        name = pkgName;
                    }
                } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2);
                }
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break;
                                }
                            }
                        }
                    }

                    if (foundMap) {
                        break;
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            return name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                removeScript(id);
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);
                context.require([id]);
                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        normalizedName = normalize(name, parentName, applyMap);
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                getModule(depMap).on(name, fn);
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length - 1, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return mod.exports;
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return (config.config && getOwn(config.config, mod.map.id)) || {};
                        },
                        exports: defined[mod.map.id]
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var map, modId, err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                map = mod.map;
                modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error.
                            if (this.events.error) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            if (this.map.isDefine) {
                                //If setting exports via 'module' is in play,
                                //favor that over return value and exports. After that,
                                //favor a non-undefined return value over exports use.
                                cjsModule = this.module;
                                if (cjsModule &&
                                        cjsModule.exports !== undefined &&
                                        //Make sure it is not already the exports value
                                        cjsModule.exports !== this.exports) {
                                    exports = cjsModule.exports;
                                } else if (exports === undefined && this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = [this.map.id];
                                err.requireType = 'define';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', this.errback);
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths and packages since they require special processing,
                //they are additive.
                var pkgs = config.pkgs,
                    shim = config.shim,
                    objs = {
                        paths: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (prop === 'map') {
                            if (!config.map) {
                                config.map = {};
                            }
                            mixin(config[prop], value, true, true);
                        } else {
                            mixin(config[prop], value, true);
                        }
                    } else {
                        config[prop] = value;
                    }
                });

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;
                        location = pkgObj.location;

                        //Create a brand new object on pkgs, since currentPackages can
                        //be passed in again, and config.pkgs is the internal transformed
                        //state for all package configs.
                        pkgs[pkgObj.name] = {
                            name: pkgObj.name,
                            location: location || pkgObj.name,
                            //Remove leading dot in main, so main paths are normalized,
                            //and remove any trailing .js, since different package
                            //envs have different conventions: some use a module name,
                            //some use a file name.
                            main: (pkgObj.main || 'main')
                                  .replace(currDirRegExp, '')
                                  .replace(jsSuffixRegExp, '')
                        };
                    });

                    //Done with modifications, assing packages back to context config
                    config.pkgs = pkgs;
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overriden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, pkgs, pkg, pkgPath, syms, i, parentModule, url,
                    parentPath;

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;
                    pkgs = config.pkgs;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');
                        pkg = getOwn(pkgs, parentModule);
                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        } else if (pkg) {
                            //If module name is just the package name, then looking
                            //for the main module.
                            if (moduleName === pkg.name) {
                                pkgPath = pkg.location + '/' + pkg.main;
                            } else {
                                pkgPath = pkg.location;
                            }
                            syms.splice(0, i, pkgPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callack function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error', evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = function (err) {
        throw err;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = config.xhtml ?
                    document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                    document.createElement('script');
            node.type = config.scriptType || 'text/javascript';
            node.charset = 'utf-8';
            node.async = true;

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation that a build has been done so that
                //only one script needs to be loaded anyway. This may need to be
                //reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = dataMain.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                    dataMain = mainScript;
                }

                //Strip off any trailing .js since dataMain is now
                //like a module name.
                dataMain = dataMain.replace(jsSuffixRegExp, '');

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(dataMain) : [dataMain];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = [];
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps.length && isFunction(callback)) {
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));
if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
    window.__sap_viz_internal_requirejs_nextTick__ = requirejs.s.contexts._.nextTick;
    requirejs.s.contexts._.definedTmp = {};
    for (var i in requirejs.s.contexts._.defined) {
            if (requirejs.s.contexts._.defined.hasOwnProperty(i)) {
                requirejs.s.contexts._.definedTmp[i] = requirejs.s.contexts._.defined[i];
                delete requirejs.s.contexts._.defined[i];
            }
        }
    requirejs.s.contexts._.nextTick = function(fn) {fn();};
}
/*
 * 1. Make every AMD module exports itself.
 * 2. Every module stays anonymous until they are required.
 * 3. "Exporting" includes global namespace setup and auto loading.
 * 4. The trick must work for any valid AMD loader.
 */
(function(global){
    var ostring = Object.prototype.toString;
    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    function mixin(target, src) {
        for(var prop in src){
            if(src.hasOwnProperty(prop)){
                target[prop] = src[prop];
            }
        }
        return target;
    }

    function exportNamespace(id, mod){
        for(var i = 0,
                nameParts = id.split("/"),
                p = global,
                c;
            c = nameParts[i]; ++i){

            if(i < nameParts.length - 1){
                p[c] = p[c] || {};
            }else{
                p[c] = p[c] ? mixin(p[c], mod) : mod;
            }
            p = p[c];
        }
    }

    if(define && define.amd && !define.__exportNS){
        var originalDefine = define;
        define = function(name, deps, callback){
            if(typeof name !== 'string'){
                callback = deps;
                deps = name;
                name = null;
            }
            if(!isArray(deps)){
                callback = deps;
                deps = [];
            }

            var needExport = deps.indexOf('exports') >= 0;
            var needRequire = needExport || deps.indexOf('require') >= 0;
            if(needExport){
                deps.push('module');

                var originalCallback = callback;
                callback = function(){
                    var last = arguments.length - 1;
                    var mod = arguments[last];
                    var result = originalCallback;
                    if(isFunction(originalCallback)){
                        var args = [].slice.apply(arguments, [0, last]);
                        result = originalCallback.apply(this, args);
                    }
                    exportNamespace(mod.id, result);
                    return result;
                };
            }
            if(name && needRequire){
                define.__autoLoad.push(name);
            }

            return originalDefine(name, deps, callback);
        };
        for(var prop in originalDefine){
            define[prop] = originalDefine[prop];
        }
        define.__exportNS = originalDefine;
        define.__autoLoad = [];
    }
})(this);
(function(){var a;if(window){sap=window.sap||{}}else{sap=sap||{}}if(sap){sap.common=sap.common||{}}if(sap.common){sap.common.globalization=sap.common.globalization||{}}sap.common.globalization.VERSION=function(){return"1.0.0"};sap.common.globalization.declare=function(c){if(!c){throw new Error("name required")}if(typeof(c)!="string"){throw new Error("name has to be a string")}if(c.charAt(0)=="."||c.charAt(c.length-1)=="."||c.indexOf("..")!=-1){throw new Error("illegal name: "+c)}c=c.split(".");var d=window;for(var b=0;b<c.length;b++){d[c[b]]=d[c[b]]||{};d=d[c[b]]}return d};sap.common.globalization.require=function(b){};sap.common.globalization.extend=function(f,b){var c=f.prototype;f.superclass=b.prototype;var d=function(){};d.prototype=b.prototype;f.prototype=new d();for(var e in c){if(c.hasOwnProperty(e)){f.prototype[e]=c[e]}}f.prototype.constructor=f;if(b.prototype.constructor==Object.prototype.constructor){b.prototype.constructor=b}return f}})();(function(){sap.common.globalization.declare("sap.common.globalization.NumericFormatManager");sap.common.globalization.require("sap.common.globalization.utils.NumberUtil");sap.common.globalization.require("sap.common.globalization.utils.BooleanUtil");sap.common.globalization.require("sap.common.globalization.utils.DataFormatUtils");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.numericFormat.FTUtil");sap.common.globalization.require("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");var a=sap.common.globalization.NumericFormatManager;a.DEFAULT_FORMAT_DATE_TIME="SAP_FORMAT_DEFAULT_DATE_TIME";a.DEFAULT_FORMAT_TIME="SAP_FORMAT_DEFAULT_TIME";a.DEFAULT_FORMAT_SHORT_DATE="SAP_FORMAT_DEFAULT_SHORT_DATE";a.DEFAULT_FORMAT_LONG_DATE="SAP_FORMAT_DEFAULT_LONG_DATE";a.DEFAULT_FORMAT_NUMBER="SAP_DEFAULT_NUMBER_FORMAT";a.DEFAULT_FORMAT_BOOLEAN="SAP_DEFAULT_BOOLEAN_FORMAT";a._formatsCache={};a.resetFormatsCache=function(){a._formatsCache={}};a.setPVL=function(e,d){var b=sap.common.globalization.GlobalizationPreference.getInstance().pvl();sap.common.globalization.GlobalizationPreference.getInstance().setPvl(e);var c=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(!b||c!=b){a._formatsCache={};if(!d){a.setCustomizedLocaleInfo(null)}}};a.getPVL=function(){return sap.common.globalization.GlobalizationPreference.getInstance().pvl()};a.setCustomizedLocaleInfo=function(c,b){if(b){delete c.dayStrings;delete c.shortDayStrings;delete c.monthStrings;delete c.shortMonthStrings;delete c.amPms}sap.common.globalization.numericFormat.FLocalization.getInstance().setCustomizedLocaleInfo(c)};a.getThousandSeparator=function(){return sap.common.globalization.GlobalizationNumericConstant.getDisplayThousandSeparator()};a.getDecimalSeparator=function(){return sap.common.globalization.GlobalizationNumericConstant.getDisplayDecimalSeparator()};a.formatToText=function(e,b,d,c){return this._format(e,b,false,d,c)};a.formatToTextWithColor=function(e,b,d,c){return this._format(e,b,true,d,c)};a.getFormattedColor=function(c){var b=undefined;if(c&&c.hasOwnProperty("color")){b=c.color}return b};a.getFormattedText=function(b){var c=b;if(b&&b.hasOwnProperty("text")){c=b.text}return c};a.getFormat=function(f){if((f==null)||(f=="")){return null}if(!a._formatsCache){a._formatsCache=new Object()}var k=a._formatsCache[f];var b=sap.common.globalization.defaultFormat;if(k==null){if(f==a.DEFAULT_FORMAT_SHORT_DATE||f==a.DEFAULT_FORMAT_LONG_DATE||f==a.DEFAULT_FORMAT_DATE_TIME||f==a.DEFAULT_FORMAT_TIME){var f;var m=b.CustomNumericFormatLocaleFactory.getInstance();switch(f){case a.DEFAULT_FORMAT_SHORT_DATE:var j=new b.DefaultShortDateFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(j,m);f=j.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_LONG_DATE:var c=new b.DefaultDateFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(c,m);f=c.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_DATE_TIME:var e=new b.DefaultDateTimeFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(e,m);f=e.getDefaultDateFormat();break;case a.DEFAULT_FORMAT_TIME:default:var i=new b.DefaultTimeFormatLocaleFactory();k=new sap.common.globalization.numericFormat.FT(i,m);f=i.getDefaultDateFormat()}k.parse(f)}else{if(f==a.DEFAULT_FORMAT_NUMBER){var g=new b.DefaultNumericFormatLocaleFactory();var g;var l=g.getDefaultNumericFormat();k=new sap.common.globalization.numericFormat.FT(b.CustomDateFormatLocaleFactory.getInstance(),g);k.parse(l)}else{if(b.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat(f)){var h=new b.DefaultCurrencyFormatLocaleFactory(f);var d=h.getDefaultCurrencyFormat();k=new sap.common.globalization.numericFormat.FT(b.CustomDateFormatLocaleFactory.getInstance(),h);k.parse(d)}else{if(f==a.DEFAULT_FORMAT_BOOLEAN){k=new sap.common.globalization.numericFormat.FTBoolean();k.parse(f)}else{k=new sap.common.globalization.numericFormat.FT();k.parse(f)}}}}a._formatsCache[f]=k}return k};a._format=function(i,f,h,j,m){var k=i==null?"":i;var g=a.getFormat(f);var d=false;var e=NaN;var j=j==undefined?true:j;var l;var b=String(k);if(g){if(g.isParsedSuccess()==false&&m==true){b=i}else{g.color=undefined;var c=false;if(j){if(sap.common.globalization.utils.NumberUtil.isNumericValue(k)){c=true}}else{if(sap.common.globalization.utils.BaseUtils.isNumber(k)){c=true}}if(c){b=g.display(Number(k));e=Number(g.color)}else{if(sap.common.globalization.utils.BooleanUtil.isBooleanValue(k)&&sap.common.globalization.numericFormat.FTUtil.isBooleanFT(g)){b=g.display(k)}else{if(k instanceof Date){b=g.display(k)}}}}}if(h&&!isNaN(e)){if(!l){l={}}l.color=e;l.text=b}else{l=b}return l};a.format=function(c,b){var d=a.getFormat(b);if(d==null){return c}return d.display(c)};a.SAP_PARAMETERS={};a.resetParameters=function(){a.SAP_PARAMETERS={}};a.setBooleanDisplayString=function(b,c){sap.common.globalization.GlobalizationBooleanConstant.BOOLEAN_STRING_TRUE=b;sap.common.globalization.GlobalizationBooleanConstant.BOOLEAN_STRING_FALSE=c}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.NumericFormatManager");sap.common.globalization.GlobalizationPreference=function(){this.__className="sap.common.globalization.GlobalizationPreference";this._preferredViewingLocale=null};var a=sap.common.globalization.GlobalizationPreference;a._instance=null;a.DOCUMENT_LOCALE="en";a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.GlobalizationPreference()}return a._instance};a.resetInstance=function(){a._instance=new sap.common.globalization.GlobalizationPreference()};a.prototype.pvl=function(){return this._preferredViewingLocale};a.prototype.setPvl=function(b){if(b!=this._preferredViewingLocale){this._preferredViewingLocale=b}};a.prototype.pvlIsoLanguageCode=function(){return this._getIsoLanguageCode(this.pvl())};a.prototype.documentLocale=function(){return a.DOCUMENT_LOCALE};a.prototype.documentIsoLanguageCode=function(){return this._getIsoLanguageCode(a.DOCUMENT_LOCALE)};a.prototype._getIsoLanguageCode=function(b){if(b){return String(b).split("_")[0]}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationBooleanConstant");var a=sap.common.globalization.GlobalizationBooleanConstant;a.BOOLEAN_STRING_TRUE="TRUE";a.BOOLEAN_STRING_FALSE="FALSE";a.getBooleanStrings=function(){return[a.BOOLEAN_STRING_TRUE,a.BOOLEAN_STRING_FALSE]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.GlobalizationNumericConstant=function(){this.__className="sap.common.globalization.GlobalizationNumericConstant"};var a=sap.common.globalization.GlobalizationNumericConstant;a._FORMAT_TYPE_NUMBER="number";a._FORMAT_TYPE_CURRENCY="currency";a._KEY_TYPE_NUMERIC="numeric";a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR="displayThousandsSeparator";a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR="displayDecimalSeparator";a._DEFAULT_FORMAT_STRING={af:{number:"#,##0.###",currency:"Â¤#,##0.00"},af_ZA:{},ar:{number:"#,##0.###",currency:"Â¤ #,##0.00"},ar_AE:{},ar_BH:{},ar_DZ:{},ar_EG:{},ar_IQ:{},ar_JO:{},ar_KW:{},ar_LB:{},ar_LY:{},ar_MA:{},ar_OM:{},ar_QA:{currency:"Â¤#0.00"},ar_SA:{currency:"Â¤#0.00"},ar_SY:{currency:"Â¤#0.00"},ar_TN:{currency:"Â¤#0.00"},ar_YE:{currency:"Â¤#0.00"},az:{number:"#,##0.###",currency:"Â¤ #,##0.00"},az_AZ:{},be:{number:"#,##0.###",currency:"Â¤#,##0.00"},be_BY:{},bg:{number:"#,##0.###",currency:"#,##0.00 Â¤"},bg_BG:{},bn:{number:"#,##,##0.###",currency:"#,##,##0.00Â¤;(#,##,##0.00Â¤)"},bn_IN:{},br:{number:"#,##0.###",currency:"Â¤#,##0.00"},bs:{number:"#,##0.###",currency:"Â¤ #,##0.00"},bs_BA:{},ca:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ca_ES:{},cs:{number:"#,##0.###",currency:"#,##0.00 Â¤"},cs_CZ:{},cy:{number:"#,##0.###",currency:"Â¤#,##0.00"},cy_GB:{},da:{number:"#,##0.###",currency:"#,##0.00 Â¤"},da_DK:{},de:{number:"#,##0.###",currency:"#,##0.00 Â¤"},de_AT:{currency:"Â¤ #,##0.00"},de_BE:{},de_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},de_DE:{},de_LI:{currency:"Â¤ #,##0.00"},de_LU:{},el:{number:"#,##0.###",currency:"#,##0.00 Â¤"},el_CY:{currency:"Â¤#,##0.00"},el_GR:{},en:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},en_AU:{currency:"Â¤#,##0.00"},en_BZ:{currency:"Â¤#,##0.00"},en_CA:{},en_GB:{currency:"Â¤#,##0.00"},en_HK:{},en_IE:{currency:"Â¤#,##0.00"},en_IN:{number:"#,##,##0.###",currency:"Â¤Â #,##,##0.00"},en_JM:{currency:"Â¤#,##0.00"},en_NZ:{currency:"Â¤#,##0.00"},en_PH:{},en_SG:{},en_TT:{currency:"Â¤#,##0.00"},en_US:{},en_VI:{},en_ZA:{currency:"Â¤#,##0.00"},en_ZW:{currency:"Â¤#,##0.00"},es:{number:"#,##0.###",currency:"Â¤ #,##0.00"},es_AR:{},es_BO:{},es_CL:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},es_CO:{},es_CR:{},es_DO:{},es_EC:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},es_ES:{},es_GT:{},es_HN:{},es_MX:{},es_NI:{},es_PA:{},es_PE:{},es_PR:{},es_PY:{currency:"Â¤ #,##0.00;Â¤ -#,##0.00"},es_SV:{},es_UY:{currency:"Â¤ #,##0.00;(Â¤ #,##0.00)"},es_VE:{currency:"Â¤#,##0.00;Â¤-#,##0.00"},et:{number:"#,##0.###",currency:"#,##0.00 Â¤"},et_EE:{},eu:{number:"#,##0.###",currency:"#,##0.00 Â¤"},eu_ES:{},fa:{number:"#,##0.###;âˆ’#,##0.###",currency:"#,##0.00 Â¤;'-#,##0.00' Â¤"},fa_IR:{},fi:{number:"#,##0.###",currency:"#,##0.00 Â¤"},fi_FI:{},fo:{number:"#,##0.###",currency:"Â¤#,##0.00;Â¤-#,##0.00"},fo_FO:{},fr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},fr_BE:{},fr_CA:{currency:"#,##0.00 Â¤;(#,##0.00 Â¤)"},fr_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},fr_FR:{},fr_LU:{},fr_MC:{},gl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},gl_ES:{},gu:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},gu_IN:{},he:{number:"#,##0.###",currency:"#,##0.00 Â¤"},he_IL:{},hi:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},hi_IN:{},hr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},hr_HR:{},hu:{number:"#,##0.###",currency:"#,##0.00 Â¤"},hu_HU:{},hy:{number:"#0.###",currency:"#0.00 Â¤"},hy_AM:{},id:{number:"#,##0.###",currency:"Â¤#,##0.00"},id_ID:{},is:{number:"#,##0.###",currency:"#,##0.00 Â¤"},is_IS:{},it:{number:"#,##0.###",currency:"Â¤ #,##0.00"},it_CH:{currency:"Â¤ #,##0.00;Â¤-#,##0.00"},it_IT:{},ja:{number:"#,##0.###",currency:"Â¤#,##0.00"},ja_JP:{},ka:{number:"#,##0.###",currency:"Â¤ #,##0.00"},ka_GE:{},kk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},kk_KZ:{},kn:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},kn_IN:{},ko:{number:"#,##0.###",currency:"Â¤#,##0.00"},ko_KR:{},kok:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},kok_IN:{},lt:{number:"#,##0.###;âˆ’#,##0.###",currency:"#,##0.00 Â¤"},lt_LT:{},lv:{number:"#,##0.###",currency:"#,##0.00 Â¤"},lv_LV:{},mk:{number:"#,##0.###;(#,##0.###)",currency:"Â¤ #,##0.00"},mk_MK:{},ml:{number:"#,##,##0.###",currency:"#,##,##0.00Â¤"},ml_IN:{},mn:{number:"#,##0.###",currency:"Â¤ #,##0.00"},mn_MN:{},mr:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},mr_IN:{},ms:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},ms_BN:{currency:"Â¤ #,##0.00"},ms_MY:{},mt:{number:"#,##0.###",currency:"Â¤#,##0.00"},mt_MT:{},nb:{number:"#,##0.###",currency:"Â¤ #,##0.00"},nb_NO:{},nl:{number:"#,##0.###",currency:"Â¤ #,##0.00;Â¤ #,##0.00-"},nl_BE:{currency:"#,##0.00 Â¤"},nl_NL:{},nn:{number:"#,##0.###;âˆ’#,##0.###",currency:"#,##0.00 Â¤"},nn_NO:{},pa:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},pa_IN:{},pl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},pl_PL:{},pt:{number:"#,##0.###",currency:"Â¤#,##0.00;(Â¤#,##0.00)"},pt_BR:{},pt_PT:{currency:"#,##0.00 Â¤"},ro:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ro_RO:{},ru:{number:"#,##0.###",currency:"#,##0.00 Â¤"},ru_RU:{},ru_UA:{},se:{number:"#,##0.###",currency:"Â¤ #,##0.00"},se_NO:{},sk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sk_SK:{},sl:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sl_SI:{},sq:{number:"#,##0.###",currency:"Â¤#,##0.00"},sq_AL:{},sr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sr_BA:{},sr_CS:{},sv:{number:"#,##0.###;âˆ’#,##0.###",currency:"#,##0.00 Â¤"},sv_FI:{},sv_SE:{},sw:{number:"#,##0.###",currency:"#,##0.00 Â¤"},sw_KE:{currency:"Â¤#,##0.00"},syr:{number:"#,##0.###",currency:"Â¤ #,##0.00"},syr_SY:{},ta:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},ta_IN:{},te:{number:"#,##,##0.###",currency:"Â¤ #,##,##0.00"},te_IN:{},th:{number:"#,##0.###",currency:"Â¤#,##0.00;Â¤-#,##0.00"},th_TH:{},tn:{number:"#,##0.###",currency:"Â¤#,##0.00"},tn_ZA:{},tr:{number:"#,##0.###",currency:"#,##0.00 Â¤"},tr_TR:{},uk:{number:"#,##0.###",currency:"#,##0.00 Â¤"},uk_UA:{},uz:{number:"#,##0.###",currency:"Â¤ #,##0.00"},uz_UZ:{},vi:{number:"#,##0.###",currency:"#,##0.00 Â¤"},vi_VN:{},xh:{number:"#,##0.###",currency:"Â¤#,##0.00"},xh_ZA:{},zh:{number:"#,##0.###",currency:"Â¤#,##0.00"},zh_CN:{},zh_HK:{},zh_MO:{},zh_SG:{},zh_TW:{},zu:{number:"#,##0.###",currency:"Â¤#,##0.00"},zu_ZA:{}};a._RESOURCE_MAP={af:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},af_ZA:{numeric:{}},ar:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ar_AE:{numeric:{}},ar_BH:{numeric:{}},ar_DZ:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_EG:{numeric:{}},ar_IQ:{numeric:{}},ar_JO:{numeric:{}},ar_KW:{numeric:{}},ar_LB:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_LY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_MA:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_OM:{numeric:{}},ar_QA:{numeric:{}},ar_SA:{numeric:{}},ar_SY:{numeric:{}},ar_TN:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ar_YE:{numeric:{}},az:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},az_AZ:{numeric:{}},be:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},be_BY:{numeric:{}},bg:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},bg_BG:{numeric:{}},bn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},bn_IN:{numeric:{}},br:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},bs:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},bs_BA:{numeric:{}},ca:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ca_ES:{numeric:{}},cs:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},cs_CZ:{numeric:{}},cy:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},cy_GB:{numeric:{}},da:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},da_DK:{numeric:{}},de:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},de_AT:{numeric:{}},de_BE:{},de_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},de_DE:{numeric:{}},de_LI:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},de_LU:{numeric:{}},el:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},el_CY:{numeric:{}},el_GR:{numeric:{}},en:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},en_AU:{numeric:{}},en_BZ:{numeric:{}},en_CA:{numeric:{}},en_GB:{numeric:{}},en_HK:{numeric:{}},en_IE:{numeric:{}},en_IN:{numeric:{}},en_JM:{numeric:{}},en_NZ:{numeric:{}},en_PH:{numeric:{}},en_SG:{numeric:{}},en_TT:{numeric:{}},en_US:{numeric:{}},en_VI:{numeric:{}},en_ZA:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},en_ZW:{numeric:{}},es:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},es_AR:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_BO:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CL:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CO:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_CR:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_DO:{numeric:{}},es_EC:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_ES:{numeric:{}},es_GT:{numeric:{}},es_HN:{numeric:{}},es_MX:{numeric:{}},es_NI:{numeric:{}},es_PA:{numeric:{}},es_PE:{numeric:{}},es_PR:{numeric:{}},es_PY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_SV:{numeric:{}},es_UY:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},es_VE:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},et:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},et_EE:{numeric:{}},eu:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},eu_ES:{numeric:{}},fa:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},fa_IR:{numeric:{}},fi:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},fi_FI:{numeric:{}},fo:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},fo_FO:{numeric:{}},fr:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},fr_BE:{numeric:{displayThousandsSeparator:"."}},fr_CA:{numeric:{}},fr_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},fr_FR:{numeric:{}},fr_LU:{numeric:{displayThousandsSeparator:"."}},fr_MC:{numeric:{}},gl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},gl_ES:{numeric:{}},gu:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},gu_IN:{numeric:{}},he:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},he_IL:{numeric:{}},hi:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},hi_IN:{numeric:{}},hr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},hr_HR:{numeric:{}},hu:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},hu_HU:{numeric:{}},hy:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},hy_AM:{numeric:{}},id:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},id_ID:{numeric:{}},is:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},is_IS:{numeric:{}},it:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},it_CH:{numeric:{displayThousandsSeparator:"'",displayDecimalSeparator:"."}},it_IT:{numeric:{}},ja:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ja_JP:{numeric:{}},ka:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ka_GE:{numeric:{}},kk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},kk_KZ:{numeric:{}},kn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},kn_IN:{numeric:{}},ko:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ko_KR:{numeric:{}},kok:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},kok_IN:{numeric:{}},lt:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},lt_LT:{numeric:{}},lv:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},lv_LV:{numeric:{}},mk:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},mk_MK:{numeric:{}},ml:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ml_IN:{numeric:{}},mn:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mn_MN:{numeric:{}},mr:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mr_IN:{numeric:{}},ms:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ms_BN:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ms_MY:{numeric:{}},mt:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},mt_MT:{numeric:{}},nb:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},nb_NO:{numeric:{}},nl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},nl_BE:{numeric:{}},nl_NL:{numeric:{}},nn:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},nn_NO:{numeric:{}},pa:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},pa_IN:{numeric:{}},pl:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},pl_PL:{numeric:{}},pt:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},pt_BR:{numeric:{}},pt_PT:{numeric:{displayThousandsSeparator:"Â "}},ro:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},ro_RO:{numeric:{}},ru:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},ru_RU:{numeric:{}},ru_UA:{numeric:{}},se:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},se_NO:{numeric:{}},sk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},sk_SK:{numeric:{}},sl:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sl_SI:{numeric:{}},sq:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sq_AL:{numeric:{}},sr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},sr_BA:{numeric:{}},sr_CS:{numeric:{}},sv:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},sv_FI:{numeric:{}},sv_SE:{numeric:{}},sw:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},sw_KE:{numeric:{}},syr:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},syr_SY:{numeric:{}},ta:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},ta_IN:{numeric:{}},te:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},te_IN:{numeric:{}},th:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},th_TH:{numeric:{}},tn:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},tn_ZA:{numeric:{}},tr:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},tr_TR:{numeric:{}},uk:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},uk_UA:{numeric:{}},uz:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},uz_UZ:{numeric:{}},vi:{numeric:{displayThousandsSeparator:".",displayDecimalSeparator:","}},vi_VN:{numeric:{}},xh:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},xh_ZA:{numeric:{}},zh:{numeric:{displayThousandsSeparator:",",displayDecimalSeparator:"."}},zh_CN:{numeric:{}},zh_HK:{numeric:{}},zh_MO:{numeric:{}},zh_SG:{numeric:{}},zh_TW:{numeric:{}},zu:{numeric:{displayThousandsSeparator:"Â ",displayDecimalSeparator:","}},zu_ZA:{numeric:{}}};a.getParseThousandSeparator=function(b){return","};a.getDisplayThousandSeparator=function(b){var b=b||null;if(b){if(a._resourceExist(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)){return a.getNumericResource(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)}else{return null}}return a._getAppropriateNumericResource(a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_THOUSANDS_SEPARATOR)};a.getParseDecimalSeparator=function(b){return"."};a.getDisplayDecimalSeparator=function(b){var b=b||null;if(b){if(a._resourceExist(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)){return a.getNumericResource(b,a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)}else{return null}}return a._getAppropriateNumericResource(a._KEY_TYPE_NUMERIC,a._KEY_TOKEN_DISPLAY_DECIMAL_SEPARATOR)};a.getParseCurrencySymbol=function(){return"Â¤"};a.getDefaultNumberFormat=function(b){var b=b||null;if(b){if(a._formatExist(b,a._FORMAT_TYPE_NUMBER)){return a._getNumericFormat(b,a._FORMAT_TYPE_NUMBER)}else{return null}}return a._getAppropriateNumericFormat(a._FORMAT_TYPE_NUMBER)};a.getDefaultCurrencyFormat=function(b){var b=b||null;if(b){if(a._formatExist(b,a._FORMAT_TYPE_CURRENCY)){return a._getNumericFormat(b,a._FORMAT_TYPE_CURRENCY)}else{return null}}return a._getAppropriateNumericFormat(a._FORMAT_TYPE_CURRENCY)};a.getActualLocaleForDefaultCurrencyFormat=function(){return a.getActualLocaleForNumerFormat(a._FORMAT_TYPE_CURRENCY)};a.getActualLocaleForDefaultNumberFormat=function(){return a.getActualLocaleForNumerFormat(a._FORMAT_TYPE_NUMBER)};a.getActualLocaleForNumerFormat=function(d){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a._formatExist(e,d)){return e}var c=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a._formatExist(c,d)){return c}var f=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a._formatExist(f,d)){return f}var b=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a._formatExist(b,d)){return b}return"en"};a._getAppropriateNumericFormat=function(b){return a._getNumericFormat(a.getActualLocaleForNumerFormat(b),b)};a._formatExist=function(b,c){return(b&&c&&a._DEFAULT_FORMAT_STRING[b]&&a._DEFAULT_FORMAT_STRING[b][c])};a._getNumericFormat=function(b,c){return a._DEFAULT_FORMAT_STRING[b][c]};a._getAppropriateNumericResource=function(e,b){var f=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a._resourceExist(f,e,b)){return a.getNumericResource(f,e,b)}var d=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a._resourceExist(d,e,b)){return a.getNumericResource(d,e,b)}var g=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a._resourceExist(g,e,b)){return a.getNumericResource(g,e,b)}var c=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a._resourceExist(c,e,b)){return a.getNumericResource(c,e,b)}return a.getNumericResource("en",e,b)};a._resourceExist=function(b,d,c){return(b&&d&&c&&a._RESOURCE_MAP[b]&&a._RESOURCE_MAP[b][d]&&a._RESOURCE_MAP[b][d][c])};a.getNumericResource=function(b,d,c){return a._RESOURCE_MAP[b][d][c]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.GlobalizationDateConstant=function(){this.__className="sap.common.globalization.defaultFormat.GlobalizationDateConstant"};var a=sap.common.globalization.GlobalizationDateConstant;a.FORMAT_TYPE_SHORTDATE="shortDate",a.FORMAT_TYPE_LONGDATE="longDate",a.FORMAT_TYPE_DATE_TIME="dateTime",a.FORMAT_TYPE_TIME="timeFormat",a.KEY_TYPE_DATE="date",a.KEY_TYPE_TIME="time",a.KEY_TOKEN_SHORT_DAY="shortDay",a.KEY_TOKEN_LONG_DAY="longDay",a.KEY_TOKEN_SHORT_MONTH="shortMonth",a.KEY_TOKEN_LONG_MONTH="longMonth",a.KEY_TOKEN_AM_PM="amPm",a.KEY_DATE_SEPARATOR="dateSeparator",a.KEY_TIME_SEPARATOR="timeSeparator",a.KEY_TOKEN_ABBREV_ERA="eraAbbr",a.DEFAULT_FORMAT_STRING={af:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},af_ZA:{},ar:{longDate:"ddddØŒ d MMMMØŒ yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"dd/MM/yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ar_AE:{},ar_BH:{},ar_DZ:{},ar_EG:{},ar_IQ:{},ar_JO:{},ar_KW:{},ar_LB:{},ar_LY:{},ar_MA:{},ar_OM:{},ar_QA:{},ar_SA:{},ar_SY:{},ar_TN:{},ar_YE:{},az:{longDate:"dddd, d, MMMM, yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},az_AZ:{},be:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d.M.yy;@",dateTime:"d.M.yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},be_BY:{},bg:{longDate:"dd MMMM yyyy, dddd;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},bg_BG:{},bn:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d/M/yy;@",dateTime:"d MMM, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},bn_IN:{},bs:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},bs_BA:{},ca:{longDate:'dddd d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ca_ES:{},cs:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yy;@",dateTime:"d.M.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},cs_CZ:{},cy:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},cy_GB:{},da:{longDate:'dddd "den" d. MMMM yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},da_DK:{},de:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},de_AT:{longDate:"dddd, dd. MMMM yyyy;@"},de_CH:{},de_DE:{},de_LI:{},de_LU:{},el:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"dd MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},el_GR:{},en:{longDate:"dddd, MMMM d, yyyy;@",shortDate:"M/d/yy;@",dateTime:"MMM d, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},en_AU:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d/MM/yy;@",dateTime:"dd/MM/yyyy h:mm:ss AM/PM;@"},en_BZ:{dateTime:"dd-MMM-yyyy h:mm:ss AM/PM;@"},en_CA:{shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd h:mm:ss AM/PM;@"},en_GB:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},en_IE:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},en_JM:{},en_NZ:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy h:mm:ss AM/PM;@"},en_PH:{},en_TT:{},en_US:{},en_VI:{},en_ZA:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy/MM/dd;@",dateTime:"dd MMM yyyy h:mm:ss AM/PM;@"},en_ZW:{longDate:"dddd dd MMMM yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"dd MMM, yyyy h:mm:ss AM/PM;@"},es:{longDate:'dddd d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},es_AR:{},es_BO:{},es_CL:{shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_CO:{shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_CR:{},es_DO:{},es_EC:{dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},es_ES:{},es_GT:{shortDate:"d/MM/yy;@",dateTime:"d/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},es_HN:{longDate:'dddd dd "de" MMMM "de" yyyy;@'},es_MX:{},es_NI:{},es_PA:{shortDate:"MM/dd/yy;@",dateTime:"MM/dd/yyyy HH:mm:ss;@"},es_PE:{shortDate:"d/MM/yy;@"},es_PR:{shortDate:"MM/dd/yy;@",dateTime:"MM/dd/yyyy HH:mm:ss;@"},es_PY:{},es_SV:{},es_UY:{},es_VE:{},et:{longDate:"dddd, d, MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},et_EE:{},eu:{longDate:'dddd, yyyy"eko" MMMM"ren" dd"a";@',shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},eu_ES:{},fa:{longDate:"dddd d MMMM yyyy;@",shortDate:"yy/M/d;@",dateTime:"yyyy/M/dØŒ H:mm:ss;@",timeFormat:"H:mm:ss;@"},fa_IR:{},fi:{longDate:"dddd d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy H.mm.ss;@",timeFormat:"H.mm.ss;@"},fi_FI:{},fo:{longDate:"dddd dd MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},fo_FO:{},fr:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},fr_BE:{shortDate:"d/MM/yy;@"},fr_CA:{shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd HH:mm:ss;@"},fr_CH:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yy;@"},fr_FR:{},fr_LU:{},fr_MC:{},gl:{longDate:"dddd dd MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},gl_ES:{},gu:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d-MM-yy;@",dateTime:"d MMM, yyyy hh:mm:ss AM/PM;@",timeFormat:"hh:mm:ss AM/PM;@"},gu_IN:{},he:{longDate:"dddd, d ×‘MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},he_IL:{},hi:{longDate:"dddd, d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"dd-MM-yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},hi_IN:{},hr:{longDate:"dddd, d. MMMM yyyy.;@",shortDate:"dd.MM.yyyy.;@",dateTime:"d.M.yyyy. HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},hr_HR:{},hu:{longDate:"yyyy. MMMM d., dddd;@",shortDate:"yyyy.MM.dd.;@",dateTime:"yyyy.MM.dd. H:mm:ss;@",timeFormat:"H:mm:ss;@"},hu_HU:{},hy:{longDate:"dddd, MMMM d, yyyy;@",shortDate:"MM/dd/yy;@",dateTime:"MMM d, yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},hy_AM:{},id:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},id_ID:{},is:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},is_IS:{},it:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd/MM/yy;@",dateTime:"dd/MMM/yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},it_CH:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d-MMM-yyyy HH.mm.ss;@"},it_IT:{},ja:{longDate:"yyyyå¹´Mæœˆdæ—¥dddd;@",shortDate:"yy/MM/dd;@",dateTime:"yyyy/MM/dd H:mm:ss;@",timeFormat:"H:mm:ss;@"},ja_JP:{},ka:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ka_GE:{},kk:{longDate:'dddd, d MMMM yyyy "Ð¶".;@',shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},kk_KZ:{},kn:{longDate:"dddd d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM yyyy hh:mm:ss AM/PM;@",timeFormat:"hh:mm:ss AM/PM;@"},kn_IN:{},ko:{longDate:"yyyyë…„ Mì›” dì¼ dddd;@",shortDate:"yy. M. d.;@",dateTime:"yyyy. M. d. AM/PM h:mm:ss;@",timeFormat:"AM/PM h:mm:ss;@"},ko_KR:{},kok:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},kok_IN:{},lt:{longDate:'yyyy "m". MMMM d "d".,dddd;@',shortDate:"yyyy-MM-dd;@",dateTime:"yyyy.MM.dd HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},lt_LT:{},lv:{longDate:'dddd, yyyy. "gada" d. MMMM;@',shortDate:"dd.MM.yy;@",dateTime:'yyyy. "gada" d. MMM HH:mm:ss;@',timeFormat:"HH:mm:ss;@"},lv_LV:{},mk:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd.M.yy;@",dateTime:"dd.M.yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mk_MK:{},ml:{longDate:"yyyy, MMMM d, dddd;@",shortDate:"dd/MM/yy;@",dateTime:"yyyy, MMM d h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ml_IN:{},mn:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mn_MN:{},mr:{longDate:"dddd d MMMM yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM yyyy h-mm-ss AM/PM;@",timeFormat:"h-mm-ss AM/PM;@"},mr_IN:{},ms:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ms_BN:{longDate:"dd MMMM yyyy;@",dateTime:"dd/MM/yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ms_MY:{},mt:{longDate:'dddd, d "ta"â€™ MMMM yyyy;@',shortDate:"dd/MM/yyyy;@",dateTime:"dd MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},mt_MT:{},nb:{longDate:"dddd d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d. MMM yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},nb_NO:{},nl:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},nl_BE:{shortDate:"d/MM/yy;@",dateTime:"d-MMM-yyyy HH:mm:ss;@"},nl_NL:{},nn:{longDate:"dddd d. MMMM yyyy;@",shortDate:"dd.MM.yy;@",dateTime:"d. MMM. yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},nn_NO:{},pa:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"dd/MM/yyyy;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},pa_IN:{},pl:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"dd-MM-yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},pl_PL:{},pt:{longDate:'dddd, d "de" MMMM "de" yyyy;@',shortDate:"dd/MM/yy;@",dateTime:"dd/MM/yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},pt_BR:{},pt_PT:{dateTime:'d "de" MMM "de" yyyy HH:mm:ss;@'},ro:{longDate:"dddd, d MMMM yyyy;@",shortDate:"dd.MM.yyyy;@",dateTime:"dd.MM.yyyy, HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},ro_RO:{},ru:{longDate:'dddd, d MMMM yyyy "Ð³".;@',shortDate:"dd.MM.yy;@",dateTime:"dd.MM.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},ru_RU:{},se:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},se_NO:{},sk:{longDate:"dddd, d. MMMM yyyy;@",shortDate:"d.M.yyyy;@",dateTime:"d.M.yyyy H:mm:ss;@",timeFormat:"H:mm:ss;@"},sk_SK:{},sl:{longDate:"dddd, dd. MMMM yyyy;@",shortDate:"d. MM. yy;@",dateTime:"d. MMM. yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},sl_SI:{},sq:{longDate:"dddd, dd MMMM yyyy;@",shortDate:"yy-MM-dd;@",dateTime:"yyyy-MM-dd h.mm.ss.AM/PM;@",timeFormat:"h.mm.ss.AM/PM;@"},sq_AL:{},sr:{longDate:"dddd, dd. MMMM yyyy.;@",shortDate:"d.M.yy.;@",dateTime:"dd.MM.yyyy. HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},sr_BA:{},sr_CS:{},sv:{longDate:"dddd d MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM yyyy HH.mm.ss;@",timeFormat:"HH.mm.ss;@"},sv_FI:{},sv_SE:{},sw:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},sw_KE:{},syr:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"y MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},syr_SY:{},ta:{longDate:"dddd, d MMMM, yyyy;@",shortDate:"d-M-yy;@",dateTime:"d MMM, yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},ta_IN:{},te:{longDate:"dddd d MMMM yyyy;@",shortDate:"dd-MM-yy;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},te_IN:{},th:{longDate:"ddddà¸—à¸µà¹ˆ d MMMM G yyyy;@",shortDate:"d/M/yyyy;@",dateTime:"d MMM yyyy, H:mm:ss;@",timeFormat:"H:mm:ss;@"},th_TH:{},tn:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},tn_ZA:{},tr:{longDate:"dd MMMM yyyy dddd;@",shortDate:"dd.MM.yyyy;@",dateTime:"dd MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},tr_TR:{},uk:{longDate:'dddd, d MMMM yyyy "Ñ€".;@',shortDate:"dd.MM.yy;@",dateTime:"d MMM yyyy HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},uk_UA:{},uz:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},uz_UZ:{},vi:{longDate:'dddd, "ngÃ y" dd MMMM "nÄƒm" yyyy;@',shortDate:"dd/MM/yyyy;@",dateTime:"HH:mm:ss dd-MM-yyyy;@",timeFormat:"HH:mm:ss;@"},vi_VN:{},xh:{longDate:"dddd, yyyy MMMM dd;@",shortDate:"yyyy-MM-dd;@",dateTime:"yyyy MMM d HH:mm:ss;@",timeFormat:"HH:mm:ss;@"},xh_ZA:{},zh:{longDate:"yyyyå¹´Mæœˆdæ—¥dddd;@",shortDate:"yy-M-d;@",dateTime:"yyyy-M-d AM/PMhh:mm:ss;@",timeFormat:"AM/PMhh:mm:ss;@"},zh_CN:{},zh_HK:{},zh_MO:{},zh_SG:{},zh_TW:{},zu:{longDate:"dddd dd MMMM yyyy;@",shortDate:"yyyy-MM-dd;@",dateTime:"d MMM yyyy h:mm:ss AM/PM;@",timeFormat:"h:mm:ss AM/PM;@"},zu_ZA:{}},a.RESOURCE_MAP={af:{date:{dateSeparator:"-",era:["voor Christus","na Christus"],eraAbbr:["v.C.","n.C."],shortDay:["So","Ma","Di","Wo","Do","Vr","Sa"],shortMonth:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Aug","Sep","Okt","Nov","Des"],longDay:["Sondag","Maandag","Dinsdag","Woensdag","Donderdag","Vrydag","Saterdag"],longMonth:["Januarie","Februarie","Maart","April","Mei","Junie","Julie","Augustus","September","Oktober","November","Desember"]},time:{timeSeparator:":",amPm:["vm.","nm."]}},af_ZA:{date:{},time:{}},ar:{date:{dateSeparator:"/",era:["Ù‚Ø¨Ù„ Ø§Ù„Ù…ÙŠÙ„Ø§Ø¯","Ù…ÙŠÙ„Ø§Ø¯ÙŠ"],eraAbbr:["Ù‚.Ù…","Ù…"],shortDay:["Ø£Ø­Ø¯","Ø¥Ø«Ù†ÙŠÙ†","Ø«Ù„Ø§Ø«Ø§Ø¡","Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø®Ù…ÙŠØ³","Ø¬Ù…Ø¹Ø©","Ø³Ø¨Øª"],shortMonth:["ÙŠÙ†Ø§ÙŠØ±","ÙØ¨Ø±Ø§ÙŠØ±","Ù…Ø§Ø±Ø³","Ø£Ø¨Ø±ÙŠÙ„","Ù…Ø§ÙŠÙˆ","ÙŠÙˆÙ†ÙŠÙˆ","ÙŠÙˆÙ„ÙŠÙˆ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙ…Ø¨Ø±","Ø£ÙƒØªÙˆØ¨Ø±","Ù†ÙˆÙÙ…Ø¨Ø±","Ø¯ÙŠØ³Ù…Ø¨Ø±"],longDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø¥Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"],longMonth:["ÙŠÙ†Ø§ÙŠØ±","ÙØ¨Ø±Ø§ÙŠØ±","Ù…Ø§Ø±Ø³","Ø£Ø¨Ø±ÙŠÙ„","Ù…Ø§ÙŠÙˆ","ÙŠÙˆÙ†ÙŠÙˆ","ÙŠÙˆÙ„ÙŠÙˆ","Ø£ØºØ³Ø·Ø³","Ø³Ø¨ØªÙ…Ø¨Ø±","Ø£ÙƒØªÙˆØ¨Ø±","Ù†ÙˆÙÙ…Ø¨Ø±","Ø¯ÙŠØ³Ù…Ø¨Ø±"]},time:{timeSeparator:":",amPm:["Øµ","Ù…"]}},ar_AE:{date:{},time:{}},ar_BH:{date:{},time:{}},ar_DZ:{date:{},time:{}},ar_EG:{date:{},time:{}},ar_IQ:{date:{},time:{}},ar_JO:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"],shortMonth:["ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","Ù†ÙŠØ³Ø§Ù†","Ø£ÙŠØ§Ø±","Ø­Ø²ÙŠØ±Ø§Ù†","ØªÙ…ÙˆØ²","Ø¢Ø¨","Ø£ÙŠÙ„ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø£ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø£ÙˆÙ„"],longMonth:["ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","Ù†ÙŠØ³Ø§Ù†","Ø£ÙŠØ§Ø±","Ø­Ø²ÙŠØ±Ø§Ù†","ØªÙ…ÙˆØ²","Ø¢Ø¨","Ø£ÙŠÙ„ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø£ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø£ÙˆÙ„"]},time:{}},ar_KW:{date:{},time:{}},ar_LB:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"],shortMonth:["ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","Ù†ÙŠØ³Ø§Ù†","Ù†ÙˆØ§Ø±","Ø­Ø²ÙŠØ±Ø§Ù†","ØªÙ…ÙˆØ²","Ø¢Ø¨","Ø£ÙŠÙ„ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø£ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø£ÙˆÙ„"],longMonth:["ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","Ù†ÙŠØ³Ø§Ù†","Ù†ÙˆØ§Ø±","Ø­Ø²ÙŠØ±Ø§Ù†","ØªÙ…ÙˆØ²","Ø¢Ø¨","Ø£ÙŠÙ„ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø£ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø£ÙˆÙ„"]},time:{}},ar_LY:{date:{},time:{}},ar_MA:{date:{},time:{}},ar_OM:{date:{},time:{}},ar_QA:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"]},time:{}},ar_SA:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"]},time:{}},ar_SY:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"],shortMonth:["ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","Ù†ÙŠØ³Ø§Ù†","Ù†ÙˆØ§Ø±","Ø­Ø²ÙŠØ±Ø§Ù†","ØªÙ…ÙˆØ²","Ø¢Ø¨","Ø£ÙŠÙ„ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø£ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø£ÙˆÙ„"],longMonth:["ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","Ø´Ø¨Ø§Ø·","Ø¢Ø°Ø§Ø±","Ù†ÙŠØ³Ø§Ù†","Ù†ÙˆØ§Ø±","Ø­Ø²ÙŠØ±Ø§Ù†","ØªÙ…ÙˆØ²","Ø¢Ø¨","Ø£ÙŠÙ„ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø£ÙˆÙ„","ØªØ´Ø±ÙŠÙ† Ø§Ù„Ø«Ø§Ù†ÙŠ","ÙƒØ§Ù†ÙˆÙ† Ø§Ù„Ø£ÙˆÙ„"]},time:{}},ar_TN:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"]},time:{}},ar_YE:{date:{shortDay:["Ø§Ù„Ø£Ø­Ø¯","Ø§Ù„Ø§Ø«Ù†ÙŠÙ†","Ø§Ù„Ø«Ù„Ø§Ø«Ø§Ø¡","Ø§Ù„Ø£Ø±Ø¨Ø¹Ø§Ø¡","Ø§Ù„Ø®Ù…ÙŠØ³","Ø§Ù„Ø¬Ù…Ø¹Ø©","Ø§Ù„Ø³Ø¨Øª"]},time:{}},az:{date:{dateSeparator:"-",era:["eramÄ±zdan É™vvÉ™l","bizim eramÄ±zÄ±n"],eraAbbr:["e.É™.","b.e."],shortDay:["B.","B.E.","Ã‡.A.","Ã‡.","C.A.","C","Åž."],shortMonth:["yan","fev","mar","apr","may","iyn","iyl","avq","sen","okt","noy","dek"],longDay:["bazar","bazar ertÉ™si","Ã§É™rÅŸÉ™nbÉ™ axÅŸamÄ±","Ã§É™rÅŸÉ™nbÉ™","cÃ¼mÉ™ axÅŸamÄ±","cÃ¼mÉ™","ÅŸÉ™nbÉ™"],longMonth:["Yanvar","Fevral","Mart","Aprel","May","Ä°yun","Ä°yul","Avqust","Sentyabr","Oktyabr","Noyabr","Dekabr"]},time:{timeSeparator:":",amPm:["AM","PM"]}},az_AZ:{date:{},time:{}},be:{date:{dateSeparator:".",era:["Ð´Ð° Ð½.Ñ.","Ð½.Ñ."],eraAbbr:["Ð´Ð° Ð½.Ðµ.","Ð½.Ðµ."],eraNarrow:["Ð´Ð° Ð½.Ñ.","Ð½.Ñ."],shortDay:["Ð½Ð´","Ð¿Ð½","Ð°Ñž","ÑÑ€","Ñ‡Ñ†","Ð¿Ñ‚","ÑÐ±"],shortMonth:["ÑÑ‚Ñƒ","Ð»ÑŽÑ‚","ÑÐ°Ðº","ÐºÑ€Ð°","Ð¼Ð°Ð¹","Ñ‡ÑÑ€","Ð»Ñ–Ð¿","Ð¶Ð½Ñ–","Ð²ÐµÑ€","ÐºÐ°Ñ","Ð»Ñ–Ñ","ÑÐ½Ðµ"],longDay:["Ð½ÑÐ´Ð·ÐµÐ»Ñ","Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº","Ð°ÑžÑ‚Ð¾Ñ€Ð°Ðº","ÑÐµÑ€Ð°Ð´Ð°","Ñ‡Ð°Ñ†Ð²ÐµÑ€","Ð¿ÑÑ‚Ð½Ñ–Ñ†Ð°","ÑÑƒÐ±Ð¾Ñ‚Ð°"],longMonth:["ÑÑ‚ÑƒÐ´Ð·ÐµÐ½ÑŒ","Ð»ÑŽÑ‚Ñ‹","ÑÐ°ÐºÐ°Ð²Ñ–Ðº","ÐºÑ€Ð°ÑÐ°Ð²Ñ–Ðº","Ð¼Ð°Ð¹","Ñ‡ÑÑ€Ð²ÐµÐ½ÑŒ","Ð»Ñ–Ð¿ÐµÐ½ÑŒ","Ð¶Ð½Ñ–Ð²ÐµÐ½ÑŒ","Ð²ÐµÑ€Ð°ÑÐµÐ½ÑŒ","ÐºÐ°ÑÑ‚Ñ€Ñ‹Ñ‡Ð½Ñ–Ðº","Ð»Ñ–ÑÑ‚Ð°Ð¿Ð°Ð´","ÑÐ½ÐµÐ¶Ð°Ð½ÑŒ"]},time:{timeSeparator:".",amPm:["Ð´Ð° Ð¿Ð°Ð»ÑƒÐ´Ð½Ñ","Ð¿Ð°ÑÐ»Ñ Ð¿Ð°Ð»ÑƒÐ´Ð½Ñ"]}},be_BY:{date:{},time:{}},bg:{date:{dateSeparator:".",era:["Ð¿Ñ€.Ð¥Ñ€.","ÑÐ».Ð¥Ñ€."],eraAbbr:["Ð¿Ñ€. Ð½. Ðµ.","Ð¾Ñ‚ Ð½. Ðµ."],eraNarrow:["ÑÐ».Ð½.Ðµ."],shortDay:["Ð½Ð´","Ð¿Ð½","Ð²Ñ‚","ÑÑ€","Ñ‡Ñ‚","Ð¿Ñ‚","ÑÐ±"],shortMonth:["ÑÐ½.","Ñ„ÐµÐ²Ñ€.","Ð¼Ð°Ñ€Ñ‚","Ð°Ð¿Ñ€.","Ð¼Ð°Ð¹","ÑŽÐ½Ð¸","ÑŽÐ»Ð¸","Ð°Ð²Ð³.","ÑÐµÐ¿Ñ‚.","Ð¾ÐºÑ‚.","Ð½Ð¾ÐµÐ¼.","Ð´ÐµÐº."],longDay:["Ð½ÐµÐ´ÐµÐ»Ñ","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","Ð²Ñ‚Ð¾Ñ€Ð½Ð¸Ðº","ÑÑ€ÑÐ´Ð°","Ñ‡ÐµÑ‚Ð²ÑŠÑ€Ñ‚ÑŠÐº","Ð¿ÐµÑ‚ÑŠÐº","ÑÑŠÐ±Ð¾Ñ‚Ð°"],longMonth:["ÑÐ½ÑƒÐ°Ñ€Ð¸","Ñ„ÐµÐ²Ñ€ÑƒÐ°Ñ€Ð¸","Ð¼Ð°Ñ€Ñ‚","Ð°Ð¿Ñ€Ð¸Ð»","Ð¼Ð°Ð¹","ÑŽÐ½Ð¸","ÑŽÐ»Ð¸","Ð°Ð²Ð³ÑƒÑÑ‚","ÑÐµÐ¿Ñ‚ÐµÐ¼Ð²Ñ€Ð¸","Ð¾ÐºÑ‚Ð¾Ð¼Ð²Ñ€Ð¸","Ð½Ð¾ÐµÐ¼Ð²Ñ€Ð¸","Ð´ÐµÐºÐµÐ¼Ð²Ñ€Ð¸"]},time:{timeSeparator:":",amPm:["Ð¿Ñ€. Ð¾Ð±.","ÑÐ». Ð¾Ð±."]}},bg_BG:{date:{},time:{}},bn:{date:{dateSeparator:"/",eraAbbr:["à¦–à§ƒà¦·à§à¦Ÿà¦ªà§‚à¦°à§à¦¬","à¦–à§ƒà¦·à§à¦Ÿà¦¾à¦¬à§à¦¦"],shortDay:["à¦°à¦¬à¦¿","à¦¸à§‹à¦®","à¦®à¦™à§à¦—à¦²","à¦¬à§à¦§","à¦¬à§ƒà¦¹à¦¸à§à¦ªà¦¤à¦¿","à¦¶à§à¦•à§à¦°","à¦¶à¦¨à¦¿"],shortMonth:["à¦œà¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§€","à¦«à§‡à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§€","à¦®à¦¾à¦°à§à¦š","à¦à¦ªà§à¦°à¦¿à¦²","à¦®à§‡","à¦œà§à¦¨","à¦œà§à¦²à¦¾à¦‡","à¦†à¦—à¦¸à§à¦Ÿ","à¦¸à§‡à¦ªà§à¦Ÿà§‡à¦®à§à¦¬à¦°","à¦…à¦•à§à¦Ÿà§‹à¦¬à¦°","à¦¨à¦­à§‡à¦®à§à¦¬à¦°","à¦¡à¦¿à¦¸à§‡à¦®à§à¦¬à¦°"],longDay:["à¦°à¦¬à¦¿à¦¬à¦¾à¦°","à¦¸à§‹à¦®à¦¬à¦¾à¦°","à¦®à¦™à§à¦—à¦²à¦¬à¦¾à¦°","à¦¬à§à¦§à¦¬à¦¾à¦°","à¦¬à§ƒà¦¹à¦·à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°","à¦¶à§à¦•à§à¦°à¦¬à¦¾à¦°","à¦¶à¦¨à¦¿à¦¬à¦¾à¦°"],longMonth:["à¦œà¦¾à¦¨à§à¦¯à¦¼à¦¾à¦°à§€","à¦«à§‡à¦¬à§à¦°à§à¦¯à¦¼à¦¾à¦°à§€","à¦®à¦¾à¦°à§à¦š","à¦à¦ªà§à¦°à¦¿à¦²","à¦®à§‡","à¦œà§à¦¨","à¦œà§à¦²à¦¾à¦‡","à¦†à¦—à¦¸à§à¦Ÿ","à¦¸à§‡à¦ªà§à¦Ÿà§‡à¦®à§à¦¬à¦°","à¦…à¦•à§à¦Ÿà§‹à¦¬à¦°","à¦¨à¦­à§‡à¦®à§à¦¬à¦°","à¦¡à¦¿à¦¸à§‡à¦®à§à¦¬à¦°"]},time:{timeSeparator:":",amPm:["à¦ªà§‚à¦°à§à¦¬à¦¾à¦¹à§à¦£","à¦…à¦ªà¦°à¦¾à¦¹à§à¦£"]}},bn_IN:{date:{},time:{}},bs:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["7","1","2","3","4","5","6"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["7","1","2","3","4","5","6"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},bs_BA:{date:{},time:{}},ca:{date:{dateSeparator:"/",eraAbbr:["aC","dC"],shortDay:["dg.","dl.","dt.","dc.","dj.","dv.","ds."],shortMonth:["gen.","febr.","marÃ§","abr.","maig","juny","jul.","ag.","set.","oct.","nov.","des."],longDay:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],longMonth:["gener","febrer","marÃ§","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"]},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},ca_ES:{date:{},time:{}},cs:{date:{dateSeparator:".",eraAbbr:["pÅ™.Kr.","po Kr."],shortDay:["ne","po","Ãºt","st","Ät","pÃ¡","so"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12",],longDay:["nedÄ›le","pondÄ›lÃ­","ÃºterÃ½","stÅ™eda","Ätvrtek","pÃ¡tek","sobota"],longMonth:["ledna","Ãºnora","bÅ™ezna","dubna","kvÄ›tna","Äervna","Äervence","srpna","zÃ¡Å™Ã­","Å™Ã­jna","listopadu","prosince"]},time:{timeSeparator:":",amPm:["dop.","odp."]}},cs_CZ:{date:{},time:{}},cy:{date:{dateSeparator:"-",era:["Cyn Crist","Oed Crist"],eraAbbr:["CC","OC"],eraNarrow:["C","O"],shortDay:["Sul","Llun","Maw","Mer","Iau","Gwen","Sad"],shortMonth:["Ion","Chwef","Mawrth","Ebrill","Mai","Meh","Gorff","Awst","Medi","Hyd","Tach","Rhag"],longDay:["Dydd Sul","Dydd Llun","Dydd Mawrth","Dydd Mercher","Dydd Iau","Dydd Gwener","Dydd Sadwrn"],longMonth:["Ionawr","Chwefror","Mawrth","Ebrill","Mai","Mehefin","Gorffenaf","Awst","Medi","Hydref","Tachwedd","Rhagfyr"]},time:{timeSeparator:":",amPm:["AM","PM"]}},cy_GB:{date:{},time:{}},da:{date:{dateSeparator:"/",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸n","man","tir","ons","tor","fre","lÃ¸r"],shortMonth:["jan.","feb.","mar.","apr.","maj","jun.","jul.","aug.","sep.","okt.","nov.","dec."],longDay:["sÃ¸ndag","mandag","tirsdag","onsdag","torsdag","fredag","lÃ¸rdag"],longMonth:["januar","februar","marts","april","maj","juni","juli","august","september","oktober","november","december"]},time:{timeSeparator:".",amPm:["f.m.","e.m."]}},da_DK:{date:{},time:{}},de:{date:{dateSeparator:".",era:["v. Chr.","n. Chr."],eraAbbr:["v. Chr.","n. Chr."],shortDay:["So.","Mo.","Di.","Mi.","Do.","Fr.","Sa."],shortMonth:["Jan","Feb","MÃ¤r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],longDay:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],longMonth:["Januar","Februar","MÃ¤rz","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"]},time:{timeSeparator:":",amPm:["vorm.","nachm."]}},de_AT:{date:{shortMonth:["JÃ¤n","Feb","MÃ¤r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],longMonth:["JÃ¤nner","Februar","MÃ¤rz","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"]},time:{}},de_CH:{date:{},time:{}},de_DE:{date:{},time:{}},de_LI:{date:{},time:{}},de_LU:{date:{},time:{}},el:{date:{dateSeparator:"/",era:["Ï€.Î§.","Î¼.Î§."],eraAbbr:["Ï€.Î§.","Î¼.Î§."],shortDay:["ÎšÏ…Ï","Î”ÎµÏ…","Î¤ÏÎ¹","Î¤ÎµÏ„","Î ÎµÎ¼","Î Î±Ï","Î£Î±Î²"],shortMonth:["Î™Î±Î½","Î¦ÎµÎ²","ÎœÎ±Ï","Î‘Ï€Ï","ÎœÎ±ÏŠ","Î™Î¿Ï…Î½","Î™Î¿Ï…Î»","Î‘Ï…Î³","Î£ÎµÏ€","ÎŸÎºÏ„","ÎÎ¿Îµ","Î”ÎµÎº"],longDay:["ÎšÏ…ÏÎ¹Î±ÎºÎ®","Î”ÎµÏ…Ï„Î­ÏÎ±","Î¤ÏÎ¯Ï„Î·","Î¤ÎµÏ„Î¬ÏÏ„Î·","Î Î­Î¼Ï€Ï„Î·","Î Î±ÏÎ±ÏƒÎºÎµÏ…Î®","Î£Î¬Î²Î²Î±Ï„Î¿"],longMonth:["Î™Î±Î½Î¿Ï…Î±ÏÎ¯Î¿Ï…","Î¦ÎµÎ²ÏÎ¿Ï…Î±ÏÎ¯Î¿Ï…","ÎœÎ±ÏÏ„Î¯Î¿Ï…","Î‘Ï€ÏÎ¹Î»Î¯Î¿Ï…","ÎœÎ±ÎÎ¿Ï…","Î™Î¿Ï…Î½Î¯Î¿Ï…","Î™Î¿Ï…Î»Î¯Î¿Ï…","Î‘Ï…Î³Î¿ÏÏƒÏ„Î¿Ï…","Î£ÎµÏ€Ï„ÎµÎ¼Î²ÏÎ¯Î¿Ï…","ÎŸÎºÏ„Ï‰Î²ÏÎ¯Î¿Ï…","ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï…","Î”ÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï…"]},time:{timeSeparator:":",amPm:["Ï€.Î¼.","Î¼.Î¼."]}},el_GR:{date:{},time:{}},en:{date:{dateSeparator:"/",era:["Before Christ","Anno Domini"],eraAbbr:["BC","AD"],eraNarrow:["B","A"],shortDay:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortMonth:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longDay:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],longMonth:["January","February","March","April","May","June","July","August","September","October","November","December"]},time:{timeSeparator:":",amPm:["AM","PM"]}},en_AU:{date:{dateSeparator:"/"},time:{}},en_BZ:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},en_CA:{date:{dateSeparator:"-"},time:{}},en_GB:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},en_IE:{date:{dateSeparator:"/"},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},en_JM:{date:{},time:{}},en_NZ:{date:{dateSeparator:"/"},time:{}},en_PH:{date:{},time:{}},en_TT:{date:{},time:{}},en_US:{date:{},time:{}},en_VI:{date:{},time:{}},en_ZA:{date:{dateSeparator:"/"},time:{}},en_ZW:{date:{dateSeparator:"/"},time:{}},es:{date:{dateSeparator:"/",era:["antes de Cristo","anno DÃ³mini"],eraAbbr:["a.C.","d.C."],shortDay:["dom","lun","mar","miÃ©","jue","vie","sÃ¡b"],shortMonth:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],longDay:["domingo","lunes","martes","miÃ©rcoles","jueves","viernes","sÃ¡bado"],longMonth:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"]},time:{timeSeparator:":",amPm:["a.m.","p.m."]}},es_AR:{date:{},time:{amPm:["a.m.","p.m."]}},es_BO:{date:{},time:{}},es_CL:{date:{dateSeparator:"-"},time:{timeSeparator:":"}},es_CO:{date:{dateSeparator:"/"},time:{timeSeparator:":"}},es_CR:{date:{},time:{}},es_DO:{date:{},time:{}},es_EC:{date:{},time:{timeSeparator:":"}},es_ES:{date:{},time:{}},es_GT:{date:{dateSeparator:"/"},time:{}},es_HN:{date:{},time:{}},es_MX:{date:{},time:{}},es_NI:{date:{},time:{}},es_PA:{date:{dateSeparator:"/"},time:{}},es_PE:{date:{dateSeparator:"/"},time:{}},es_PR:{date:{dateSeparator:"/"},time:{}},es_PY:{date:{},time:{}},es_SV:{date:{},time:{}},es_UY:{date:{},time:{}},es_VE:{date:{},time:{}},et:{date:{dateSeparator:".",era:["enne meie aega","meie aja jÃ¤rgi"],eraAbbr:["e.m.a.","m.a.j."],shortDay:["P","E","T","K","N","R","L"],shortMonth:["jaan","veebr","mÃ¤rts","apr","mai","juuni","juuli","aug","sept","okt","nov","dets"],longDay:["pÃ¼hapÃ¤ev","esmaspÃ¤ev","teisipÃ¤ev","kolmapÃ¤ev","neljapÃ¤ev","reede","laupÃ¤ev"],longMonth:["jaanuar","veebruar","mÃ¤rts","aprill","mai","juuni","juuli","august","september","oktoober","november","detsember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},et_EE:{date:{},time:{}},eu:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["ig","al","as","az","og","or","lr"],shortMonth:["urt","ots","mar","api","mai","eka","uzt","abu","ira","urr","aza","abe"],longDay:["igandea","astelehena","asteartea","asteazkena","osteguna","ostirala","larunbata"],longMonth:["urtarrila","otsaila","martxoa","apirila","maiatza","ekaina","uztaila","abuztua","iraila","urria","azaroa","abendua"]},time:{timeSeparator:":",amPm:["AM","PM"]}},eu_ES:{date:{},time:{}},fa:{date:{dateSeparator:"/",era:["Ù‚Ø¨Ù„ Ø§Ø² Ù…ÛŒÙ„Ø§Ø¯","Ù…ÛŒÙ„Ø§Ø¯ÛŒ"],eraAbbr:["Ù‚.Ù….","Ù…."],eraNarrow:["Ù‚","Ù…"],shortDay:["ÛŒÚ©Ø´Ù†Ø¨Ù‡","Ø¯ÙˆØ´Ù†Ø¨Ù‡","Ø³Ù‡Ø´Ù†Ø¨Ù‡","Ú†Ù‡Ø§Ø±Ø´Ù†Ø¨Ù‡","Ù¾Ù†Ø¬Ø´Ù†Ø¨Ù‡","Ø¬Ù…Ø¹Ù‡","Ø´Ù†Ø¨Ù‡"],shortMonth:["Ú˜Ø§Ù†ÙˆÛŒÙ‡Ù”","ÙÙˆØ±ÛŒÙ‡Ù”","Ù…Ø§Ø±Ø³","Ø¢ÙˆØ±ÛŒÙ„","Ù…Ù‡Ù”","Ú˜ÙˆØ¦Ù†","Ú˜ÙˆØ¦ÛŒÙ‡Ù”","Ø§ÙˆØª","Ø³Ù¾ØªØ§Ù…Ø¨Ø±","Ø§Ú©ØªØ¨Ø±","Ù†ÙˆØ§Ù…Ø¨Ø±","Ø¯Ø³Ø§Ù…Ø¨Ø±"],longDay:["ÛŒÚ©Ø´Ù†Ø¨Ù‡","Ø¯ÙˆØ´Ù†Ø¨Ù‡","Ø³Ù‡Ø´Ù†Ø¨Ù‡","Ú†Ù‡Ø§Ø±Ø´Ù†Ø¨Ù‡","Ù¾Ù†Ø¬Ø´Ù†Ø¨Ù‡","Ø¬Ù…Ø¹Ù‡","Ø´Ù†Ø¨Ù‡"],longMonth:["Ú˜Ø§Ù†ÙˆÛŒÙ‡Ù”","ÙÙˆØ±ÛŒÙ‡Ù”","Ù…Ø§Ø±Ø³","Ø¢ÙˆØ±ÛŒÙ„","Ù…Ù‡Ù”","Ú˜ÙˆØ¦Ù†","Ú˜ÙˆØ¦ÛŒÙ‡Ù”","Ø§ÙˆØª","Ø³Ù¾ØªØ§Ù…Ø¨Ø±","Ø§Ú©ØªØ¨Ø±","Ù†ÙˆØ§Ù…Ø¨Ø±","Ø¯Ø³Ø§Ù…Ø¨Ø±"]},time:{timeSeparator:":",amPm:["Ù‚Ø¨Ù„ Ø§Ø² Ø¸Ù‡Ø±","Ø¨Ø¹Ø¯ Ø§Ø² Ø¸Ù‡Ø±"]}},fa_IR:{date:{},time:{}},fi:{date:{dateSeparator:".",era:["ennen Kristuksen syntymÃ¤Ã¤","jÃ¤lkeen Kristuksen syntymÃ¤n"],eraAbbr:["eKr.","jKr."],shortDay:["su","ma","ti","ke","to","pe","la"],shortMonth:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesÃ¤kuuta","heinÃ¤kuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"],longDay:["sunnuntaina","maanantaina","tiistaina","keskiviikkona","torstaina","perjantaina","lauantaina"],longMonth:["tammikuuta","helmikuuta","maaliskuuta","huhtikuuta","toukokuuta","kesÃ¤kuuta","heinÃ¤kuuta","elokuuta","syyskuuta","lokakuuta","marraskuuta","joulukuuta"]},time:{timeSeparator:".",amPm:["ap.","ip."]}},fi_FI:{date:{},time:{}},fo:{date:{dateSeparator:"-",era:["fyrir Krist","eftir Krist"],eraAbbr:["BCE","CE"],eraNarrow:["f.Kr.","e.Kr."],shortDay:["sun","mÃ¡n","tÃ½s","mik","hÃ³s","frÃ­","ley"],shortMonth:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],longDay:["sunnudagur","mÃ¡nadagur","tÃ½sdagur","mikudagur","hÃ³sdagur","frÃ­ggjadagur","leygardagur"],longMonth:["januar","februar","mars","aprÃ­l","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},fo_FO:{date:{},time:{}},fr:{date:{dateSeparator:"/",era:["avant JÃ©sus-Christ","aprÃ¨s JÃ©sus-Christ"],eraAbbr:["av. J.-C.","ap. J.-C."],shortDay:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],shortMonth:["janv.","fÃ©vr.","mars","avr.","mai","juin","juil.","aoÃ»t","sept.","oct.","nov.","dÃ©c."],longDay:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],longMonth:["janvier","fÃ©vrier","mars","avril","mai","juin","juillet","aoÃ»t","septembre","octobre","novembre","dÃ©cembre"]},time:{timeSeparator:":",amPm:["AM","PM"]}},fr_BE:{date:{dateSeparator:"/"},time:{}},fr_CA:{date:{dateSeparator:"-"},time:{}},fr_CH:{date:{dateSeparator:"."},time:{}},fr_FR:{date:{},time:{}},fr_LU:{date:{},time:{}},fr_MC:{date:{},time:{}},gl:{date:{dateSeparator:"/",era:["antes de Cristo","despois de Cristo"],eraAbbr:["a.C.","d.C."],shortDay:["Dom","Lun","Mar","MÃ©r","Xov","Ven","SÃ¡b"],shortMonth:["Xan","Feb","Mar","Abr","Mai","XuÃ±","Xul","Ago","Set","Out","Nov","Dec"],longDay:["Domingo","Luns","Martes","MÃ©rcores","Xoves","Venres","SÃ¡bado"],longMonth:["Xaneiro","Febreiro","Marzo","Abril","Maio","XuÃ±o","Xullo","Agosto","Setembro","Outubro","Novembro","Decembro"]},time:{timeSeparator:":",amPm:["AM","PM"]}},gl_ES:{date:{},time:{}},gu:{date:{dateSeparator:"-",era:["àªˆàª¸àªµà«€àª¸àª¨ àªªà«‚àª°à«àªµà«‡","àª‡àª¸àªµà«€àª¸àª¨"],eraAbbr:["BCE","CE"],eraNarrow:["àª‡ àª¸ àªªà«","àª‡àª¸"],shortDay:["àª°àªµàª¿","àª¸à«‹àª®","àª®àª‚àª—àª³","àª¬à«àª§","àª—à«àª°à«","àª¶à«àª•à«àª°","àª¶àª¨àª¿"],shortMonth:["àªœàª¾àª¨à«àª¯à«","àª«à«‡àª¬à«àª°à«","àª®àª¾àª°à«àªš","àªàªªà«àª°àª¿àª²","àª®à«‡","àªœà«‚àª¨","àªœà«àª²àª¾àªˆ","àª‘àª—àª¸à«àªŸ","àª¸àªªà«àªŸà«‡","àª‘àª•à«àªŸà«‹","àª¨àªµà«‡","àª¡àª¿àª¸à«‡"],longDay:["àª°àªµàª¿àªµàª¾àª°","àª¸à«‹àª®àªµàª¾àª°","àª®àª‚àª—àª³àªµàª¾àª°","àª¬à«àª§àªµàª¾àª°","àª—à«àª°à«àªµàª¾àª°","àª¶à«àª•à«àª°àªµàª¾àª°","àª¶àª¨àª¿àªµàª¾àª°"],longMonth:["àªœàª¾àª¨à«àª¯à«àª†àª°à«€","àª«à«‡àª¬à«àª°à«àª†àª°à«€","àª®àª¾àª°à«àªš","àªàªªà«àª°àª¿àª²","àª®à«‡","àªœà«‚àª¨","àªœà«àª²àª¾àªˆ","àª‘àª—àª¸à«àªŸ","àª¸àªªà«àªŸà«‡àª®à«àª¬àª°","àª‘àª•à«àªŸà«àª¬àª°","àª¨àªµà«‡àª®à«àª¬àª°","àª¡àª¿àª¸à«‡àª®à«àª¬àª°"]},time:{timeSeparator:":",amPm:["am","pm"]}},gu_IN:{date:{},time:{}},he:{date:{dateSeparator:"/",era:["×œ×¤× ×™ ×”×¡×¤×™×¨×”","×œ×¡×¤×™×¨×”"],eraAbbr:["×œ×¤× ×”×´×¡","×œ×¡×”×´× "],shortDay:["×™×•× ×'","×™×•× ×‘'","×™×•× ×’'","×™×•× ×“'","×™×•× ×”'","×™×•× ×•'","×©×‘×ª"],shortMonth:["×™× ×•","×¤×‘×¨","×ž×¨×¡","××¤×¨","×ž××™","×™×•× ","×™×•×œ","××•×’","×¡×¤×˜","××•×§","× ×•×‘","×“×¦×ž"],longDay:["×™×•× ×¨××©×•×Ÿ","×™×•× ×©× ×™","×™×•× ×©×œ×™×©×™","×™×•× ×¨×‘×™×¢×™","×™×•× ×—×ž×™×©×™","×™×•× ×©×™×©×™","×™×•× ×©×‘×ª"],longMonth:["×™× ×•××¨","×¤×‘×¨×•××¨","×ž×¨×¡","××¤×¨×™×œ","×ž××™","×™×•× ×™","×™×•×œ×™","××•×’×•×¡×˜","×¡×¤×˜×ž×‘×¨","××•×§×˜×•×‘×¨","× ×•×‘×ž×‘×¨","×“×¦×ž×‘×¨"]},time:{timeSeparator:":",amPm:['×œ×¤× ×”"×¦','××—×”"×¦']}},he_IL:{date:{},time:{}},hi:{date:{dateSeparator:"-",eraAbbr:["à¤ˆà¤¸à¤¾à¤ªà¥‚à¤°à¥à¤µ","à¤¸à¤¨"],shortDay:["à¤°à¤µà¤¿","à¤¸à¥‹à¤®","à¤®à¤‚à¤—à¤²","à¤¬à¥à¤§","à¤—à¥à¤°à¥","à¤¶à¥à¤•à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤œà¤¨à¤µà¤°à¥€","à¤«à¤°à¤µà¤°à¥€","à¤®à¤¾à¤°à¥à¤š","à¤…à¤ªà¥à¤°à¥ˆà¤²","à¤®à¤ˆ","à¤œà¥‚à¤¨","à¤œà¥à¤²à¤¾à¤ˆ","à¤…à¤—à¤¸à¥à¤¤","à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","à¤…à¤•à¥à¤¤à¥‚à¤¬à¤°","à¤¨à¤µà¤®à¥à¤¬à¤°","à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"],longDay:["à¤°à¤µà¤¿à¤µà¤¾à¤°","à¤¸à¥‹à¤®à¤µà¤¾à¤°","à¤®à¤‚à¤—à¤²à¤µà¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤—à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤•à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤œà¤¨à¤µà¤°à¥€","à¤«à¤°à¤µà¤°à¥€","à¤®à¤¾à¤°à¥à¤š","à¤…à¤ªà¥à¤°à¥ˆà¤²","à¤®à¤ˆ","à¤œà¥‚à¤¨","à¤œà¥à¤²à¤¾à¤ˆ","à¤…à¤—à¤¸à¥à¤¤","à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°","à¤…à¤•à¥à¤¤à¥‚à¤¬à¤°","à¤¨à¤µà¤®à¥à¤¬à¤°","à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°"]},time:{timeSeparator:":",amPm:["AM","PM"]}},hi_IN:{date:{},time:{}},hr:{date:{dateSeparator:".",era:["Prije Krista","Poslije Krista"],eraAbbr:["pr.n.e.","AD"],shortDay:["ned","pon","uto","sri","Äet","pet","sub"],shortMonth:["01.","02.","03.","04.","05.","06.","07.","08.","09.","10.","11.","12."],longDay:["nedjelja","ponedjeljak","utorak","srijeda","Äetvrtak","petak","subota"],longMonth:["sijeÄnja","veljaÄe","oÅ¾ujka","travnja","svibnja","lipnja","srpnja","kolovoza","rujna","listopada","studenoga","prosinca"]},time:{timeSeparator:":",amPm:["AM","PM"]}},hr_HR:{date:{},time:{}},hu:{date:{dateSeparator:".",era:["idÅ‘szÃ¡mÃ­tÃ¡sunk elÅ‘tt","idÅ‘szÃ¡mÃ­tÃ¡sunk szerint"],eraAbbr:["i. e.","i. sz."],shortDay:["V","H","K","Sze","Cs","P","Szo"],shortMonth:["jan.","febr.","mÃ¡rc.","Ã¡pr.","mÃ¡j.","jÃºn.","jÃºl.","aug.","szept.","okt.","nov.","dec."],longDay:["vasÃ¡rnap","hÃ©tfÅ‘","kedd","szerda","csÃ¼tÃ¶rtÃ¶k","pÃ©ntek","szombat"],longMonth:["januÃ¡r","februÃ¡r","mÃ¡rcius","Ã¡prilis","mÃ¡jus","jÃºnius","jÃºlius","augusztus","szeptember","oktÃ³ber","november","december"]},time:{timeSeparator:":",amPm:["de.","du."]}},hu_HU:{date:{},time:{}},hy:{date:{dateSeparator:"/",eraAbbr:["Õ”â€¤Ô±â€¤","Õ”â€¤Ôµâ€¤"],shortDay:["Ô¿Õ«Ö€","ÔµÖ€Õ¯","ÔµÖ€Ö„","Õ‰Õ¸Ö€","Õ€Õ¶Õ£","ÕˆÖ‚Ö€","Õ‡Õ¡Õ¢"],shortMonth:["Õ…Õ¶Ö€","Õ“Õ¿Ö€","Õ„Ö€Õ¿","Ô±ÕºÖ€","Õ„ÕµÕ½","Õ…Õ¶Õ½","Õ…Õ¬Õ½","Õ•Õ£Õ½","ÕÕ¥Õº","Õ€Õ¸Õ¯","Õ†Õ¸Õµ","Ô´Õ¥Õ¯"],longDay:["Ô¿Õ«Ö€Õ¡Õ¯Õ«","ÔµÖ€Õ¯Õ¸Ö‚Õ·Õ¡Õ¢Õ©Õ«","ÔµÖ€Õ¥Ö„Õ·Õ¡Õ¢Õ©Õ«","Õ‰Õ¸Ö€Õ¥Ö„Õ·Õ¡Õ¢Õ©Õ«","Õ€Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«","ÕˆÖ‚Ö€Õ¢Õ¡Õ©","Õ‡Õ¡Õ¢Õ¡Õ©"],longMonth:["Õ…Õ¸Ö‚Õ¶Õ¸Ö‚Õ¡Ö€","Õ“Õ¥Õ¿Ö€Õ¸Ö‚Õ¡Ö€","Õ„Õ¡Ö€Õ¿","Ô±ÕºÖ€Õ«Õ¬","Õ„Õ¡ÕµÕ«Õ½","Õ…Õ¸Ö‚Õ¶Õ«Õ½","Õ…Õ¸Ö‚Õ¬Õ«Õ½","Õ•Õ£Õ¸Õ½Õ¿Õ¸Õ½","ÕÕ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö€","Õ€Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö€","Õ†Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö€","Ô´Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö€"]},time:{timeSeparator:":",amPm:["Ô±Õ¼â€¤","ÔµÖ€â€¤"]}},hy_AM:{date:{},time:{}},id:{date:{dateSeparator:"/",eraAbbr:["BCE","CE"],shortDay:["Min","Sen","Sel","Rab","Kam","Jum","Sab"],shortMonth:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agu","Sep","Okt","Nov","Des"],longDay:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],longMonth:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","November","Desember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},id_ID:{date:{},time:{}},is:{date:{dateSeparator:".",eraAbbr:["fyrir Krist","eftir Krist",],eraNarrow:["f.k.","e.k."],shortDay:["sun","mÃ¡n","Ã¾ri","miÃ°","fim","fÃ¶s","lau"],shortMonth:["jan","feb","mar","apr","maÃ­","jÃºn","jÃºl","Ã¡gÃº","sep","okt","nÃ³v","des"],longDay:["sunnudagur","mÃ¡nudagur","Ã¾riÃ°judagur","miÃ°vikudagur","fimmtudagur","fÃ¶studagur","laugardagur"],longMonth:["janÃºar","febrÃºar","mars","aprÃ­l","maÃ­","jÃºnÃ­","jÃºlÃ­","Ã¡gÃºst","september","oktÃ³ber","nÃ³vember","desember"]},time:{timeSeparator:":",amPm:["f.h.","e.h."]}},is_IS:{date:{},time:{}},it:{date:{dateSeparator:"/",era:["a.C.","d.C"],eraAbbr:["aC","dC"],shortDay:["dom","lun","mar","mer","gio","ven","sab"],shortMonth:["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic"],longDay:["domenica","lunedÃ¬","martedÃ¬","mercoledÃ¬","giovedÃ¬","venerdÃ¬","sabato"],longMonth:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"]},time:{timeSeparator:".",amPm:["m.","p."]}},it_CH:{date:{dateSeparator:"."},time:{}},it_IT:{date:{},time:{}},ja:{date:{dateSeparator:"/",era:["ç´€å…ƒå‰","è¥¿æš¦"],eraAbbr:["ç´€å…ƒå‰","è¥¿æš¦"],shortDay:["æ—¥","æœˆ","ç«","æ°´","æœ¨","é‡‘","åœŸ"],shortMonth:["1æœˆ","2æœˆ","3æœˆ","4æœˆ","5æœˆ","6æœˆ","7æœˆ","8æœˆ","9æœˆ","10æœˆ","11æœˆ","12æœˆ"],longDay:["æ—¥æ›œæ—¥","æœˆæ›œæ—¥","ç«æ›œæ—¥","æ°´æ›œæ—¥","æœ¨æ›œæ—¥","é‡‘æ›œæ—¥","åœŸæ›œæ—¥"],longMonth:["1æœˆ","2æœˆ","3æœˆ","4æœˆ","5æœˆ","6æœˆ","7æœˆ","8æœˆ","9æœˆ","10æœˆ","11æœˆ","12æœˆ"]},time:{timeSeparator:":",amPm:["åˆå‰","åˆå¾Œ"]}},ja_JP:{date:{},time:{}},ka:{date:{dateSeparator:"-",era:["áƒ©áƒ•áƒ”áƒœáƒ¡ áƒ¬áƒ”áƒšáƒ—áƒáƒ¦áƒ áƒ˜áƒªáƒ®áƒ•áƒáƒ›áƒ“áƒ”","áƒ©áƒ•áƒ”áƒœáƒ˜ áƒ¬áƒ”áƒšáƒ—áƒáƒ¦áƒ áƒ˜áƒªáƒ®áƒ•áƒ˜áƒ—"],eraAbbr:["áƒ©áƒ•áƒ”áƒœáƒ¡ áƒ¬áƒ”áƒšáƒ—áƒáƒ¦áƒ áƒ˜áƒªáƒ®áƒ•áƒáƒ›áƒ“áƒ”","áƒ©áƒ•áƒ”áƒœáƒ˜ áƒ¬áƒ”áƒšáƒ—áƒáƒ¦áƒ áƒ˜áƒªáƒ®áƒ•áƒ˜áƒ—"],eraNarrow:["áƒ©áƒ•áƒ”áƒœáƒ¡ áƒ¬áƒ”áƒšáƒ—áƒáƒ¦áƒ áƒ˜áƒªáƒ®áƒ•áƒáƒ›áƒ“áƒ”","áƒ©áƒ•áƒ”áƒœáƒ˜ áƒ¬áƒ”áƒšáƒ—áƒáƒ¦áƒ áƒ˜áƒªáƒ®áƒ•áƒ˜áƒ—"],shortDay:["áƒ™áƒ•áƒ˜","áƒáƒ áƒ¨","áƒ¡áƒáƒ›","áƒáƒ—áƒ®","áƒ®áƒ£áƒ—","áƒžáƒáƒ ","áƒ¨áƒáƒ‘"],shortMonth:["áƒ˜áƒáƒœ","áƒ—áƒ”áƒ‘","áƒ›áƒáƒ ","áƒáƒžáƒ ","áƒ›áƒáƒ˜","áƒ˜áƒ•áƒœ","áƒ˜áƒ•áƒš","áƒáƒ’áƒ•","áƒ¡áƒ”áƒ¥","áƒáƒ¥áƒ¢","áƒœáƒáƒ”","áƒ“áƒ”áƒ™"],longDay:["áƒ™áƒ•áƒ˜áƒ áƒ","áƒáƒ áƒ¨áƒáƒ‘áƒáƒ—áƒ˜","áƒ¡áƒáƒ›áƒ¨áƒáƒ‘áƒáƒ—áƒ˜","áƒáƒ—áƒ®áƒ¨áƒáƒ‘áƒáƒ—áƒ˜","áƒ®áƒ£áƒ—áƒ¨áƒáƒ‘áƒáƒ—áƒ˜","áƒžáƒáƒ áƒáƒ¡áƒ™áƒ”áƒ•áƒ˜","áƒ¨áƒáƒ‘áƒáƒ—áƒ˜"],longMonth:["áƒ˜áƒáƒœáƒ•áƒáƒ áƒ˜","áƒ—áƒ”áƒ‘áƒ”áƒ áƒ•áƒáƒšáƒ˜","áƒ›áƒáƒ áƒ¢áƒ˜","áƒáƒžáƒ áƒ˜áƒšáƒ˜","áƒ›áƒáƒ˜áƒ¡áƒ˜","áƒ˜áƒ•áƒœáƒ˜áƒ¡áƒ˜","áƒ˜áƒ•áƒšáƒ˜áƒ¡áƒ˜","áƒáƒ’áƒ•áƒ˜áƒ¡áƒ¢áƒ","áƒ¡áƒ”áƒ¥áƒ¢áƒ”áƒ›áƒ‘áƒ”áƒ áƒ˜","áƒáƒ¥áƒ¢áƒáƒ›áƒ‘áƒ”áƒ áƒ˜","áƒœáƒáƒ”áƒ›áƒ‘áƒ”áƒ áƒ˜","áƒ“áƒ”áƒ™áƒ”áƒ›áƒ‘áƒ”áƒ áƒ˜"]},time:{timeSeparator:":",amPm:["áƒ“áƒ˜áƒšáƒ˜áƒ¡","áƒ¡áƒáƒ¦áƒáƒ›áƒáƒ¡"]}},ka_GE:{date:{},time:{}},kk:{date:{dateSeparator:".",eraAbbr:["BCE","CE"],shortDay:["Ð¶Ñ.","Ð´Ñ.","ÑÑ.","ÑÑ€.","Ð±Ñ.","Ð¶Ð¼.","ÑÒ»."],shortMonth:["Ò›Ð°Ò£.","Ð°Ò›Ð¿.","Ð½Ð°Ñƒ.","ÑÓ™Ñƒ.","Ð¼Ð°Ð¼.","Ð¼Ð°Ñƒ.","ÑˆÑ–Ð».","Ñ‚Ð°Ð¼.","Ò›Ñ‹Ñ€.","Ò›Ð°Ð·.","Ò›Ð°Ñ€.","Ð¶ÐµÐ»Ñ‚."],longDay:["Ð¶ÐµÐºÑÐµÐ½Ñ–","Ð´ÑƒÐ¹ÑÐµÐ½Ð±Ñ–","ÑÐµÐ¹ÑÐµÐ½Ð±Ñ–","ÑÓ™Ñ€ÐµÐ½Ð±Ñ–","Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ–","Ð¶Ò±Ð¼Ð°","ÑÐµÐ½Ð±Ñ–"],longMonth:["Ò›Ð°Ò£Ñ‚Ð°Ñ€","Ð°Ò›Ð¿Ð°Ð½","Ð½Ð°ÑƒÑ€Ñ‹Ð·","ÑÓ™ÑƒÑ–Ñ€","Ð¼Ð°Ð¼Ñ‹Ñ€","Ð¼Ð°ÑƒÑÑ‹Ð¼","ÑˆÑ–Ð»Ð´Ðµ","Ñ‚Ð°Ð¼Ñ‹Ð·","Ò›Ñ‹Ñ€ÐºÒ¯Ð¹ÐµÐº","Ò›Ð°Ð·Ð°Ð½","Ò›Ð°Ñ€Ð°ÑˆÐ°","Ð¶ÐµÐ»Ñ‚Ð¾Ò›ÑÐ°Ð½"]},time:{timeSeparator:":",amPm:["AM","PM"]}},kk_KZ:{date:{},time:{}},kn:{date:{dateSeparator:"-",era:["à²ˆà²¸à²ªà³‚à²µà³¯.","à²•à³à²°à²¿à²¸à³à²¤ à²¶à²•"],eraAbbr:["BCE","CE"],shortDay:["à²°.","à²¸à³‹.","à²®à²‚.","à²¬à³.","à²—à³.","à²¶à³.","à²¶à²¨à²¿."],shortMonth:["à²œà²¨à²µà²°à³€","à²«à³†à²¬à³à²°à²µà²°à³€","à²®à²¾à²°à³à²šà³","à²Žà²ªà³à²°à²¿à²²à³","à²®à³†","à²œà³‚à²¨à³","à²œà³à²²à³ˆ","à²†à²—à²¸à³à²Ÿà³","à²¸à²ªà³à²Ÿà³†à²‚à²¬à²°à³","à²…à²•à³à²Ÿà³‹à²¬à²°à³","à²¨à²µà³†à²‚à²¬à²°à³","à²¡à²¿à²¸à³†à²‚à²¬à²°à³"],longDay:["à²°à²µà²¿à²µà²¾à²°","à²¸à³‹à²®à²µà²¾à²°","à²®à²‚à²—à²³à²µà²¾à²°","à²¬à³à²§à²µà²¾à²°","à²—à³à²°à³à²µà²¾à²°","à²¶à³à²•à³à²°à²µà²¾à²°","à²¶à²¨à²¿à²µà²¾à²°"],longMonth:["à²œà²¨à²µà²°à³€","à²«à³†à²¬à³à²°à²µà²°à³€","à²®à²¾à²°à³à²šà³","à²Žà²ªà³à²°à²¿à²²à³","à²®à³†","à²œà³‚à²¨à³","à²œà³à²²à³ˆ","à²†à²—à²¸à³à²Ÿà³","à²¸à²ªà³à²Ÿà³†à²‚à²¬à²°à³","à²…à²•à³à²Ÿà³‹à²¬à²°à³","à²¨à²µà³†à²‚à²¬à²°à³","à²¡à²¿à²¸à³†à²‚à²¬à²°à³"]},time:{timeSeparator:":",amPm:["am","pm"]}},kn_IN:{date:{},time:{}},ko:{date:{dateSeparator:". ",era:["ì„œë ¥ê¸°ì›ì „","ì„œë ¥ê¸°ì›"],eraAbbr:["ê¸°ì›ì „","ì„œê¸°"],shortDay:["ì¼","ì›”","í™”","ìˆ˜","ëª©","ê¸ˆ","í† "],shortMonth:["1ì›”","2ì›”","3ì›”","4ì›”","5ì›”","6ì›”","7ì›”","8ì›”","9ì›”","10ì›”","11ì›”","12ì›”"],longDay:["ì¼ìš”ì¼","ì›”ìš”ì¼","í™”ìš”ì¼","ìˆ˜ìš”ì¼","ëª©ìš”ì¼","ê¸ˆìš”ì¼","í† ìš”ì¼"],longMonth:["1ì›”","2ì›”","3ì›”","4ì›”","5ì›”","6ì›”","7ì›”","8ì›”","9ì›”","10ì›”","11ì›”","12ì›”"]},time:{timeSeparator:":",amPm:["ì˜¤ì „","ì˜¤í›„"]}},ko_KR:{date:{},time:{}},kok:{date:{dateSeparator:"-",eraAbbr:["à¤•à¥à¤°à¤¿à¤¸à¥à¤¤à¤ªà¥‚à¤°à¥à¤µ","à¤•à¥à¤°à¤¿à¤¸à¥à¤¤à¤¶à¤–à¤¾"],shortDay:["à¤°à¤µà¤¿","à¤¸à¥‹à¤®","à¤®à¤‚à¤—à¤³","à¤¬à¥à¤§","à¤—à¥à¤°à¥","à¤¶à¥à¤•à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤œà¤¾à¤¨à¥‡à¤µà¤¾à¤°à¥€","à¤«à¥‡à¤¬à¥ƒà¤µà¤¾à¤°à¥€","à¤®à¤¾à¤°à¥à¤š","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥‡","à¤œà¥‚à¤¨","à¤œà¥à¤²à¥ˆ","à¤“à¤—à¤¸à¥à¤Ÿ","à¤¸à¥‡à¤ªà¥à¤Ÿà¥‡à¤‚à¤¬à¤°","à¤“à¤•à¥à¤Ÿà¥‹à¤¬à¤°","à¤¨à¥‹à¤µà¥à¤¹à¥‡à¤‚à¤¬à¤°","à¤¡à¤¿à¤¸à¥‡à¤‚à¤¬à¤°"],longDay:["à¤†à¤¦à¤¿à¤¤à¥à¤¯à¤µà¤¾à¤°","à¤¸à¥‹à¤®à¤µà¤¾à¤°","à¤®à¤‚à¤—à¤³à¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤—à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤•à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤œà¤¾à¤¨à¥‡à¤µà¤¾à¤°à¥€","à¤«à¥‡à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥€","à¤®à¤¾à¤°à¥à¤š","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥‡","à¤œà¥‚à¤¨","à¤œà¥à¤²à¥ˆ","à¤“à¤—à¤¸à¥à¤Ÿ","à¤¸à¥‡à¤ªà¥à¤Ÿà¥‡à¤‚à¤¬à¤°","à¤“à¤•à¥à¤Ÿà¥‹à¤¬à¤°","à¤¨à¥‹à¤µà¥à¤¹à¥‡à¤‚à¤¬à¤°","à¤¡à¤¿à¤¸à¥‡à¤‚à¤¬à¤°"]},time:{timeSeparator:":",amPm:["à¤®.à¤ªà¥‚.","à¤®.à¤¨à¤‚."]}},kok_IN:{date:{},time:{}},lt:{date:{dateSeparator:"-",era:["prieÅ¡ KristÅ³","po Kristaus"],eraAbbr:["pr. Kr.","po Kr."],shortDay:["Sk","Pr","An","Tr","Kt","Pn","Å t"],shortMonth:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rgp","Rgs","Spl","Lap","Grd"],longDay:["sekmadienis","pirmadienis","antradienis","treÄiadienis","ketvirtadienis","penktadienis","Å¡eÅ¡tadienis"],longMonth:["sausio","vasario","kovo","balandÅ¾io","geguÅ¾Ä—s","birÅ¾elio","liepos","rugpjÅ«Äio","rugsÄ—jo","spalio","lapkriÄio","gruodÅ¾io"]},time:{timeSeparator:":",amPm:["prieÅ¡piet","popiet"]}},lt_LT:{date:{},time:{}},lv:{date:{dateSeparator:".",era:["pirms mÅ«su Ä“ras","mÅ«su Ä“rÄ"],eraAbbr:["p.m.Ä“.","m.Ä“."],eraNarrow:["p.m.Ä“.","m.Ä“."],shortDay:["Sv","Pr","Ot","Tr","Ce","Pk","Se"],shortMonth:["janv.","febr.","marts","apr.","maijs","jÅ«n.","jÅ«l.","aug.","sept.","okt.","nov.","dec."],longDay:["svÄ“tdiena","pirmdiena","otrdiena","treÅ¡diena","ceturtdiena","piektdiena","sestdiena"],longMonth:["janvÄris","februÄris","marts","aprÄ«lis","maijs","jÅ«nijs","jÅ«lijs","augusts","septembris","oktobris","novembris","decembris"]},time:{timeSeparator:":",amPm:["AM","PM"]}},lv_LV:{date:{},time:{}},mk:{date:{dateSeparator:".",eraAbbr:["Ð¿Ñ€.Ð½.Ðµ.","Ð°Ðµ."],shortDay:["Ð½ÐµÐ´.","Ð¿Ð¾Ð½.","Ð²Ñ‚.","ÑÑ€Ðµ.","Ñ‡ÐµÑ‚.","Ð¿ÐµÑ‚.","ÑÐ°Ð±."],shortMonth:["Ñ˜Ð°Ð½.","Ñ„ÐµÐ².","Ð¼Ð°Ñ€.","Ð°Ð¿Ñ€.","Ð¼Ð°Ñ˜","Ñ˜ÑƒÐ½.","Ñ˜ÑƒÐ».","Ð°Ð²Ð³.","ÑÐµÐ¿Ñ‚.","Ð¾ÐºÑ‚.","Ð½Ð¾ÐµÐ¼.","Ð´ÐµÐºÐµÐ¼."],longDay:["Ð½ÐµÐ´ÐµÐ»Ð°","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº","Ð²Ñ‚Ð¾Ñ€Ð½Ð¸Ðº","ÑÑ€ÐµÐ´Ð°","Ñ‡ÐµÑ‚Ð²Ñ€Ñ‚Ð¾Ðº","Ð¿ÐµÑ‚Ð¾Ðº","ÑÐ°Ð±Ð¾Ñ‚Ð°"],longMonth:["Ñ˜Ð°Ð½ÑƒÐ°Ñ€Ð¸","Ñ„ÐµÐ²Ñ€ÑƒÐ°Ñ€Ð¸","Ð¼Ð°Ñ€Ñ‚","Ð°Ð¿Ñ€Ð¸Ð»","Ð¼Ð°Ñ˜","Ñ˜ÑƒÐ½Ð¸","Ñ˜ÑƒÐ»Ð¸","Ð°Ð²Ð³ÑƒÑÑ‚","ÑÐµÐ¿Ñ‚ÐµÐ¼Ð²Ñ€Ð¸","Ð¾ÐºÑ‚Ð¾Ð¼Ð²Ñ€Ð¸","Ð½Ð¾ÐµÐ¼Ð²Ñ€Ð¸","Ð´ÐµÐºÐµÐ¼Ð²Ñ€Ð¸"]},time:{timeSeparator:":",amPm:["Ð¿Ñ€ÐµÑ‚Ð¿Ð»Ð°Ð´Ð½Ðµ","Ð¿Ð¾Ð¿Ð»Ð°Ð´Ð½Ðµ"]}},mk_MK:{date:{},time:{}},ml:{date:{dateSeparator:"/",era:["à´•àµà´°à´¿à´¸àµà´¤àµà´µà´¿à´¨àµàµ à´®àµà´®àµà´ªàµ","à´•àµà´°à´¿à´¸àµà´¤àµà´µà´¿à´¨àµ à´ªà´¿à´¨àµà´ªàµ"],eraAbbr:["à´•àµà´°à´¿.à´®àµ.","à´•àµà´°à´¿.à´ªà´¿."],eraNarrow:["à´•àµà´°à´¿.à´®àµ.","à´•àµà´°à´¿.à´ªà´¿."],shortDay:["à´žà´¾à´¯à´°àµ","à´¤à´¿à´™àµà´•à´³àµ","à´šàµŠà´µàµà´µ","à´¬àµà´§à´¨àµ","à´µàµà´¯à´¾à´´à´‚","à´µàµ†à´³àµà´³à´¿","à´¶à´¨à´¿"],shortMonth:["à´œà´¨àµ","à´«àµ†à´¬àµà´°àµ","à´®à´¾à´°àµ","à´à´ªàµà´°à´¿","à´®àµ‡à´¯àµ","à´œàµ‚à´£àµ","à´œàµ‚à´²àµˆ","à´“à´—","à´¸àµ†à´ªàµà´±àµà´±à´‚","à´’à´•àµà´Ÿàµ‹","à´¨à´µà´‚","à´¡à´¿à´¸à´‚"],longDay:["à´žà´¾à´¯à´±à´¾à´´àµà´š","à´¤à´¿à´™àµà´•à´³à´¾à´´àµà´š","à´šàµŠà´µàµà´µà´¾à´´àµà´š","à´¬àµà´§à´¨à´¾à´´àµà´š","à´µàµà´¯à´¾à´´à´¾à´´àµà´š","à´µàµ†à´³àµà´³à´¿à´¯à´¾à´´àµà´š","à´¶à´¨à´¿à´¯à´¾à´´àµà´š"],longMonth:["à´œà´¨àµà´µà´°à´¿","à´«àµ†à´¬àµà´°àµà´µà´°à´¿","à´®à´¾à´°àµà´šàµà´šàµ","à´à´ªàµà´°à´¿à´²àµ","à´®àµ‡à´¯àµ","à´œàµ‚à´£àµ","à´œàµ‚à´²àµˆ","à´“à´—à´¸àµà´±àµà´±àµ","à´¸àµ†à´ªàµà´±àµà´±à´‚à´¬à´°àµ","à´’à´•àµà´Ÿàµ‹à´¬à´°àµ","à´¨à´µà´‚à´¬à´°àµ","à´¡à´¿à´¸à´‚à´¬à´°àµ"]},time:{timeSeparator:":",amPm:["am","pm"]}},ml_IN:{date:{},time:{}},mn:{date:{dateSeparator:"-",era:["Ð¼Ð°Ð½Ð°Ð¹ ÑÑ€Ð¸Ð½Ð¸Ð¹ Ó©Ð¼Ð½Ó©Ñ…","Ð¼Ð°Ð½Ð°Ð¹ ÑÑ€Ð¸Ð½Ð¸Ð¹"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},mn_MN:{date:{},time:{}},mr:{date:{dateSeparator:"-",era:["à¤ˆà¤¸à¤µà¥€à¤¸à¤¨à¤ªà¥‚à¤°à¥à¤µ","à¤ˆà¤¸à¤µà¥€à¤¸à¤¨"],eraAbbr:["à¤ˆ.à¤¸.à¤ªà¥‚.","à¤ˆ.à¤¸."],shortDay:["à¤°à¤µà¤¿","à¤¸à¥‹à¤®","à¤®à¤‚à¤—à¤³","à¤¬à¥à¤§","à¤—à¥à¤°à¥","à¤¶à¥à¤•à¥à¤°","à¤¶à¤¨à¤¿"],shortMonth:["à¤œà¤¾à¤¨à¥‡à¤µà¤¾à¤°à¥€","à¤«à¥‡à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥€","à¤®à¤¾à¤°à¥à¤š","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥‡","à¤œà¥‚à¤¨","à¤œà¥à¤²à¥ˆ","à¤‘à¤—à¤¸à¥à¤Ÿ","à¤¸à¤ªà¥à¤Ÿà¥‡à¤‚à¤¬à¤°","à¤‘à¤•à¥à¤Ÿà¥‹à¤¬à¤°","à¤¨à¥‹à¤µà¥à¤¹à¥‡à¤‚à¤¬à¤°","à¤¡à¤¿à¤¸à¥‡à¤‚à¤¬à¤°"],longDay:["à¤°à¤µà¤¿à¤µà¤¾à¤°","à¤¸à¥‹à¤®à¤µà¤¾à¤°","à¤®à¤‚à¤—à¤³à¤µà¤¾à¤°","à¤¬à¥à¤§à¤µà¤¾à¤°","à¤—à¥à¤°à¥à¤µà¤¾à¤°","à¤¶à¥à¤•à¥à¤°à¤µà¤¾à¤°","à¤¶à¤¨à¤¿à¤µà¤¾à¤°"],longMonth:["à¤œà¤¾à¤¨à¥‡à¤µà¤¾à¤°à¥€","à¤«à¥‡à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥€","à¤®à¤¾à¤°à¥à¤š","à¤à¤ªà¥à¤°à¤¿à¤²","à¤®à¥‡","à¤œà¥‚à¤¨","à¤œà¥à¤²à¥ˆ","à¤‘à¤—à¤¸à¥à¤Ÿ","à¤¸à¤ªà¥à¤Ÿà¥‡à¤‚à¤¬à¤°","à¤‘à¤•à¥à¤Ÿà¥‹à¤¬à¤°","à¤¨à¥‹à¤µà¥à¤¹à¥‡à¤‚à¤¬à¤°","à¤¡à¤¿à¤¸à¥‡à¤‚à¤¬à¤°"]},time:{timeSeparator:"-",amPm:["am","pm"]}},mr_IN:{date:{},time:{}},ms:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["Ahd","Isn","Sel","Rab","Kha","Jum","Sab"],shortMonth:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ogos","Sep","Okt","Nov","Dis"],longDay:["Ahad","Isnin","Selasa","Rabu","Khamis","Jumaat","Sabtu"],longMonth:["Januari","Februari","Mac","April","Mei","Jun","Julai","Ogos","September","Oktober","November","Disember"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ms_BN:{date:{},time:{timeSeparator:":"}},ms_MY:{date:{},time:{}},mt:{date:{dateSeparator:"/",era:["Qabel Kristu","Wara Kristu"],eraAbbr:["QK","WK"],shortDay:["Ä¦ad","Tne","Tli","Erb","Ä¦am","Ä im","Sib"],shortMonth:["Jan","Fra","Mar","Apr","Mej","Ä un","Lul","Aww","Set","Ott","Nov","DiÄ‹"],longDay:["Il-Ä¦add","It-Tnejn","It-Tlieta","L-ErbgÄ§a","Il-Ä¦amis","Il-Ä imgÄ§a","Is-Sibt"],longMonth:["Jannar","Frar","Marzu","April","Mejju","Ä unju","Lulju","Awwissu","Settembru","Ottubru","Novembru","DiÄ‹embru"]},time:{timeSeparator:":",amPm:["QN","WN"]}},mt_MT:{date:{},time:{}},nb:{date:{dateSeparator:".",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸n.","man.","tir.","ons.","tor.","fre.","lÃ¸r."],shortMonth:["jan.","feb.","mars","apr.","mai","juni","juli","aug.","sep.","okt.","nov.","des."],longDay:["sÃ¸ndag","mandag","tirsdag","onsdag","torsdag","fredag","lÃ¸rdag"],longMonth:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:".",amPm:["AM","PM"]}},nb_NO:{date:{},time:{}},nl:{date:{dateSeparator:"-",era:["Voor Christus","Anno Domini"],eraAbbr:["v. Chr.","n. Chr."],shortDay:["zo","ma","di","wo","do","vr","za"],shortMonth:["jan.","feb.","mrt.","apr.","mei","jun.","jul.","aug.","sep.","okt.","nov.","dec."],longDay:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],longMonth:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"]},time:{timeSeparator:":",amPm:["AM","PM"]}},nl_BE:{date:{dateSeparator:"/"},time:{}},nl_NL:{date:{},time:{}},nn:{date:{dateSeparator:".",era:["f.Kr.","e.Kr."],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¸.","mÃ¥.","ty.","on.","to.","fr.","la."],shortMonth:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],longDay:["sÃ¸ndag","mÃ¥ndag","tysdag","onsdag","torsdag","fredag","laurdag"],longMonth:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"]},time:{timeSeparator:".",amPm:["formiddag","ettermiddag"]}},nn_NO:{date:{},time:{}},pa:{date:{dateSeparator:"/",era:["à¨ˆà¨¸à¨¾à¨ªà©‚à¨°à¨µ","à¨¸à©°à¨¨"],eraAbbr:["BCE","CE"],shortDay:["à¨à¨¤.","à¨¸à©‹à¨®.","à¨®à©°à¨—à¨².","à¨¬à©à¨§.","à¨µà©€à¨°.","à¨¸à¨¼à©à¨•à¨°.","à¨¸à¨¼à¨¨à©€."],shortMonth:["à¨œà¨¨à¨µà¨°à©€","à¨«à¨¼à¨°à¨µà¨°à©€","à¨®à¨¾à¨°à¨š","à¨…à¨ªà©à¨°à©ˆà¨²","à¨®à¨ˆ","à¨œà©‚à¨¨","à¨œà©à¨²à¨¾à¨ˆ","à¨…à¨—à¨¸à¨¤","à¨¸à¨¤à©°à¨¬à¨°","à¨…à¨•à¨¤à©‚à¨¬à¨°","à¨¨à¨µà©°à¨¬à¨°","à¨¦à¨¸à©°à¨¬à¨°"],longDay:["à¨à¨¤à¨µà¨¾à¨°","à¨¸à©‹à¨®à¨µà¨¾à¨°","à¨®à©°à¨—à¨²à¨µà¨¾à¨°","à¨¬à©à¨§à¨µà¨¾à¨°","à¨µà©€à¨°à¨µà¨¾à¨°","à¨¸à¨¼à©à©±à¨•à¨°à¨µà¨¾à¨°","à¨¸à¨¼à¨¨à©€à¨šà¨°à¨µà¨¾à¨°"],longMonth:["à¨œà¨¨à¨µà¨°à©€","à¨«à¨¼à¨°à¨µà¨°à©€","à¨®à¨¾à¨°à¨š","à¨…à¨ªà©à¨°à©ˆà¨²","à¨®à¨ˆ","à¨œà©‚à¨¨","à¨œà©à¨²à¨¾à¨ˆ","à¨…à¨—à¨¸à¨¤","à¨¸à¨¤à©°à¨¬à¨°","à¨…à¨•à¨¤à©‚à¨¬à¨°","à¨¨à¨µà©°à¨¬à¨°","à¨¦à¨¸à©°à¨¬à¨°"]},time:{timeSeparator:":",amPm:["à¨¸à¨µà©‡à¨°à©‡","à¨¸à¨¼à¨¾à¨®"]}},pa_IN:{date:{},time:{}},pl:{date:{dateSeparator:"-",era:["p.n.e.","n.e."],eraAbbr:["p.n.e.","n.e."],shortDay:["niedz.","pon.","wt.","Å›r.","czw.","pt.","sob."],shortMonth:["sty","lut","mar","kwi","maj","cze","lip","sie","wrz","paÅº","lis","gru"],longDay:["niedziela","poniedziaÅ‚ek","wtorek","Å›roda","czwartek","piÄ…tek","sobota"],longMonth:["stycznia","lutego","marca","kwietnia","maja","czerwca","lipca","sierpnia","wrzeÅ›nia","paÅºdziernika","listopada","grudnia"]},time:{timeSeparator:":",amPm:["AM","PM"]}},pl_PL:{date:{},time:{}},pt:{date:{dateSeparator:"/",era:["Antes de Cristo","Ano do Senhor"],eraAbbr:["a.C.","d.C."],shortDay:["dom","seg","ter","qua","qui","sex","sÃ¡b"],shortMonth:["jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"],longDay:["domingo","segunda-feira","terÃ§a-feira","quarta-feira","quinta-feira","sexta-feira","sÃ¡bado"],longMonth:["janeiro","fevereiro","marÃ§o","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"]},time:{timeSeparator:":",amPm:["AM","PM"]}},pt_BR:{date:{},time:{}},pt_PT:{date:{shortMonth:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],longMonth:["Janeiro","Fevereiro","MarÃ§o","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"]},time:{amPm:["Antes do meio-dia","Depois do meio-dia"]}},ro:{date:{dateSeparator:".",era:["Ã®nainte de Hristos","dupÄƒ Hristos"],eraAbbr:["Ã®.Hr.","d.Hr."],shortDay:["Du","Lu","Ma","Mi","Jo","Vi","SÃ¢"],shortMonth:["ian.","feb.","mar.","apr.","mai","iun.","iul.","aug.","sept.","oct.","nov.","dec."],longDay:["duminicÄƒ","luni","marÈ›i","miercuri","joi","vineri","sÃ¢mbÄƒtÄƒ"],longMonth:["ianuarie","februarie","martie","aprilie","mai","iunie","iulie","august","septembrie","octombrie","noiembrie","decembrie"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ro_RO:{date:{},time:{}},ru:{date:{dateSeparator:".",era:["Ð´Ð¾ Ð½.Ñ.","Ð½.Ñ."],eraAbbr:["Ð´Ð¾ Ð½.Ñ.","Ð½.Ñ."],shortDay:["Ð’Ñ","ÐŸÐ½","Ð’Ñ‚","Ð¡Ñ€","Ð§Ñ‚","ÐŸÑ‚","Ð¡Ð±"],shortMonth:["ÑÐ½Ð².","Ñ„ÐµÐ²Ñ€.","Ð¼Ð°Ñ€Ñ‚Ð°","Ð°Ð¿Ñ€.","Ð¼Ð°Ñ","Ð¸ÑŽÐ½Ñ","Ð¸ÑŽÐ»Ñ","Ð°Ð²Ð³.","ÑÐµÐ½Ñ‚.","Ð¾ÐºÑ‚.","Ð½Ð¾ÑÐ±.","Ð´ÐµÐº."],longDay:["Ð²Ð¾ÑÐºÑ€ÐµÑÐµÐ½ÑŒÐµ","Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑŒÐ½Ð¸Ðº","Ð²Ñ‚Ð¾Ñ€Ð½Ð¸Ðº","ÑÑ€ÐµÐ´Ð°","Ñ‡ÐµÑ‚Ð²ÐµÑ€Ð³","Ð¿ÑÑ‚Ð½Ð¸Ñ†Ð°","ÑÑƒÐ±Ð±Ð¾Ñ‚Ð°"],longMonth:["ÑÐ½Ð²Ð°Ñ€Ñ","Ñ„ÐµÐ²Ñ€Ð°Ð»Ñ","Ð¼Ð°Ñ€Ñ‚Ð°","Ð°Ð¿Ñ€ÐµÐ»Ñ","Ð¼Ð°Ñ","Ð¸ÑŽÐ½Ñ","Ð¸ÑŽÐ»Ñ","Ð°Ð²Ð³ÑƒÑÑ‚Ð°","ÑÐµÐ½Ñ‚ÑÐ±Ñ€Ñ","Ð¾ÐºÑ‚ÑÐ±Ñ€Ñ","Ð½Ð¾ÑÐ±Ñ€Ñ","Ð´ÐµÐºÐ°Ð±Ñ€Ñ"]},time:{timeSeparator:":",amPm:["AM","PM"]}},ru_RU:{date:{},time:{}},se:{date:{dateSeparator:"-",era:["ovdal Kristtusa","maÅ‹Å‹el Kristtusa"],eraAbbr:["BCE","CE"],eraNarrow:["o.Kr.","m.Kr."],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},se_NO:{date:{},time:{}},sk:{date:{dateSeparator:".",eraAbbr:["pred n.l.","n.l."],shortDay:["ne","po","ut","st","Å¡t","pi","so"],shortMonth:["jan","feb","mar","apr","mÃ¡j","jÃºn","jÃºl","aug","sep","okt","nov","dec"],longDay:["nedeÄ¾a","pondelok","utorok","streda","Å¡tvrtok","piatok","sobota"],longMonth:["januÃ¡ra","februÃ¡ra","marca","aprÃ­la","mÃ¡ja","jÃºna","jÃºla","augusta","septembra","oktÃ³bra","novembra","decembra"]},time:{timeSeparator:":",amPm:["dopoludnia","popoludnÃ­"]}},sk_SK:{date:{},time:{}},sl:{date:{dateSeparator:". ",era:["pred naÅ¡im Å¡tetjem","naÅ¡e Å¡tetje"],eraAbbr:["pr. n. Å¡t.","po Kr."],shortDay:["ned","pon","tor","sre","Äet","pet","sob"],shortMonth:["jan","feb","mar","apr","maj","jun","jul","avg","sep","okt","nov","dec"],longDay:["nedelja","ponedeljek","torek","sreda","Äetrtek","petek","sobota"],longMonth:["januar","februar","marec","april","maj","junij","julij","avgust","september","oktober","november","december"]},time:{timeSeparator:":",amPm:["dop.","pop."]}},sl_SI:{date:{},time:{}},sq:{date:{dateSeparator:"-",eraAbbr:["p.e.r.","n.e.r."],shortDay:["Die","HÃ«n","Mar","MÃ«r","Enj","Pre","Sht"],shortMonth:["Jan","Shk","Mar","Pri","Maj","Qer","Kor","Gsh","Sht","Tet","NÃ«n","Dhj"],longDay:["e diel","e hÃ«nÃ«","e martÃ«","e mÃ«rkurÃ«","e enjte","e premte","e shtunÃ«"],longMonth:["janar","shkurt","mars","prill","maj","qershor","korrik","gusht","shtator","tetor","nÃ«ntor","dhjetor"]},time:{timeSeparator:".",amPm:["PD","MD"]}},sq_AL:{date:{},time:{}},sr:{date:{dateSeparator:".",era:["ÐŸÑ€Ðµ Ð½Ð¾Ð²Ðµ ÐµÑ€Ðµ","ÐÐ¾Ð²Ðµ ÐµÑ€Ðµ"],eraAbbr:["Ð¿. Ð½. Ðµ.","Ð½. Ðµ"],eraNarrow:["Ð¿.Ð½.Ðµ.","Ð½.Ðµ."],shortDay:["Ð½ÐµÐ´","Ð¿Ð¾Ð½","ÑƒÑ‚Ð¾","ÑÑ€Ðµ","Ñ‡ÐµÑ‚","Ð¿ÐµÑ‚","ÑÑƒÐ±"],shortMonth:["Ñ˜Ð°Ð½","Ñ„ÐµÐ±","Ð¼Ð°Ñ€","Ð°Ð¿Ñ€","Ð¼Ð°Ñ˜","Ñ˜ÑƒÐ½","Ñ˜ÑƒÐ»","Ð°Ð²Ð³","ÑÐµÐ¿","Ð¾ÐºÑ‚","Ð½Ð¾Ð²","Ð´ÐµÑ†"],longDay:["Ð½ÐµÐ´ÐµÑ™Ð°","Ð¿Ð¾Ð½ÐµÐ´ÐµÑ™Ð°Ðº","ÑƒÑ‚Ð¾Ñ€Ð°Ðº","ÑÑ€ÐµÐ´Ð°","Ñ‡ÐµÑ‚Ð²Ñ€Ñ‚Ð°Ðº","Ð¿ÐµÑ‚Ð°Ðº","ÑÑƒÐ±Ð¾Ñ‚Ð°"],longMonth:["Ñ˜Ð°Ð½ÑƒÐ°Ñ€","Ñ„ÐµÐ±Ñ€ÑƒÐ°Ñ€","Ð¼Ð°Ñ€Ñ‚","Ð°Ð¿Ñ€Ð¸Ð»","Ð¼Ð°Ñ˜","Ñ˜ÑƒÐ½","Ñ˜ÑƒÐ»","Ð°Ð²Ð³ÑƒÑÑ‚","ÑÐµÐ¿Ñ‚ÐµÐ¼Ð±Ð°Ñ€","Ð¾ÐºÑ‚Ð¾Ð±Ð°Ñ€","Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ€","Ð´ÐµÑ†ÐµÐ¼Ð±Ð°Ñ€"]},time:{timeSeparator:".",amPm:["Ð¿Ñ€Ðµ Ð¿Ð¾Ð´Ð½Ðµ","Ð¿Ð¾Ð¿Ð¾Ð´Ð½Ðµ"]}},sr_BA:{date:{},time:{}},sr_CS:{date:{},time:{}},sv:{date:{dateSeparator:"-",era:["fÃ¶re Kristus","efter Kristus"],eraAbbr:["f.Kr.","e.Kr."],shortDay:["sÃ¶n","mÃ¥n","tis","ons","tors","fre","lÃ¶r"],shortMonth:["jan","feb","mar","apr","maj","jun","jul","aug","sep","okt","nov","dec"],longDay:["sÃ¶ndag","mÃ¥ndag","tisdag","onsdag","torsdag","fredag","lÃ¶rdag"],longMonth:["januari","februari","mars","april","maj","juni","juli","augusti","september","oktober","november","december"]},time:{timeSeparator:".",amPm:["fm","em"]}},sv_FI:{date:{},time:{}},sv_SE:{date:{},time:{}},sw:{date:{dateSeparator:"-",era:["Kabla ya Kristo","Baada ya Kristo"],eraAbbr:["KK","BK"],shortDay:["Jpi","Jtt","Jnn","Jtn","Alh","Iju","Jmo"],shortMonth:["Jan","Feb","Mac","Apr","Mei","Jun","Jul","Ago","Sep","Okt","Nov","Des"],longDay:["Jumapili","Jumatatu","Jumanne","Jumatano","Alhamisi","Ijumaa","Jumamosi"],longMonth:["Januari","Februari","Machi","Aprili","Mei","Juni","Julai","Agosti","Septemba","Oktoba","Novemba","Desemba"]},time:{timeSeparator:":",amPm:["AM","PM"]}},sw_KE:{date:{},time:{}},syr:{date:{dateSeparator:"-",shortDay:["1","2","3","4","5","6","7"],shortMonth:["ÜŸÜ¢ Ü’","Ü«Ü’Ü›","ÜÜ•Üª","Ü¢ÜÜ£Ü¢","ÜÜÜª","ÜšÜ™ÜÜªÜ¢","Ü¬Ü¡Ü˜Ü™","ÜÜ’","ÜÜÜ Ü˜Ü ","Ü¬Ü« Ü","Ü¬Ü« Ü’","ÜŸÜ¢ Ü"],longDay:["1","2","3","4","5","6","7"],longMonth:["ÜŸÜ¢ Ü’","Ü«Ü’Ü›","ÜÜ•Üª","Ü¢ÜÜ£Ü¢","ÜÜÜª","ÜšÜ™ÜÜªÜ¢","Ü¬Ü¡Ü˜Ü™","ÜÜ’","ÜÜÜ Ü˜Ü ","Ü¬Ü« Ü","Ü¬Ü« Ü’","ÜŸÜ¢ Ü"]},time:{timeSeparator:":",amPm:["AM","PM"]}},syr_SY:{date:{},time:{}},ta:{date:{dateSeparator:"-",era:["à®•à®¿à®±à®¿à®¸à¯à®¤à¯à®µà¯à®•à¯à®•à¯ à®®à¯à®©à¯","à®…à®©à¯‹ à®Ÿà¯‹à®®à®¿à®©à®¿"],eraAbbr:["à®•à®¿à®®à¯","à®•à®¿à®ªà®¿"],shortDay:["à®žà®¾","à®¤à®¿","à®šà¯†","à®ªà¯","à®µà®¿","à®µà¯†","à®š"],shortMonth:["à®œà®©.","à®ªà®¿à®ªà¯.","à®®à®¾à®°à¯.","à®à®ªà¯.","à®®à¯‡","à®œà¯‚à®©à¯","à®œà¯‚à®²à¯ˆ","à®†à®•.","à®šà¯†à®ªà¯.","à®…à®•à¯.","à®¨à®µ.","à®Ÿà®¿à®š."],longDay:["à®žà®¾à®¯à®¿à®±à¯","à®¤à®¿à®™à¯à®•à®³à¯","à®šà¯†à®µà¯à®µà®¾à®¯à¯","à®ªà¯à®¤à®©à¯","à®µà®¿à®¯à®¾à®´à®©à¯","à®µà¯†à®³à¯à®³à®¿","à®šà®©à®¿"],longMonth:["à®œà®©à®µà®°à®¿","à®ªà®¿à®ªà¯à®°à®µà®°à®¿","à®®à®¾à®°à¯à®šà¯","à®à®ªà¯à®°à®²à¯","à®®à¯‡","à®œà¯‚à®©à¯","à®œà¯‚à®²à¯ˆ","à®†à®•à®¸à¯à®Ÿà¯","à®šà¯†à®ªà¯à®Ÿà®®à¯à®ªà®°à¯","à®…à®•à¯à®Ÿà¯‹à®ªà®°à¯","à®¨à®µà®®à¯à®ªà®°à¯","à®Ÿà®¿à®šà®®à¯à®ªà®°à¯"]},time:{timeSeparator:":",amPm:["am","pm"]}},ta_IN:{date:{},time:{}},te:{date:{dateSeparator:"-",era:["à°ˆà°¸à°¾à°ªà±‚à°°à±à°µ.","à°¸à°¨à±."],eraAbbr:["BCE","CE"],shortDay:["à°†à°¦à°¿","à°¸à±‹à°®","à°®à°‚à°—à°³","à°¬à±à°§","à°—à±à°°à±","à°¶à±à°•à±à°°","à°¶à°¨à°¿"],shortMonth:["à°œà°¨à°µà°°à°¿","à°«à°¿à°¬à±à°°à°µà°°à°¿","à°®à°¾à°°à±à°šà°¿","à°à°ªà±à°°à°¿à°²à±","à°®à±‡","à°œà±‚à°¨à±","à°œà±‚à°²à±ˆ","à°†à°—à°¸à±à°Ÿà±","à°¸à±†à°ªà±à°Ÿà±†à°‚à°¬à°°à±","à°…à°•à±à°Ÿà±‹à°¬à°°à±","à°¨à°µà°‚à°¬à°°à±","à°¡à°¿à°¸à±†à°‚à°¬à°°à±"],longDay:["à°†à°¦à°¿à°µà°¾à°°à°‚","à°¸à±‹à°®à°µà°¾à°°à°‚","à°®à°‚à°—à°³à°µà°¾à°°à°‚","à°¬à±à°§à°µà°¾à°°à°‚","à°—à±à°°à±à°µà°¾à°°à°‚","à°¶à±à°•à±à°°à°µà°¾à°°à°‚","à°¶à°¨à°¿à°µà°¾à°°à°‚"],longMonth:["à°œà°¨à°µà°°à°¿","à°«à°¿à°¬à±à°°à°µà°°à°¿","à°®à°¾à°°à±à°šà°¿","à°à°ªà±à°°à°¿à°²à±","à°®à±‡","à°œà±‚à°¨à±","à°œà±‚à°²à±ˆ","à°†à°—à°¸à±à°Ÿà±","à°¸à±†à°ªà±à°Ÿà±†à°‚à°¬à°°à±","à°…à°•à±à°Ÿà±‹à°¬à°°à±","à°¨à°µà°‚à°¬à°°à±","à°¡à°¿à°¸à±†à°‚à°¬à°°à±"]},time:{timeSeparator:":",amPm:["am","pm"]}},te_IN:{date:{},time:{}},th:{date:{dateSeparator:"/",era:["à¸›à¸µà¸à¹ˆà¸­à¸™à¸„à¸£à¸´à¸ªà¸•à¹Œà¸¨à¸±à¸à¸£à¸²à¸Š","à¸„à¸£à¸´à¸ªà¸•à¹Œà¸¨à¸±à¸à¸£à¸²à¸Š"],eraAbbr:["à¸›à¸µà¸à¹ˆà¸­à¸™ à¸„.à¸¨.","à¸„.à¸¨."],eraNarrow:["à¸à¹ˆà¸­à¸™ à¸„.à¸¨."],shortDay:["à¸­à¸².","à¸ˆ.","à¸­.","à¸ž.","à¸žà¸¤.","à¸¨.","à¸ª."],shortMonth:["à¸¡.à¸„.","à¸.à¸ž.","à¸¡à¸µ.à¸„.","à¹€à¸¡.à¸¢.","à¸ž.à¸„.","à¸¡à¸´.à¸¢.","à¸.à¸„.","à¸ª.à¸„.","à¸.à¸¢.","à¸•.à¸„.","à¸ž.à¸¢.","à¸˜.à¸„."],longDay:["à¸§à¸±à¸™à¸­à¸²à¸—à¸´à¸•à¸¢à¹Œ","à¸§à¸±à¸™à¸ˆà¸±à¸™à¸—à¸£à¹Œ","à¸§à¸±à¸™à¸­à¸±à¸‡à¸„à¸²à¸£","à¸§à¸±à¸™à¸žà¸¸à¸˜","à¸§à¸±à¸™à¸žà¸¤à¸«à¸±à¸ªà¸šà¸”à¸µ","à¸§à¸±à¸™à¸¨à¸¸à¸à¸£à¹Œ","à¸§à¸±à¸™à¹€à¸ªà¸²à¸£à¹Œ"],longMonth:["à¸¡à¸à¸£à¸²à¸„à¸¡","à¸à¸¸à¸¡à¸ à¸²à¸žà¸±à¸™à¸˜à¹Œ","à¸¡à¸µà¸™à¸²à¸„à¸¡","à¹€à¸¡à¸©à¸²à¸¢à¸™","à¸žà¸¤à¸©à¸ à¸²à¸„à¸¡","à¸¡à¸´à¸–à¸¸à¸™à¸²à¸¢à¸™","à¸à¸£à¸à¸Žà¸²à¸„à¸¡","à¸ªà¸´à¸‡à¸«à¸²à¸„à¸¡","à¸à¸±à¸™à¸¢à¸²à¸¢à¸™","à¸•à¸¸à¸¥à¸²à¸„à¸¡","à¸žà¸¤à¸¨à¸ˆà¸´à¸à¸²à¸¢à¸™","à¸˜à¸±à¸™à¸§à¸²à¸„à¸¡"]},time:{timeSeparator:":",amPm:["à¸à¹ˆà¸­à¸™à¹€à¸—à¸µà¹ˆà¸¢à¸‡","à¸«à¸¥à¸±à¸‡à¹€à¸—à¸µà¹ˆà¸¢à¸‡"]}},th_TH:{date:{},time:{}},tn:{date:{dateSeparator:"-",era:["BC","AD"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},tn_ZA:{date:{},time:{}},tr:{date:{dateSeparator:".",era:["Milattan Ã–nce","Milattan Sonra"],eraAbbr:["MÃ–","MS"],shortDay:["Paz","Pzt","Sal","Ã‡ar","Per","Cum","Cmt"],shortMonth:["Oca","Åžub","Mar","Nis","May","Haz","Tem","AÄŸu","Eyl","Eki","Kas","Ara"],longDay:["Pazar","Pazartesi","SalÄ±","Ã‡arÅŸamba","PerÅŸembe","Cuma","Cumartesi"],longMonth:["Ocak","Åžubat","Mart","Nisan","MayÄ±s","Haziran","Temmuz","AÄŸustos","EylÃ¼l","Ekim","KasÄ±m","AralÄ±k"]},time:{timeSeparator:":",amPm:["AM","PM"]}},tr_TR:{date:{},time:{}},uk:{date:{dateSeparator:".",era:["Ð´Ð¾ Ð½Ð°ÑˆÐ¾Ñ— ÐµÑ€Ð¸","Ð½Ð°ÑˆÐ¾Ñ— ÐµÑ€Ð¸"],eraAbbr:["Ð´Ð¾ Ð½.Ðµ.","Ð½.Ðµ."],shortDay:["ÐÐ´","ÐŸÐ½","Ð’Ñ‚","Ð¡Ñ€","Ð§Ñ‚","ÐŸÑ‚","Ð¡Ð±"],shortMonth:["ÑÑ–Ñ‡.","Ð»ÑŽÑ‚.","Ð±ÐµÑ€.","ÐºÐ²Ñ–Ñ‚.","Ñ‚Ñ€Ð°Ð².","Ñ‡ÐµÑ€Ð².","Ð»Ð¸Ð¿.","ÑÐµÑ€Ð¿.","Ð²ÐµÑ€.","Ð¶Ð¾Ð²Ñ‚.","Ð»Ð¸ÑÑ‚.","Ð³Ñ€ÑƒÐ´."],longDay:["ÐÐµÐ´Ñ–Ð»Ñ","ÐŸÐ¾Ð½ÐµÐ´Ñ–Ð»Ð¾Ðº","Ð’Ñ–Ð²Ñ‚Ð¾Ñ€Ð¾Ðº","Ð¡ÐµÑ€ÐµÐ´Ð°","Ð§ÐµÑ‚Ð²ÐµÑ€","ÐŸÊ¼ÑÑ‚Ð½Ð¸Ñ†Ñ","Ð¡ÑƒÐ±Ð¾Ñ‚Ð°"],longMonth:["ÑÑ–Ñ‡Ð½Ñ","Ð»ÑŽÑ‚Ð¾Ð³Ð¾","Ð±ÐµÑ€ÐµÐ·Ð½Ñ","ÐºÐ²Ñ–Ñ‚Ð½Ñ","Ñ‚Ñ€Ð°Ð²Ð½Ñ","Ñ‡ÐµÑ€Ð²Ð½Ñ","Ð»Ð¸Ð¿Ð½Ñ","ÑÐµÑ€Ð¿Ð½Ñ","Ð²ÐµÑ€ÐµÑÐ½Ñ","Ð¶Ð¾Ð²Ñ‚Ð½Ñ","Ð»Ð¸ÑÑ‚Ð¾Ð¿Ð°Ð´Ð°","Ð³Ñ€ÑƒÐ´Ð½Ñ"]},time:{timeSeparator:":",amPm:["Ð´Ð¿","Ð¿Ð¿"]}},uk_UA:{date:{},time:{}},uz:{date:{dateSeparator:"-",eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},uz_UZ:{date:{},time:{}},vi:{date:{dateSeparator:"/",eraAbbr:["tr. CN","sau CN"],shortDay:["CN","Th 2","Th 3","Th 4","Th 5","Th 6","Th 7"],shortMonth:["thg 1","thg 2","thg 3","thg 4","thg 5","thg 6","thg 7","thg 8","thg 9","thg 10","thg 11","thg 12"],longDay:["Chá»§ nháº­t","Thá»© hai","Thá»© ba","Thá»© tÆ°","Thá»© nÄƒm","Thá»© sÃ¡u","Thá»© báº£y"],longMonth:["thÃ¡ng má»™t","thÃ¡ng hai","thÃ¡ng ba","thÃ¡ng tÆ°","thÃ¡ng nÄƒm","thÃ¡ng sÃ¡u","thÃ¡ng báº£y","thÃ¡ng tÃ¡m","thÃ¡ng chÃ­n","thÃ¡ng mÆ°á»i","thÃ¡ng mÆ°á»i má»™t","thÃ¡ng mÆ°á»i hai"]},time:{timeSeparator:":",amPm:["SA","CH"]}},vi_VN:{date:{},time:{}},xh:{date:{dateSeparator:"-",era:["BC","umnyaka wokuzalwa kukaYesu"],eraAbbr:["BCE","CE"],shortDay:["1","2","3","4","5","6","7"],shortMonth:["1","2","3","4","5","6","7","8","9","10","11","12"],longDay:["1","2","3","4","5","6","7"],longMonth:["1","2","3","4","5","6","7","8","9","10","11","12"]},time:{timeSeparator:":",amPm:["AM","PM"]}},xh_ZA:{date:{},time:{}},zh:{date:{dateSeparator:"-",era:["å…¬å…ƒå‰","å…¬å…ƒ"],eraAbbr:["å…¬å…ƒå‰","å…¬å…ƒ"],shortDay:["å‘¨æ—¥","å‘¨ä¸€","å‘¨äºŒ","å‘¨ä¸‰","å‘¨å››","å‘¨äº”","å‘¨å…­"],shortMonth:["1æœˆ","2æœˆ","3æœˆ","4æœˆ","5æœˆ","6æœˆ","7æœˆ","8æœˆ","9æœˆ","10æœˆ","11æœˆ","12æœˆ"],longDay:["æ˜ŸæœŸæ—¥","æ˜ŸæœŸä¸€","æ˜ŸæœŸäºŒ","æ˜ŸæœŸä¸‰","æ˜ŸæœŸå››","æ˜ŸæœŸäº”","æ˜ŸæœŸå…­"],longMonth:["1æœˆ","2æœˆ","3æœˆ","4æœˆ","5æœˆ","6æœˆ","7æœˆ","8æœˆ","9æœˆ","10æœˆ","11æœˆ","12æœˆ"]},time:{timeSeparator:":",amPm:["ä¸Šåˆ","ä¸‹åˆ"]}},zh_CN:{date:{},time:{}},zh_HK:{date:{},time:{}},zh_MO:{date:{},time:{}},zh_SG:{date:{},time:{}},zh_TW:{date:{},time:{}},zu:{date:{dateSeparator:"-",eraAbbr:["BC","AD"],shortDay:["Son","Mso","Bil","Tha","Sin","Hla","Mgq"],shortMonth:["Jan","Feb","Mas","Apr","Mey","Jun","Jul","Aga","Sep","Okt","Nov","Dis"],longDay:["Sonto","Msombuluko","Lwesibili","Lwesithathu","uLwesine","Lwesihlanu","Mgqibelo"],longMonth:["Januwari","Februwari","Mashi","Apreli","Meyi","Juni","Julayi","Agasti","Septhemba","Okthoba","Novemba","Disemba"]},time:{timeSeparator:":",amPm:["AM","PM"]}},zu_ZA:{date:{},time:{}}};a.formatExist=function(b,c){return(b&&c&&a.DEFAULT_FORMAT_STRING[b]&&a.DEFAULT_FORMAT_STRING[b][c])};a.getDefaultDateFormat=function(b,c){return a.DEFAULT_FORMAT_STRING[b][c]};a.getShortDay=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_DAY)};a.getLongDay=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_DAY)};a.getShortMonth=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_SHORT_MONTH)};a.getLongMonth=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_LONG_MONTH)};a.getDateSeparator=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR).toString()}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_DATE_SEPARATOR).toString()};a.getTimeSeparator=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR)){return a.getDateResource(b,a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR).toString()}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_TIME,a.KEY_TIME_SEPARATOR).toString()};a.getAmPmToken=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)){return a.getDateResource(b,a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_TIME,a.KEY_TOKEN_AM_PM)};a.getAbbrevEraString=function(b){if(b){if(a.resourceExist(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)){return a.getDateResource(b,a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)}else{return null}}return a.getAppropriateDateResource(a.KEY_TYPE_DATE,a.KEY_TOKEN_ABBREV_ERA)};a.getDefaultShorDateFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_SHORTDATE)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_SHORTDATE).toString()}else{return""}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_SHORTDATE).toString()};a.getDefaultLongDateFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_LONGDATE)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_LONGDATE).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_LONGDATE)};a.getDefaultDateTimeFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_DATE_TIME)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_DATE_TIME).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_DATE_TIME).toString()};a.getDefaultTimeFormat=function(b){if(b){if(a.formatExist(b,a.FORMAT_TYPE_TIME)){return a.getDefaultDateFormat(b,a.FORMAT_TYPE_TIME).toString()}else{return null}}return a.getAppropriateDateFormat(a.FORMAT_TYPE_TIME).toString()};a.getAppropriateDateFormat=function(d){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a.formatExist(e,d)){return a.getDefaultDateFormat(e,d).toString()}var c=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a.formatExist(c,d)){return a.getDefaultDateFormat(c,d).toString()}var f=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a.formatExist(f,d)){return a.getDefaultDateFormat(f,d).toString()}var b=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a.formatExist(b,d)){return a.getDefaultDateFormat(b,d).toString()}return a.getDefaultDateFormat("en",d).toString()};a.getAppropriateDateResource=function(e,b){var f=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(a.resourceExist(f,e,b)){return a.getDateResource(f,e,b)}var d=sap.common.globalization.GlobalizationPreference.getInstance().pvlIsoLanguageCode();if(a.resourceExist(d,e,b)){return a.getDateResource(d,e,b)}var g=sap.common.globalization.GlobalizationPreference.getInstance().documentLocale();if(a.resourceExist(g,e,b)){return a.getDateResource(g,e,b)}var c=sap.common.globalization.GlobalizationPreference.getInstance().documentIsoLanguageCode();if(a.resourceExist(c,e,b)){return a.getDateResource(c,e,b)}return a.getDateResource("en",e,b)};a.resourceExist=function(b,d,c){return(b&&d&&c&&a.RESOURCE_MAP[b]&&a.RESOURCE_MAP[b][d]&&a.RESOURCE_MAP[b][d][c])};a.getDateResource=function(b,d,c){return a.RESOURCE_MAP[b][d][c]}})();(function(){sap.common.globalization.declare("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.GlobalizationNumericUtil=function(){this.__className="sap.common.globalization.GlobalizationNumericUtil"};sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry=function(a){switch(a){case"bn":case"bn_IN":case"en_IN":case"gu":case"gu_IN":case"hi":case"hi_IN":case"kn":case"kn_IN":case"kok":case"kok_IN":case"ml":case"ml_IN":case"mr":case"mr_IN":case"pa":case"pa_IN":case"ta":case"ta_IN":case"te":case"te_IN":return true;default:return false}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.NumericFormatManager");sap.common.globalization.numericFormat.FLocalization=function(){this.__className="sap.common.globalization.numericFormat.FLocalization";this._setDisplayLocaleInfo();this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null};var a=sap.common.globalization.numericFormat.FLocalization;a._defaultLocale="en";a._DayStrings=null;a._shortDayStrings=null;a._MonthStrings=null;a._shortMonthStrings=null;a._DateTimeCodes=null;a._NumericStrings=null;a._DateTimeStrings=null;a._CurrencySymbol=null;a._SAPCurrencySymbol=null;a._SAPDateString=null;a._SAPTimeString=null;a._SAPThousandsSeparator=null;a._SAPDecimalSeparator=null;a._SAPLongDay=null;a._SAPShortDay=null;a._SAPLongMonth=null;a._SAPShortMonth=null;a._AmPms=null;a._singleton=null;sap.common.globalization.numericFormat.FLocalization.prototype.replaceNBSP=function(e){if(e){var f="";var c=160;for(var d=0;d<e.length;++d){if(e.charCodeAt(d)==c){f+=" "}else{f+=e.charAt(d)}}e=f}return e};a.getInstance=function(){if(!a._singleton){a._initStrings();a._initializePvlDateStrings();a._initSAPGlobilizationStrings();a._singleton=new sap.common.globalization.numericFormat.FLocalization();a._singleton.IMSABBREVDAYNAME1=a._shortDayStrings.en[1]}return a._singleton};a.resetInstance=function(){a._resetAllStaticVars();a._initStrings();a._initializePvlDateStrings();a._initSAPGlobilizationStrings();a._singleton=new sap.common.globalization.numericFormat.FLocalization();a._singleton.IMSABBREVDAYNAME1=a._shortDayStrings.en[1]};var b={monthStrings:"_MonthStrings",shortMonthStrings:"_shortMonthStrings",dayStrings:"_DayStrings",shortDayStrings:"_shortDayStrings",dateTimeCodes:"_DateTimeCodes",numericStrings:"_NumericStrings",dateTimeStrings:"_DateTimeStrings",currencySymbol:"_CurrencySymbol",amPms:"_AmPms"};a.prototype._setDisplayLocaleInfo=function(){this.IMDateSeparator=a._DateTimeStrings.en[1];this.IMDayCode=a._DateTimeCodes.en[5];this.IMDecimalSeparator=a._NumericStrings.en[1];this.IMGeneralFormatName="General";this.IMHourCode=a._DateTimeCodes.en[3];this.IMMinuteCode=a._DateTimeCodes.en[1];this.IMMonthCode=a._DateTimeCodes.en[4];this.IMSABBREVDAYNAME1=a._shortDayStrings.en[1];this.IMSABBREVDAYNAME2=a._shortDayStrings.en[2];this.IMSABBREVDAYNAME3=a._shortDayStrings.en[3];this.IMSABBREVDAYNAME4=a._shortDayStrings.en[4];this.IMSABBREVDAYNAME5=a._shortDayStrings.en[5];this.IMSABBREVDAYNAME6=a._shortDayStrings.en[6];this.IMSABBREVDAYNAME7=a._shortDayStrings.en[7];this.IMSABBREVMONTHNAME1=a._shortMonthStrings.en[1];this.IMSABBREVMONTHNAME10=a._shortMonthStrings.en[10];this.IMSABBREVMONTHNAME11=a._shortMonthStrings.en[11];this.IMSABBREVMONTHNAME12=a._shortMonthStrings.en[12];this.IMSABBREVMONTHNAME2=a._shortMonthStrings.en[2];this.IMSABBREVMONTHNAME3=a._shortMonthStrings.en[3];this.IMSABBREVMONTHNAME4=a._shortMonthStrings.en[4];this.IMSABBREVMONTHNAME5=a._shortMonthStrings.en[5];this.IMSABBREVMONTHNAME6=a._shortMonthStrings.en[6];this.IMSABBREVMONTHNAME7=a._shortMonthStrings.en[7];this.IMSABBREVMONTHNAME8=a._shortMonthStrings.en[8];this.IMSABBREVMONTHNAME9=a._shortMonthStrings.en[9];this.IMSDAYNAME1=a._DayStrings.en[1];this.IMSDAYNAME2=a._DayStrings.en[2];this.IMSDAYNAME3=a._DayStrings.en[3];this.IMSDAYNAME4=a._DayStrings.en[4];this.IMSDAYNAME5=a._DayStrings.en[5];this.IMSDAYNAME6=a._DayStrings.en[6];this.IMSDAYNAME7=a._DayStrings.en[7];this.IMSMONTHNAME1=a._MonthStrings.en[1];this.IMSMONTHNAME10=a._MonthStrings.en[10];this.IMSMONTHNAME11=a._MonthStrings.en[11];this.IMSMONTHNAME12=a._MonthStrings.en[12];this.IMSMONTHNAME2=a._MonthStrings.en[2];this.IMSMONTHNAME3=a._MonthStrings.en[3];this.IMSMONTHNAME4=a._MonthStrings.en[4];this.IMSMONTHNAME5=a._MonthStrings.en[5];this.IMSMONTHNAME6=a._MonthStrings.en[6];this.IMSMONTHNAME7=a._MonthStrings.en[7];this.IMSMONTHNAME8=a._MonthStrings.en[8];this.IMSMONTHNAME9=a._MonthStrings.en[9];this.IMSecondCode=a._DateTimeCodes.en[2];this.IMTimeSeparator=a._DateTimeStrings.en[2];this.IMYearCode=a._DateTimeCodes.en[6];this.IMCurrencySymbol=a._CurrencySymbol.en[1];this.SAPDateSeparator=a._SAPDateString;this.SAPTimeSeparator=a._SAPTimeString;this.SAPCurrencySymbol=a._SAPCurrencySymbol;this.SAPDecimalSeparator=a._SAPDecimalSeparator;this.SAPThousandsSeparator=a._SAPThousandsSeparator;this.SAPLongDay=a._SAPLongDay;this.SAPShortDay=a._SAPShortDay;this.SAPLongMonth=a._SAPLongMonth;this.SAPShortMonth=a._SAPShortMonth;this.IMAMTOKEN=a._AmPms.en[1];this.IMPMTOKEN=a._AmPms.en[2];this._IMThousandsSeparator=this.replaceNBSP(a._NumericStrings.en[2])};a.prototype.setCustomizedLocaleInfo=function(e){if(e){var d;for(d in b){if(e.hasOwnProperty(d)){var g=b[d];this._setCustomizedLocaleInfoByType(g,e[d])}}}else{var c=sap.common.globalization.GlobalizationDateConstant;var f=sap.common.globalization.GlobalizationNumericConstant;this._setCustomizedLocaleInfoByType(b.dayStrings,c.getLongDay());this._setCustomizedLocaleInfoByType(b.shortDayStrings,c.getShortDay());this._setCustomizedLocaleInfoByType(b.monthStrings,c.getLongMonth());this._setCustomizedLocaleInfoByType(b.shortMonthStrings,c.getShortMonth());this._setCustomizedLocaleInfoByType(b.amPms,c.getAmPmToken());this._setCustomizedLocaleInfoByType(b.dateTimeStrings,[c.getDateSeparator(),c.getTimeSeparator()]);this._setCustomizedLocaleInfoByType(b.numericStrings,[f.getDisplayDecimalSeparator(),f.getDisplayThousandSeparator()]);this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null;this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null;a._initializePvlDayStrings()}this._setDisplayLocaleInfo()};a.prototype._setCustomizedLocaleInfoByType=function(e,f){if(f&&f.length>0){var c;for(var d=0;d<f.length;d++){c=d+1;a[e]["en"][c]=f[d]}}};a._initStrings=function(){a._DayStrings={en:{1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thursday",5:"Friday",6:"Saturday",7:"Sunday"}};a._shortDayStrings={en:{1:"Mon",2:"Tue",3:"Wed",4:"Thu",5:"Fri",6:"Sat",7:"Sun"}};a._MonthStrings={en:{1:"January",2:"February",3:"March",4:"April",5:"May",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December"}};a._shortMonthStrings={en:{1:"Jan",2:"Feb",3:"Mar",4:"Apr",5:"May",6:"Jun",7:"Jul",8:"Aug",9:"Sep",10:"Oct",11:"Nov",12:"Dec"}};a._DateTimeCodes={en:{1:"m",2:"s",3:"h",4:"M",5:"D",6:"Y"}};a._NumericStrings={en:{1:".",2:","}};a._DateTimeStrings={en:{1:"/",2:":"}};a._CurrencySymbol={en:{1:"$",2:"$"}};a._AmPms={en:{1:"AM",2:"PM"}}};a._initSAPGlobilizationStrings=function(){var d=sap.common.globalization.NumericFormatManager;var e=d.SAP_PARAMETERS["BICSWS_DECIMAL"];e=e?e:d.SAP_PARAMETERS["SAP_decimal"];var l=d.SAP_PARAMETERS["BICSWS_THOUSANDSEPARATOR"];l=l?l:d.SAP_PARAMETERS["SAP_thousandSeparator"];var f=d.SAP_PARAMETERS["BICSWS_MONTHSLONG"];f=f?f:d.SAP_PARAMETERS["SAP_monthsLong"];var g=d.SAP_PARAMETERS["BICSWS_MONTHSSHORT"];g=g?g:d.SAP_PARAMETERS["SAP_monthsShort"];var c=d.SAP_PARAMETERS["BICSWS_DAYSLONG"];c=c?c:d.SAP_PARAMETERS["SAP_daysLong"];var m=d.SAP_PARAMETERS["BICSWS_DAYSSHORT"];m=m?m:d.SAP_PARAMETERS["SAP_daysShort"];var k=d.SAP_PARAMETERS["BICSWS_DATESEPARATOR"];k=k?k:d.SAP_PARAMETERS["SAP_dateSeparator"];var j=d.SAP_PARAMETERS["BICSWS_TIMESEPARATOR"];j=j?j:d.SAP_PARAMETERS["SAP_timeSeparator"];var h=d.SAP_PARAMETERS["SAP_s_g_n_FLocalization._CurrencySymbol"];var i;if(c){i=c.split(",");a._SAPLongDay=i;a._DayStrings.en[1]=i[0];a._DayStrings.en[2]=i[1];a._DayStrings.en[3]=i[2];a._DayStrings.en[4]=i[3];a._DayStrings.en[5]=i[4];a._DayStrings.en[6]=i[5];a._DayStrings.en[7]=i[6]}if(m){i=m.split(",");a._SAPShortDay=i;a._shortDayStrings.en[1]=i[0];a._shortDayStrings.en[2]=i[1];a._shortDayStrings.en[3]=i[2];a._shortDayStrings.en[4]=i[3];a._shortDayStrings.en[5]=i[4];a._shortDayStrings.en[6]=i[5];a._shortDayStrings.en[7]=i[6]}if(f){i=f.split(",");a._SAPLongMonth=i;a._MonthStrings.en[1]=i[0];a._MonthStrings.en[2]=i[1];a._MonthStrings.en[3]=i[2];a._MonthStrings.en[4]=i[3];a._MonthStrings.en[5]=i[4];a._MonthStrings.en[6]=i[5];a._MonthStrings.en[7]=i[6];a._MonthStrings.en[8]=i[7];a._MonthStrings.en[9]=i[8];a._MonthStrings.en[10]=i[9];a._MonthStrings.en[11]=i[10];a._MonthStrings.en[12]=i[11]}if(g){i=g.split(",");a._SAPShortMonth=i;a._shortMonthStrings.en[1]=i[0];a._shortMonthStrings.en[2]=i[1];a._shortMonthStrings.en[3]=i[2];a._shortMonthStrings.en[4]=i[3];a._shortMonthStrings.en[5]=i[4];a._shortMonthStrings.en[6]=i[5];a._shortMonthStrings.en[7]=i[6];a._shortMonthStrings.en[8]=i[7];a._shortMonthStrings.en[9]=i[8];a._shortMonthStrings.en[10]=i[9];a._shortMonthStrings.en[11]=i[10];a._shortMonthStrings.en[12]=i[11]}if(e){a._SAPDecimalSeparator=e}if(l){a._SAPThousandsSeparator=l}if(k){a._SAPDateString=k}if(j){a._SAPTimeString=j}if(h){a._SAPCurrencySymbol=h}};a.prototype.IMThousandsSeparator=function(c){if(arguments.length>=1){this._IMThousandsSeparator=this.replaceNBSP(c);return this}else{return this._IMThousandsSeparator}};a.prototype.getDateParseLocaleInfo=function(){if(!this._dateParseLocaleInfo){this._dateParseLocaleInfo=new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl();this._dateParseLocaleInfo.IMDateSeparator(this.IMDateSeparator);this._dateParseLocaleInfo.IMTimeSeparator(this.IMTimeSeparator)}return this._dateParseLocaleInfo};a.prototype.getDateDisplayLocaleInfo=function(){if(!this._dateDisplayLocaleInfo){this._dateDisplayLocaleInfo=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();this._dateDisplayLocaleInfo.IMDateSeparator(this.SAPDateSeparator);this._dateDisplayLocaleInfo.IMSDAYNAME1(this.IMSDAYNAME1);this._dateDisplayLocaleInfo.IMSDAYNAME2(this.IMSDAYNAME2);this._dateDisplayLocaleInfo.IMSDAYNAME3(this.IMSDAYNAME3);this._dateDisplayLocaleInfo.IMSDAYNAME4(this.IMSDAYNAME4);this._dateDisplayLocaleInfo.IMSDAYNAME5(this.IMSDAYNAME5);this._dateDisplayLocaleInfo.IMSDAYNAME6(this.IMSDAYNAME6);this._dateDisplayLocaleInfo.IMSDAYNAME7(this.IMSDAYNAME7);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME1(this.IMSABBREVDAYNAME1);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME2(this.IMSABBREVDAYNAME2);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME3(this.IMSABBREVDAYNAME3);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME4(this.IMSABBREVDAYNAME4);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME5(this.IMSABBREVDAYNAME5);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME6(this.IMSABBREVDAYNAME6);this._dateDisplayLocaleInfo.IMSABBREVDAYNAME7(this.IMSABBREVDAYNAME7);this._dateDisplayLocaleInfo.IMSMONTHNAME1(this.IMSMONTHNAME1);this._dateDisplayLocaleInfo.IMSMONTHNAME2(this.IMSMONTHNAME2);this._dateDisplayLocaleInfo.IMSMONTHNAME3(this.IMSMONTHNAME3);this._dateDisplayLocaleInfo.IMSMONTHNAME4(this.IMSMONTHNAME4);this._dateDisplayLocaleInfo.IMSMONTHNAME5(this.IMSMONTHNAME5);this._dateDisplayLocaleInfo.IMSMONTHNAME6(this.IMSMONTHNAME6);this._dateDisplayLocaleInfo.IMSMONTHNAME7(this.IMSMONTHNAME7);this._dateDisplayLocaleInfo.IMSMONTHNAME8(this.IMSMONTHNAME8);this._dateDisplayLocaleInfo.IMSMONTHNAME9(this.IMSMONTHNAME9);this._dateDisplayLocaleInfo.IMSMONTHNAME10(this.IMSMONTHNAME10);this._dateDisplayLocaleInfo.IMSMONTHNAME11(this.IMSMONTHNAME11);this._dateDisplayLocaleInfo.IMSMONTHNAME12(this.IMSMONTHNAME12);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME1(this.IMSABBREVMONTHNAME1);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME2(this.IMSABBREVMONTHNAME2);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME3(this.IMSABBREVMONTHNAME3);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME4(this.IMSABBREVMONTHNAME4);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME5(this.IMSABBREVMONTHNAME5);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME6(this.IMSABBREVMONTHNAME6);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME7(this.IMSABBREVMONTHNAME7);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME8(this.IMSABBREVMONTHNAME8);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME9(this.IMSABBREVMONTHNAME9);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME10(this.IMSABBREVMONTHNAME10);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME11(this.IMSABBREVMONTHNAME11);this._dateDisplayLocaleInfo.IMSABBREVMONTHNAME12(this.IMSABBREVMONTHNAME12);this._dateDisplayLocaleInfo.IMTimeSeparator(this.SAPTimeSeparator);this._dateDisplayLocaleInfo.IMAMTOKEN(this.IMAMTOKEN);this._dateDisplayLocaleInfo.IMPMTOKEN(this.IMPMTOKEN)}return this._dateDisplayLocaleInfo};a.prototype.numericParseLocaleInfo=function(){if(!this._numericParseLocaleInfo){this._numericParseLocaleInfo=new sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl(this._IMThousandsSeparator,this.IMDecimalSeparator,this.IMCurrencySymbol)}return this._numericParseLocaleInfo};a.prototype.numericDisplayLocaleInfo=function(){if(!this._numericDisplayLocaleInfo){var c=(this.SAPThousandsSeparator?this.SAPThousandsSeparator:this._IMThousandsSeparator);var e=(this.SAPDecimalSeparator?this.SAPDecimalSeparator:this.IMDecimalSeparator);var d=(this.SAPCurrencySymbol?this.SAPCurrencySymbol:this.IMCurrencySymbol);this._numericDisplayLocaleInfo=new sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl(c,e,d)}return this._numericDisplayLocaleInfo};a._initializePvlDayStrings=function(){var d=sap.common.globalization.GlobalizationDateConstant.getLongDay();if(d){a._DayStrings.en[1]=d[1];a._DayStrings.en[2]=d[2];a._DayStrings.en[3]=d[3];a._DayStrings.en[4]=d[4];a._DayStrings.en[5]=d[5];a._DayStrings.en[6]=d[6];a._DayStrings.en[7]=d[0]}var c=sap.common.globalization.GlobalizationDateConstant.getShortDay();if(c){a._shortDayStrings.en[1]=c[1];a._shortDayStrings.en[2]=c[2];a._shortDayStrings.en[3]=c[3];a._shortDayStrings.en[4]=c[4];a._shortDayStrings.en[5]=c[5];a._shortDayStrings.en[6]=c[6];a._shortDayStrings.en[7]=c[0]}};a._initializePvlDateStrings=function(){var e=sap.common.globalization.GlobalizationPreference.getInstance().pvl();if(e&&!sap.common.globalization.utils.StringUtil.isBlankString(e)){a._initializePvlDayStrings();var f=sap.common.globalization.GlobalizationDateConstant.getLongMonth();if(f){a._MonthStrings.en[1]=f[0];a._MonthStrings.en[2]=f[1];a._MonthStrings.en[3]=f[2];a._MonthStrings.en[4]=f[3];a._MonthStrings.en[5]=f[4];a._MonthStrings.en[6]=f[5];a._MonthStrings.en[7]=f[6];a._MonthStrings.en[8]=f[7];a._MonthStrings.en[9]=f[8];a._MonthStrings.en[10]=f[9];a._MonthStrings.en[11]=f[10];a._MonthStrings.en[12]=f[11]}var d=sap.common.globalization.GlobalizationDateConstant.getShortMonth();if(d){a._shortMonthStrings.en[1]=d[0];a._shortMonthStrings.en[2]=d[1];a._shortMonthStrings.en[3]=d[2];a._shortMonthStrings.en[4]=d[3];a._shortMonthStrings.en[5]=d[4];a._shortMonthStrings.en[6]=d[5];a._shortMonthStrings.en[7]=d[6];a._shortMonthStrings.en[8]=d[7];a._shortMonthStrings.en[9]=d[8];a._shortMonthStrings.en[10]=d[9];a._shortMonthStrings.en[11]=d[10];a._shortMonthStrings.en[12]=d[11]}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c){a._AmPms.en[1]=c[0];a._AmPms.en[2]=c[1]}}};a._resetAllStaticVars=function(){a._DayStrings=null;a._shortDayStrings=null;a._MonthStrings=null;a._shortMonthStrings=null;a._DateTimeCodes=null;a._NumericStrings=null;a._DateTimeStrings=null;a._CurrencySymbol=null;a._SAPCurrencySymbol=null;a._SAPDateString=null;a._SAPTimeString=null;a._SAPThousandsSeparator=null;a._SAPDecimalSeparator=null;a._SAPLongDay=null;a._SAPShortDay=null;a._SAPLongMonth=null;a._SAPShortMonth=null;a._AmPms=null}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.BaseUtils");var b=sap.common.globalization.utils.BaseUtils;var a=0;sap.common.globalization.utils.BaseUtils.genUID=function(){if(!a){a=0}return"xgen_"+(a++)};var c={"[object Boolean]":"boolean","[object Number]":"number","[object String]":"string","[object Function]":"function","[object Array]":"array","[object Date]":"date","[object RegExp]":"regexp","[object Object]":"object"};sap.common.globalization.utils.BaseUtils.applyProperties=function(g,f){if(f!=null){var d=f.length;for(var e=0;e<d;e++){var h=f[e];if(h&&h!=null){this.applyObjectProperty(g,h.name,h.value)}}}};sap.common.globalization.utils.BaseUtils.applyObjectProperty=function(g,f,d){try{if(b.isFunction(g[f])){g[f](d)}else{if(g.hasOwnProperty(f)){g[f]=d}}}catch(h){if(console){console.log(h)}}};sap.common.globalization.utils.BaseUtils.getObjectProperty=function(f,d){try{if(b.isFunction(f[d])){return f[d]()}else{if(f.hasOwnProperty(d)){return f[d]}}}catch(g){if(console){console.log(g)}}};sap.common.globalization.utils.BaseUtils.type=function(d){return d==null?String(d):c[Object.prototype.toString.call(d)]||"object"};sap.common.globalization.utils.BaseUtils.isFunction=function(d){return b.type(d)==="function"};sap.common.globalization.utils.BaseUtils.isBoolean=function(d){return b.type(d)==="boolean"};sap.common.globalization.utils.BaseUtils.isString=function(d){return b.type(d)==="string"};sap.common.globalization.utils.BaseUtils.isArray=function(d){return b.type(d)==="array"};sap.common.globalization.utils.BaseUtils.isNumber=function(d){return b.type(d)==="number"};sap.common.globalization.utils.BaseUtils.isRegExp=function(d){return b.type(d)==="regexp"};sap.common.globalization.utils.BaseUtils.sortArrayOn=function(d,f,e){if(b.isArray(d)&&b.isString(f)){d.sort(function(h,g){return e?(h[f]<g[f])-(h[f]>g[f]):(h[f]>g[f])-(h[f]<g[f])})}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.UnitAbbreviations");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.UnitAbbreviations=function(){this.__className="sap.common.globalization.utils.UnitAbbreviations";this.thousands="K";this.millions="M";this.billions="B";this.trillions="T"};sap.common.globalization.utils.UnitAbbreviations.prototype.toObject=function(){return{thousands:this.thousands,millions:this.millions,billions:this.billions,trillions:this.trillions}};sap.common.globalization.utils.UnitAbbreviations.prototype.copyFromObject=function(a){if(!a){a={thousands:"K",millions:"M",billions:"B",trillions:"T"}}var b=false;for(attr in ["thousands","millions","billions","trillions"]){if(sap.common.globalization.utils.BaseUtils.isString(a[attr])&&a[attr]!=this[attr]){this[attr]=a[attr];b=true}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.BooleanUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.BooleanUtil.isBooleanValue=function(a){if(sap.common.globalization.utils.BaseUtils.isBoolean(a)){return true}else{if(sap.common.globalization.utils.BaseUtils.isString(a)){return String(a).toLowerCase()=="true"||String(a).toLowerCase()=="false"}else{return false}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.ColorUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.ColorUtil.convertToHexString=function(c){if(c==null||!sap.common.globalization.utils.BaseUtils.isNumber(c)||isNaN(c)){return null}var h="#",b=["r","g","b"],d=sap.common.globalization.utils.ColorUtil.convertToRGBObject(c);for(var f=0,a=b.length;f<a;f++){var g=b[f],e=d[g].toString(16);if(e.length==1){h+="0"}h+=e}return h};sap.common.globalization.utils.ColorUtil.convertToRGBObject=function(a){if(a==null||!sap.common.globalization.utils.BaseUtils.isNumber(a)||isNaN(a)){return null}return{r:(a&16711680)>>16,g:(a&65280)>>8,b:a&255}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.DataFormatUtils");sap.common.globalization.require("sap.common.globalization.utils.ColorUtil");sap.common.globalization.utils.DataFormatUtils.decorateColorHTML=function(b,a){if(!isNaN(a)){return'<FONT COLOR="'+sap.common.globalization.utils.ColorUtil.convertToHexString(a)+'"/>'+b+"</FONT>"}return b};sap.common.globalization.utils.DataFormatUtils.DataFormatUtils=function(){throw new Error("Should not initialize DataFormatUtils.")}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.NumberUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.require("sap.common.globalization.utils.UnitAbbreviations");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.utils.NumberUtil.checkEquality=function(d,c,a){a=a||-5;if(d==c){return true}var b=Math.pow(10,a-1);var e=d-c;return e<b&&e>-b};sap.common.globalization.utils.NumberUtil.lessThanEqual=function(b,c,a){a=a||-5;return((b<c)||sap.common.globalization.utils.NumberUtil.checkEquality(b,c,a))};sap.common.globalization.utils.NumberUtil.greaterThanEqual=function(b,c,a){a=a||-5;return((b>c)||sap.common.globalization.utils.NumberUtil.checkEquality(b,c,a))};sap.common.globalization.utils.NumberUtil.getPrecision=function(d){var c=String(d);var e=c.length;var b=c.indexOf(".");var a=e-(b+1);return a};sap.common.globalization.utils.NumberUtil.roundToPrecision=function(e,c){var f=e.toString(10);var d=f.split(".");var a=(d&&d.length>1?d[1].length:0);if(a<=c){return e}var b=Math.pow(10,c);return Math.round(e*b)/b};sap.common.globalization.utils.NumberUtil.roundToNearest=function(b,a,c){a=a||1;c=c||0;return Math.round((b+c)/a)*a-c};sap.common.globalization.utils.NumberUtil.abbreviate=function(f,g,c){var h=1000;var d=1000000;var b=1000000000;var a=1000000000000;g=g||null;c=c||1;if(!g){g=new sap.common.globalization.utils.UnitAbbreviations()}var i="";var e=Math.abs(f);if(e>=a){f/=a;i=g.trillions}else{if(e>=b){f/=b;i=g.billions}else{if(e>=d){f/=d;i=g.millions}else{if(e>=h){f/=h;i=g.thousands}}}}f=sap.common.globalization.utils.NumberUtil.roundToPrecision(f,c);return String(f)+i};sap.common.globalization.utils.NumberUtil.parseNumber=function(c,b){var a=b;if(c!=null){var d=Number(c);if(isNaN(d)==false){a=d}}return a};sap.common.globalization.utils.NumberUtil.isNumericValue=function(a){if(sap.common.globalization.utils.BaseUtils.isNumber(a)&&!isNaN(a)){return true}else{if(sap.common.globalization.utils.BaseUtils.isString(a)){return sap.common.globalization.utils.StringUtil.isNumber(String(a))}else{return false}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.utils.StringUtil");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.utils.StringUtil.escapeEntities=function(a){if(a){a=a.split("&").join("&amp;");a=a.split("<").join("&lt;");a=a.split(">").join("&gt;");a=a.split('"').join("&quot;");a=a.split("'").join("&apos;")}return a};sap.common.globalization.utils.StringUtil.trim=function(a){return a.replace(/^\s*/,"").replace(/\s*$/,"")};sap.common.globalization.utils.StringUtil.isBlankString=function(a){if(a==null||!(sap.common.globalization.utils.BaseUtils.isString(a))){return false}return sap.common.globalization.utils.StringUtil.trim(a)===""};sap.common.globalization.utils.StringUtil.isNumber=function(a){if(isNaN(Number(a))){return false}else{if(sap.common.globalization.utils.StringUtil.isBlankString(a)){return false}else{return true}}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.");sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory";this._parseLocaleInfo=null;this._displayLocaleInfo=null};var a=sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory;a.prototype.getDateParseLocaleInfo=function(){if(!this._parseLocaleInfo){this._parseLocaleInfo=this.getPredefinedDateParseLocaleString()}return this._parseLocaleInfo};a.prototype.getDateDisplayLocaleInfo=function(){if(!this._displayLocaleInfo){this._displayLocaleInfo=this.getPredefinedDateDisplayLocaleString();this.applySAPDateTokensAndSeparators(this._displayLocaleInfo)}return this._displayLocaleInfo};a.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultLongDateFormat()};a.prototype.createFDate=function(){return new sap.common.globalization.numericFormat.FDefaultDate(this.getDateParseLocaleInfo(),this.getDateDisplayLocaleInfo())};a.prototype.getPredefinedDateParseLocaleString=function(){return new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl()};a.prototype.getPredefinedDateDisplayLocaleString=function(){var e=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();var f=sap.common.globalization.GlobalizationDateConstant.getLongDay();if(f){e.IMSDAYNAME1(f[1]);e.IMSDAYNAME2(f[2]);e.IMSDAYNAME3(f[3]);e.IMSDAYNAME4(f[4]);e.IMSDAYNAME5(f[5]);e.IMSDAYNAME6(f[6]);e.IMSDAYNAME7(f[0])}var c=sap.common.globalization.GlobalizationDateConstant.getShortDay();if(c){e.IMSABBREVDAYNAME1(c[1]);e.IMSABBREVDAYNAME2(c[2]);e.IMSABBREVDAYNAME3(c[3]);e.IMSABBREVDAYNAME4(c[4]);e.IMSABBREVDAYNAME5(c[5]);e.IMSABBREVDAYNAME6(c[6]);e.IMSABBREVDAYNAME7(c[0])}var g=sap.common.globalization.GlobalizationDateConstant.getLongMonth();if(g){e.IMSMONTHNAME1(g[0]);e.IMSMONTHNAME2(g[1]);e.IMSMONTHNAME3(g[2]);e.IMSMONTHNAME4(g[3]);e.IMSMONTHNAME5(g[4]);e.IMSMONTHNAME6(g[5]);e.IMSMONTHNAME7(g[6]);e.IMSMONTHNAME8(g[7]);e.IMSMONTHNAME9(g[8]);e.IMSMONTHNAME10(g[9]);e.IMSMONTHNAME11(g[10]);e.IMSMONTHNAME12(g[11])}var d=sap.common.globalization.GlobalizationDateConstant.getShortMonth();if(d){e.IMSABBREVMONTHNAME1(d[0]);e.IMSABBREVMONTHNAME2(d[1]);e.IMSABBREVMONTHNAME3(d[2]);e.IMSABBREVMONTHNAME4(d[3]);e.IMSABBREVMONTHNAME5(d[4]);e.IMSABBREVMONTHNAME6(d[5]);e.IMSABBREVMONTHNAME7(d[6]);e.IMSABBREVMONTHNAME8(d[7]);e.IMSABBREVMONTHNAME9(d[8]);e.IMSABBREVMONTHNAME10(d[9]);e.IMSABBREVMONTHNAME11(d[10]);e.IMSABBREVMONTHNAME12(d[11])}var b=sap.common.globalization.GlobalizationDateConstant.getAbbrevEraString();if(b&&b[1]){e.IMEraToken(b[1])}return e};a.prototype.applySAPDateTokensAndSeparators=function(c){var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(b.SAPShortDay){c.IMSABBREVDAYNAME1(b.SAPShortDay[0]);c.IMSABBREVDAYNAME2(b.SAPShortDay[1]);c.IMSABBREVDAYNAME3(b.SAPShortDay[2]);c.IMSABBREVDAYNAME4(b.SAPShortDay[3]);c.IMSABBREVDAYNAME5(b.SAPShortDay[4]);c.IMSABBREVDAYNAME6(b.SAPShortDay[5]);c.IMSABBREVDAYNAME7(b.SAPShortDay[6])}if(b.SAPLongDay){c.IMSDAYNAME1(b.SAPLongDay[0]);c.IMSDAYNAME2(b.SAPLongDay[1]);c.IMSDAYNAME3(b.SAPLongDay[2]);c.IMSDAYNAME4(b.SAPLongDay[3]);c.IMSDAYNAME5(b.SAPLongDay[4]);c.IMSDAYNAME6(b.SAPLongDay[5]);c.IMSDAYNAME7(b.SAPLongDay[6])}if(b.SAPShortMonth){c.IMSABBREVMONTHNAME1(b.SAPShortMonth[0]);c.IMSABBREVMONTHNAME2(b.SAPShortMonth[1]);c.IMSABBREVMONTHNAME3(b.SAPShortMonth[2]);c.IMSABBREVMONTHNAME4(b.SAPShortMonth[3]);c.IMSABBREVMONTHNAME5(b.SAPShortMonth[4]);c.IMSABBREVMONTHNAME6(b.SAPShortMonth[5]);c.IMSABBREVMONTHNAME7(b.SAPShortMonth[6]);c.IMSABBREVMONTHNAME8(b.SAPShortMonth[7]);c.IMSABBREVMONTHNAME9(b.SAPShortMonth[8]);c.IMSABBREVMONTHNAME10(b.SAPShortMonth[9]);c.IMSABBREVMONTHNAME11(b.SAPShortMonth[10]);c.IMSABBREVMONTHNAME12(b.SAPShortMonth[11])}if(b.SAPLongMonth){c.IMSMONTHNAME1(b.SAPLongMonth[0]);c.IMSMONTHNAME2(b.SAPLongMonth[1]);c.IMSMONTHNAME3(b.SAPLongMonth[2]);c.IMSMONTHNAME4(b.SAPLongMonth[3]);c.IMSMONTHNAME5(b.SAPLongMonth[4]);c.IMSMONTHNAME6(b.SAPLongMonth[5]);c.IMSMONTHNAME7(b.SAPLongMonth[6]);c.IMSMONTHNAME8(b.SAPLongMonth[7]);c.IMSMONTHNAME9(b.SAPLongMonth[8]);c.IMSMONTHNAME10(b.SAPLongMonth[9]);c.IMSMONTHNAME11(b.SAPLongMonth[10]);c.IMSMONTHNAME12(b.SAPLongMonth[11])}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultDateTimeFormatLocaleFactory=function(){a.DefaultDateTimeFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultDateTimeFormatLocaleFactory"};a.DefaultDateTimeFormatLocaleFactory=sap.common.globalization.extend(a.DefaultDateTimeFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultDateTimeFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultDateTimeFormat()};a.DefaultDateTimeFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){a.DefaultDateTimeFormatLocaleFactory.superclass.applySAPDateTokensAndSeparators(c);var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPTimeSeparator){c.IMTimeSeparator(b.SAPTimeSeparator)}};a.DefaultDateTimeFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var c=a.DefaultDateTimeFormatLocaleFactory.superclass.getPredefinedDateParseLocaleString();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&c){c.IMTimeSeparator(b)}return c};a.DefaultDateTimeFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var d=a.DefaultDateTimeFormatLocaleFactory.superclass.getPredefinedDateDisplayLocaleString();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&d){d.IMTimeSeparator(b)}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c&&d){d.IMAMTOKEN(c[0]);d.IMPMTOKEN(c[1])}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultShortDateFormatLocaleFactory=function(){a.DefaultShortDateFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultShortDateFormatLocaleFactory"};a.DefaultShortDateFormatLocaleFactory=sap.common.globalization.extend(a.DefaultShortDateFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultShortDateFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultShorDateFormat()};a.DefaultShortDateFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){a.DefaultShortDateFormatLocaleFactory.superclass.applySAPDateTokensAndSeparators(c);var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPDateSeparator){c.IMDateSeparator(b.SAPDateSeparator)}};a.DefaultShortDateFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var b=a.DefaultShortDateFormatLocaleFactory.superclass.getPredefinedDateParseLocaleString();var c=sap.common.globalization.GlobalizationDateConstant.getDateSeparator();if(c&&b){b.IMDateSeparator(c)}return b};a.DefaultShortDateFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var b=a.DefaultShortDateFormatLocaleFactory.superclass.getPredefinedDateDisplayLocaleString();var c=sap.common.globalization.GlobalizationDateConstant.getDateSeparator();if(c&&b){b.IMDateSeparator(c)}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo=function(){this.__className="sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo";this._trueString="";this._falseString=""};sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo.prototype.trueString=function(a){if(arguments.length>=1){this._trueString=a;return this}else{return this._trueString}};sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo.prototype.falseString=function(a){if(arguments.length>=1){this._falseString=a;return this}else{return this._falseString}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationPreference");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateForPVL");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");var a=sap.common.globalization.defaultFormat;a.CustomDateFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory";this._dateParseLocaleInfo=null;this._dateDisplayLocaleInfo=null};a.CustomDateFormatLocaleFactory._instance=null;a.CustomDateFormatLocaleFactory.getInstance=function(){if(!a.CustomDateFormatLocaleFactory._instance){a.CustomDateFormatLocaleFactory._instance=new a.CustomDateFormatLocaleFactory()}return a.CustomDateFormatLocaleFactory._instance};a.CustomDateFormatLocaleFactory.prototype.getDateParseLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().getDateParseLocaleInfo()};a.CustomDateFormatLocaleFactory.prototype.getDateDisplayLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().getDateDisplayLocaleInfo()};a.CustomDateFormatLocaleFactory.prototype.createFDate=function(){var b=sap.common.globalization.GlobalizationPreference.getInstance().pvl()&&!sap.common.globalization.utils.StringUtil.isBlankString(sap.common.globalization.GlobalizationPreference.getInstance().pvl());if(b){return new sap.common.globalization.numericFormat.FDateForPVL(this.getDateParseLocaleInfo(),this.getDateDisplayLocaleInfo())}else{return new sap.common.globalization.numericFormat.FDate(null,this.getDateDisplayLocaleInfo())}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory"};var a=sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory;a._instance=null;a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory()}return a._instance};a.prototype.getNumericParseLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().numericParseLocaleInfo()};a.prototype.getNumericDisplayLocaleInfo=function(){return sap.common.globalization.numericFormat.FLocalization.getInstance().numericDisplayLocaleInfo()};a.prototype.createFNumber=function(){return new sap.common.globalization.numericFormat.FNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo())}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl=function(){this.__className="sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl";this._IMDateSeparator=null;this._IMSMONTHNAME1=null;this._IMSMONTHNAME2=null;this._IMSMONTHNAME3=null;this._IMSMONTHNAME4=null;this._IMSMONTHNAME5=null;this._IMSMONTHNAME6=null;this._IMSMONTHNAME7=null;this._IMSMONTHNAME8=null;this._IMSMONTHNAME9=null;this._IMSMONTHNAME10=null;this._IMSMONTHNAME11=null;this._IMSMONTHNAME12=null;this._IMSABBREVMONTHNAME1=null;this._IMSABBREVMONTHNAME2=null;this._IMSABBREVMONTHNAME3=null;this._IMSABBREVMONTHNAME4=null;this._IMSABBREVMONTHNAME5=null;this._IMSABBREVMONTHNAME6=null;this._IMSABBREVMONTHNAME7=null;this._IMSABBREVMONTHNAME8=null;this._IMSABBREVMONTHNAME9=null;this._IMSABBREVMONTHNAME10=null;this._IMSABBREVMONTHNAME11=null;this._IMSABBREVMONTHNAME12=null;this._IMSDAYNAME1=null;this._IMSDAYNAME2=null;this._IMSDAYNAME3=null;this._IMSDAYNAME4=null;this._IMSDAYNAME5=null;this._IMSDAYNAME6=null;this._IMSDAYNAME7=null;this._IMSABBREVDAYNAME1=null;this._IMSABBREVDAYNAME2=null;this._IMSABBREVDAYNAME3=null;this._IMSABBREVDAYNAME4=null;this._IMSABBREVDAYNAME5=null;this._IMSABBREVDAYNAME6=null;this._IMSABBREVDAYNAME7=null;this._IMTimeSeparator=null;this._IMAMToken=null;this._IMPMToken=null;this._IMEraToken=null};var a=sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl;a.prototype.IMDateSeparator=function(b){if(arguments.length>=1){this._IMDateSeparator=b}else{return this._IMDateSeparator}};a.prototype.IMSMONTHNAME1=function(b){if(arguments.length>=1){this._IMSMONTHNAME1=b}else{return this._IMSMONTHNAME1}};a.prototype.IMSMONTHNAME2=function(b){if(arguments.length>=1){this._IMSMONTHNAME2=b}else{return this._IMSMONTHNAME2}};a.prototype.IMSMONTHNAME3=function(b){if(arguments.length>=1){this._IMSMONTHNAME3=b}else{return this._IMSMONTHNAME3}};a.prototype.IMSMONTHNAME4=function(b){if(arguments.length>=1){this._IMSMONTHNAME4=b}else{return this._IMSMONTHNAME4}};a.prototype.IMSMONTHNAME5=function(b){if(arguments.length>=1){this._IMSMONTHNAME5=b}else{return this._IMSMONTHNAME5}};a.prototype.IMSMONTHNAME6=function(b){if(arguments.length>=1){this._IMSMONTHNAME6=b}else{return this._IMSMONTHNAME6}};a.prototype.IMSMONTHNAME7=function(b){if(arguments.length>=1){this._IMSMONTHNAME7=b}else{return this._IMSMONTHNAME7}};a.prototype.IMSMONTHNAME8=function(b){if(arguments.length>=1){this._IMSMONTHNAME8=b}else{return this._IMSMONTHNAME8}};a.prototype.IMSMONTHNAME9=function(b){if(arguments.length>=1){this._IMSMONTHNAME9=b}else{return this._IMSMONTHNAME9}};a.prototype.IMSMONTHNAME10=function(b){if(arguments.length>=1){this._IMSMONTHNAME10=b}else{return this._IMSMONTHNAME10}};a.prototype.IMSMONTHNAME11=function(b){if(arguments.length>=1){this._IMSMONTHNAME11=b}else{return this._IMSMONTHNAME11}};a.prototype.IMSMONTHNAME12=function(b){if(arguments.length>=1){this._IMSMONTHNAME12=b}else{return this._IMSMONTHNAME12}};a.prototype.IMSABBREVMONTHNAME1=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME1=b}else{return this._IMSABBREVMONTHNAME1}};a.prototype.IMSABBREVMONTHNAME2=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME2=b}else{return this._IMSABBREVMONTHNAME2}};a.prototype.IMSABBREVMONTHNAME3=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME3=b}else{return this._IMSABBREVMONTHNAME3}};a.prototype.IMSABBREVMONTHNAME4=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME4=b}else{return this._IMSABBREVMONTHNAME4}};a.prototype.IMSABBREVMONTHNAME5=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME5=b}else{return this._IMSABBREVMONTHNAME5}};a.prototype.IMSABBREVMONTHNAME6=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME6=b}else{return this._IMSABBREVMONTHNAME6}};a.prototype.IMSABBREVMONTHNAME7=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME7=b}else{return this._IMSABBREVMONTHNAME7}};a.prototype.IMSABBREVMONTHNAME8=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME8=b}else{return this._IMSABBREVMONTHNAME8}};a.prototype.IMSABBREVMONTHNAME9=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME9=b}else{return this._IMSABBREVMONTHNAME9}};a.prototype.IMSABBREVMONTHNAME10=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME10=b}else{return this._IMSABBREVMONTHNAME10}};a.prototype.IMSABBREVMONTHNAME11=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME11=b}else{return this._IMSABBREVMONTHNAME11}};a.prototype.IMSABBREVMONTHNAME12=function(b){if(arguments.length>=1){this._IMSABBREVMONTHNAME12=b}else{return this._IMSABBREVMONTHNAME12}};a.prototype.IMSDAYNAME1=function(b){if(arguments.length>=1){this._IMSDAYNAME1=b}else{return this._IMSDAYNAME1}};a.prototype.IMSDAYNAME2=function(b){if(arguments.length>=1){this._IMSDAYNAME2=b}else{return this._IMSDAYNAME2}};a.prototype.IMSDAYNAME3=function(b){if(arguments.length>=1){this._IMSDAYNAME3=b}else{return this._IMSDAYNAME3}};a.prototype.IMSDAYNAME4=function(b){if(arguments.length>=1){this._IMSDAYNAME4=b}else{return this._IMSDAYNAME4}};a.prototype.IMSDAYNAME5=function(b){if(arguments.length>=1){this._IMSDAYNAME5=b}else{return this._IMSDAYNAME5}};a.prototype.IMSDAYNAME6=function(b){if(arguments.length>=1){this._IMSDAYNAME6=b}else{return this._IMSDAYNAME6}};a.prototype.IMSDAYNAME7=function(b){if(arguments.length>=1){this._IMSDAYNAME7=b}else{return this._IMSDAYNAME7}};a.prototype.IMSABBREVDAYNAME1=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME1=b}else{return this._IMSABBREVDAYNAME1}};a.prototype.IMSABBREVDAYNAME2=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME2=b}else{return this._IMSABBREVDAYNAME2}};a.prototype.IMSABBREVDAYNAME3=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME3=b}else{return this._IMSABBREVDAYNAME3}};a.prototype.IMSABBREVDAYNAME4=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME4=b}else{return this._IMSABBREVDAYNAME4}};a.prototype.IMSABBREVDAYNAME5=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME5=b}else{return this._IMSABBREVDAYNAME5}};a.prototype.IMSABBREVDAYNAME6=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME6=b}else{return this._IMSABBREVDAYNAME6}};a.prototype.IMSABBREVDAYNAME7=function(b){if(arguments.length>=1){this._IMSABBREVDAYNAME7=b}else{return this._IMSABBREVDAYNAME7}};a.prototype.IMTimeSeparator=function(b){if(arguments.length>=1){this._IMTimeSeparator=b}else{return this._IMTimeSeparator}};a.prototype.IMAMTOKEN=function(b){if(arguments.length>=1){this._IMAMToken=b}else{return this._IMAMToken}};a.prototype.IMPMTOKEN=function(b){if(arguments.length>=1){this._IMPMToken=b}else{return this._IMPMToken}};a.prototype.IMEraToken=function(b){if(arguments.length>=1){this._IMEraToken=b}else{return this._IMEraToken}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl=function(){this.__className="sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl";this._IMDateSeparator=null;this._IMTimeSeparator=null};sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl.prototype.IMDateSeparator=function(a){if(arguments.length>=1){this._IMDateSeparator=a}else{return this._IMDateSeparator}};sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl.prototype.IMTimeSeparator=function(a){if(arguments.length>=1){this._IMTimeSeparator=a}else{return this._IMTimeSeparator}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.require("sap.common.globalization.GlobalizationBooleanConstant");sap.common.globalization.require("sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo");sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory=function(){this.className="sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory";this._displayLocale=null};var a=sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory;a._instance=null;a.getInstance=function(){if(!a._instance){a._instance=new sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory()}return a._instance};a.prototype.getBooleanDisplayLocaleInfo=function(){if(!this._displayLocale){this._displayLocale=new sap.common.globalization.defaultFormat.BooleanDisplayLocaleInfo();var b=sap.common.globalization.GlobalizationBooleanConstant.getBooleanStrings();if(b){this._displayLocale.trueString(b[0]);this._displayLocale.falseString(b[1])}}return this._displayLocale}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.require("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultNumber");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory=function(){this.__className="sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory.DefaultNumericFormatLocaleFactory";this._numericParseLocaleInfo=null;this._numericDisplayLocaleInfo=null};var a=sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory;a.prototype.getNumericParseLocaleInfo=function(){var b=sap.common.globalization;if(!this._numericParseLocaleInfo){this._numericParseLocaleInfo=new b.defaultFormat.NumericParseLocaleInfoImpl(b.GlobalizationNumericConstant.getParseThousandSeparator(),b.GlobalizationNumericConstant.getParseDecimalSeparator(),b.GlobalizationNumericConstant.getParseCurrencySymbol())}return this._numericParseLocaleInfo};a.prototype.getNumericDisplayLocaleInfo=function(){if(!this._numericDisplayLocaleInfo){var e=",";var d=".";var b=sap.common.globalization;if(b.numericFormat.FLocalization.getInstance().SAPThousandsSeparator){e=b.numericFormat.FLocalization.getInstance().SAPThousandsSeparator}else{if(b.GlobalizationNumericConstant.getDisplayThousandSeparator()){e=b.GlobalizationNumericConstant.getDisplayThousandSeparator()}}if(b.numericFormat.FLocalization.getInstance().SAPDecimalSeparator){d=b.numericFormat.FLocalization.getInstance().SAPDecimalSeparator}else{if(b.GlobalizationNumericConstant.getDisplayDecimalSeparator()){d=b.GlobalizationNumericConstant.getDisplayDecimalSeparator()}}var c=(b.numericFormat.FLocalization.getInstance().SAPCurrencySymbol?b.numericFormat.FLocalization.getInstance().SAPCurrencySymbol:this.displayCurrencySymbol());this._numericDisplayLocaleInfo=new b.defaultFormat.NumericDisplayLocaleInfoImpl(e,d,c)}return this._numericDisplayLocaleInfo};a.prototype.createFNumber=function(){var b=new sap.common.globalization.numericFormat.FDefaultNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo());if(sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry(sap.common.globalization.GlobalizationNumericConstant.getActualLocaleForDefaultNumberFormat())){b.groupingStrategy(sap.common.globalization.numericFormat.TwoDigitGroupingStrategy.instance())}return b};a.prototype.getDefaultNumericFormat=function(){if(sap.common.globalization.GlobalizationNumericConstant.getDefaultNumberFormat()){return sap.common.globalization.GlobalizationNumericConstant.getDefaultNumberFormat()}return"#,##0.###"};a.prototype.displayCurrencySymbol=function(){return""}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationDateConstant");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");var a=sap.common.globalization.defaultFormat;a.DefaultTimeFormatLocaleFactory=function(){a.DefaultTimeFormatLocaleFactory.superclass.constructor.apply(this);this.__className="sap.common.globalization.defaultFormat.DefaultTimeFormatLocaleFactory"};a.DefaultTimeFormatLocaleFactory=sap.common.globalization.extend(a.DefaultTimeFormatLocaleFactory,a.DefaultDateFormatLocaleFactory);a.DefaultTimeFormatLocaleFactory.prototype.getDefaultDateFormat=function(){return sap.common.globalization.GlobalizationDateConstant.getDefaultTimeFormat()};a.DefaultTimeFormatLocaleFactory.prototype.applySAPDateTokensAndSeparators=function(c){var b=sap.common.globalization.numericFormat.FLocalization.getInstance();if(c&&b&&b.SAPTimeSeparator){c.IMTimeSeparator(b.SAPTimeSeparator)}};a.DefaultTimeFormatLocaleFactory.prototype.getPredefinedDateParseLocaleString=function(){var c=new sap.common.globalization.defaultFormat.DateParseLocaleInfoImpl();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&c){c.IMTimeSeparator(b)}return c};a.DefaultTimeFormatLocaleFactory.prototype.getPredefinedDateDisplayLocaleString=function(){var d=new sap.common.globalization.defaultFormat.DateDisplayLocaleInfoImpl();var b=sap.common.globalization.GlobalizationDateConstant.getTimeSeparator();if(b&&d){d.IMTimeSeparator(b)}var c=sap.common.globalization.GlobalizationDateConstant.getAmPmToken();if(c&&d){d.IMAMTOKEN(c[0]);d.IMPMTOKEN(c[1])}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl");sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl=function(a,b,c){if(a){this._thousandsSeparator=a}else{this._thousandsSeparator=","}if(b){this._decimalSeparator=b}else{this._decimalSeparator="."}if(c){this._currencySymbol=c}else{this._currencySymbol=""}};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.thousandsSeparator=function(){return this._thousandsSeparator};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.decimalSeparator=function(){return this._decimalSeparator};sap.common.globalization.defaultFormat.NumericDisplayLocaleInfoImpl.prototype.currencySymbol=function(){return this._currencySymbol}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl");sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl=function(a,b,c){if(a){this._thousandsSeparator=a}else{this._thousandsSeparator=","}if(b){this._decimalSeparator=b}else{this._decimalSeparator="."}if(c){this._currencySymbol=c}else{this._currencySymbol=""}};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.thousandsSeparator=function(){return this._thousandsSeparator};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.decimalSeparator=function(){return this._decimalSeparator};sap.common.globalization.defaultFormat.NumericParseLocaleInfoImpl.prototype.currencySymbol=function(){return this._currencySymbol}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateA");var a=sap.common.globalization.numericFormat;a.FDateA=function(b){this.__className="sap.common.globalization.numericFormat.FDateA";this._full=true;this._displayLocale=b};a.FDateA.prototype.parse=function(e,d){var c=0;var b=d.toLowerCase();if(b.substr(0,5)=="am/pm"){e.miltime=false;c=5}if(b.substr(0,3)=="a/p"){e.miltime=false;this._full=false;c=3}return c};a.FDateA.prototype.display=function(c){var b="";if(c.getHrs()>=12){if(this._full){b=this._displayLocale.IMPMTOKEN()?this._displayLocale.IMPMTOKEN():"PM"}else{b=this._displayLocale.IMPMTOKEN()?this._displayLocale.IMPMTOKEN():"P"}}else{if(this._full){b=this._displayLocale.IMAMTOKEN()?this._displayLocale.IMAMTOKEN():"AM"}else{b=this._displayLocale.IMAMTOKEN()?this._displayLocale.IMAMTOKEN():"A"}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");var a=sap.common.globalization.numericFormat;a.FDateB=function(b){this.__className="sap.common.globalization.numericFormat.FDateB";this._displayLocaleInfo=b;this.mask=undefined;this.c="";this._tok={};this.initializeTokenMap()};a.FDateB.prototype.parse=function(f,e){var c=2;this.c=e.charAt(1);var d=this.createTokenFormatter(this._tok[this.c]);if(this.c=="M"||this.c=="m"){d.bminute=true}var b=d.parse(f,e.substring(1));if(b>0){this.mask=d;c+=b}return c};a.FDateB.prototype.display=function(c){var b;if(this.c=="S"||this.c=="s"){b=86400*c.serial}else{if(this.c=="M"||this.c=="m"){b=1440*c.serial}else{if(this.c=="H"||this.c=="h"){b=24*c.serial}}}this.mask.value=Math.floor(b);return this.mask.display(c)};a.FDateB.prototype.createTokenFormatter=function(b){var c=null;switch(b){case a.FDateM:c=new a.FDateM(this._displayLocaleInfo);break;case a.FDateH:c=new a.FDateH();break;case a.FDateS:c=new a.FDateS();break;default:}return c};a.FDateB.prototype.initializeTokenMap=function(){this._tok.M=a.FDateM;this._tok.H=a.FDateH;this._tok.S=a.FDateS;this._tok.m=a.FDateM;this._tok.h=a.FDateH;this._tok.s=a.FDateS}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateD");var a=sap.common.globalization.numericFormat;a.FDateD=function(b){this.__className="sap.common.globalization.numericFormat.FDateD";this._placeholders=0;this._displayLocaleInfo=b};a.FDateD.prototype.getPlaceholders=function(){return this._placeholders};a.FDateD.prototype.parse=function(d,c){var b=0;while(c.charAt(b)=="D"||c.charAt(b)=="d"){b++}if(b<=2){this._placeholders=b}else{if(b==3){this._placeholders=-1}else{if(b>=4){this._placeholders=-2}}}return b};a.FDateD.prototype.display=function(d){var c="";if(this._placeholders>=0){c+=d.getDate();while(c.length<this._placeholders){c="0"+c}}else{var b=d.getDay();if(this._placeholders==-1){c+=this.getShortDay(b)}else{c+=this.getDay(b)}}return c};a.FDateD.prototype.getDay=function(b){if(b==0){return this._displayLocaleInfo.IMSDAYNAME7()}if(b==1){return this._displayLocaleInfo.IMSDAYNAME1()}if(b==2){return this._displayLocaleInfo.IMSDAYNAME2()}if(b==3){return this._displayLocaleInfo.IMSDAYNAME3()}if(b==4){return this._displayLocaleInfo.IMSDAYNAME4()}if(b==5){return this._displayLocaleInfo.IMSDAYNAME5()}if(b==6||b==-1){return this._displayLocaleInfo.IMSDAYNAME6()}return this._displayLocaleInfo.IMSDAYNAME6()};a.FDateD.prototype.getShortDay=function(b){if(b==0){return this._displayLocaleInfo.IMSABBREVDAYNAME7().split(".")[0]}if(b==1){return this._displayLocaleInfo.IMSABBREVDAYNAME1().split(".")[0]}if(b==2){return this._displayLocaleInfo.IMSABBREVDAYNAME2().split(".")[0]}if(b==3){return this._displayLocaleInfo.IMSABBREVDAYNAME3().split(".")[0]}if(b==4){return this._displayLocaleInfo.IMSABBREVDAYNAME4().split(".")[0]}if(b==5){return this._displayLocaleInfo.IMSABBREVDAYNAME5().split(".")[0]}if(b==6||b==-1){return this._displayLocaleInfo.IMSABBREVDAYNAME6().split(".")[0]}return this._displayLocaleInfo.IMSABBREVDAYNAME6().split(".")[0]}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateH");var a=sap.common.globalization.numericFormat;a.FDateH=function(){this.__className="sap.common.globalization.numericFormat.FDateH";this.placeholders=1;this.number=0;this.value=NaN};sap.common.globalization.numericFormat.FDateH.prototype.parse=function(d,c){var b=0;this.number=d.HNum+1;d.HBool=true;d.HNum=this.number;while(c.charAt(b)=="H"||c.charAt(b)=="h"){b++}if(b>1){this.placeholders=2}return b};a.FDateH.prototype.display=function(d){var b;if(isNaN(this.value)){b=d.getHrs()}else{b=this.value}if(!d.miltime){if(this.number==d.HNum){if(b>11){b=b-12}if(b==0){b=12}}}var c=""+b;while(this.placeholders>c.length){c="0"+c}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateM");var a=sap.common.globalization.numericFormat;a.FDateM=function(b){this.__className="sap.common.globalization.numericFormat.FDateM";this.bminute=false;this.placeholders=0;this.value=undefined;this._displayLocaleInfo=b};a.FDateM.prototype.parse=function(d,c){var b=0;while(c.charAt(b)=="M"||c.charAt(b)=="m"){b++}if(b<=2){if(d.HBool){this.bminute=true}d.HBool=false;this.placeholders=b}else{if(b==3){this.placeholders=-1}else{if(b==4){this.placeholders=-2}else{if(b==5){this.placeholders=-3}}}}return b};a.FDateM.prototype.display=function(g){var f="";if(this.placeholders>=0&&this.bminute){if(this.value==undefined){f+=g.getMin()}else{f+=this.value}while(f.length<this.placeholders){f="0"+f}}else{var d=g.getMonth();if(this.placeholders>=0){d++;f+=d;while(f.length<this.placeholders){f="0"+f}}else{var e=new Array(this._displayLocaleInfo.IMSMONTHNAME1(),this._displayLocaleInfo.IMSMONTHNAME2(),this._displayLocaleInfo.IMSMONTHNAME3(),this._displayLocaleInfo.IMSMONTHNAME4(),this._displayLocaleInfo.IMSMONTHNAME5(),this._displayLocaleInfo.IMSMONTHNAME6(),this._displayLocaleInfo.IMSMONTHNAME7(),this._displayLocaleInfo.IMSMONTHNAME8(),this._displayLocaleInfo.IMSMONTHNAME9(),this._displayLocaleInfo.IMSMONTHNAME10(),this._displayLocaleInfo.IMSMONTHNAME11(),this._displayLocaleInfo.IMSMONTHNAME12());var c=new Array(this._displayLocaleInfo.IMSABBREVMONTHNAME1(),this._displayLocaleInfo.IMSABBREVMONTHNAME2(),this._displayLocaleInfo.IMSABBREVMONTHNAME3(),this._displayLocaleInfo.IMSABBREVMONTHNAME4(),this._displayLocaleInfo.IMSABBREVMONTHNAME5(),this._displayLocaleInfo.IMSABBREVMONTHNAME6(),this._displayLocaleInfo.IMSABBREVMONTHNAME7(),this._displayLocaleInfo.IMSABBREVMONTHNAME8(),this._displayLocaleInfo.IMSABBREVMONTHNAME9(),this._displayLocaleInfo.IMSABBREVMONTHNAME10(),this._displayLocaleInfo.IMSABBREVMONTHNAME11(),this._displayLocaleInfo.IMSABBREVMONTHNAME12());if(this.placeholders==-1){f+=c[d]}else{if(this.placeholders==-3){f+=e[d].substring(0,1)}else{f+=e[d]}}}}return f}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.numericFormat.FDateS=function(){this.__className="sap.common.globalization.numericFormat.FDateS";this.splaceholders=1;this.msplaceholders=0;this.value=undefined;this.IMDecimalSeparator=sap.common.globalization.numericFormat.FLocalization.getInstance().IMDecimalSeparator;this.ms=NaN};sap.common.globalization.numericFormat.FDateS.prototype.parse=function(g,f){var e=0;var c=g.mask;var b=c.length;for(var d=b-1;d>=0;d--){if(c[d].__className=="sap.common.globalization.numericFormat.FDateM"){c[d].bminute=true;break}}while(f.charAt(e)=="S"||f.charAt(e)=="s"){e++}if(e>1){this.splaceholders=2}if(f.charAt(e)==this.IMDecimalSeparator.charAt(0)&&f.charAt(e+1)=="0"){e++;while(f.charAt(e)=="0"){e++;this.msplaceholders++}if(this.msplaceholders>g.ms){g.ms=this.msplaceholders}}return e};sap.common.globalization.numericFormat.FDateS.prototype.display=function(d){var c;if(this.value==undefined){c=""+d.getSec()}else{c=""+this.value}while(this.splaceholders>c.length){c="0"+c}if(this.msplaceholders>0){var a=d.getMS()/Math.pow(10,(3-this.msplaceholders));if(this.msplaceholders<this.ms){a=Math.floor(a)}else{a=Math.round(a)}var b=""+a;while(b.length<this.msplaceholders){b="0"+b}c+=this.IMDecimalSeparator+b}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateSep");sap.common.globalization.numericFormat.FDateSep=function(a,b){this.__className="sap.common.globalization.numericFormat.FDateSep";this._parseLocalInfo=a;this._displayLocaleInfo=b};sap.common.globalization.numericFormat.FDateSep.prototype.parse=function(c,b){var a=b.charAt(0);if(this._displayLocaleInfo.IMDateSeparator()!=null&&(a=="."||a=="/"||a=="-")){return 1}else{return 0}};sap.common.globalization.numericFormat.FDateSep.prototype.display=function(b){var a=this._displayLocaleInfo.IMDateSeparator();return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.numericFormat.FDateY=function(){this.__className="sap.common.globalization.numericFormat.FDateY";this.placeholders=2};sap.common.globalization.numericFormat.FDateY.prototype.parse=function(c,b){var a=0;while(b.charAt(a)=="Y"||b.charAt(a)=="y"){a++}if(a>2){this.placeholders=4}return a};sap.common.globalization.numericFormat.FDateY.prototype.display=function(b){var a=""+b.getYear();if(this.placeholders<4){a=a.substring(2)}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FText");sap.common.globalization.numericFormat.FText=function(){this.__className="sap.common.globalization.numericFormat.FText";this.color=NaN;this.format="";this.condnum=0;this.cond={};this.numAts=0;this.mask=new Array()};sap.common.globalization.numericFormat.FText.tokens="@";sap.common.globalization.numericFormat.FText.prototype.parse=function(b){var a=0;while(b.charAt(a)=="@"){a++}this.numAts=a;return a};sap.common.globalization.numericFormat.FText.prototype.display=function(a){var c="";for(var b=0;b<this.numAts;b++){c+=a.toString()}return c}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateA");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateSep");var a=sap.common.globalization.numericFormat;a.FDate=function(c,b){this.__className="sap.common.globalization.numericFormat.FDate";this.date;this.color;this.condnum=-Infinity;this.cond;this.tok={};this.HBool=false;this.serial=37500;this.format="";this.HNum=0;this.miltime=true;this.ms=0;this.mask=new Array();this._parseLocaleInfo=c;this._displayLocaleInfo=b;this._inputIsDateType=false;this.initializeTokenMap()};a.FDate.tokens="MDYHSAmdyhsa";a.FDate.prototype.parse=function(f){var g=f.charAt(0);if(g=="."){g=f.substring(0,2)}var e=this.tok[g];if(e==undefined){return 0}var d=this.createTokenFormatter(e);var b=d.parse(this,f);if(b>0){this.mask.push(d)}else{b=0}return b};a.FDate.prototype.display=function(d){this.setNumber(d);var c=this.mask;var b=c.length;var f="";for(var e=0;e<b;e++){if((typeof c[e])=="object"){f+=c[e].display(this)}else{f+=c[e]}}return f};a.FDate.prototype.getMaskClone=function(){if(this.mask){return this.mask.slice()}return[]};a.FDate.prototype.getYear=function(){if(this._inputIsDateType){return this.date.getFullYear()}if(this.serial>=0&&this.serial<1){return 1900}return this.date.getUTCFullYear()};a.FDate.prototype.getMonth=function(){if(this._inputIsDateType){return this.date.getMonth()}if(this.serial>=0&&this.serial<1){return 0}return this.date.getUTCMonth()};a.FDate.prototype.getDate=function(){if(this._inputIsDateType){return this.date.getDate()}if(this.serial>=0&&this.serial<1){return 0}if(this.serial==60){return 29}return this.date.getUTCDate()};a.FDate.prototype.getDay=function(){var b=this.date.getUTCDay();if(this.serial<60){b--}if(this._inputIsDateType){b=this.date.getDay()}return b};a.FDate.prototype.getHrs=function(){if(this._inputIsDateType){return this.date.getHours()}return this.date.getUTCHours()};a.FDate.prototype.getMin=function(){if(this._inputIsDateType){return this.date.getMinutes()}return this.date.getUTCMinutes()};a.FDate.prototype.getSec=function(){if(this._inputIsDateType){return this.date.getSeconds()}return this.date.getUTCSeconds()};a.FDate.prototype.getMS=function(){if(this._inputIsDateType){return this.date.getMilliseconds()}return this.date.getUTCMilliseconds()};a.FDate.prototype.setNumber=function(b){if(b instanceof Date){var e=new Date();e.setTime(b.getTime());this.date=e;this._inputIsDateType=true;this.serial=37500;return}this._inputIsDateType=false;this.serial=b;if(b<60){b++}var d=b*86400*1000;var c=d-(2209161600*1000);this.date=new Date(c);if(this.date.getUTCMilliseconds()>=500){this.date.setUTCMilliseconds(this.date.getUTCMilliseconds()+500)}};a.FDate.prototype.createTokenFormatter=function(b){var c=null;switch(b){case a.FDateM:c=new a.FDateM(this._displayLocaleInfo);break;case a.FDateD:c=new a.FDateD(this._displayLocaleInfo);break;case a.FDateY:c=new a.FDateY();break;case a.FDateH:c=new a.FDateH();break;case a.FDateS:c=new a.FDateS();break;case a.FDateSep:c=new a.FDateSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case a.FTimeSep:c=new a.FTimeSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case a.FDateA:c=new a.FDateA(this._displayLocaleInfo);break;case a.FDateB:c=new a.FDateB(this._displayLocaleInfo);break;default:}return c};a.FDate.prototype.initializeTokenMap=function(){this.tok.M=a.FDateM;this.tok.D=a.FDateD;this.tok.Y=a.FDateY;this.tok.H=a.FDateH;this.tok.S=a.FDateS;this.tok.A=a.FDateA;this.tok.m=a.FDateM;this.tok.d=a.FDateD;this.tok.y=a.FDateY;this.tok.h=a.FDateH;this.tok.s=a.FDateS;this.tok.a=a.FDateA;this.tok["["]=a.FDateB;this.tok["/"]=a.FDateSep;this.tok[".M"]=a.FDateSep;this.tok[".D"]=a.FDateSep;this.tok[".Y"]=a.FDateSep;this.tok["-"]=a.FDateSep;this.tok[".m"]=a.FTimeSep;this.tok[".h"]=a.FTimeSep;this.tok[".s"]=a.FTimeSep;this.tok[":"]=a.FTimeSep};a.FDate.prototype.toString=function(){var b="[FDate]\n";for(var c in this){b=b+c+" = "+this[c]+"\n"}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDateForPVL");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.numericFormat.FDateForPVL=function(c,b){sap.common.globalization.numericFormat.FDateForPVL.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FDateForPVL"};sap.common.globalization.numericFormat.FDateForPVL=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDateForPVL,sap.common.globalization.numericFormat.FDate);var a=sap.common.globalization.numericFormat.FDateForPVL;a.prototype.createTokenFormatter=function(b){var c=null;if(b==sap.common.globalization.numericFormat.FDefaultDateD){c=new sap.common.globalization.numericFormat.FDefaultDateD(this._displayLocaleInfo)}else{c=a.superclass.createTokenFormatter.call(this,b)}return c};a.prototype.initializeTokenMap=function(){a.superclass.initializeTokenMap.apply(this);this.tok.d=sap.common.globalization.numericFormat.FDefaultDateD;this.tok.D=sap.common.globalization.numericFormat.FDefaultDateD}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.numericFormat.FDefaultDateSep=function(b,a){sap.common.globalization.numericFormat.FDefaultDateSep.superclass.constructor.call(this,b,a);this.__className="sap.common.globalization.numericFormat.FDefaultDateSep"};sap.common.globalization.numericFormat.FDefaultDateSep=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateSep,sap.common.globalization.numericFormat.FDateSep);sap.common.globalization.numericFormat.FDefaultDateSep.prototype.parse=function(e,d){var a=this._parseLocalInfo.IMDateSeparator();if(a){var c=a.length;var b=d.substr(0,c);if(b==a){return c}else{return 0}}return 0}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.numericFormat.FDefaultDateH=function(){sap.common.globalization.numericFormat.FDefaultDateH.superclass.constructor.apply(this);this.__className="sap.common.globalization.numericFormat.FDefaultDateH";this._is12HourStyle=false};sap.common.globalization.numericFormat.FDefaultDateH=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateH,sap.common.globalization.numericFormat.FDateH);sap.common.globalization.numericFormat.FDefaultDateH.prototype.parse=function(c,b){var a=0;this.number=c.HNum+1;c.HBool=true;c.HNum=this.number;this._is12HourStyle=true;while(b.charAt(a)=="H"||b.charAt(a)=="h"){if(b.charAt(a)=="H"){this._is12HourStyle=false}a++}if(a>1){this.placeholders=2}return a};sap.common.globalization.numericFormat.FDefaultDateH.prototype.display=function(c){var a;if(isNaN(this.value)){a=c.getHrs()}else{a=this.value}if(this._is12HourStyle){if(this.number==c.HNum){if(a>11){a=a-12}if(a==0){a=12}}}var b=""+a;while(this.placeholders>b.length){b="0"+b}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateG");sap.common.globalization.require("sap.common.globalization.utils.StringUtil");sap.common.globalization.numericFormat.FDefaultDateG=function(a){this.__className="sap.common.globalization.numericFormat.FDefaultDateG";this._displayLocInfo=a;this._count=0};sap.common.globalization.numericFormat.FDefaultDateG.prototype.parse=function(c,b){if(b&&!sap.common.globalization.utils.StringUtil.isBlankString(b)){if(this._displayLocInfo&&this._displayLocInfo.IMEraToken()){this._count=0;var a=b.charAt(this._count);while(a=="G"){this._count++;a=b.charAt(this._count)}return this._count}}return 0};sap.common.globalization.numericFormat.FDefaultDateG.prototype.display=function(b){var a="";if(this._displayLocInfo&&this._displayLocInfo.IMEraToken()){switch(this._count){case 4:case 5:case 1:case 2:case 3:default:a=this._displayLocInfo.IMEraToken()}}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FDefaultDateD=function(b){sap.common.globalization.numericFormat.FDefaultDateD.superclass.constructor.call(this,b);this.__className="sap.common.globalization.numericFormat.FDefaultDateD"};sap.common.globalization.numericFormat.FDefaultDateD=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDateD,sap.common.globalization.numericFormat.FDateD);a.FDefaultDateD.prototype.getShortDay=function(b){if(b==0){return this._displayLocaleInfo.IMSABBREVDAYNAME7()}if(b==1){return this._displayLocaleInfo.IMSABBREVDAYNAME1()}if(b==2){return this._displayLocaleInfo.IMSABBREVDAYNAME2()}if(b==3){return this._displayLocaleInfo.IMSABBREVDAYNAME3()}if(b==4){return this._displayLocaleInfo.IMSABBREVDAYNAME4()}if(b==5){return this._displayLocaleInfo.IMSABBREVDAYNAME5()}if(b==6||b==-1){return this._displayLocaleInfo.IMSABBREVDAYNAME6()}return this._displayLocaleInfo.IMSABBREVDAYNAME6()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateG");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateM");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateD");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateY");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateH");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateS");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateA");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateB");sap.common.globalization.require("sap.common.globalization.numericFormat.FDateSep");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultDateSep");sap.common.globalization.numericFormat.FDefaultDate=function(b,a){sap.common.globalization.numericFormat.FDefaultDate.superclass.constructor.apply(this,[b,a]);this.__className="sap.common.globalization.numericFormat.FDefaultDate"};sap.common.globalization.numericFormat.FDefaultDate=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultDate,sap.common.globalization.numericFormat.FDate);sap.common.globalization.numericFormat.FDefaultDate.prototype.createTokenFormatter=function(a){var c=sap.common.globalization.numericFormat;var b=null;switch(a){case c.FDateM:b=new c.FDateM(this._displayLocaleInfo);break;case c.FDefaultDateD:b=new c.FDefaultDateD(this._displayLocaleInfo);break;case c.FDateY:b=new c.FDateY();break;case c.FDefaultDateH:b=new c.FDefaultDateH();break;case c.FDateS:b=new c.FDateS();break;case c.FDefaultDateSep:b=new c.FDefaultDateSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case c.FTimeSep:b=new c.FTimeSep(this._parseLocaleInfo,this._displayLocaleInfo);break;case c.FDateA:b=new c.FDateA(this._displayLocaleInfo);break;case c.FDateB:b=new c.FDateB(this._displayLocaleInfo);break;case c.FDefaultDateG:b=new c.FDefaultDateG(this._displayLocaleInfo);break;default:}return b};sap.common.globalization.numericFormat.FDefaultDate.prototype.initializeTokenMap=function(){var a=sap.common.globalization.numericFormat;this.tok.M=a.FDateM;this.tok.Y=a.FDateY;this.tok.S=a.FDateS;this.tok.A=a.FDateA;this.tok.m=a.FDateM;this.tok.y=a.FDateY;this.tok.s=a.FDateS;this.tok.a=a.FDateA;this.tok["["]=a.FDateB;this.tok.D=a.FDefaultDateD;this.tok.d=a.FDefaultDateD;this.tok.H=a.FDefaultDateH;this.tok.h=a.FDefaultDateH;if(this._parseLocaleInfo&&this._parseLocaleInfo.IMDateSeparator){if(this._parseLocaleInfo.IMDateSeparator()=="."){this.tok[".M"]=a.FDefaultDateSep;this.tok[".D"]=a.FDefaultDateSep;this.tok[".d"]=a.FDefaultDateSep;this.tok[".Y"]=a.FDefaultDateSep;this.tok[".y"]=a.FDefaultDateSep}else{this.tok[this._parseLocaleInfo.IMDateSeparator()]=a.FDefaultDateSep}}if(this._parseLocaleInfo&&this._parseLocaleInfo.IMTimeSeparator()){if(this._parseLocaleInfo.IMDateSeparator=="."){this.tok[".m"]=a.FTimeSep;this.tok[".h"]=a.FTimeSep;this.tok[".H"]=a.FTimeSep;this.tok[".s"]=a.FTimeSep;this.tok[".S"]=a.FTimeSep}else{this.tok[this._parseLocaleInfo.IMTimeSeparator()]=a.FTimeSep}}this.tok.G=a.FDefaultDateG}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.DefaultGroupingStrategy");sap.common.globalization.numericFormat.DefaultGroupingStrategy=function(){this.__className="sap.common.globalization.numericFormat.DefaultGroupingStrategy"};var a=sap.common.globalization.numericFormat.DefaultGroupingStrategy;a._instance=new sap.common.globalization.numericFormat.DefaultGroupingStrategy();a.prototype.nextGroupDigits=function(){return 2};a.instance=function(){return a._instance}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.Helper");sap.common.globalization.require("sap.common.globalization.numericFormat.FLocalization");sap.common.globalization.numericFormat.Helper.isThousandsSeparator=function(d,b,e){var e=e||null;var a=(e?e:sap.common.globalization.numericFormat.FLocalization.getInstance().IMThousandsSeparator());if(a.charAt(0)==" "){for(var c=b;c<d.length;++c){if(d.charAt(c)!=" "){break}}if(d.charAt(c)=="â‚¬"||d.charAt(c)=="Ð³"||d.charAt(c)=="k"||d.charAt(c)=="S"||d.charAt(c)=="L"||d.charAt(c)=="m"||d.charAt(c)=="K"){return false}}return(d.charAt(b)==a.charAt(0))}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FCurr");sap.common.globalization.numericFormat.FCurr=function(b,a){this.__className="sap.common.globalization.numericFormat.FCurr";this.display="";this._parseLocaleInfo=b;this._displayLocaleInfo=a};sap.common.globalization.numericFormat.FCurr.prototype.parse=function(c,b){var a=this._parseLocaleInfo.currencySymbol();var d=this._displayLocaleInfo.currencySymbol();if(d!=null&&a!=null&&a!=d){c.currencyIndex=c.mask.length;this.display=d;return a.length}else{return 0}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNum0");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNum0=function(a){this.__className="sap.common.globalization.numericFormat.FNum0";this._parseLocaleInfo=a;this.display="0"};sap.common.globalization.numericFormat.FNum0.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"){if(!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.scale=e.scale/1000000}}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumP");sap.common.globalization.numericFormat.FNumP=function(){this.__className="sap.common.globalization.numericFormat.FNumP";this.display="%"};sap.common.globalization.numericFormat.FNumP.prototype.parse=function(b,a){b.scale=b.scale*100;return -1}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumQ");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNumQ=function(a){this.__className="sap.common.globalization.numericFormat.FNumQ";this._parseLocaleInfo=a;this.display=" "};sap.common.globalization.numericFormat.FNumQ.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"&&!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumS");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FNumS=function(a){this.__className="sap.common.globalization.numericFormat.FNumS";this._parseLocaleInfo=a;this.display=""};sap.common.globalization.numericFormat.FNumS.prototype.parse=function(e,d){var b=1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"){if(!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}else{e.scale=e.scale/1000000}}else{e.bcomma=true}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FPeriod");sap.common.globalization.require("sap.common.globalization.numericFormat.Helper");sap.common.globalization.numericFormat.FPeriod=function(b,a){this.__className="sap.common.globalization.numericFormat.FPeriod";this._parseLocaleInfo=b;this.display=a.decimalSeparator()};sap.common.globalization.numericFormat.FPeriod.prototype.parse=function(e,d){var b=-1;if(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,1,this._parseLocaleInfo.thousandsSeparator())){var f=d.charAt(2);if(f!="#"&&f!="?"&&f!="0"&&!sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,2,this._parseLocaleInfo.thousandsSeparator())){e.scale=e.scale/1000}var a=1;while(sap.common.globalization.numericFormat.Helper.isThousandsSeparator(d,a++,this._parseLocaleInfo.thousandsSeparator())){b++}}if(e.period==-1){e.period=e.mask.length}return b}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.numericFormat.FNumber=function(d,c){this.__className="sap.common.globalization.numericFormat.FNumber";this.scale=1;this.bcomma=false;this.bsign=true;this.period=-1;this.numfore=undefined;this.numaft=undefined;this.sign="";this.mask=new Array();this.mfore=new Array();this.maft=new Array();this.format=undefined;this.currencyIndex=-1;this._tok={};this._tok["#"]=sap.common.globalization.numericFormat.FNumS;this._tok["?"]=sap.common.globalization.numericFormat.FNumQ;this._tok["%"]=sap.common.globalization.numericFormat.FNumP;this._tok["0"]=sap.common.globalization.numericFormat.FNum0;this.condnum=0;this.cond={};var a=d.decimalSeparator();this._tok[a]=sap.common.globalization.numericFormat.FPeriod;this.IMDecimalSeparator=a;this.parseLocaleInfo=d;this.displayLocaleInfo=c;this.IMThousandsSeparator=c.thousandsSeparator();var b=this.parseLocaleInfo.currencySymbol();if(b){this._tok[b]=sap.common.globalization.numericFormat.FCurr}};sap.common.globalization.numericFormat.FNumber.tokens="#?%0";sap.common.globalization.numericFormat.FNumber.prototype.parse=function(f){if(this.format==null){this.format=f}var g=f.charAt(0);if(this._tok[g]==undefined||(g==this.IMDecimalSeparator&&(f.length>1&&f.charAt(1)!="#"&&f.charAt(1)!="0"))){return 0}var e=this.createTokenFormatter(this._tok[g]);var d=e.parse(this,f);if(this.period>1){var a=true}if(d>0){var b=this.mask.length;this.mask.push(e);if(this.currencyIndex!=b){if(this.period==-1){this.mfore.push(b)}else{this.maft.push(b)}}}else{if(d<0){this.mask.push(e);d=Math.abs(d)}else{d=0}}return d};sap.common.globalization.numericFormat.FNumber.prototype.display=function(k){if(typeof(k)!="number"){return k}if(isNaN(k)||!isFinite(k)){return k}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(k);var q=new Array();var e=this.mfore.length;var c=3;var m=this.period;var f=(m==-1)?(this.mask.length):m;var g;var o;var p;for(var h=e-1;h>=0;h--){m=this.mfore[h];for(var g=f-1;g>m;g--){p=this.mask[g];if((typeof p)=="object"){q.unshift(p.display)}else{q.unshift(p)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){q.unshift(this.IMThousandsSeparator);c=2}}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}else{var n=this.mask[m].display;if(n.length!=0){if(this.bcomma&&c--==0){q.unshift(this.IMThousandsSeparator);c=2}q.unshift(this.mask[m].display)}}f=m}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){q.unshift(this.IMThousandsSeparator);c=2}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}}else{q.unshift(this.numfore)}}p=this.mask;if(this.currencyIndex!=-1){h=0}for(g=f-1;g>=0;g--){if((typeof p[h])=="object"){q.unshift(this.mask[g].display)}else{q.unshift(this.mask[g])}}e=this.mask.length;h=(this.period==-1)?(e):(this.period);m=0;for(;h<e;h++){if((typeof p[h])=="object"){if(this.maft[m]==h){m++;if(this.numaft.length>0){q.push(this.numaft.charAt(0));this.numaft=this.numaft.substring(1)}else{q.push(p[h].display)}}else{q.push(p[h].display)}}else{q.push(p[h])}}var b;if(this.bsign){b=this.sign+q.join("")}else{b=q.join("")}return b};sap.common.globalization.numericFormat.FNumber.prototype.setNumber=function(c){var a=this.maft.length;if(this.format.charAt(this.format.length-1)=="%"){var d=Math.pow(10,a+1+2);c=c*d;c=c/(d/this.scale)}else{c=c*this.scale}c=this.excel_round(c,a);var b=c.toString().split(".");this.numfore=b[0];if(this.numfore.charAt(0)=="-"){this.sign="-";this.numfore=this.numfore.substring(1)}else{this.sign=""}if(this.numfore.charAt(0)=="0"){this.numfore=this.numfore.substring(1)}this.numaft=undefined;if(b.length<2){this.numaft=""}else{this.numaft=b[1]}};sap.common.globalization.numericFormat.FNumber.prototype.createTokenFormatter=function(a){var b=null;var c=sap.common.globalization.numericFormat;switch(a){case c.FNumS:b=new sap.common.globalization.numericFormat.FNumS(this.parseLocaleInfo);break;case c.FNumQ:b=new sap.common.globalization.numericFormat.FNumQ(this.parseLocaleInfo);break;case c.FNumP:b=new sap.common.globalization.numericFormat.FNumP();break;case c.FNum0:b=new sap.common.globalization.numericFormat.FNum0(this.parseLocaleInfo);break;case c.FPeriod:b=new sap.common.globalization.numericFormat.FPeriod(this.parseLocaleInfo,this.displayLocaleInfo);break;case c.FCurr:b=new sap.common.globalization.numericFormat.FCurr(this.parseLocaleInfo,this.displayLocaleInfo);break;default:}return b};sap.common.globalization.numericFormat.FNumber.prototype.excel_round=function(a,f){var d=false;if(a<0){d=true;a=-a}var e,c;var b=0;var g=Math.pow(10,f);e=Math.floor(a*g);b=(e+0.5)/g;c=(e+1)/g;e/=g;a=(a<b)?e:c;if(d){a=-a}return a}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.DefaultGroupingStrategy");sap.common.globalization.require("sap.common.globalization.numericFormat.FPeriod");sap.common.globalization.numericFormat.FDefaultNumber=function(b,a){sap.common.globalization.numericFormat.FDefaultNumber.superclass.constructor.apply(this,[b,a]);this.__className="sap.common.globalization.numericFormat.FDefaultDateNumber";this._groupingStrategy=sap.common.globalization.numericFormat.DefaultGroupingStrategy.instance()};sap.common.globalization.numericFormat.FDefaultNumber=sap.common.globalization.extend(sap.common.globalization.numericFormat.FDefaultNumber,sap.common.globalization.numericFormat.FNumber);sap.common.globalization.numericFormat.FDefaultNumber.prototype.display=function(m){if(typeof(m)!="number"){return m}if(isNaN(m)||!isFinite(m)){return m}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(m);var r=new Array();var e=this.mfore.length;var c=3;var n=this.period;var g=(n==-1)?(this.mask.length):n;var h;var p;var q;for(var k=e-1;k>=0;k--){n=this.mfore[k];for(h=g-1;h>n;h--){q=this.mask[h];if((typeof q)=="object"){r.unshift(q.display)}else{r.unshift(q)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}}p=this.numfore.length-1;r.unshift(this.numfore.charAt(p));this.numfore=this.numfore.substring(0,p)}else{var o=this.mask[n].display;if(o.length!=0){if(this.bcomma&&c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}r.unshift(this.mask[n].display)}}g=n}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){r.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}p=this.numfore.length-1;r.unshift(this.numfore.charAt(p));this.numfore=this.numfore.substring(0,p)}}else{r.unshift(this.numfore)}}q=this.mask;if(this.currencyIndex!=-1){k=0}for(h=g-1;h>=0;h--){if((typeof q[k])=="object"){r.unshift(this.mask[h].display)}else{r.unshift(this.mask[h])}}e=this.mask.length;k=(this.period==-1)?(e):(this.period);n=0;var f=false;for(;k<e;k++){if((typeof q[k])=="object"){if(q[k].__className=="sap.common.globalization.numericFormat.FPeriod"&&!this.numaft){f=true;continue}if(this.maft[n]==k){n++;if(this.numaft.length>0){if(!f){r.push(this.numaft.charAt(0))}this.numaft=this.numaft.substring(1)}else{r.push(q[k].display)}}else{r.push(q[k].display)}}else{r.push(q[k])}}var b;if(this.bsign){b=this.sign+r.join("")}else{b=r.join("")}return b};sap.common.globalization.numericFormat.FDefaultNumber.prototype.groupingStrategy=function(a){if(this._groupingStrategy!=a){this._groupingStrategy=a}}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");sap.common.globalization.require("sap.common.globalization.numericFormat.FDate");sap.common.globalization.require("sap.common.globalization.numericFormat.FText");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory");sap.common.globalization.numericFormat.FT=function(c,b){this.__className="sap.common.globalization.numericFormat.FT";this._hasCustomCondition=false;this.color=undefined;this.o=new Array();this._dateLocaleFactory=c?c:sap.common.globalization.defaultFormat.CustomDateFormatLocaleFactory.getInstance();this._numericLocaleFactory=b?b:sap.common.globalization.defaultFormat.CustomNumericFormatLocaleFactory.getInstance();this._isParsedSuccess=false};var a=sap.common.globalization.numericFormat.FT;a.ftarr=new Array();a._CONDITION_TOKENS="=<>";a._equals=function(d,c){return(d==c)};a._neq=function(d,c){return(d!=c)};a._gthan=function(d,c){return(d>c)};a._gte=function(d,c){return(d>=c)};a._lthan=function(d,c){return(d<c)};a._lte=function(d,c){return(d<=c)};a._CONDITIONS={"=":sap.common.globalization.numericFormat.FT._equals,"<>":sap.common.globalization.numericFormat.FT._neq,"<":sap.common.globalization.numericFormat.FT._lthan,"<=":sap.common.globalization.numericFormat.FT._lte,">":sap.common.globalization.numericFormat.FT._gthan,">=":sap.common.globalization.numericFormat.FT._gte};a._COLORS={black:0,blue:255,cyan:65535,green:65280,magenta:16711935,red:16711680,white:16777215,yellow:16776960};a.prototype._isNumeric=function(e){var d="#?%";var b=d.length;for(var c=0;c<b;c++){if(e.indexOf(d.charAt(c))!=-1){return true}}return false};a.prototype.isParsedSuccess=function(){return this._isParsedSuccess};a.prototype.parse=function(x){this._isParsedSuccess=false;this._hasCustomCondition=false;var z=x;var t=x.length;var B;var d=0;for(var w=0;w<t;w++){B=z.charAt(w);if(B=='"'){while(w<t){if(z.charAt(++w)=='"'&&z.charAt(w-1)!="\\"){break}}continue}if(B=="\\"||B=="_"||B=="*"){w++;continue}if(B==";"){if(this.o[d]==undefined){this.o[d]=new sap.common.globalization.numericFormat.FText()}this.o[d].format=z.substring(0,w);d++;z=z.substring(w+1);t=z.length;w=-1;continue}if(B=="["){var r="";while(z.charAt(++w)!="]"&&(w<t)){r+=z.charAt(w)}var A=r.length;var n=r.charAt(0);if(n=="s"||n=="m"||n=="h"){for(var v=1;v<A;v++){var k=r.charAt(v);if(n!=k){break}}if(v==A){if(this.o[d]==undefined){this.o[d]=this._dateLocaleFactory.createFDate()}}}}var D=sap.common.globalization.numericFormat.FDate.tokens.indexOf(B);if(sap.common.globalization.numericFormat.FDate.tokens.indexOf(B)!=-1&&!this._isNumeric(x)){if(this.o[d]==undefined){this.o[d]=this._dateLocaleFactory.createFDate()}this.o[d]=this._dateLocaleFactory.createFDate()}else{if(sap.common.globalization.numericFormat.FNumber.tokens.indexOf(B)!=-1){if(this.o[d]==undefined){this.o[d]=this._numericLocaleFactory.createFNumber();if(d==1){this.o[d].bsign=false}}}else{if(sap.common.globalization.numericFormat.FText.tokens.indexOf(B)!=-1){if(this.o[d]==undefined){this.o[d]=new sap.common.globalization.numericFormat.FText()}}}}}if(this.o[d]==undefined){this.o[d]=this._numericLocaleFactory.createFNumber()}else{this._isParsedSuccess=true}this.o[d].format=z;var g=this.o.length;for(var s=0;s<g;s++){var m=this.o[s];m.condnum=m.condnum||0;if(s==0){m.cond=sap.common.globalization.numericFormat.FT._gthan}else{if(s==1){m.cond=sap.common.globalization.numericFormat.FT._lthan}else{if(s==2){m.cond=sap.common.globalization.numericFormat.FT._equals}}}var C=m.mask;var h=false;z=m.format;t=z.length;for(var v=0;v<t;v++){B=z.charAt(v);if(B=='"'){h=!h;continue}if(B=="\\"){v++;B=z.charAt(v);C.push(B);continue}if(h){C.push(B);continue}if(B=="*"){v++;continue}if(B=="_"){v++;C.push(" ");continue}if(B=="["){n=z.charAt(v+1);k=z.charAt(v+2);if(n=="$"&&k!="-"){var y=z.indexOf("]",v+1);if(y!=-1){var u=z.substring(v+1,y);if(r.indexOf("-")!=-1){u=r.substring(1,r.indexOf("-"))}else{u=r.substring(1)}for(var b=0;b<u.length;++b){C.push(u.charAt(b))}v=y;continue}}else{r=z.substring(v+1);r=r.substring(0,r.indexOf("]")).toLowerCase();if(sap.common.globalization.numericFormat.FT._COLORS[r]!=undefined){m.color=sap.common.globalization.numericFormat.FT._COLORS[r];v+=r.length+1;continue}else{if(r=="h"||r=="m"||r=="s"){}else{var e=1;while(r.charAt(e)!==""&&sap.common.globalization.numericFormat.FT._CONDITION_TOKENS.indexOf(r.charAt(e))!=-1){e++}var p=r.substring(0,e);if(sap.common.globalization.numericFormat.FT._CONDITIONS[p]!=undefined){m.cond=sap.common.globalization.numericFormat.FT._CONDITIONS[p];m.condnum=r.substring(e);v+=r.length+1;this._hasCustomCondition=true;continue}else{v+=r.length+1;continue}}}}}var E=m.parse(z.substring(v));if(E>0){v+=E-1}else{C.push(B)}}}};a.prototype.display=function(d){var f=this.o[0];var b=this.o.length;if(b>3&&sap.common.globalization.utils.BaseUtils.isString(d)){f=this.o[3]}else{if(this._hasCustomCondition&&b>0){if(b<=3){f=this.o[b-1]}else{f=this.o[2]}}for(var e=0;e<3&&e<b;e++){var c=this.o[e];if(c&&c.cond(d,c.condnum)){f=c;break}}}if(!isNaN(f.color)){this.color=f.color}else{this.color=undefined}return(f.display(d))};a.prototype.getNumericDisplayLoacleInfo=function(){return this._numericLocaleFactory.getNumericDisplayLocaleInfo()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTBoolean");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.NumericFormatManager;");sap.common.globalization.require("sap.common.globalization.numericFormat.FT");sap.common.globalization.require("sap.common.globalization.utils.BaseUtils");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FTBoolean=function(c,b){a.FTBoolean.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FTBoolean";c=c||null;b=b||null;this._booleanLocaleFactory=sap.common.globalization.defaultFormat.DefaultBooleanFormatLocaleFactory.getInstance()};a.FTBoolean.BOOLEAN_TOKEN="SAP_DEFAULT_BOOLEAN_FORMAT";a.FTBoolean=sap.common.globalization.extend(a.FTBoolean,a.FT);sap.common.globalization.numericFormat.FTBoolean.prototype.parse=function(b){if(b==a.FTBoolean.BOOLEAN_TOKEN){this.o[0]=this}else{this.o[0]=null}};sap.common.globalization.numericFormat.FTBoolean.prototype.display=function(b){var d=String(b);var c=this._booleanLocaleFactory.getBooleanDisplayLocaleInfo();if(c&&this.o[0].__className=="sap.common.globalization.numericFormat.FTBoolean"){if(sap.common.globalization.utils.BaseUtils.isBoolean(b)){d=b?c.trueString():c.falseString()}else{if(sap.common.globalization.utils.BaseUtils.isString(b)&&(String(b).toLowerCase()=="true"||String(b).toLowerCase()=="false")){d=String(b).toLowerCase()=="true"?c.trueString():c.falseString()}}}return d}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTimeSep");sap.common.globalization.numericFormat.FTimeSep=function(b,a){this._parseLocale=b;this._displayLocale=a};sap.common.globalization.numericFormat.FTimeSep.prototype.parse=function(c,b){var a=b.charAt(0);if(this._displayLocale.IMTimeSeparator()!=null&&(a==":"||a==".")){return 1}else{return 0}};sap.common.globalization.numericFormat.FTimeSep.prototype.display=function(a){return this._displayLocale.IMTimeSeparator()}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FTUtil");sap.common.globalization.numericFormat.FTUtil.isBooleanFT=function(a){return a&&(a.__className=="sap.common.globalization.numericFormat.FTBoolean")};sap.common.globalization.numericFormat.FTUtil.isDate=function(a){return a&&a.o&&a.o.length>0&&(a.o[0].__className=="sap.common.globalization.numericFormat.FDate")}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.numericFormat.TwoDigitGroupingStrategy=function(){this.__className="sap.common.globalization.numericFormat.TwoDigitGroupingStrategy"};var a=sap.common.globalization.numericFormat.TwoDigitGroupingStrategy;a._instance=new sap.common.globalization.numericFormat.TwoDigitGroupingStrategy();a.prototype.nextGroupDigits=function(){return 1};a.instance=function(){return a._instance}})();(function(){sap.common.globalization.declare("sap.common.globalization.numericFormat.FDefaultCurrencyNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.FNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.DefaultGroupingStrategy");var a=sap.common.globalization.numericFormat;sap.common.globalization.numericFormat.FDefaultCurrencyNumber=function(c,b){sap.common.globalization.numericFormat.FDefaultCurrencyNumber.superclass.constructor.apply(this,[c,b]);this.__className="sap.common.globalization.numericFormat.FDefaultCurrencyNumber";this._groupingStrategy=a.DefaultGroupingStrategy.instance()};a.FDefaultCurrencyNumber=sap.common.globalization.extend(a.FDefaultCurrencyNumber,a.FNumber);a.FDefaultCurrencyNumber.prototype.display=function(k){if(typeof(k)!="number"){return k}if(isNaN(k)||!isFinite(k)){return k}if(this.mfore.length==0&&this.maft.length==0){return this.format}this.setNumber(k);var q=new Array();var e=this.mfore.length;var c=3;var m=this.period;var f=(m==-1)?(this.mask.length):m;var g;var o;var p;for(var h=e-1;h>=0;h--){m=this.mfore[h];for(g=f-1;g>m;g--){p=this.mask[g];if((typeof p)=="object"){q.unshift(p.display)}else{q.unshift(p)}}if(this.numfore.length>0){if(this.bcomma){if(c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}else{var n=this.mask[m].display;if(n.length!=0){if(this.bcomma&&c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}q.unshift(this.mask[m].display)}}f=m}if(this.numfore.length>0){if(this.bcomma){while(this.numfore.length>0){if(c--==0){q.unshift(this.IMThousandsSeparator);c=this._groupingStrategy.nextGroupDigits()}o=this.numfore.length-1;q.unshift(this.numfore.charAt(o));this.numfore=this.numfore.substring(0,o)}}else{q.unshift(this.numfore)}}p=this.mask;if(this.currencyIndex!=-1){h=0}for(g=f-1;g>=0;g--){if((typeof this.mask[g])=="object"){q.unshift(this.mask[g].display)}else{q.unshift(this.mask[g])}}e=this.mask.length;h=(this.period==-1)?(e):(this.period);m=0;for(;h<e;h++){if((typeof p[h])=="object"){if(this.maft[m]==h){m++;if(this.numaft.length>0){q.push(this.numaft.charAt(0));this.numaft=this.numaft.substring(1)}else{q.push(p[h].display)}}else{q.push(p[h].display)}}else{q.push(p[h])}}var b;if(this.bsign){b=this.sign+q.join("")}else{b=q.join("")}return b};a.FDefaultCurrencyNumber.prototype.groupingStrategy=function(b){if(this._groupingStrategy!=b){this._groupingStrategy=b}}})();(function(){sap.common.globalization.declare("sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.defaultFormat.DefaultNumericFormatLocaleFactory");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericConstant");sap.common.globalization.require("sap.common.globalization.numericFormat.FDefaultCurrencyNumber");sap.common.globalization.require("sap.common.globalization.numericFormat.TwoDigitGroupingStrategy");sap.common.globalization.require("sap.common.globalization.GlobalizationNumericUtil");sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory=function(b){sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory.superclass.constructor.apply(this,[b]);this.__className="sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory";this._displayCurrencySymbol=null;if(sap.common.globalization.defaultFormat.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat(b)){this._parseCurrencySymbol(b)}};var a=sap.common.globalization.defaultFormat;a.DefaultCurrencyFormatLocaleFactory=sap.common.globalization.extend(a.DefaultCurrencyFormatLocaleFactory,a.DefaultNumericFormatLocaleFactory);a.DefaultCurrencyFormatLocaleFactory.REG_DEFAULT_CURRENCY_FORMAT=new RegExp('^SAP_DEFAULT_CURRENCY_FORMAT(;".*")?$',"i");a.DefaultCurrencyFormatLocaleFactory.isDefaultCurrencyFormat=function(b){return a.DefaultCurrencyFormatLocaleFactory.REG_DEFAULT_CURRENCY_FORMAT.test(b)};a.DefaultCurrencyFormatLocaleFactory.prototype.getDefaultCurrencyFormat=function(){return sap.common.globalization.GlobalizationNumericConstant.getDefaultCurrencyFormat()};a.DefaultCurrencyFormatLocaleFactory.prototype._parseCurrencySymbol=function(b){if("SAP_DEFAULT_CURRENCY_FORMAT"==b){this._displayCurrencySymbol=""}else{this._displayCurrencySymbol=b.slice(29,b.length-1)}};a.DefaultCurrencyFormatLocaleFactory.prototype.createFNumber=function(){var b=new sap.common.globalization.numericFormat.FDefaultCurrencyNumber(this.getNumericParseLocaleInfo(),this.getNumericDisplayLocaleInfo());if(sap.common.globalization.GlobalizationNumericUtil.isTwoDigitGroupingCountry(sap.common.globalization.GlobalizationNumericConstant.getActualLocaleForDefaultCurrencyFormat())){b._groupingStrategy=sap.common.globalization.numericFormat.TwoDigitGroupingStrategy.instance()}return b};a.DefaultCurrencyFormatLocaleFactory.prototype.displayCurrencySymbol=function(){return this._displayCurrencySymbol}})();(function() {
	if (!Array.prototype.indexOf) {
		Array.prototype.indexOf = function(searchElement /* , fromIndex */) {
			"use strict";
			if (this == null) {
				throw new TypeError();
			}
			var t = Object(this);
			var len = t.length >>> 0;
			if (len === 0) {
				return -1;
			}
			var n = 0;
			if (arguments.length > 0) {
				n = Number(arguments[1]);
				if (n != n) { // shortcut for verifying if it's NaN
					n = 0;
				} else if (n != 0 && n != Infinity && n != -Infinity) {
					n = (n > 0 || -1) * Math.floor(Math.abs(n));
				}
			}
			if (n >= len) {
				return -1;
			}
			var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
			for (; k < len; k++) {
				if (k in t && t[k] === searchElement) {
					return k;
				}
			}
			return -1;
		}
	}

	if (!Array.prototype.lastIndexOf) {
		Array.prototype.lastIndexOf = function(searchElement /* , fromIndex */) {
			"use strict";

			if (this == null)
				throw new TypeError();

			var t = Object(this);
			var len = t.length >>> 0;
			if (len === 0)
				return -1;

			var n = len;
			if (arguments.length > 1) {
				n = Number(arguments[1]);
				if (n != n)
					n = 0;
				else if (n != 0 && n != (1 / 0) && n != -(1 / 0))
					n = (n > 0 || -1) * Math.floor(Math.abs(n));
			}

			var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);

			for (; k >= 0; k--) {
				if (k in t && t[k] === searchElement)
					return k;
			}
			return -1;
		};
	}

	if (!Array.prototype.filter) {
		Array.prototype.filter = function(fun /* , thisp */) {
			"use strict";

			if (this == null)
				throw new TypeError();

			var t = Object(this);
			var len = t.length >>> 0;
			if (typeof fun != "function")
				throw new TypeError();

			var res = [];
			var thisp = arguments[1];
			for ( var i = 0; i < len; i++) {
				if (i in t) {
					var val = t[i]; // in case fun mutates this
					if (fun.call(thisp, val, i, t))
						res.push(val);
				}
			}

			return res;
		};
	}

	// Production steps of ECMA-262, Edition 5, 15.4.4.18
	// Reference: http://es5.github.com/#x15.4.4.18
	if (!Array.prototype.forEach) {

		Array.prototype.forEach = function(callback, thisArg) {

			var T, k;

			if (this == null) {
				throw new TypeError("this is null or not defined");
			}

			// 1. Let O be the result of calling ToObject passing the |this|
			// value as the argument.
			var O = Object(this);

			// 2. Let lenValue be the result of calling the Get internal method
			// of O with the argument "length".
			// 3. Let len be ToUint32(lenValue).
			var len = O.length >>> 0; // Hack to convert O.length to a UInt32

			// 4. If IsCallable(callback) is false, throw a TypeError exception.
			// See: http://es5.github.com/#x9.11
			if ({}.toString.call(callback) != "[object Function]") {
				throw new TypeError(callback + " is not a function");
			}

			// 5. If thisArg was supplied, let T be thisArg; else let T be
			// undefined.
			if (thisArg) {
				T = thisArg;
			}

			// 6. Let k be 0
			k = 0;

			// 7. Repeat, while k < len
			while (k < len) {

				var kValue;

				// a. Let Pk be ToString(k).
				// This is implicit for LHS operands of the in operator
				// b. Let kPresent be the result of calling the HasProperty
				// internal method of O with argument Pk.
				// This step can be combined with c
				// c. If kPresent is true, then
				if (k in O) {

					// i. Let kValue be the result of calling the Get internal
					// method of O with argument Pk.
					kValue = O[k];

					// ii. Call the Call internal method of callback with T as
					// the this value and
					// argument list containing kValue, k, and O.
					callback.call(T, kValue, k, O);
				}
				// d. Increase k by 1.
				k++;
			}
			// 8. return undefined
		};
	}

	if (!Array.prototype.every) {
		Array.prototype.every = function(fun /* , thisp */) {
			"use strict";

			if (this == null)
				throw new TypeError();

			var t = Object(this);
			var len = t.length >>> 0;
			if (typeof fun != "function")
				throw new TypeError();

			var thisp = arguments[1];
			for ( var i = 0; i < len; i++) {
				if (i in t && !fun.call(thisp, t[i], i, t))
					return false;
			}

			return true;
		};
	}

	// Production steps of ECMA-262, Edition 5, 15.4.4.19
	// Reference: http://es5.github.com/#x15.4.4.19
	if (!Array.prototype.map) {
		Array.prototype.map = function(callback, thisArg) {

			var T, A, k;

			if (this == null) {
				throw new TypeError(" this is null or not defined");
			}

			// 1. Let O be the result of calling ToObject passing the |this|
			// value as the argument.
			var O = Object(this);

			// 2. Let lenValue be the result of calling the Get internal method
			// of O with the argument "length".
			// 3. Let len be ToUint32(lenValue).
			var len = O.length >>> 0;

			// 4. If IsCallable(callback) is false, throw a TypeError exception.
			// See: http://es5.github.com/#x9.11
			if ({}.toString.call(callback) != "[object Function]") {
				throw new TypeError(callback + " is not a function");
			}

			// 5. If thisArg was supplied, let T be thisArg; else let T be
			// undefined.
			if (thisArg) {
				T = thisArg;
			}

			// 6. Let A be a new array created as if by the expression new
			// Array(len) where Array is
			// the standard built-in constructor with that name and len is the
			// value of len.
			A = new Array(len);

			// 7. Let k be 0
			k = 0;

			// 8. Repeat, while k < len
			while (k < len) {

				var kValue, mappedValue;

				// a. Let Pk be ToString(k).
				// This is implicit for LHS operands of the in operator
				// b. Let kPresent be the result of calling the HasProperty
				// internal method of O with argument Pk.
				// This step can be combined with c
				// c. If kPresent is true, then
				if (k in O) {

					// i. Let kValue be the result of calling the Get internal
					// method of O with argument Pk.
					kValue = O[k];

					// ii. Let mappedValue be the result of calling the Call
					// internal method of callback
					// with T as the this value and argument list containing
					// kValue, k, and O.
					mappedValue = callback.call(T, kValue, k, O);

					// iii. Call the DefineOwnProperty internal method of A with
					// arguments
					// Pk, Property Descriptor {Value: mappedValue, Writable:
					// true, Enumerable: true, Configurable: true},
					// and false.

					// In browsers that support Object.defineProperty, use the
					// following:
					// Object.defineProperty(A, Pk, { value: mappedValue,
					// writable: true, enumerable: true, configurable: true });

					// For best browser support, use the following:
					A[k] = mappedValue;
				}
				// d. Increase k by 1.
				k++;
			}

			// 9. return A
			return A;
		};
	}

	if (!Array.prototype.some) {
		Array.prototype.some = function(fun /* , thisp */) {
			"use strict";

			if (this == null)
				throw new TypeError();

			var t = Object(this);
			var len = t.length >>> 0;
			if (typeof fun != "function")
				throw new TypeError();

			var thisp = arguments[1];
			for ( var i = 0; i < len; i++) {
				if (i in t && fun.call(thisp, t[i], i, t))
					return true;
			}

			return false;
		};
	}

	if (!Array.prototype.reduce) {
		Array.prototype.reduce = function reduce(accumulator) {
			if (this === null || this === undefined)
				throw new TypeError("Object is null or undefined");
			var i = 0, l = this.length >> 0, curr;

			if (typeof accumulator !== "function") // ES5 : "If
				// IsCallable(callbackfn) is
				// false, throw a TypeError
				// exception."
				throw new TypeError("First argument is not callable");

			if (arguments.length < 2) {
				if (l === 0)
					throw new TypeError("Array length is 0 and no second argument");
				curr = this[0];
				i = 1; // start accumulating at the second element
			} else
				curr = arguments[1];

			while (i < l) {
				if (i in this)
					curr = accumulator.call(undefined, curr, this[i], i, this);
				++i;
			}

			return curr;
		};
	}

	if (!Array.prototype.reduceRight) {
		Array.prototype.reduceRight = function(callbackfn /* , initialValue */) {
			"use strict";

			if (this == null)
				throw new TypeError();

			var t = Object(this);
			var len = t.length >>> 0;
			if (typeof callbackfn != "function")
				throw new TypeError();

			// no value to return if no initial value, empty array
			if (len === 0 && arguments.length === 1)
				throw new TypeError();

			var k = len - 1;
			var accumulator;
			if (arguments.length >= 2) {
				accumulator = arguments[1];
			} else {
				do {
					if (k in this) {
						accumulator = this[k--];
						break;
					}

					// if array contains no values, no initial value to return
					if (--k < 0)
						throw new TypeError();
				} while (true);
			}

			while (k >= 0) {
				if (k in t)
					accumulator = callbackfn.call(undefined, accumulator, t[k], k, t);
				k--;
			}

			return accumulator;
		};
	}

	if (!Function.prototype.bind) {
		Function.prototype.bind = function(oThis) {
			if (typeof this !== "function") {
				// closest thing possible to the ECMAScript 5 internal
				// IsCallable function
				throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
			}

			var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function() {
			}, fBound = function() {
				return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice
						.call(arguments)));
			};

			fNOP.prototype = this.prototype;
			fBound.prototype = new fNOP();

			return fBound;
		};
	}

	if (!Object.create) {
		// this is the polyfill implementation covers the main use case
		Object.create = function(o) {
			if (arguments.length > 1) {
				throw new Error('Object.create implementation only accepts the first parameter.');
			}
			function F() {
			}
			F.prototype = o;
			return new F();
		};
	}

	function defineProperties(obj, properties) {
		// this is the polyfill implementation covers the main use case
		function convertToDescriptor(desc) {
			function hasProperty(obj, prop) {
				return Object.prototype.hasOwnProperty.call(obj, prop);
			}

			function isCallable(v) {
				// NB: modify as necessary if other values than functions are
				// callable.
				return typeof v === "function";
			}

			if (typeof desc !== "object" || desc === null)
				throw new TypeError("bad desc");

			var d = {};
			if (hasProperty(desc, "enumerable"))
				d.enumerable = !!obj.enumerable;
			if (hasProperty(desc, "configurable"))
				d.configurable = !!obj.configurable;
			if (hasProperty(desc, "value"))
				d.value = obj.value;
			if (hasProperty(desc, "writable"))
				d.writable = !!desc.writable;
			if (hasProperty(desc, "get")) {
				var g = desc.get;
				if (!isCallable(g) && g !== "undefined")
					throw new TypeError("bad get");
				d.get = g;
			}
			if (hasProperty(desc, "set")) {
				var s = desc.set;
				if (!isCallable(s) && s !== "undefined")
					throw new TypeError("bad set");
				d.set = s;
			}

			if (("get" in d || "set" in d) && ("value" in d || "writable" in d))
				throw new TypeError("identity-confused descriptor");

			return d;
		}

		if (typeof obj !== "object" || obj === null)
			throw new TypeError("bad obj");

		properties = Object(properties);
		var keys = Object.keys(properties);
		var descs = [];
		for ( var i = 0; i < keys.length; i++)
			descs.push([ keys[i], convertToDescriptor(properties[keys[i]]) ]);
		for ( var i = 0; i < descs.length; i++)
			Object.defineProperty(obj, descs[i][0], descs[i][1]);

		return obj;
	}

	if (!Object.keys) {
		Object.keys = (function() {
			var hasOwnProperty = Object.prototype.hasOwnProperty, hasDontEnumBug = !({
				toString : null
			}).propertyIsEnumerable('toString'), dontEnums = [ 'toString', 'toLocaleString', 'valueOf',
					'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor' ], dontEnumsLength = dontEnums.length

			return function(obj) {
				if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null)
					throw new TypeError('Object.keys called on non-object')

				var result = []

				for ( var prop in obj) {
					if (hasOwnProperty.call(obj, prop))
						result.push(prop)
				}

				if (hasDontEnumBug) {
					for ( var i = 0; i < dontEnumsLength; i++) {
						if (hasOwnProperty.call(obj, dontEnums[i]))
							result.push(dontEnums[i])
					}
				}
				return result
			}
		})()
	}

	if (typeof Object.getPrototypeOf !== "function") {
		if (typeof "test".__proto__ === "object") {
			Object.getPrototypeOf = function(object) {
				return object.__proto__;
			};
		} else {
			Object.getPrototypeOf = function(object) {
				// May break if the constructor has been tampered with
				return object.constructor.prototype;
			};
		}
	}

	if (!String.prototype.trim) {
		String.prototype.trim = function() {
			return this.replace(/^\s+|\s+$/g, '');
		};
	}

})();(function(global){
    var sap = global.sap;
    var root = sap && sap.viz;
    if(root){
        var metadata = root.api && root.api.metadata;
        if(metadata){
            global.__sap_metadata = metadata;
        }
        delete sap.viz.api;
        delete sap.viz.extapi;
    }
})(this);

(function(global) {

    function isModuleReady(moduleName) {
        var temp = global, nameParts = moduleName.split("."), i = 0;
        while (i < nameParts.length && temp !== undefined) {
            temp = temp[nameParts[i++]]
        }
        return temp !== undefined;
    }
    function getModuleByQname(qname){
        var nameParts = qname.split("."), res = global;
        for ( i = 0; i < nameParts.length; i++) {
            res = res[nameParts[i]];
        }
        return res;
    }
    function apiDef(apiname, def) {
        var res = global, i, nameParts = apiname.split("."), len = nameParts.length;
        nameParts.reduce(function(p, c, i) {
            p[c] = p[c] || (i < len - 1 || !def ? {} : def);
            return p[c];
        }, global);
        return getModuleByQname(apiname);
    }

    //private container
    apiDef("sap.viz.extapi.manifest._queue", {
        viz:{
            registerList:[],
            unregisterList:[]
        },
        module:{
            registerList:[],
            unregisterList:[]
        },
        template:{
            registerList:[],
            unregisterList:[],
            configMap : {}
        },
        language:{
            registerList:[]
        }
    });
    var manifestDefQueue = sap.viz.extapi.manifest._queue;
    
    function genManifestFuncOnModule(moduleQname, funcname, queue){
        return function(item){
            if (isModuleReady(moduleQname)) {
                getModuleByQname(moduleQname)[funcname](item);
            } else {
                queue&&queue.push(item);
            }
        }
    }
    
    function pushItemToQueue(queue){
    	return function(item){
    		queue&&queue.push(item);
    	}
    }
     
    apiDef("sap.viz.extapi.env.Template", {
        register : function(templateDef) {
            var configMap = manifestDefQueue.template.configMap;
            configMap[templateDef.id] = configMap[templateDef.id] || [];
            configMap[templateDef.id].push(templateDef);
        }
    });
    apiDef("sap.viz.extapi.env.Language", {
        register : pushItemToQueue(manifestDefQueue.language.registerList)
    });
    apiDef("sap.viz.extapi.manifest.Viz", {
        register : pushItemToQueue(manifestDefQueue.viz.registerList),
        unregister : pushItemToQueue(manifestDefQueue.viz.unregisterList)
    });
    apiDef("sap.viz.extapi.manifest.Module", {
        register : pushItemToQueue(manifestDefQueue.module.registerList),
        unregister : pushItemToQueue(manifestDefQueue.module.unregisterList)
    });
    // make sure sap.viz.api namespace exists, it is used for VERSION in all in one build
	apiDef("sap.viz.api");
	
	apiDef("sap.viz.extapi.core");
})(this);

define('sap/viz/base/utils/TypeUtils',[],
function Setup() {
	var class2type = {
		'[object Boolean]' : 'boolean',
		'[object Number]' : 'number',
		'[object String]' : 'string',
		'[object Function]' : 'function',
		'[object Array]' : 'array',
		'[object Date]' : 'date',
		'[object RegExp]' : 'regexp',
		'[object Object]' : 'object'
	};

	var hasOwn = Object.prototype.hasOwnProperty;
	// Used for trimming whitespace
	var rdigit = /\d/;

	var type = function(obj) {
		return obj == null ? String(obj) : class2type[Object.prototype.toString.call(obj)] || "object";
	};

	/**
	 * Type Utilities for common variable type related tasks
	 * 
	 * @name sap.viz.base.utils.TypeUtils
	 * @class
	 */
	var typeUtils = {

		/**
		 * Returns a boolean value indicating whether the parameter is of type
		 * function
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction : function(obj) {
			return type(obj) === "function";
		},

		/**
		 * Returns a boolean value indicating whether the parameter is of type
		 * array
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		isArray : Array.isArray || function(obj) {
			return type(obj) === "array";
		},

		/**
		 * Returns a boolean value indicating whether the parameter is of type
		 * string
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		isString : function(obj) {
			return type(obj) === "string";
		},

		/**
		 * Returns a boolean value indicating whether the parameter is a
		 * non-empty string
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		isNonEmptyString : function(obj) {
			return this.isString(obj) && obj.length !== 0;
		},


		/**
		 * Returns a boolean value indicating whether the parameter is NaN
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		isNaN : function(obj) {
			return obj === null || obj === undefined || !rdigit.test(obj) || isNaN(obj);
		},

		/**
		 * Returns a boolean value indicating whether the parameter is a number
		 * 
		 * @param {object}
		 * @returns {boolean} Caution: isNumber(Infinity) returns false.
		 */
		isNumber : function(n) {
			return !typeUtils.isNaN(parseFloat(n)) && isFinite(n);
		},

		/**
		 * Returns a boolean value indicating whether the parameter is defined
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		isDefined : function(v) {
			return typeof (v) !== 'undefined';
		},

		/**
		 * Returns a boolean value indicating whether the parameter is undefined
		 * 
		 * @param {object}
		 * @returns {boolean}
		 */
		isUndefined : function(v) {
			return typeof (v) === 'undefined';
		},

		/**
		 * Returns a boolean value indicating whether the parameter is a plain
		 * object
		 * 
		 * @param {object}
		 * @returns {boolean} Caution: A plain object is an object that has no
		 *          prototype method and no parent class. Null, undefined, DOM
		 *          nodes and window object are not considered as plain object.
		 */
		isPlainObject : function(obj) {
			// Must be an Object.
			// Because of IE, we also have to check the presence of the
			// constructor property.
			// Make sure that DOM nodes and window objects don't pass through,
			// as well
			if (!obj || type(obj) !== "object" || obj.nodeType
					|| (obj && typeof obj === "object" && "setInterval" in obj)) {
				return false;
			}

			// Not own constructor property must be Object
			if (obj.constructor && !hasOwn.call(obj, "constructor")
					&& !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
				return false;
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.

			var key;
			for (key in obj) {
			}

			return key === undefined || hasOwn.call(obj, key);
		},

		/**
		 * Returns a boolean value indicating whether the parameter is an empty
		 * object
		 * 
		 * @param {object}
		 * @returns {boolean} Caution: An empty is a plain object without any
		 *          properties.
		 */
		isEmptyObject : function(obj) {
			for ( var name in obj) {
				return false;
			}
			return typeUtils.isPlainObject(obj);
		},

		equals : function(x, y) {
		    var p;
			if (x === y){
				return true;
			}
			if (!(x instanceof Object) || !(y instanceof Object) || (x.constructor !== y.constructor)){
				return false;
			}
				
			for (p in x) {
				if (!x.hasOwnProperty(p))
					continue;
				if (!y.hasOwnProperty(p))
					return false;
				if (x[p] === y[p])
					continue;
				if (typeof (x[p]) !== "object" || !typeUtils.equals(x[p], y[p]))
					return false;
			}

			for (p in y) {
				if (y.hasOwnProperty(p) && !x.hasOwnProperty(p)){
					return false;
				}
			}
			return true;
		},
		
		 /**
	       * Returns a boolean value indicating whether the parameter is undefined or null
	       *
	       * @param {object}
	       * @returns {boolean}
	       */
	    isExist : function(o) {
	      if ((typeof (o) === 'undefined') || (o === null)) {
	        return false;
	      }
	      return true;
	    }
	};

	return typeUtils;
});
define('sap/viz/base/Logger',[],
function Setup() {
    var noop = function() {
    };
    Date.now = Date.now ||
    function() {
        return +new Date();
    };
    function getLevel(){
        return this.threshold;
    }
    function setLevel(level){
        if(typeof level ==="string")
            this.threshold = levelStr2Int(level);
        else if(typeof level === "number")
            this.threshold = level;
    }
    
	/**
	 * Append log message  into the browse console.
	 * 
	 * @name ConsoleAppender
	 * @property  {Number} threshold  The log level number.
	 * @property  {DefaultLayout} layout  The log layout format class.
	 * @property {function} print The console output function.
	 * @method  ConsoleAppender#doAppend
	 * @method  ConsoleAppender#setLayout
	 * @method  ConsoleAppender#getLevel
	 * @method  ConsoleAppender#setLevel
	 */
    var ConsoleAppender = function() {
        this.threshold = Logger.LEVEL.INFO;
        this.layout = new Logger.DefaultLayout();
        this.print = typeof console !== undefined ? function(msg) {
            console.log(msg);
        } : noop;
    };
    ConsoleAppender.prototype = {
        doAppend : function(logTime, logLevel, logCate, logMsg) {
            this.print(this.layout.format(logTime, logLevel, logCate, logMsg));
        },
        setLayout : function(layout) {
            layout.format && (this.layout = layout);
        },
        getLevel : getLevel,
        setLevel : setLevel
    };
    
	/**
	 * The default layout class  ConsoleAppender as console format.
	 * 
	 * @name DefaultLayout
	 */ 
    var DefaultLayout = function() {
        // this.df = Logger.dateFormatter;
    };
    DefaultLayout.prototype.format = function(logTime, logLevel, logCate, logMsg) {
        return "[" + logTime + "]" + "[" + getLevelStr(logLevel) + "]" + "[" + (logCate || "main") + "]-" + logMsg;
    };
    
	/**
	 * Append log message on the DIV page.
	 * 
	 * @name DivAppender
	 * @property  {Number} threshold  The log level number.
	 * @property  {HTMLLayout} layout  The log layout format class.
	 * @property {<Div>} div The html div tag to display the log message.
	 * @method  DivAppender#doAppend
	 * @method  DivAppender#getLevel
	 * @method  DivAppender#setLevel
	 */
    var DivAppender = function(div) {
//        if(!$) {  //remove jQuery dependency.
//            throw "need jQuery";
//        }
        this.threshold = Logger.LEVEL.INFO;
//        this.divSl = $(div);  //remove jQuery dependency.
		this.div = div;
        this.layout = new HTMLLayout();
    };
    DivAppender.prototype = {
        getLevel : getLevel,
        setLevel : setLevel,
        doAppend : function(logTime, logLevel, logCate, logMsg) {
//            this.divSl.append(this.layout.format(logTime, logLevel, logCate, logMsg));
			this.div.appendChild(this.layout.format(logTime, logLevel, logCate, logMsg));
        }
    };
    
	/**
	 * The layout class specified for DivAppender as html page format.
	 * 
	 * @name HTMLLayout
	 */ 
    var HTMLLayout = function() {
        // this.df = Logger.dateFormatter;
    };
    HTMLLayout.prototype = {
        getStyle : function(logLevel) {
            var style;
            if(logLevel === Logger.LEVEL.ERROR) {
                style = 'color:red';
            } else if(logLevel === Logger.LEVEL.WARN) {
                style = 'color:orange';
            } else if(logLevel === Logger.LEVEL.DEBUG) {
                style = 'color:green';
            } else if(logLevel === Logger.LEVEL.TRACE) {
                style = 'color:green';
            } else if(logLevel === Logger.LEVEL.INFO) {
                style = 'color:grey';
            } else {
                style = 'color:yellow';
            }
            return style;
        },
        format : function(logTime, logLevel, logCate, logMsg) {
            return "<div style=\"" + this.getStyle(logLevel) + "\">[" + logTime + "]" + "[" + getLevelStr(logLevel) + "][" + (logCate || "main") + "]-" + logMsg + "</div>";
        }
    };
    var FifoBuffer = function() {
        this.array = [];
    };

    FifoBuffer.prototype = {

        /**
         * @param {Object} obj any object added to buffer
         */
        push : function(obj) {
            this.array[this.array.length] = obj;
            return this.array.length;
        },
        /**
         * @return first putted in Object
         */
        pull : function() {
            if(this.array.length > 0) {
                var firstItem = this.array[0];
                for(var i = 0; i < this.array.length - 1; i++) {
                    this.array[i] = this.array[i + 1];
                }
                this.array.length = this.array.length - 1;
                return firstItem;
            }
            return null;
        },
        length : function() {
            return this.array.length;
        }
    };
	/**
	 * Append log message to a remote file via ajax call.
	 * 
	 * @name AjaxAppender
	 * @property  {Number} threshold  The log level number.
	 * @property  {String} loggingUrl The ajax call url.
	 * @property  {Boolean} isInProgress  The process state of ajax call.
	 * @property  {Number} bufferSize  Once the log messages reaches the number, it will perform to send ajax call.
	 * @property  {Number} timeout  The delayed time to send the ajax call request.
	 * @property  {Arrary} loggingEventMap  The array stored the log messages.
	 * @property  {JSONLayout} layout  The specified layout for AjaxAppender.
	 * @property  {Arrary} loggingEventMap  The array stored the log messages.
	 * @property  {httpRequest} httpRequest  The httpRequest to send ajax call.
	 * @method  AjaxAppender#doAppend
	 * @method  AjaxAppender#getLevel
	 * @method  AjaxAppender#setLevel
	 * @method  AjaxAppender#send
	 * @method  AjaxAppender#onReadyStateChanged
	 * @method  AjaxAppender#getXmlHttpRequest
	 */
    
    var AjaxAppender = function(url) {
        this.loggingUrl = url;
        this.isInProgress = false;
        this.threshold = Logger.LEVEL.INFO;
        this.bufferSize = 20;
        this.timeout = 2000;
        this.loggingEventMap = [];
        this.layout = new Logger.JSONLayout();
        this.httpRequest = null;
        this.timer = undefined;
    };
    function tryAppend() {
        var appender = this;
        if(this.isInProgress === true) {
            setTimeout(function() {
                tryAppend.call(appender);
            }, 100);
        }else{
            this.send();
        }
    }


    AjaxAppender.prototype = {
        getLevel : getLevel,
        setLevel : setLevel,
        doAppend : function(logTime, logLevel, logCate, logMsg) {
            this.loggingEventMap.push([logTime, logLevel, logCate, logMsg]);
            if(this.loggingEventMap.length <= this.bufferSize || this.isInProgress === true) {
                var appender = this;
                if(this.timer === undefined) {
                    this.timer = setTimeout(function() {
                        tryAppend.call(appender);
                    }, 100);
                }
            }

            if(this.loggingEventMap.length >= this.bufferSize && this.isInProgress === false) {
                //if bufferSize is reached send the events and reset current bufferSize
                if(this.timer !== undefined)
                    clearTimeout(this.timer);
                this.send();
            }
        },
        send : function() {
            if(this.loggingEventMap.length > 0) {
                this.isInProgress = true;
                var a = [];
                var loggingEvent;
                for(var i = 0, lml = this.loggingEventMap.length; i < lml && i < this.bufferSize; i++) {
                    loggingEvent = this.loggingEventMap.shift();
                    a.push(this.layout.format(loggingEvent[0], loggingEvent[1], loggingEvent[2], loggingEvent[3]));
                }

                var content = this.layout.getHeader();
                content += a.join(this.layout.getSeparator());
                content += this.layout.getFooter();

                var appender = this;
                if(this.httpRequest === null) {
                    this.httpRequest = this.getXmlHttpRequest();
                }
                this.httpRequest.onreadystatechange = function() {
                    appender.onReadyStateChanged.call(appender);
                };

                this.httpRequest.open("POST", this.loggingUrl, true);
                // set the request headers.
                this.httpRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
                this.httpRequest.setRequestHeader("Content-length", content.length);
                //this.httpRequest.setRequestHeader("Content-type", this.layout.getContentType());
                this.httpRequest.send(content);
                appender = this;

                try {
                    setTimeout(function() {
                        appender.httpRequest.onreadystatechange = function() {
                        };
                        appender.httpRequest.abort();
                        //this.httpRequest = null;
                        appender.isInProgress = false;

                        if(appender.loggingEventMap.length > 0) {
                            appender.send();
                        }
                    }, this.timeout);
                } catch (e) {
                }
            }
        },
        onReadyStateChanged : function() {
            var req = this.httpRequest;
            if(this.httpRequest.readyState !== 4) {
                return;
            }

            var success = (( typeof req.status === "undefined") || req.status === 0 || (req.status >= 200 && req.status < 300));

            if(success) {

                //ready sending data
                this.isInProgress = false;

            } else {
            }
        },
        getXmlHttpRequest : function() {

            var httpRequest = false;

            try {
                if(window.XMLHttpRequest) {// Mozilla, Safari, IE7...
                    httpRequest = new XMLHttpRequest();
                    if(httpRequest.overrideMimeType) {
                        httpRequest.overrideMimeType(this.layout.getContentType());
                    }
                } else if(window.ActiveXObject) {// IE
                    try {
                        httpRequest = new ActiveXObject("Msxml2.XMLHTTP");
                    } catch (e) {
                        httpRequest = new ActiveXObject("Microsoft.XMLHTTP");
                    }
                }
            } catch (e) {
                httpRequest = false;
            }

            if(!httpRequest) {
                throw "browser don't support AJAX";
            }

            return httpRequest;
        }
    };
    
	/**
	 * The layout class specified for AjaxAppender as JSON format.
	 * 
	 * @name JSONLayout
	 */   
    var JSONLayout = function() {

    };
    JSONLayout.prototype = {
        /**
         * Implement this method to create your own layout format.
         * @param {Log4js.LoggingEvent} loggingEvent loggingEvent to format
         * @return formatted String
         * @type String
         */
        format : function(logTime, logLevel, logCate, logMsg) {

            var jsonString = "{\n \"LoggingEvent\": {\n";
            jsonString += "\t\"category\": \"" + (logCate || "main") + "\",\n";
            jsonString += "\t\"level\": \"" + getLevelStr(logLevel) + "\",\n";
            jsonString += "\t\"message\": \"" + logMsg + "\",\n";
            // jsonString += "\t\"referer\": \"" + referer + "\",\n";
            // jsonString += "\t\"useragent\": \"" + useragent + "\",\n";
            jsonString += "\t\"timestamp\": \"" + logTime + "\"\n";
            jsonString += "}\n}";

            return jsonString;
        },
        /**
         * Returns the content type output by this layout.
         * @return The base class returns "text/xml".
         * @type String
         */
        getContentType : function() {
            return "text/json";
        },
        /**
         * @return Returns the header for the layout format. The base class returns null.
         * @type String
         */
        getHeader : function() {
            var useragent = "unknown";
            try {
                useragent = navigator.userAgent;
            } catch(e) {
                useragent = "unknown";
            }

            var referer = "unknown";
            try {
                referer = location.href;
            } catch(e) {
                referer = "unknown";
            }
            return "{" + "\"ClientInfo\" : {\n" + "\t\"useragent\": \"" + useragent + "\",\n" + "\t\"referer\": \"" + referer + "\"\n},\n" + "\"VizLogger\": [\n";
        },
        /**
         * @return Returns the footer for the layout format. The base class returns null.
         * @type String
         */
        getFooter : function() {
            return "\n]}";
        },
        getSeparator : function() {
            return ",\n";
        }
    };

    /**
     * Get the XMLHttpRequest object independent of browser.
     * @private
     */
    var XMLLayout = function() {
        // this.df = Logger.dateFormatter;
    };
    XMLLayout.prototype = {
        format : function(logTime, logLevel, logCate, logMsg) {

            var content = "<vizLogger:event category=\"";
            content += (logCate || "main") + "\" level=\"";
            content += getLevelStr(logLevel) + "\" timestamp=\"";
            content += logTime + "\">\n";
            content += "\t<vizLogger:message><![CDATA[" + this.escapeCdata(logMsg) + "]]></vizLogger:message>\n";
            content += "</vizLogger:event>";

            return content;
        },
        /**
         * Returns the content type output by this layout.
         * @return The base class returns "text/xml".
         * @type String
         */
        getContentType : function() {
            return "text/xml";
        },
        /**
         * @return Returns the header for the layout format. The base class returns null.
         * @type String
         */
        getHeader : function() {
            var useragent = "unknown";
            try {
                useragent = navigator.userAgent;
            } catch(e) {
                useragent = "unknown";
            }

            var referer = "unknown";
            try {
                referer = location.href;
            } catch(e) {
                referer = "unknown";
            }
            return "<vizLogger:eventSet useragent=\"" + useragent + "\" referer=\"" + referer.replace(/&/g, "&amp;") + "\">\n";
        },
        /**
         * @return Returns the footer for the layout format. The base class returns null.
         * @type String
         */
        getFooter : function() {
            return "</vizLogger:eventSet>\n";
        },
        getSeparator : function() {
            return "\n";
        },
        /**
         * Escape Cdata messages
         * @param str {String} message to escape
         * @return {String} the escaped message
         * @private
         */
        escapeCdata : function(str) {
            return str.replace(/\]\]>/, "]]>]]&gt;<![CDATA[");
        }
    };

    function getLevelStr(levelInt) {
        switch(levelInt) {
            case Logger.LEVEL.TRACE:
                return "TRACE";
            case Logger.LEVEL.DEBUG:
                return "DEBUG";
            case Logger.LEVEL.INFO:
                return "INFO";
            case Logger.LEVEL.WARN:
                return "WARN";
            case Logger.LEVEL.ERROR:
                return "ERROR";
        }
    }
    function levelStr2Int(levelStr) {
        switch(levelStr.toLowerCase()){
            case "trace":
                return Logger.LEVEL.TRACE;
            case "debug":
                return Logger.LEVEL.DEBUG;
            case "info":
                return Logger.LEVEL.INFO;
            case "warn":
                return Logger.LEVEL.WARN;
            case "error":
                return Logger.LEVEL.ERROR;
        }
    }
    var enabled = false;
    var paused = false;
    var MaxBufferSize = 2000;
    var doLog = function(level, category, message, loggerLevel) {
    	for(appenderKey in appenders) {
             if(appenders.hasOwnProperty(appenderKey)) {
                 appender = appenders[appenderKey];
				 var PnRAppender = appender.hasOwnProperty('profiling') && level <=levelSetting.DEBUG; // pnr Appender (reference to sap.viz.base.utils.log.Analyzer), pnr default level is DEBUG.
                 if(PnRAppender || (appender.threshold >= loggerLevel && level >=appender.threshold )) // ONLY appender.threshold >= loggerLevel
                {
                	 appender.doAppend(Date.now(), level, category, message);
                }
             }
         }
    };
    var awakeThenLog = function(level, category, message) {
        resume();
        doLog(level, category, message);
    };
    var log = noop;
    var pause = function() {
        paused = true;
        log = awakeThenLog;
    };
    var resume = function() {
        paused = false;
        log = doLog;
    };
    // id for appender
    var id = 0;
    var nextId = function() {
        return id++;
    };
    var appenders = {};
    /*
     * singleton Logger
     *
     */
    var levelSetting = {
            TRACE : 5000,
            DEBUG : 10000,
            INFO : 20000,
            WARN : 30000,
            ERROR : 40000,
            NO : Number.MAX_VALUE
        };
    var Logger = {
        LEVEL :levelSetting,
        isEnabled : function() {
            return enabled;
        },
        enable : function() {
            log = doLog;
            enabled = true;
        },
        disable : function() {
            log = noop;
            enabled = false;
        },
        toggleEnable : function() {
            if(enabled)
                this.disable();
            else
                this.enable();
        },
        addAppender : function(/*[key,] appender*/) {
            var _nextId = nextId();
            var key, appender;
            if(arguments.length === 1) {
                key = _nextId;
                appender = arguments[0];
            } else if(arguments.length >= 2) {
                key = arguments[0];
                appender = arguments[1];
            }
            if( typeof appender === "object" && appender.doAppend) {
                if(appenders[key] !== undefined)
                    return;
                appenders[key] = appender;
                return key;
            }

        },
        setAppenders : function(apds) {
            appenders = [];
            for(var i = 0, l = apds.length; i < l; i++) {
                var appender = apds[i];
                if(appender.appenderKey)
                    this.addAppender(appender.appenderKey, appender.appender);
                else
                    this.addAppender(appender.appender);
            }
        },
        removeAppender : function(key) {
            if(appenders[key] === undefined){
                return false;
            }else{
                return ( delete appenders[key]);
            }
        },
        getAppender : function(key) {
            return appenders[key];
        },
        getAppenders: function(){
        	var appenderArray = [];
        	if(appenders){
        		
        		for(var key in appenders){
        			if(appenders.hasOwnProperty(key)){
        				var item = appenders[key];
        				appenderArray.push(item);
        			}
        		}
        	}
        	return appenderArray;
        },
        ConsoleAppender : ConsoleAppender,
        DivAppender : DivAppender,
        AjaxAppender : AjaxAppender,
        //[time][level][category]-message [yyyy-MM-ddThh:mm:ss:ms][INFO][function1]-this is a piece of log.
        DefaultLayout : DefaultLayout,
        HTMLLayout : HTMLLayout,
        XMLLayout : XMLLayout,
        JSONLayout : JSONLayout,
        level: levelSetting.INFO, // default log level.
        trace : function(message, category) {
            log(Logger.LEVEL.TRACE, category, message, this.level);
        },
        debug : function(message, category) {
            log(Logger.LEVEL.DEBUG, category, message, this.level);
        },
        info : function(message, category) {
            log(Logger.LEVEL.INFO, category, message, this.level);
        },
        warn : function(message, category) {
            log(Logger.LEVEL.WARN, category, message, this.level);
        },
        error : function(message, category) {
            log(Logger.LEVEL.ERROR, category, message, this.level);
        }
    };
    appenders["[default]"] = new Logger.ConsoleAppender();
    return Logger;
});
define('sap/viz/base/utils/FunctionUtils',['sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger'],
function Setup(TypeUtils, Logger) {
	var msgparas = /\{(\d+)\}/g;
	var ArraySlice = Array.prototype.slice
	function emptyFn() {
	}

	function error(msg) {
		var args = arguments;
		if (args[0]) {
			var msg = args[0].replace(msgparas, function(m, n) {
				return args[parseInt(n) + 1];
			});
			Logger.error(msg);
			throw msg;
		} else {
			Logger.error('Unknown error!');
			throw 'Unknown error!';
		}
	}

	function createCallChain() {
		var callChain = [];
		function ChainedFunc() {
			for ( var i = 0, len = callChain.length; i < len; i++) {
				callChain[i].apply(this, arguments);
			}
		}
		function buildChain() {
			for ( var i = 0, len = arguments.length; i < len; i++) {
				if (TypeUtils.isFunction(arguments[i])) {
					callChain.push(arguments[i]);
				} else {
					 Logger.error('Could not create call chain for non-function object');
					 throw 'Could not create call chain for non-function object';
				}
			}
		}
		ChainedFunc.chain = function() {
			return createCallChain.apply(null, [].concat(callChain, ArraySlice.call(arguments)));
		};
		buildChain.apply(null, arguments);
		return ChainedFunc;
	}

	var funcUtils = {
		/**
		 * empty function
		 * 
		 * @name sap.viz.base.utils.FunctionUtils#noop
		 * @function
		 */
		noop : emptyFn,

		/**
		 * Function throwing unsupported exception with constant error message,
		 * or make a new function which could throw exception with specified
		 * error message
		 * 
		 * @name sap.viz.base.utils.FunctionUtils#unsupported
		 * @function
		 * 
		 * @param {String}
		 *            (msg)
		 * @return {Function}
		 * @throw {Error}
		 */
		unsupported : function(msg) {
			if (arguments.length) {
				return function() {
					throw new Error(msg || 'Unsupported function!');
				};
			} else
				throw new Error('Unsupported function!');
		},

		/**
		 * function throwing unimplemented exception
		 * 
		 * @name sap.viz.base.utils.FunctionUtils#unimplemented
		 * @function
		 */
		unimplemented : function(msg) {
			if (arguments.length) {
				return function() {
					throw new Error(msg || 'Unimplemented function!');
				};
			} else
				throw new Error('Unimplemented function!');
		},

		/**
		 * function throwing error
		 * 
		 * @name sap.viz.base.utils.FunctionUtils#error
		 * @param {String}
		 *            msg the error message
		 * @function
		 */
		error : error,

		/**
		 * Return a number comparator for ascendent sorting
		 * 
		 * @param a
		 * @param b
		 * @returns todo
		 */
		ascending : function(a, b) {
			return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
		},
		/**
		 * Return a number comparator for descendent sorting
		 * 
		 * @param a
		 * @param b
		 * @returns todo
		 */
		descending : function(a, b) {
			return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
		},

		createCallChain : createCallChain
	};

	return funcUtils;
});
define('sap/viz/base/Class',['sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/TypeUtils'],
function Setup(FuncUtils, TypeUtils) {
	// inspired by http://ejohn.org/blog/simple-javascript-inheritance/
	var fnTest = /xyz/.test(function() {
		xyz;
	}) ? /\b_super\b/ : /.*/;
	var callChain = FuncUtils.createCallChain;
	function zeroClass() {
	}

	function extend(ext) {
		var _super = zeroClass.prototype = this.prototype;
		var subclass = this.chain ? this.chain(ext.constructor) : callChain(this, ext.constructor);
		var proto = subclass.prototype = new zeroClass();
		proto.constructor = subclass;
		delete ext.constructor;
		var fn;
		for ( var f in ext) {
			fn = ext[f];
			proto[f] = typeof fn === 'function' && typeof _super[f] === 'function' && fnTest.test(fn) ? (function(name,
					func) {
				return function() {
					this._super = _super[name];
					var ret = func.apply(this, arguments);
					return ret;
				};
			})(f, fn) : fn;
		}
		subclass.extend = extend;
		return subclass;
	}

	/**
	 * Define a class, make it extensible. The parameter could be an existing
	 * constructor or a Class config object.
	 * 
	 * <pre>
	 * {
	 * 		constructor : function(){...},
	 * 		method1		: function(){...},
	 * 		method2		: function(){...},
	 * 		...
	 * 		methodn		: function(){...}
	 * }
	 * </pre>
	 * 
	 * @param {Function|Object}
	 *            clazz constructor or an Class config object
	 * @returns {Function} the class
	 */
	function define(clazz) {
		if (typeof clazz === 'function') {
			clazz.extend = extend;
			return clazz;
		} else {
			var constructor = clazz.constructor || function() {
			}, proto = constructor.prototype;
			for ( var f in clazz) {
				if (clazz.hasOwnProperty(f)) {
					proto[f] = clazz[f];
				}
			}
			constructor.extend = extend;
			return constructor;
		}
	}
	return {
		define : define,
		extend : extend
	};
});
define('sap/viz/data/description/DataContainer',['sap/viz/base/Class', 'exports'],
 function Setup(Class){
	var DataContainer = Class.define({
		constructor : function(uid){
			this._uId = uid; 
			this._isFake = false;
			this._infos = null;
		},
		getId : function(){
			return this._uId;
		},
		fake : function(_){
			if (!arguments.length){
				return this._isFake;
			}
			this._isFake = _;
		},
		infos : function(_){
			if (!arguments.length){
				return this._infos;
			}
			this._infos = _;
		} 
	});
	return DataContainer;
 });
define('sap/viz/base/utils/ObjectUtils',['sap/viz/base/utils/TypeUtils','sap/viz/base/utils/FunctionUtils'],
function Setup(TypeUtils, FuncUtils) {
	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/, rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
			rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
			rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;

	/**
	 * Frequently used object utilities
	 * 
	 * @name sap.viz.base.utils.ObjectUtils
	 * @class
	 */
	var objUtils = {
		// Copy from jQuery
		extend : function() {
			var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;

			// Handle a deep copy situation
			if (typeof target === "boolean") {
				deep = target;
				target = arguments[1] || {};
				// skip the boolean and the target
				i = 2;
			}

			// Handle case when target is a string or something (possible in
			// deep
			// copy)
			if (typeof target !== "object" && !TypeUtils.isFunction(target)) {
				target = {};
			}

			// extend jQuery itself if only one argument is passed
			if (length === i) {
				target = this;
				--i;
			}

			for (; i < length; i++) {
				// Only deal with non-null/undefined values
				if ((options = arguments[i]) != null) {
					// Extend the base object
					for (name in options) {
						src = target[name];
						copy = options[name];

						// Prevent never-ending loop
						if (target === copy) {
							continue;
						}

						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (TypeUtils.isPlainObject(copy) || (copyIsArray = TypeUtils.isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && TypeUtils.isArray(src) ? src : [];

							} else {
								clone = src && TypeUtils.isPlainObject(src) ? src : {};
							}
							// Never move original objects, clone them
							target[name] = objUtils.extend(deep, clone, copy);
							// Don't bring in undefined values
						} else if (copy !== undefined) {
							target[name] = copy;
						}
					}
				}
			}
			// Return the modified object
			return target;
		},

		// args is for internal usage only
		each : function(object, callback, args) {
			var name, i = 0, length = object.length, isObj = length === undefined || TypeUtils.isFunction(object);

			if (args) {
				if (isObj) {
					for (name in object) {
						if (callback.apply(object[name], args) === false) {
							break;
						}
					}
				} else {
					for (; i < length;) {
						if (callback.apply(object[i++], args) === false) {
							break;
						}
					}
				}

				// A special, fast, case for the most common use of each
			} else {
				if (isObj) {
					for (name in object) {
						if (callback.call(object[name], name, object[name]) === false) {
							break;
						}
					}
				} else {
					for ( var value = object[0]; i < length && callback.call(value, i, value) !== false; value = object[++i]) {
					}
				}
			}
			return object;
		},

		parseJSON : function(data) {
			if (typeof data !== "string" || !data) {
				return null;
			}

			// Make sure leading/trailing whitespace is removed (IE can't handle
			// it)
			data = data.trim();

			// Make sure the incoming data is actual JSON
			// Logic borrowed from http://json.org/json2.js
			if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {

				// Try to use the native JSON parser first
				return window && window.JSON && window.JSON.parse ? window.JSON.parse(data) : (new Function("return "
						+ data))();

			} else {
				TypeUtils.error("Invalid JSON: " + data);
			}
		},

		/**
		 * Generate a guid
		 * 
		 * @name sap.viz.base.utils.ObjectUtils#guid
		 * @function
		 * @return {String}
		 */
		guid : function() {// guid generator
			return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
				var r = Math.random() * 16 | 0, v = c == 'x' ? r : r & 0x3 | 0x8;
				return v.toString(16);
			});
		},
		
		clone : function (obj) {
            if ( typeof (obj) !== 'object')
                return obj;
            if (obj === null)
                return obj;
            var o = obj.constructor === Array ? [] : {};
            for (var i in obj) {
                o[i] = typeof obj[i] === "object" ? arguments.callee.call(null, obj[i]) : obj[i];
            }
            return o;
        },
        
        deepEqual : function(source, target) {
            if ( typeof source === 'object' && typeof target === 'object') {
                var key = null;
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        if (!target.hasOwnProperty(key)) {
                            return false;
                        } else if (!this.deepEqual(source[key], target[key])) {
                            return false;
                        }
                    }
                }
                for (key in target) {
                    if (target.hasOwnProperty(key)) {
                        if (!source.hasOwnProperty(key)) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return source === target;
            }
        },
        
        leftEqual : function(source, target) {
            if ( typeof source === 'object' && typeof target === 'object') {
                var key = null;
                for (key in source) {
                    if (source.hasOwnProperty(key)) {
                        if (!target.hasOwnProperty(key)) {
                            return false;
                        } else if (!this.leftEqual(source[key], target[key])) {
                            return false;
                        }
                    }
                }
                return true;
            } else {
                return source === target;
            }
        },
        
        hasElement : function(array, element) {
            for (var i = 0; i < array.length; i++) {
                if (this.deepEqual(array[i], element)) {
                    return true;
                }
            }
            return false;
        }
	};
	return objUtils;
});
define('sap/viz/data/description/MeasureValues',['sap/viz/base/utils/ObjectUtils','sap/viz/data/description/DataContainer', 'exports'],
 function Setup(ObjUtils, DataContainer){
   
   /**
    * @private
    * @name sap.viz.data.description.MeasureValues
    */
     var MeasureValues = DataContainer.extend({
      
       /** 
        * @constructor
        * @param uid    identifier of measure values, usually name
        * @param values 
        */
       constructor : function ( uid, values ) {
           this._values = values;
       },
       
         getValues : function(){
           return this._values;
         }
    
    });
     
     
     
     return MeasureValues;
});
define('sap/viz/lang/LangMessageUtil',[],
function Setup() {

  var number2IDS = {
		  
		  // ERROR start with 50000.
		  50000:'IDS_ERROR_DIMENSION_NOT_ZERO' , 
		  50001:'IDS_ERROR_DIMENSION_WRONG_COUNT', 
		  50002:'IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT', 
		  50003:'IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2', 
		  50004:'IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1',  
		  50005:'IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', 
		  50006:'IDS_ERROR_WRONG_FEED_TYPE', 
		  50007:'IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION', 
		  50008:'IDS_ERROR_WRONG_AXIS_INDEX', 
		  50009:'IDS_ERROR_WRONG_MEASURE_AXIS_INDEX', 
		  50010:'IDS_ERROR_INVALID_FEEDING', 
		  50011:'IDS_ERROR_NO_FEED_ID', 
		  50012:'IDS_ERROR_INVALID_FEEDING_NUMBER', 
		  50013:'IDS_ERROR_NO_AXIS', 
		  50014:'IDS_ERROR_FEED_NOT_ACCEPT_DATA',  
		  50015:'IDS_ERROR_NOT_FIND_MEASURE_GROUP', 
		  50016:'IDS_ERROR_NOT_ACCEPT', 
		  50017:'IDS_ERROR_INVALID_BINDING', 
		  50018:'IDS_ERROR_NOT_FIND_FEED_DEFINITION', 
		  50019:'IDS_ERROR_WRONG_TYPE', 
		  50020:'IDS_ERROR_NOT_SUPPORTED', 
		  50021:'IDS_ERROR_NOT_DETERMINE_AXIS_INDEX', 
		  50022:'IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES', 
		  50023:'IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2', 
		  50024:'IDS_ERROR_NOT_DETERMINE_DEMENSION', 
		  50025:'IDS_ERROR_UNKNOWN_STATE', 
		  50026:'IDS_ERROR_INVALID_PATH_DEFINITION', 
		  50027:'IDS_ERROR_NODE_NOT_IN_SAME_ROOT', 
		  50028:'IDS_ERROR_NOT_ADD_SELF_AS_CHILD', 
		  50029:'IDS_ERROR_NOT_ADD_ANCESTOR_AS_CHILD', 
		  50030:'IDS_ERROR_NOT_CHILD_NODE_INSERT', 
		  50031:'IDS_ERROR_NODE_IS_NOT_CHILD_OF_THIS_NODE', 
		  50032:'IDS_ERROR_SELECTOR_NOT_NULL', 
		  50033:'IDS_ERROR_NOT_FIND_JQUERY', 
		  50034:'IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE', 
		  50035:'IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION', 
		  50036:'IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER', 
		  50037:'IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME', 
		  50038:'IDS_ERROR_CATEGORY_NAME_NOT_EMPTY', 
		  50039:'IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION', 
		  50040:'IDS_ERROR_EXIST_CATEGORY_NAME', 
		  50041:'IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT', 
		  50042:'IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID', 
		  50043:'IDS_ERROR_UNKNOWN_ERROR',
		  50044:'IDS_ERROR_NOT_CREATE_CHAIN_FOR_NON_FUNCTION_OBJECT',
		  50045:'IDS_ERROR_AXIS_ALREADY_EXIST',
		  50046:'IDS_ERROR_CAN_NOT_FIND_CATEGORY',
		  50047:'IDS_ERROR_ALREADY_EXIST_IN_CATEGORY',
		  50048:'IDS_ERROR_LOADING_TEMPLATE_FAIL',
		  50049:'IDS_ERROR_PARSE_ERROR_EXPECT_TO',
		  50050:'IDS_ERROR_FLATTABLE_FEED_DEF_FIELD_INDEX_MISSING',
		  50051:'IDS_ERROR_FLATTABLE_MANNUAL_FEED_WRONG_BINDING',
		  50052:'IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM',
		  50053:'IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING',
		  50054:'IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING',

		  
		  // warning
		  40000:'IDS_WARN_PARAMETER_NOT_CORRECT',
		  40001:'IDS_WARN_LOCALE_NOT_CORRECT'
		  
  };
  
  var IDS2Number = null;
  /**
   * create a map for message key to message code.
   */
  function getIDS2NumberMapping(){
	  if(IDS2Number === null && number2IDS){
		  IDS2Number = {};
		  for(var num in number2IDS){
			  if(number2IDS.hasOwnProperty(num)){
				  IDS2Number[number2IDS[num]] = num;
			  }
		  }
	  }
	  return IDS2Number;	  
  }

  var langMessageUtil = {
	      /**
	       * Register number/IDS pair for message globalization.
	       * 
	       * @param {Number}
	       *          message code.
	       * @param {String}
	       *          the key string of message content.
	       */
		  register: function(number, IDS){
			  if(IDS2Number === null){
				  IDS2Number = getIDS2NumberMapping();
			  }
			  if(number2IDS && number2IDS.hasOwnProperty(number) === false  && IDS2Number.hasOwnProperty(IDS) === false){
				  number2IDS[number] = IDS;
				  IDS2Number[IDS] = number; 
			  }else{
			  // TODO: handle the number or IDS exists.
			  }
		  },
		  
	      /**
	       * Get the message key by message code.
	       * 
	       * @param {Number}
	       *          message code.
	       * @returns {String}
	       *          the key string of message content.
	       */
		  getIDSByNumber: function(num){
			  if(number2IDS && number2IDS.hasOwnProperty(num)){
				  return number2IDS[num];
			  }else{
				  return undefined;
			  }
		  },
		  
	      /**
	       * Get the message code by message key.
	       * 
	       * @param {String}
	       *          message key.
	       * @returns {number}
	       *          message code.
	       */
		  getNumberByIDS: function(IDS){
			  if(IDS2Number ===null){
				  IDS2Number = getIDS2NumberMapping();
			  }
			  if(IDS2Number && IDS2Number.hasOwnProperty(IDS)){
				  return IDS2Number[IDS];
			  }else{
				  return undefined;
			  }
		  }
  };
  return langMessageUtil;
});

define('sap/viz/base/utils/ResouceBundleUtils',[],
function Setup() {
	var ResouceBundleUtils = {
			/**
			 * substitute the localized string for resource bundle.
			 * @private 
			 * @example
			 * 		ResouceBundleUtils.replace('The ID {0} is not a valid number', 'NOT_NUMBER')
			 * @returns {String} replacedString
			 */
			substitute: function(str/*String*/, rest/*Array*/){
		        if (str == null) return '';
		        
		        if(!rest){
		        	rest = [];
		        }
		        var len = rest.length;
		        for (var i = 0; i < len; i++){
		            str = str.replace(new RegExp("\\{"+i+"\\}", "g"), rest[i]);
		        }
		        return str;
			},
			
	};
	return ResouceBundleUtils;
});
define('sap/viz/base/utils/loadScript',[], function(){

    // Load a script tag to current page
    return function(url, onComplete){
        var done = 0;
        var head = document.getElementsByTagName("head")[0] || document.documentElement;
        var script = document.createElement("script");
        script.type = 'text/javascript';
        script.src = url;

        function complete(err){
            //clear script
            script.onload = script.onreadystatechange = null;
            if (script.parentNode) {
                script.parentNode.removeChild(script);
            }
            onComplete(err);
        }

        script.onload = script.onreadystatechange = function() {
            if (!done && (!this.readyState || this.readyState === "loaded" || this.readyState === "complete")) {
                done = 1;
                complete();
            }
        };

        if (script.addEventListener) {
            script.addEventListener('error', complete, true);
        }

        if(head.firstChild){
            head.insertBefore(script, head.firstChild);
        }else{
            head.appendChild(script);
        }
    };
});

define('sap/viz/base/utils/loadResource',[
    'sap/viz/base/utils/loadScript',
    'sap/viz/base/utils/ObjectUtils'
], function(loadScript, ObjectUtils){

    var loadingMap = {};
    var loadedUrls = {};

    function replacePath(newPath) {
        if (newPath.indexOf("resources/langs/charts") >= 0) {
            newPath = newPath.replace("resources/langs/charts", "resources/chart/langs");
        } else if (newPath.indexOf("resources/langs/sdk") >= 0) {
            newPath = newPath.replace("resources/langs/sdk", "resources/framework/langs");
        } else if (newPath.indexOf("resources/templates") >= 0) {
            newPath = newPath.replace("resources/templates", "resources/chart/templates");
        }
        return newPath;
    }
    
    // Load resource on single path
    function loadForPath(path, id, onComplete, args){
        function loadForId(id, Path){
            var url = args.getUrl(Path?Path:path, id);
            if(loadedUrls[url]){
                onComplete(Path?Path:path, id);
            }else{
                loadScript(url, function(err){
                    if(err){
                        var newPath = replacePath(Path?Path:path);
                        if(newPath !== (Path?Path:path)){
                            loadForId(id, newPath);
                        }else{
                             if(args.degrade){
                                id = args.degrade(id);
                                if(id){
                                    loadForId(id);
                                    return;
                                }
                            }
                            onComplete(path, id, err);                           
                        }

                    }else{
                        loadedUrls[url] = 1;
                        //FIXME (by eddy.zeng) temporary change, since we're using require.js in jsonp, 
                        //delay call callback to make sure jsonp content evaluated before trying to get language content from setting map.
                        setTimeout(function() {
                            onComplete(Path?Path:path, id);
                        }, 4);
                    }
                });
            }
        }
        loadForId(id);
    }

    // Load resource on multiple paths
    // example:
    // loadResource({
    //      id: "en_US",
    //      paths: ["path/to/resoruce", "another/path/to/resource"],
    //      degrade: function(id){
    //          // An optional function to degrade to another id if the given id failed to load resource file.
    //          // return another id
    //      },
    //      onPathComplete: function(path, effectiveId, error){
    //          // Callback when one path is loaded
    //          // If degrade is called, effectiveId != id
    //      },
    //      onComplete: function(errors){
    //          // Callback when every path are loaded.
    //          // errors is an array containing error reports on failed paths.
    //          // Each item in errors is of the following format:
    //          // {
    //          //      path: '...'
    //          //      id: effectiveId,
    //          //      err: error object
    //          // }
    //      }
    // });
    function loadResource(args){
        var id = args.id;
        var paths = args.paths || [];
        var errors = [];
        var uuid = id + "_" + ObjectUtils.guid();

        // load counter for specific uuid
        loadingMap[uuid] = paths.length;

        function onLoadedForPath(path, effectiveId, err){
            if(err){
                errors.push({
                    path: path,
                    id: effectiveId,
                    err: err
                });
            }
            if(args.onPathComplete){
                args.onPathComplete(path, effectiveId, err);
            }
            if(--loadingMap[uuid] === 0 && args.onComplete){
                args.onComplete(errors);
            }
        }

        for(var i = 0; i < paths.length; ++i){
            loadForPath(paths[i], id, onLoadedForPath, args);
        }
    }

    return loadResource;
});

define('sap/viz/lang/langManager',[
    'sap/viz/base/utils/FunctionUtils',
    'sap/viz/base/utils/ObjectUtils',
    'sap/viz/lang/LangMessageUtil',
    'sap/viz/base/utils/ResouceBundleUtils',
    'sap/viz/base/utils/loadResource',
    'exports'
], function(FunctionUtils, ObjectUtils, LangMessageUtil, ResouceBundleUtils, loadResource) {

    var listeners = [];
    var languageSetting = {};

    var placeHolder = 'language';
    languageSetting[placeHolder] = {};

    var manager = {
        /** @lends sap.viz.lang.langManager */

        /**
         * The file paths of language folder. 
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/langs/charts/", "../../../resources/langs/sdk"], by default it contains charts and sdk language resource.
         * if only contains sap.viz.skd, only reset loadPath for sdk.
         */
        loadPath: [
            "../../../resources/langs/charts/",
            "../../../resources/langs/sdk/"
        ],

        /**
         * File name template of the language resource. ${lang} can be used in the template to represent the language name.
         * @default "language_${lang}.js"
         */
        fileNameTemplate: 'language_${lang}.js',

        /**
         * Alias language name mapping. The mapper name will not be tried at all. The mapped name will be used instead.
         * @type Object?
         */
        alias: {
            "ar_AE": "ar",
            "ar_EG": "ar",
            "ar_SA": "ar",

            "bg_BG": "bg",

            "ca_ES": "ca",

            "cs_CZ": "cs",

            "da_DK": "da",

            "de_CH": "de",
            "de_AT": "de",
            "de_BE": "de",
            "de_LU": "de",
            "de_DE": "de",

            "el_CY": "el",
            "el_GR": "el",

            "en_AU": "en",
            "en_CA": "en",
            "en_GB": "en",
            "en_HK": "en",
            "en_ID": "en",
            "en_IE": "en",
            "en_IN": "en",
            "en_IS": "en",
            "en_MY": "en",
            "en_NZ": "en",
            "en_PH": "en",
            "en_SG": "en",
            "en_US": "en",
            "en_ZA": "en",

            "es_AR": "es",
            "es_BO": "es",
            "es_CL": "es",
            "es_CO": "es",
            "es_ES": "es",
            "es_MX": "es",
            "es_PE": "es",
            "es_UY": "es",
            "es_VE": "es",

            "et_EE": "et",

            "fa_IR": "fa",

            "fi_FI": "fi",

            "fr_BE": "fr",
            "fr_CA": "fr",
            "fr_CH": "fr",
            "fr_FR": "fr",
            "fr_LU": "fr",

            "he_IL": "iw",

            "hi_IN": "hi",

            "hr_HR": "hr",

            "hu_HU": "hu",

            "id_ID": "id",

            "it_CH": "it",
            "it_IT": "it",

            "ja_JP": "ja",

            "ko_KR": "ko",

            "lt_LT": "lt",

            "lv_LV": "lv",

            "nb_NO": "nb",

            "nl_BE": "nl",
            "nl_NL": "nl",

            "nn_NO": "nn",

            "pl_PL": "pl",

            "pt_BR": "pt",
            "pt_PT": "pt",

            "ro_RO": "ro",

            "ru_KZ": "ru",
            "ru_RU": "ru",
            "ru_UA": "ru",

            "sh_ME": "sr",
            "sh_RS": "sr",

            "sk_SK": "sk",

            "sl_SL": "sl",
            "sl_SI": "sl",

            "sv_SE": "sv",

            "th_TH": "th",

            "tr_CY": "tk",
            "tr_TR": "tk",

            "uk_UA": "uk",

            "vi_VI": "vi",
            "vi_VN": "vi",

            "zf_TW": "zh_TW",
            "zh_HK": "zh_CN"
        },

        /**
         * Special degrade rules. By default, "xx_yy" degrads to "xx", and "xx" degrads to the default language "en".
         */
        //degrade: {},

        /**
         * Default language
         * If a specific language does not exists, will degrade to this default language.
         * @default 'en'
         */
        defaultLanguage: 'en',

        /**
         * Current language
         */
        currentLanguage: 'en',

        /**
         * Return current applied language Id.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
         * @returns {String}
         */
        current : function() {
            return manager.currentLanguage;
        },

        /**
         * Register new language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.register instead.
         * @param {Object...}
         * 
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        register : function(obj) {
            languageSetting[obj.id] = ObjectUtils.extend(true, languageSetting[obj.id], obj.value);
            return manager;
        },

        /**
         * Apply(switch) language.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.set instead.
         * @param {String}
         *          id the language id
         * @param {Function}
         *          [callback] the call back function. 
         *
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        apply : function(id, callback, failedCallback) {
            var aliasId = alias(id);
            var errMsgs = [];

            function onPathComplete(path, effectiveId, err){
                var errMsg;

                if(!effectiveId){
                    errMsg = 'Failed to load language ' + id + ' from path ' + path + '.';
                }else if(aliasId !== effectiveId){
                    errMsg = 'Language ' + id + ' is degraded to ' + effectiveId + ' for path ' + path + '.';
                }

                if(errMsg){
                    errMsgs.push(errMsg);
                    try{
                        FunctionUtils.error(errMsg);
                    }catch(e){
                        // Not a fatal error.
                    }
                }
            }

            function onComplete(){
                takeinDefQueue();

                if(errMsgs.length && failedCallback) {
                    failedCallback(id, errMsgs.join('\n'));
                }

                // Honor user's input
                manager.currentLanguage = id;

                // Find the currently effective language resource and pass it to listeners
                id = aliasId;
                var language = languageSetting[id];
                while (!language) {
                    id = degrade(id);
                    language = id && languageSetting[id];
                }

                for(var i = 0; i < listeners.length; ++i){
                    var listener = listeners[i];
                    listener.fn.apply(listener.scope, [language]);
                }

                // fail to load language will be handled by failedCallback, 
                if(callback){
                    callback();
                }
            }

            if(aliasId){
                loadResource({
                    id: aliasId,
                    paths: manager.loadPath,
                    getUrl: getUrl,
                    degrade: degrade,
                    onPathComplete: onPathComplete,
                    onComplete: onComplete
                });
            }else{
                takeinDefQueue();
            }
            return manager;
        },

        /**
        * Get globalization value.
        * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You ca nuse sap.viz.api.env.Language.get instead.
        * @param {String} 
        *       id of labels
        * 
        * @returns {String}  globalization value
        */
        get: function(ids, lang){
            var id = alias(lang || manager.currentLanguage);
            var language = languageSetting[id];
            var result = language && language[ids];

            while (id && id !== placeHolder && typeof result !== 'string') {
                id = degrade(id);
                language = id && languageSetting[id];
                result = language && language[ids];
            }

            return result || '';
        },

        /**
         * Get log id and globalization log message.
         * @ignore
         * 
         * @param {...Object} 
         *       key of log message
         *       variables in the log message
         * @example    
         *      // return Invalid feeding: the correct number  is 2.   
         *      getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER', 2);
         *          
         * @returns {String}  log id and globalization log message.
         */
        getLogMessage: function(ids){
            var num = LangMessageUtil.getNumberByIDS(ids);
            var message = manager.get(ids);

            // Substitute the resouce boundle
            // e.g: ('Invalid feeding: the correct number  is {0}.', '2')
            if(arguments.length > 1){
                message = ResouceBundleUtils.substitute(message, Array.prototype.slice.call(arguments, 1)); 
            }

            return (num ? '[' + num + '] - ' : '') + message;
        },

        /**
         * Get log globalization message value by ID.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
         * @param {Number} 
         *       message code.
         * 
         * @returns {String}  globalization log message value
         */
        getLogMessageByID: function(num){
            var ids = LangMessageUtil.getIDSByNumber(num);
            if(!ids){
                FunctionUtils.error('Not exist the log ID {0}.', num);
            }
            return manager.get(ids);
        },

        /**
         * Add language folder path before load language file if the language folder is not default.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @param {String} 
         *       folder of language files.
         * 
         * @returns {Arrary}  all folders of language files.
         */
        addLanguageFolder: function(folder){
            manager.loadPath.push(folder);
            return manager.loadPath;
        },

        /**
         * Add a listener which will be executed when current language is changed.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.addListener instead.
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         * 
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        addListener : function(listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You ca nuse sap.viz.extapi.env.Language.removeListener instead.
         * @param {Object} listener
         *          the listener reference
         * 
         * @returns {Object} {@link sap.viz.lang.langManager}
         */
        removeListener : function(listener) {
            var index = listeners.indexOf(listener);
            if (index >= 0){
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    function normalizeLangName(id){
        return String(id).replace(/-/g, '_');
    }

    function alias(id){
        id = normalizeLangName(id);
        return (manager.alias && manager.alias[id]) || id;
    }

    function degrade(id){
        var degradeMap = manager.degrade;
        if(degradeMap && degradeMap[id]){
            return degradeMap[id];
        }

        var matched = String(id).match(/^([a-zA-Z]+)([_-][a-zA-Z]+)?$/);
        if(matched){
            var mainLang = matched[1].toLowerCase();

            if(matched[2]){
                return mainLang;
            } else if (mainLang !== placeHolder) {
                return placeHolder;
            }
        }
        return null;
    }

    function getUrl(path, id){
        path = /\/$/.test(path) ? path : path + '/';
        var fileName = id === placeHolder ?
                placeHolder + '.js' :
                manager.fileNameTemplate.replace(/\$\{lang\}/gi, id);
        return path + fileName;
    }

    //take in register queue
    function takeinDefQueue(){
        var langs = window.sap && sap.viz && sap.viz.extapi && sap.viz.extapi.manifest &&
                sap.viz.extapi.manifest._queue && sap.viz.extapi.manifest._queue.language &&
                sap.viz.extapi.manifest._queue.language.registerList;

        if(langs){
            for(var i = 0; i < langs.length; ++i){
                manager.register(langs[i]);
            }
            // For multiple require contexts to work.
            //sap.viz.extapi.manifest._queue.language.registerList = [];
        }
    }

    takeinDefQueue();
    return manager;
});

define('sap/viz/data/description/MeasureValuesGroup',['sap/viz/data/description/MeasureValues','sap/viz/base/utils/FunctionUtils', 'sap/viz/lang/langManager', 'exports'],
 function Setup(MeasureValues, FunctionUtils, langManager){
   
   var MeasureValuesGroup = function(data){
       this._measureValues = [];
       this.init(data);
   };
   
   MeasureValuesGroup.prototype.init = function(data){
     
       for(var i = 0; i < data.length; i++){
           this._measureValues[i] = new MeasureValues(data[i]["name"], data[i]["values"]);
           this._measureValues[i].fake(data[i]["isFake"] ? data[i]["isFake"] : false);
           this._measureValues[i].infos(data[i]["infos"] ? data[i]["infos"] : null);
       }
   };
   
   MeasureValuesGroup.prototype.getMeasureValues = function(){
       return this._measureValues;
   };
   
   MeasureValuesGroup.prototype.getType = function(){
       return "measureValuesGroup";
   };
   
   MeasureValuesGroup.prototype.validate  = function(labels){
       
      var measures, value, i, j;
      if (!arguments.length){
        var label = [1,1];
        measures = this.getMeasureValues();
        for(i = 0; i < measures.length;i++){
          value = measures[i].getValues();
          if(i === 0){
           if(value.length !== label[1]){
              FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',measures[i].getId(), label[1]));
           }
           
           label[0] = value[0].length;
           
          }else{
            if(value.length !== label[1]){
               FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2', measures[i].getId(), label[1]));
            }
            
            for(j = 0; j < value.length; j++){
              if(value[j].length !== label[0] ){
                 FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1', measures[i].getId(),label[0] ));
              }
            }  
          }
          
        }
        
        return label;
        
      }else{
        measures = this.getMeasureValues();
        for(i = 0; i < measures.length;i++){
          value = measures[i].getValues();
          if(value.length !== labels[1]){
             FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2', measures[i].getId(), labels[1]));
          }
          
          for(j = 0; j < value.length; j++){
            if(value[j].length !== labels[0] ){
               FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2',measures[i].getId(), labels[0] ));
            }
          }
        }
      }
     
   };
   
   MeasureValuesGroup.prototype.hasFakeData = function(){
      var measures = this.getMeasureValues();
      for(var i = 0; i < measures.length;i++){
        if(measures[i].fake()){
           return true;
        }
      }
      
      return false;
   };
   
   return MeasureValuesGroup;
 });
define('sap/viz/data/description/DimensionLabels',['sap/viz/base/utils/ObjectUtils','sap/viz/data/description/DataContainer', 'exports'],
function Setup(ObjUtils, DataContainer){
   
  
     var DimensionLabels = DataContainer.extend({
      
       /**
          * @name sap.viz.data.description.DimensionLabels
          * @param   uid    identifier of dimension labels, usually name 
        */
      
       constructor : function ( uid, type, values ) {
           this._type = type;
           this._values = values;
       },
       
       getValues : function(){
           return this._values;
       },
         
       getType : function(){
           return this._type;
       }
       
    });
     
     
     return DimensionLabels;
  });
define('sap/viz/data/description/AnalysisAxis',['sap/viz/data/description/DimensionLabels','sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/TypeUtils', 'sap/viz/lang/langManager', 'exports'],
 function Setup(DimensionLabels, FunctionUtils, TypeUtils, langManager){
   
   var AnalysisAxis = function(data){
     this._dimensionLabels = [];
     this.init(data);
    
   };
   
   AnalysisAxis.prototype.init = function(data){
     
       for(var i = 0; i < data.length; i++){
         this._dimensionLabels[i] = new DimensionLabels(data[i]["name"], data[i]["type"]? data[i]["type"] : "Dimension",
                                                    data[i]["values"] );
         
         this._dimensionLabels[i].fake( data[i]["isFake"] ? data[i]["isFake"] : false);
         this._dimensionLabels[i].infos( data[i]["infos"] ? data[i]["infos"] : null);
       }
   };
   
   AnalysisAxis.prototype.getDimensionLabels = function(){
     return this._dimensionLabels;
   };
   
   AnalysisAxis.prototype.getType = function(){
     return "analysisAxis";
   };
   
   AnalysisAxis.prototype.validate  = function(){
      
      var labels = 1;
      var dimensions = this.getDimensionLabels();
      if (dimensions.length === 0){
        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_NOT_ZERO'));
      }
      for(var i = 0; i < dimensions.length;i++){
        if(i === 0){
           labels = dimensions[i].getValues().length;
           if(TypeUtils.isExist(dimensions[i].infos()) && labels !== dimensions[i].infos().length){
              FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_COUNT', dimensions[i].getId()));
           }
        }
        else{
         if(labels !== dimensions[i].getValues().length){
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT', dimensions[i].getId()));
         }
         
         if(TypeUtils.isExist(dimensions[i].infos()) && labels !== dimensions[i].infos().length){
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_DIMENSION_WRONG_COUNT', dimensions[i].getId()));
         }
        }
      }
      
      return labels;
     
   };
   
   AnalysisAxis.prototype.hasFakeData = function(){
      var dimensions = this.getDimensionLabels();
      for(var i = 0; i < dimensions.length;i++){
        if(dimensions[i].fake()){
           return true;
        }
      }
      
      return false;
   };
   
   return AnalysisAxis;
 });
define('sap/viz/data/feed/feed',['sap/viz/base/utils/FunctionUtils'],
 function Setup(FunctionUtils){
   
   return function(feedId, feedName, type, min, max, aaIndex, acceptMND, mgIndex, maxStackedDims, minStackedDims){
     
         var _feedId = feedId;
         var _feedName = feedName;
         var _type = type;
         var _min = min;
         var _max = max;
         var _aaIndex = aaIndex;
         var _acceptMND = acceptMND;
         var _mgIndex = mgIndex;
         var _maxStackedDims = maxStackedDims;
         var _minStackedDims = minStackedDims;
         
         var _data = [];
     
       function feed() {
         return feed;
       }
       
       feed.feedId = function(_){  
         if (!arguments.length){
             return _feedId;
         }
        
         _feedId = _;
         
         return feed;
       };
       
       feed.feedName = function(_){
         if (!arguments.length){
             return _feedName;
         }
         
         _feedName = _; 
         
         return feed;
       };
       
       feed.type = function(_){
         if (!arguments.length){
             return _type;
         }
         
        _type = _;
        
        return feed;
       };
       
       feed.min = function(_){    
         if (!arguments.length){
            return _min;     
         }
     
         _min =  _;
         return feed;
       };
       
       feed.max = function(_){
         if (!arguments.length){
             return _max;
         }
         
         
         _max = _;
         
         return feed; 
       };
       
       feed.analysisAxisIndex = function(_){
         if (!arguments.length){
             return _aaIndex;  
         }
         
         
         _aaIndex = _;
         
         return feed;
       };
      
       feed.measureGroupIndex = function(_){
         if (!arguments.length){
             return _mgIndex;
         }
         
         _mgIndex = _;
         
         return feed;
       };
       
       feed.acceptMND = function(_){
         if (!arguments.length){
             return _acceptMND;  
         }
         
         
         _acceptMND = _;
         
         return feed;
       };
       
       feed.maxStackedDims = function(_){
         if (!arguments.length){
             return _maxStackedDims;
         }
         
         _maxStackedDims = _;
         
         return feed;
       };
       feed.minStackedDims = function(_){
         if (!arguments.length){
             return _minStackedDims;
         }
         
         _minStackedDims = _;
         
         return feed;
       };
       
       feed.data = function(_){
         if (!arguments.length){
             return _data;
         }
         
         _data = _;
         
         return feed;
       };
       
       
       feed.addData = function(_){
         _data.push(_);
         return feed;
       };
       
       feed.getMeasureNames = function(){
         
         var mgIndex  =  _mgIndex - 1;
         var measureNames = [];
         for(var i = 0; i < _data.length; i++){
             measureNames.push({'val':_data[i]['name'],'ctx': {'mg': mgIndex, 'mi': i}});
         }
         
         return measureNames;
       };
       
         feed.getMeasureValues = function(){
         var values = [];
         if(_data.length > 0){
            return _data[0].getMeasureValues();
         }
         
         return values;
           
       };
       
         feed.getMeasureCount = function(){
            return _data.length;
       };
     
       /**
        * @returns check if the feed has been feeded MND
        */
       feed.hasMNDFeeded = function(){
          
          var data = feed.data();
          for(var i = 0; i < data.length; i++){
            if(data[i].getType() === "measureNamesDimension"){
               return true;
            }
          }
          
          return false;
       };
       
       feed.hasFeeded = function(){
          return feed.data().length > 0 ?  true : false;
       };
       
       feed.getIndex = function(){
          return feed.analysisAxisIndex() ? feed.analysisAxisIndex() : feed.measureGroupIndex();
       };
       
       feed.getDataCount = function(){
         if(feed.type() === "Dimension"){
            return feed.data().length;
         }
         else{
            return feed.data().length > 0 ? feed.data()[0].getMeasureValues().length : 0; 
         }
          
       };
       
     return feed;
   };
  
 });
define(
		'sap/viz/data/feed/feeder',[ 'sap/viz/data/feed/feed', 'sap/viz/base/utils/FunctionUtils',
				'sap/viz/base/utils/TypeUtils',
				'sap/viz/data/description/DimensionLabels',
				'sap/viz/lang/langManager' ],
		function Setup(Feed, FunctionUtils, TypeUtils, DimensionLabels,
				langManager) {

			return function(feedDefs, crossTableDS, feedingInfo) {

				var FEED_D = 'Dimension';
				var FEED_M = 'Measure';

				var FEEDID = "feedId";

				var BINDTO = "binding";
				var TYPE = "type";
				var INDEX = "index";

				var _aaMap = []; // analysis axis index to feed map,
									// _aamap[0] point to feed of axis 1
				var _mgMap = []; // measure group index to feed map,
									// _mgMap[0] point to feed of measure value
									// group 1
				var _feeds = [];
				var _feedsMap = {};

				var _aaBindingInfo = [];

				function feeder() {

					return feeder;
				}

				feeder.init = function() {
					initFeeds(feedDefs);

					// TODO separate validation and init
					if (crossTableDS) {
						if (feedingInfo) {
							manualFeed(crossTableDS, feedingInfo);
						} else {
							autoFeed(crossTableDS);
						}

						feeder.checkValid();
					}
				};

				/**
				 * @returns {feed}
				 */
				feeder.getFeeds = function() {
					return _feeds;
				};

				/**
				 * @param feedId
				 *            feed id
				 * 
				 * @returns {feed} undefined if no feed matched
				 * 
				 */
				feeder.findFeed = function(feedId) {
					return _feedsMap[feedId];
				};

				feeder.getAnalysisAxisIndex = function(feed) {

					for ( var i = 0; i < _aaMap.length; i++) {
						if (_aaMap[i] === feed) {
							return i;
						}
					}

				};

				feeder.getMeasureValuesGroupIndex = function(feed) {

					for ( var i = 0; i < _mgMap.length; i++) {
						if (_mgMap[i] === feed) {
							return i;
						}
					}

				};

				/**
				 * TODO: add description
				 */
				feeder.getMeasureValuesGroupFeeds = function() {

					return _mgMap;
				};

				/**
				 * Check if meta data and raw data are matched. If not match,
				 * throw exception
				 */
				feeder.checkValid = function() {
					for ( var i = 0; i < _feeds.length; i++) {
						var feed = _feeds[i];
						var dataLength;
						if (feed.type() === "Dimension") {
							dataLength = feed.getDataCount();
							if (dataLength < feed.min()
									|| (feed.max() !== Number.POSITIVE_INFINITY && dataLength > feed
											.max())) {
								FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', feed.feedId()));
							}

						} else if (feed.type() === "Measure") {
							dataLength = feed.getDataCount();
							if (dataLength < feed.min()
									|| (feed.max() !== Number.POSITIVE_INFINITY && dataLength > feed
											.max())) {
								FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', feed.feedId()));
							}

						} else {
							FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_FEED_TYPE', feed.feedId()));
						}

					}

				};

				feeder.getBindingInfo = function() {

					return _aaBindingInfo;
				};

				/**
				 * TODO: add desc
				 */
				function initFeeds(feedDefinitions) {
					if (TypeUtils.isArray(feedDefinitions)) {

						var dimensonNumber = 0;

						for ( var i = 0; i < feedDefinitions.length; i++) {

							var feedType = feedDefinitions[i]['type'];
							var aaIndex = feedDefinitions[i]['aaIndex'];
							var feedId = feedDefinitions[i]['id'];

							if (feedType !== FEED_D && feedType !== FEED_M) {
								FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION', feedDefinitions[i]['id']));
							}

							if (feedDefinitions[i]['type'] === FEED_D) {
								if (feedDefinitions[i]['aaIndex'] <= 0) {
									FunctionUtils .error(langManager .getLogMessage('IDS_ERROR_WRONG_AXIS_INDEX', feedDefinitions[i]['id'] ));
								}

								dimensonNumber++;
							}

							if (feedDefinitions[i]['type'] === FEED_M) {
								if (feedDefinitions[i]['mgIndex'] <= 0) {
									FunctionUtils .error(langManager .getLogMessage('IDS_ERROR_WRONG_MEASURE_AXIS_INDEX',  feedDefinitions[i]['id']));
								}

							}

							var arrayLength = _feeds.push(Feed(feedId,
									feedDefinitions[i]['name'], feedType,
									feedDefinitions[i]['min'],
									feedDefinitions[i]['max'], aaIndex,
									feedDefinitions[i]['acceptMND'],
									feedDefinitions[i]['mgIndex'],
									feedDefinitions[i]['maxStackedDims'],
									feedDefinitions[i]['minStackedDims']));

							_feedsMap[feedId] = _feeds[arrayLength - 1];

						}

						for (i = 0; i < dimensonNumber; i++) {
							_aaBindingInfo[i] = false;
						}
					}

				}

				function autoFeed(crosstableDS) {
					var axes = crosstableDS.getAnalysisAxisCount();
					var feed;
					for ( var i = 0; i < axes; i++) {
						feed = searchFeed(_feeds, FEED_D, i + 1);
						if (feed) {
							var axis = crosstableDS.getAnalysisAxisByIdx(i);
							if (TypeUtils.isExist(feed.maxStackedDims())
									&& axis.getDimensionLabels().length > feed
											.maxStackedDims()) {
								FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feed.feedId()));
							}
							if (TypeUtils.isExist(feed.minStackedDims())
									&& axis.getDimensionLabels().length < feed
											.minStackedDims()) {
								FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feed.feedId()));
							}

							_aaMap[i] = feed;
							_aaBindingInfo[i] = true;
							feed.addData(axis);
						}
					}

					var mvgs = crosstableDS.getMeasureValuesGroupCount();
					for (i = 0; i < mvgs; i++) {
						feed = searchFeed(_feeds, FEED_M, i + 1);
						if (feed) {
							_mgMap[i] = feed;
							if(crosstableDS.getMeasureValuesGroupByIdx(i)){
							  feed.addData(crosstableDS
									.getMeasureValuesGroupByIdx(i));
							}
						}

					}
				}

				function searchFeed(feeds, type, index) {
					for ( var i = 0; i < feeds.length; i++) {
						if (feeds[i].type() === type
								&& feeds[i].getIndex() === index) {
							return feeds[i];
						}
					}

					return null;
				}

				function manualFeed(crosstableDS, feedList) {
					var dataLength;
					for ( var i = 0; i < feedList.length; i++) {
						var feeding = feedList[i];
						var feedId = feeding[FEEDID];
						if (!feedId) {
							FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NO_FEED_ID'));
						}

						var feed = _feedsMap[feedId];
						if (!feed) {
							FunctionUtils.error(langManager .getLogMessage('IDS_ERROR_INVALID_FEEDING_NUMBER',feedId));
						}

						var bindings = feeding[BINDTO];
						for ( var j = 0; j < bindings.length; j++) {
							var type = bindings[j][TYPE];
							var index = bindings[j][INDEX];

							if (type === "analysisAxis") {
								var aa = crosstableDS
										.getAnalysisAxisByIdx(index - 1);
								if (!aa) {
									FunctionUtils.error(langManager .getLogMessage('IDS_ERROR_NO_AXIS', index, feedId));
								}

								if (TypeUtils.isExist(feed.maxStackedDims())
										&& aa.getDimensionLabels().length > feed
												.maxStackedDims()) {
									FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feedId));
								}
								if (TypeUtils.isExist(feed.minStackedDims())
										&& aa.getDimensionLabels().length < feed
												.minStackedDims()) {
									FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_INVALID_FEEDING', feedId));
								}

								dataLength = feed.getDataCount();
								if (feed.max() !== Number.POSITIVE_INFINITY
										&& dataLength >= feed.max()) {
									FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA', feedId));
								}

								feed.addData(aa);
								_aaMap[index - 1] = feed;
								_aaBindingInfo[feed.getIndex() - 1] = true;

							} else if (type === "measureValuesGroup") {

								var mvg = crosstableDS
										.getMeasureValuesGroupByIdx(index - 1);
								if (!mvg) {
									FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_FIND_MEASURE_GROUP', index, feedId));
								}

								dataLength = feed.getDataCount();
								if (feed.max() !== Number.POSITIVE_INFINITY
										&& dataLength >= feed.max()) {
									FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA', feedId));
								}

								feed.addData(mvg);
								_mgMap[feed.getIndex() - 1] = feed;

							} else if (type === "measureNamesDimension") {
								if (feed.acceptMND() < 0) {
									FunctionUtils
											.error(langManager
													.getLogMessage('IDS_ERROR_NOT_ACCEPT'),
													"MeasureNamesDimension "
													+ feedId
													+ " "
													+ langManager
															.get('IDS_FEED'));
								}

								dataLength = feed.getDataCount();
								if (feed.max() !== Number.POSITIVE_INFINITY
										&& dataLength >= feed.max()) {
									FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA', feedId));
								}

								feed.addData(new DimensionLabels("",
										"measureNamesDimension", ""));

							} else {
								FunctionUtils
										.error(langManager
												.getLogMessage('IDS_ERROR_INVALID_BINDING'));
							}
						}

					}

				}

				feeder.init();

				return feeder;
			};

		});
define('sap/viz/data/info/Handler',['sap/viz/base/utils/ObjectUtils','sap/viz/base/utils/TypeUtils'],
function Setup(ObjectUtils, TypeUtils) {
  var ANALYSISAXIS = "analysisAxis";
  var MEASUREVALUESGROUP = "measureValuesGroup";
  var handler = {};
  var _handlers = {};
  /*
   {
   'analysisAxis': [{
   'index': 1,
   'data': [{
   'name': 'Product',
   'values': ['Car', 'Truck', 'Motorcycle', 'Bicycle']
   }]
   }, {
   'index' : 2,
   'data': [{
   'name': 'Country',
   'values': ['China', 'USA']
   }, {
   'name': 'Year',
   'values': ['2001', '2001']
   }]
   }],
   'measureValuesGroup': [{
   'index': 1,
   'data': [{
   'name': 'Profit',
   'values': [[25, 136, 23, 116], [58, 128, 43, 73]]
   }, {
   'name': 'Revenue',
   'values': [[50, 236, 43, 126], [158, 228, 143, 183]]
   }]
   }]};
   * */
  
  function findInJson(jsondata, targetname){
    var anax = jsondata[ANALYSISAXIS].concat(jsondata[MEASUREVALUESGROUP]);
    var ret = [];
    anax.forEach(function(ana, idx){
      var anad = ana.data;
      anad.forEach(function(d, didx){
        if(d.name === targetname){
          ret.push(d);
        }
      }, this);
    }, this);
    return ret;
  }
  var valueinfo = {
    'type' : 'valueinfo',
    /**
     *This function is only used by ZEN-waterfall chart which does not meet other regular charts' valueinfo requirements. More details about this, please ask Fei Christy.
     * example: 
          var ds = new CrosstableDataset();
          ds.data({
            'analysisAxis' : [ {
              'index' : 1,
              'data' : [ {
                'type' : 'Dimension',
                'name' : 'Country',
                'values' : [ 'C1', 'C2', 'C1-C2 total', 'C3', 'Total' ]
              } ]
            }, {
              'index' : 2,
              'data' : [ {
                'type' : 'Dimension',
                'name' : 'Region',
                'values' : [ 'Asia', 'Europe' ]
              } ]
            } ],
            'measureValuesGroup' : [ {
              'index' : 1,
              'data' : [ {
                'type' : 'Measure',
                'name' : 'Profit',
                'values' : [ [ 10, 10, 20, -40, -20], [ 22, -20, 2, 50, 52] ]
              } ]
            } ]
          });
          ds.info({
              'type' : 'valueinfo',
              'value' : [undefined,undefined,{'isTotal' : true}, undefined, {'isTotal' : true}] 
            });
     * result:
          the value of 'ds._crosstableDataset._dataSet.measureValuesGroup[0].data[0].infos' is: 
          [[{'valueinfo': undefined}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}
            ],[
            {'valueinfo': undefined}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}, {'valueinfo': undefined}, {'valueinfo': {'isTotal' : true}}
            ]
          ]
     */
    'process' : function(value, jsondata){
      var i, iLen, j, jLen, k, kLen, m, mLen;
      var iterate, mgValue, mg, dValues, measureGroups = jsondata[MEASUREVALUESGROUP];
      for (i = 0, iLen = value.length; i < iLen; i++) {
        iterate = value[i];
        if (iterate !== undefined) {
          for (j = 0, jLen = measureGroups.length; j < jLen; j++) {
            mg = measureGroups[j];
            mgValue = mg.data;
            for (k = 0, kLen = mgValue.length; k < kLen; k++) {
              dValues = mgValue[k];
              if (!dValues.infos) {
                dValues.infos = [];
              }
              for (m = 0, mLen = dValues.values.length; m < mLen; m++) {
                if (!dValues.infos[m]) {
                  dValues.infos[m] = [];
                }
                if (!dValues.infos[m][i]) {
                  dValues.infos[m][i] = {};
                }
                dValues.infos[m][i][valueinfo.type] = iterate;
              }
            }
          }
        }
      }
//      var iterate, dname, finds, d, dvalue;
//      var i, iLen, j, jLen, k, kLen, m, mLen;
//      for(i = 0, iLen = value.length; i < iLen; i++) {
//        iterate = value[i];
//        dname = iterate.name;
//        finds = findInJson(jsondata, dname);
//        for(j = 0, jLen = finds.length; j < jLen; j++){
//          d = finds[j];
//          if (iterate.value) {
//            if (!d.infos) {
//              d.infos = [];
//            }
//            for(k = 0, kLen = d.values.length; k < kLen; k++){
//              d.infos[k] = [];
//              dvalue = d.values[k];
//              for(m = 0, mLen = dvalue.length; m < mLen; m++){
//                if(d.infos[k][m] === undefined){
//                  d.infos[k][m] = {};
//                }
//                d.infos[k][m][valueinfo.type] = iterate.value[k][m];
//              }
//            }
//          }
//        }
//      }
    },
    'merge' : function(jsondata){

    }, 

    'remove' : function(jsondata) {
      measureInfoRemove(valueinfo.type, jsondata);
    }
  };  

  /**
   * [26-Feb-2013 Nick]
   * Default selection is bind with data model, it has the similar mechanism as custom label has.
   */
  
    var defaultSelection = {
    'type' : 'defaultSelection',
    'process' : function(info, data) {
      var iterate;
      var aa1, aa2, len;
      var hasAA2 = (data[ANALYSISAXIS] &&  data[ANALYSISAXIS][1]) ? true : false;
      var aa1Length = data[ANALYSISAXIS] ? data[ANALYSISAXIS][0].data[0].values.length : data[MEASUREVALUESGROUP][0].data[0].values[0].length, 
          aa2Length = hasAA2 ? data[ANALYSISAXIS][1].data[0].values.length : 1;
      var i, m, n;
      var defaultSelectionInfo, temp;

      for (i = 0, len = info.length; i < len; i++) {
        aa1 = new Array(aa1Length), aa2 = new Array(aa2Length);
        defaultSelectionInfo = [];
        iterate = info[i];
        AAContextConstructor(data, iterate, aa1, aa2);
        // if analysis axis 2 does not exit, we think it is selected by default.
        if (!hasAA2) {
          aa2[0] = true;
        }
        // Construct a two-dimensional array, which is aa2.length * aa1.length. Each member is a object like:
        //    'defaultSelection' : {
        //        isSelected : false,
        //        index : i
        //      }
        // According to aa1 and aa2 arrays, the 'isSelected' of corresponding object is changed from false to true.
        for (m = 0; m < aa2.length; m++) {
          temp = [];
          for (n = 0; n < aa1.length; n++) {
            var ctxObj = {
              'defaultSelection' : {
                isSelected : false,
                index : i
              }
            };
            if (aa2[m] && aa1[n]) {
              ctxObj.defaultSelection.isSelected = true;
            }
            temp.push(ctxObj);
          }
          defaultSelectionInfo.push(temp);
        }
        // Attach the default selection object to each data object.
        MGContextConstructor(data, iterate, defaultSelectionInfo);
      }

    },
  
  'remove' : function(jsondata) {
    measureInfoRemove(defaultSelection.type, jsondata);
  },
    'merge' : function(jsondata){}
  };
  
  function measureInfoRemove(infoName, jsondata) {
    var iterate, d, dvalue, value = jsondata[MEASUREVALUESGROUP];
    if (!value || !TypeUtils.isArray(value)) {
        return;
      }
    var i, iLen, j, jLen, k, kLen, m, mLen;
    var stillHasInfo = false;
    for (i = 0, iLen = value.length; i < iLen; i++) {
      iterate = value[i].data;
      for (j = 0, jLen = iterate.length; j < jLen; j++) {
        d = iterate[j];
        if (d.infos) {
          stillHasInfo = false;
          for (k = 0, kLen = d.infos.length; k < kLen; k++) {
            dvalue = d.infos[k];
            for (m = 0, mLen = dvalue.length; m < mLen; m++) {
              if (dvalue[m]) {
                delete dvalue[m][infoName];
                if (TypeUtils.isEmptyObject(dvalue[m])) {
                  dvalue[m] = undefined;
                } else {
                  stillHasInfo = true;
                }
              }
            }
          }
        }
        if (!stillHasInfo) {
          delete d.infos;
        }
      }
    }
  }
  
  /**
   * [26-Feb-2013 Nick] 
   * This function is to process which elements are selected in analysis axises 1 and 2.
   * aa1 is the array that records which elements are selected in analysis axis 1.
   * aa2 is the array that records which elements are selected in analysis axis 2.
   */
  function AAContextConstructor(jsondata, target, aa1, aa2){
    var analysisAxis = jsondata[ANALYSISAXIS];
    if(!analysisAxis){
      for(var index = 0; index < aa1.length; index++){
        aa1[index] = true;
      }
      return;
    }
    analysisAxis.forEach(function(ana, idx){
		var anad = ana.data;
		
		anad.forEach(function(d, didx){
			var value = target[d.name];
			for(var i=0; i<d.values.length; i++){
				var isMatch = (value === '*' || (value !== null && d.values[i] === value ));
				if( isMatch ){
					if(didx === 0){
						if(ana.index === 1){
							aa1[i] = true;
						}else{
							aa2[i] = true;
						}
					}else{
						if(ana.index === 1){
							if(aa1[i] !== true){
								aa1[i] = undefined;
							}
						}else{
							if(aa2[i] !== true){
								aa2[i] = undefined;
							}
						}
					}
				}else{
					if(ana.index === 1){
						aa1[i] = undefined;
					}else{
						aa2[i] = undefined;
					}
				}
				}
			}, this);
		}, this);
  }
  
  /**
   * [26-Feb-2013 Nick] 
   * This function is to process which elements are selected in measures.
   */
  function MGContextConstructor(jsondata, target, defaultSelectionInfo) {
    var measureGroup = jsondata[MEASUREVALUESGROUP];
    var unSelectionInfo = [], temp, m, n;
    for (m = 0; m < defaultSelectionInfo.length; m++) {
      temp = [];
      for (n = 0; n < defaultSelectionInfo[m].length; n++) {
        var ctxObj = {
          'defaultSelection' : {
            isSelected : false
          }
        };
        temp.push(ctxObj);
      }
      unSelectionInfo.push(temp);
    }
    measureGroup.forEach(function(ana, idx) {
      var anad = ana.data;
      var i, j, selectedTarget;
      anad.forEach(function(d, didx) {
        if (d.name === target['Measure']) {
          selectedTarget = defaultSelectionInfo;
        } else {
          selectedTarget = unSelectionInfo;
        }
        if (!d.infos) {
          d.infos = selectedTarget;
        } else {
          for (i = 0; i < selectedTarget.length; i++) {
            var aa1 = selectedTarget[i];
            var daa1 = d.infos[i];
            for (j = 0; j < aa1.length; j++) {
              var alreadySelected = daa1[j]['defaultSelection'].isSelected;
              if (!alreadySelected) {
                daa1[j]['defaultSelection'] = aa1[j]['defaultSelection'];
              }
            }
          }
        }
      }, this);
    }, this);
  }
  
  var customlabel = {
    'type' : 'customlabel',
    /*'value': [{
     'name': 'Country', //dimension name
     'mapping': {'CHN', {'type': 'url', 'val': 'http://xxxx/xxxx.png'},
     'GER', {'type': 'string', 'val': 'Germany'},
     'FRA', {'type': 'string', 'val': 'France'}} //support both string and url
     }] //you can have several mappings, it will be merged inside crosstable dataset. no info will be created (existed will be deleted) if the mapping value is same as the original value.*/
    'process' : function(value, jsondata) {
      var iterate, dname, finds, mapping, m, dvalues, mappingfound, removeinfo;
      for(var i = 0, len = value.length; i < len; i++) {
        iterate = value[i];
        dname = iterate.name;
        finds = findInJson(jsondata, dname);
        finds.forEach(function(d, tdidx) {
          //if no infos exist, create one, delete it if no info found
          mappingfound = false;
          if(!d.infos){
            removeinfo = true;
            d.infos = [];
          }
          
          dvalues = d.values;          
          mapping = iterate.mapping;
          dvalues.forEach(function(v, idx) {
            if(mapping[v]){
              if(mapping[v].type === 'string' && mapping[v].val === v){
                //we won't create mapping for it. existing mapping should be deleted
                if(d.infos[idx]){
                  delete d.infos[idx][customlabel.type];
                  //if it becomes empty, set it to undefined
                  if(TypeUtils.isEmptyObject(d.infos[idx])){
                    d.infos[idx] = undefined;
                  }
                }else{
                  //tipjira BITVIZA-1181
                  //if current value happens to be the last value, we won't create anything for it
                  //then d.infos will be shorter than d.values which is not allowed
                  //so here we should create something for it.
                  d.infos[idx] = undefined; 
                } 
              }else{
                mappingfound = true;
                d.infos[idx] = d.infos[idx] ? d.infos[idx] : {};
                d.infos[idx][customlabel.type] = mapping[v];  
              }
            }else{
              if(!d.infos[idx]){
                d.infos[idx] = undefined;
              }
            }  
          }, this);

          if(removeinfo && !mappingfound){
            delete d.infos;
          }
        }, this);
      }
    },
    
    'merge' : function(jsondata){
      var ret = {};
      ret.type = customlabel.type;
      ret.value = [];
      var anax = jsondata[ANALYSISAXIS];
      if (!anax || !TypeUtils.isArray(anax)) {
        return;
      }
      var found;
      anax.forEach(function(ana, idx){
        var anad = ana.data;
        anad.forEach(function(d, didx){
          if(d.infos){
            var dmapping = {};
            dmapping.name = d.name;
            dmapping.mapping = {};
            found = false;
            d.infos.forEach(function(dinfo, dinfoidx){
              if(dinfo && dinfo[customlabel.type]){
                found = true;
                dmapping.mapping[d.values[dinfoidx]] = dinfo[customlabel.type];
              }
            }, this);
            if(found){
              ret.value.push(dmapping);
            }
          }
        }, this);
      }, this);
      if(ret.value.length > 0){
        return ret;
      }  
    },
    
    'remove' : function(jsondata){
      var anax = jsondata[ANALYSISAXIS];
      var stillHasInfo = false;
      anax.forEach(function(ana, idx){
        var anad = ana.data;
        anad.forEach(function(d, didx){
          if(d.infos){
            stillHasInfo = false;
            d.infos.forEach(function(dinfo, dinfoidx){
              if(dinfo){
                delete dinfo[customlabel.type];
                if(TypeUtils.isEmptyObject(dinfo)){
                  d.infos[dinfoidx] = undefined;
                }else{
                  stillHasInfo = true;
                }
              }
            }, this);
            if(!stillHasInfo){
              delete d.infos;
            }
          }
        }, this);
      }, this);
    }
  };

  handler.register = function(hndl) {
    _handlers[hndl.type] = hndl;
  };

  handler.get = function(type) {
    return _handlers[type];
  };
  
  /*
   * call each handler to extract corresponding info to an object and return
   */
  handler.mergeInfo = function(jsondata){
    var iter, ret = [], mr;
    for(var type in _handlers){
      if(_handlers.hasOwnProperty(type)){
        iter = _handlers[type];
        mr = iter.merge(jsondata);
        if(mr){
          //return a copy, intend to use ObjectUtils as we want to deep copy the array
          ret.push(ObjectUtils.extend(true, {}, mr));
        }
      }
    }
    return ret;
  };
  
  handler.register(customlabel);
  handler.register(defaultSelection);
  handler.register(valueinfo);
  
  return handler;

});
define('sap/viz/data/info/CrosstableHandler',['sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/ObjectUtils'],
function Setup (TypeUtils, ObjectUtils) {
	var ANALYSISAXIS = "analysisAxis";
	var MEASUREVALUESGROUP = "measureValuesGroup";
	var handler = {};
	var internalHandlers = {}; // for internal use and don't support info.get function
	var externalHandlers = {}; // for external use and support info.get function
	
	handler.register = function(hndl, isExternal) {
		if (isExternal) {
			externalHandlers[hndl.type] = hndl;
		} else {
			internalHandlers[hndl.type] = hndl;
		}
	};
	
	handler.get = function(type) {
		if (externalHandlers[type]) {
			return externalHandlers[type];
		} else {
			return internalHandlers[type];
		}
	};
	
	handler.getExternal = function(type) {
		if (externalHandlers[type]) {
			return externalHandlers[type];
		}
	};
	handler.storeInfo = function(allInfos, info) {
		if (externalHandlers[info.type] && info.hasOwnProperty('info')) {
			allInfos[info.type] = {'type': info.type, 'info': info.info};
		}
	};
	handler.mergeInfo = function(allInfos){
		var ret = [];
		for(var type in externalHandlers){
			if(allInfos.hasOwnProperty(type)){
				var hndl = allInfos[type];
				var mr = {};
				mr.type = hndl.type;
				mr.info = hndl.info;
				if(mr.info !== "undefined"){
				// return a copy, intend to use ObjectUtils as we want to deep copy the array
					ret.push(ObjectUtils.clone(mr));
				}
			}
		}
		return ret;
	};
	
	var additionalData = {
		'type': "additionalData",
		/*
		info : [{
			name : "<dimension_name>",
			// Match dimension member's 1D Array structure
			infoValues : [{
				featureId : "<featureId1>",
				isTotal : true
			}, {
				featureId : "<featureId2>",
				isTotal : false
			}]
		}, {
			name : "<rangeure_name>",
			// Match rangeure value's 2D Array structure
			infoValues : [[{
				adata1 : "<adata1>",
				adata2 : true
			}, {
				adata1 : "<adata2>",
				adata2 : false
			}], [{
				adata1 : "<adata3>",
				adata2 : true
			}, {
				adata1 : "<adata4>",
				adata2 : false
			}]]
		}]
		*/
		'process': function (info, jsondata, dimensions, measures) {
			if (!info.hasOwnProperty('info')) {
				return;
			}
			var _info = ObjectUtils.clone(info.info);
			if (_info === undefined || (TypeUtils.isArray(_info) && _info.length === 0)) {
				removeInfo(additionalData.type, jsondata, dimensions, measures);
				return;
			} else if (!TypeUtils.isArray(_info)) {
				return;
			}
			removeInfo(additionalData.type, jsondata, dimensions, measures);
			var found = false;
			for (var i = 0; i < _info.length; i++) {
				found = false;
				for (var j = 0; j < dimensions.length; j++) {
					if (dimensions[j].name === _info[i].name) {
						var index = dimensions[j].index;
						var loc = dimensions[j].location;
						if (!_info[i].hasOwnProperty('infoValues')) {
							break;
						} else if (_info[i].infoValues === undefined) {
							_info[i].infoValues = [];
						} else if (!TypeUtils.isArray(_info[i].infoValues)) {
							break;
						}
						setDimensionInfoValues(jsondata[ANALYSISAXIS][index].data[loc], _info[i].infoValues, additionalData.type);
						found = true;
						break;
					}
				}
				if (found) {
					continue;
				}
				for (var j = 0; j < measures.length; j++) {
					if (measures[j].name === _info[i].name) {
						var index = measures[j].index;
						var loc = measures[j].location;
						if (!_info[i].hasOwnProperty('infoValues')) {
							break;
						} else if (_info[i].infoValues === undefined) {
							_info[i].infoValues = [];
						} else if (!TypeUtils.isArray(_info[i].infoValues)) {
							break;
						}
						setMeasureInfoValues(jsondata[MEASUREVALUESGROUP][index].data[loc], _info[i].infoValues, additionalData.type);
						break;
					}
				}
			}
		}
	};
	
	var customlabel = {
		'type': "customlabel",
		/*
		info : [{
			name : "<dimension_name>",
			// INTERNAL usage for customlabel only
			infoMappings : {
				"CHN" : {
					type : "String",
					val : "China"
				},
				"US" : {
					type : "url",
					val : "http://aa.bb.cc"
				}
			} 
		}]
		*/
		'process': function (info, jsondata) {
			var _info = info.info;
			if (_info === undefined || !TypeUtils.isArray(_info)) {
				return;
			}
			if (jsondata[ANALYSISAXIS] === undefined) {
				return;
			}
			var iterate, dname, finds, mapping, m, dvalues, mappingfound, removeinfo;
			for(var i = 0, len = _info.length; i < len; i++) {
				iterate = _info[i];
				dname = iterate.name;
				finds = findInJson(jsondata, dname);
				finds.forEach(function(d, tdidx) {
					//if no infos exist, create one, delete it if no info found
					mappingfound = false;
					if(!d.infos){
						removeinfo = true;
						d.infos = [];
					}
					
					dvalues = d.values;          
					mapping = iterate.infoMappings;
					dvalues.forEach(function(v, idx) {
						if(mapping[v]){
							if(mapping[v].type === 'string' && mapping[v].val === v){
								//we won't create mapping for it. existing mapping should be deleted
								if(d.infos[idx]){
									delete d.infos[idx][customlabel.type];
								//if it becomes empty, set it to undefined
									if(TypeUtils.isEmptyObject(d.infos[idx])){
										d.infos[idx] = undefined;
									}
								}else{
									//tipjira BITVIZA-1181
									//if current value happens to be the last value, we won't create anything for it
									//then d.infos will be shorter than d.values which is not allowed
									//so here we should create something for it.
									d.infos[idx] = undefined; 
								} 
							}else{
								mappingfound = true;
								d.infos[idx] = d.infos[idx] ? d.infos[idx] : {};
								d.infos[idx][customlabel.type] = mapping[v];  
							}
						}else{
							if(!d.infos[idx]){
								d.infos[idx] = undefined;
							}
						}
					}, this);

					if(removeinfo && !mappingfound){
						delete d.infos;
					}
				}, this);
			}
		}
	};
	function findInJson(jsondata, targetname){
		var anax = jsondata[ANALYSISAXIS];
		if (jsondata[MEASUREVALUESGROUP] !== undefined) {
			anax = jsondata[ANALYSISAXIS].concat(jsondata[MEASUREVALUESGROUP]);
		}
		var ret = [];
		anax.forEach(function(ana, idx){
			var anad = ana.data;
			anad.forEach(function(d, didx){
				if(d.name === targetname){
					ret.push(d);
				}
			}, this);
		}, this);
		return ret;
	}
	function setDimensionInfoValues (destination, infoValues, infoType) {
		// no need to new a infos for empty info values
		if (destination['infos'] === undefined && (TypeUtils.isArray(infoValues) && infoValues.length === 0)) {
			return;
		}
		if (destination['infos'] === undefined) {
			destination.infos = [];
		}
		var infos = destination.infos;
		var dataLength = destination.values.length;
		for (var i = 0; i < dataLength; i++) {
			if (infos[i] === undefined && infoValues[i] !== undefined) {
				infos[i] = {};
			}
			if ((infos[i] === undefined || infos[i]===null) && infoValues[i] === undefined) {
				infos[i] = undefined;
				continue;
			}
			if (infos[i] !== undefined) {
				infos[i][infoType] = infoValues[i];
				if (infos[i][infoType] === undefined) {
					delete(infos[i][infoType]);
				}
			}
			if (TypeUtils.isEmptyObject(infos[i])) {
				infos[i] = undefined;
			}
		}
	}
	function setMeasureInfoValues (destination, infoValues, infoType) {
		// no need to new a infos for empty info values
		if (destination['infos'] === undefined && (TypeUtils.isArray(infoValues) && infoValues.length === 0)) {
			return;
		}
		if (destination['infos'] === undefined) {
			destination.infos = [];
		}
		var infos = destination.infos;
		var dataLength = destination.values.length;
		var dataWidth = destination.values[0].length;
		for (var i = 0; i < dataLength; i++) {
			if (infos[i] === undefined && infoValues[i] !== undefined) {
				infos[i] = [];
			}
			if (infos[i] === undefined && (infoValues[i] === undefined || infoValues[i] === null)) {
				infos[i] = infoValues[i];
				continue;
			}
			if (infos[i] !== undefined && (infoValues[i] === undefined || infoValues[i] === null)) {
				for (var j = 0; j < dataWidth; j++) {
					if (infos[i][j] !== undefined && infos[i][j] !== null && infos[i][j][infoType] !== undefined) {
						infos[i][j][infoType] = infoValues[i];
						if (infoValues[i] === undefined) {
							delete(infos[i][j][infoType]);
						}
					}
					if (TypeUtils.isEmptyObject(infos[i][j])) {
						infos[i][j] = undefined;
					}
				}
				continue;
			}
			for (var j = 0; j < dataWidth; j++) {
				if (infos[i][j] === undefined && infoValues[i][j] !== undefined) {
					infos[i][j] = {};
				}
				if (infos[i][j] === undefined && infoValues[i][j] === undefined) {
					infos[i][j] = undefined;
				}
				if (infos[i][j] !== undefined && infos[i][j] !== null) {
					infos[i][j][infoType] = infoValues[i][j];
				}
				if (infos[i][j] !== undefined && infos[i][j] !== null && infos[i][j][infoType] === undefined) {
					delete(infos[i][j][infoType]);
				}
				if (TypeUtils.isEmptyObject(infos[i][j])) {
					infos[i][j] = undefined;
				}
			}
		}
	}
	function removeInfo (infoType, jsondata, dimensions, measures) {
		for (var i = 0; i < dimensions.length; i++) {
			var index = dimensions[i].index;
			var loc = dimensions[i].location;
			setDimensionInfoValues(jsondata[ANALYSISAXIS][index].data[loc], [], additionalData.type);
		}
		for (var i = 0; i < measures.length; i++) {
			var index = measures[i].index;
			var loc = measures[i].location;
			setMeasureInfoValues(jsondata[MEASUREVALUESGROUP][index].data[loc], [], additionalData.type);
		}
	}
	handler.register(additionalData, true);
	handler.register(customlabel);
	
	return handler;
});
define('sap/viz/data/CrosstableDataset',['sap/viz/data/feed/feeder','sap/viz/base/utils/TypeUtils','sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/ObjectUtils',
'sap/viz/data/description/AnalysisAxis','sap/viz/data/description/MeasureValuesGroup',
'sap/viz/data/info/Handler', 'sap/viz/data/info/CrosstableHandler', 'sap/viz/lang/langManager', 'exports'],
 function Setup(Feeder, TypeUtils, FunctionUtils, ObjectUtils, AnalysisAxis, MeasureValuesGroup, Handler, CrosstableHandler, langManager){
 
   var TYPE   =    'type';
   var NAME   =    'name';
   var VALUES =    'values';
   
   var FEEDID =  'feedId';
   var MND    =  'MeasureNamesDimension';
   
   var ANALYSISAXIS = "analysisAxis";
   var MEASUREVALUESGROUP = "measureValuesGroup";
      
   function getMeasureValueDataPointCount(measureValue){
         var values = measureValue.getValues();
     
         return values.length > 0 ? values.length * values[0].length : 0;
   }
   
   /**
    * @name sap.viz.data.CrosstableDataset
    * @constructor
     */
   function crossTableDataSet(){
        this._analysisAxis = [];
        this._measureValuesGroup = [];
        this._dataSet = {};
        this._measures = [];
        this._dimensions = [];
        this._emptyDataset = false;
        this._infos = {};
   }
   
   /**
    * Get/set data
    * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.data.CrosstableDataset.data  instead.
    * @name sap.viz.data.CrosstableDataset#data
    * @param data
    *        data with metaData and rawData
    * @returns {Object} {@link sap.viz.data.CrosstableDataset}
    */
   crossTableDataSet.prototype.data = function(data){
     if(!arguments.length){
       return ObjectUtils.clone(this._dataSet);
     }
     this._analysisAxis = [];
     this._measureValuesGroup = [];
     this._measures = [];
     this._dimensions = [];
     this._dataSet = ObjectUtils.clone(data);
     this.init(this._dataSet);
     this._measures = this.getMetaNames(data, MEASUREVALUESGROUP);
     this._dimensions = this.getMetaNames(data, ANALYSISAXIS);
     this._infos = {};
     return this;
   };
   
   //@deprecated
   crossTableDataSet.prototype.setData = function(in_data){
     this.data(in_data);
   };
   /**
    * Get all dimension/ measure names from data
    * @ignore
    * @param data : data with metaData and rawData
    * @param range : ANALYSISAXIS/ MEASUREVALUESGROUP
    * @returns {[Object]}: array of names of all dimesions/ measures
    *            Object : {name:  "<dimension_name>"/  "<measure_name>", index: <number>, location: <number>}
    */
    crossTableDataSet.prototype.getMetaNames = function (data, range) {
        if (data == undefined) {
            return;
        }
        var ret = [];
        var range = data[range];
        if (range === undefined || !TypeUtils.isArray(range)) {
            return ret;
        }
        for (var i = 0; i < range.length; i++) {
            var rangeData = range[i].data;
            if (rangeData === undefined || !TypeUtils.isArray(rangeData)) {
                continue;
            }
            for (var j = 0; j < rangeData.length; j++) {
                if (rangeData[j].name !== undefined) {
                    var obj = {'name': rangeData[j].name, 'index': i, 'location': j};
                    ret.push(obj);
                }
            }
        }
        return ret;
    };
    
    /**
     * Get/Set additional info for the crosstable dataset
     * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.  You can use sap.viz.api.data.CrosstableDataset.info instead.
     * @name sap.viz.data.CrosstableDataset#info
     * @returns {Object} return a copy of current additional info if no param provided
     */
    crossTableDataSet.prototype.info = function(info){
        // only call get function for new handler
        if(!arguments.length){
            return CrosstableHandler.mergeInfo(this._infos);
        }
        
        if(info !== undefined){
            if (info.type && info.value) { // call old info handler
                var handler = Handler.get(info.type);
                if(handler){
                    handler.process(info.value, this._dataSet);
                }
            } else if (TypeUtils.isArray(info)) { // call new info handler
                var crosstableHandler;
                for (var i = 0; i < info.length; i++) {
                    crosstableHandler = CrosstableHandler.get(info[i].type);
                    if (crosstableHandler) {
                        CrosstableHandler.storeInfo(this._infos, info[i]);
                        crosstableHandler.process(info[i], this._dataSet, this._dimensions, this._measures);
                    }
                }
            } else if (TypeUtils.isString(info)) { // call new info handler get function with infotype
                var ret = [];
                if (this._infos[info]) {
                    ret.push(ObjectUtils.clone(this._infos[info]));
                }
                return ret;
            }
           //Jimmy, 12/28/2012, AnalysisAxis reads info reference from this._dataset.
           //here the reference may be deleted (in clearInfo) and recreated(here), to make sure AnalysisAxis
           //still can get the right infos, we recreate them.
           //or we can optimize it to save infos in analysisAxis and merge them when we get data and info?
          this._analysisAxis = [];
          this._measureValuesGroup = [];
          this.init(this._dataSet);
         }
         return this;
    };
   
    /**
      clear specific additional info for the crosstable dataset
      @param {String}type "customlabel"||"geo" 
    */
    crossTableDataSet.prototype.clearInfo = function(type){
      if(type){
       var handler = Handler.get(type);
       if(handler){
         handler.remove(this._dataSet);
       }
      }
      return this;  
    };
   
   crossTableDataSet.prototype.init = function(data){
      // removed check for measureValuesGroup for tree map doesn't have it
      if(!data || (!data[ANALYSISAXIS] && !data[MEASUREVALUESGROUP])){
       //FIX ME Remove when multihandler is available
       return;// FunctionUtils.error("dataset is empty or invalid");
      }
      var aaLabels = [1,1];
      this._emptyDataset = false;

      
      var axes = data[ANALYSISAXIS];
      var i = 0;
      var mvgs, mvg, mv;
      if(axes){
        if(axes.length > 2){
         FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES'));
        }
        
        for(;i < axes.length; i++){
          var axis = axes[i];
          var axisIndex = axis["index"];
          if(axisIndex !== 1 && axisIndex !== 2){
           FunctionUtils.error(langManager.get('IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2'));
          }
          
          if(this._analysisAxis[axisIndex - 1]){
           FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_AXIS_ALREADY_EXIST', axisIndex));
          }
          
          var aa = new AnalysisAxis(axis["data"]);
          aaLabels[axisIndex - 1] = aa.validate();
          this._analysisAxis[axisIndex - 1] = aa;
          
        }
        
       //TODO handle if only meta data exist in data set when layout
       if(aaLabels[0] === 0){
          aaLabels[1] = 0;
          this._emptyDataset = true;
       }

        mvgs = data[MEASUREVALUESGROUP];
        // to handle tree chart without measurevaluegroup, but not know what chart is going to be filled, should we give a warning for the empty measurevaluegroup?
        if (!mvgs) {
            return;
        }
        for(i = 0;i < mvgs.length; i++){
          mvg = mvgs[i];
          var mvgIndex = mvg["index"];
          if(this._measureValuesGroup[mvgIndex - 1]){
            FunctionUtils.error(langManager.get('IDS_ALREADY_EXISTS'), "MeausreValuesGroup " + mvgIndex);
          }
          
          mv =  new MeasureValuesGroup(mvg["data"]);
          mv.validate(aaLabels);
          this._measureValuesGroup[mvgIndex - 1] = mv;
        }
      }else{ // no axes case
        
        mvgs = data[MEASUREVALUESGROUP];
        for(i = 0;i < mvgs.length; i++){
          mvg = mvgs[i];
          mv =  new MeasureValuesGroup(mvg["data"]);
          if(i === 0){
            aaLabels = mv.validate();
          }  
          else{
            mv.validate(aaLabels);
          }
          
          this._measureValuesGroup[mvg["index"] - 1] = mv;
        }
      }
      
      
   };
   
   /**
    * @name sap.viz.data.CrosstableDataset#getAnalysisAxisCount
    * @ignore 
    */
   crossTableDataSet.prototype.getAnalysisAxisCount = function(){
      return this._analysisAxis.length;    
   };
   
   /**
    * @name sap.viz.data.CrosstableDataset#getAnalysisAxisByIdx
    * @ignore
    * @param index 
    */
   crossTableDataSet.prototype.getAnalysisAxisByIdx = function(index){
     return this._analysisAxis[index];
   };
   
   /**
    * @name sap.viz.data.CrosstableDataset#getMeasureValuesGroupCount
    * @ignore 
    */
   crossTableDataSet.prototype.getMeasureValuesGroupCount = function(){
      return this._measureValuesGroup.length;    
   };
   
   /**
    * @name sap.viz.data.CrosstableDataset#getMeasureValuesGroupByIdx
    * @ignore
    * @param index 
    */
   crossTableDataSet.prototype.getMeasureValuesGroupByIdx = function(index){
     return this._measureValuesGroup[index];
   };
   
   /**
      * @name sap.viz.data.CrosstableDataset#hasFakeData
      * @ignore
      */
   crossTableDataSet.prototype.hasFakeData = function(){
     for(var i = 0; i < this._measureValuesGroup.length; i++){
       if(this._measureValuesGroup[i] && this._measureValuesGroup[i].hasFakeData()){
        return true;
       }
     }
     
     for(i = 0; i < this._analysisAxis.length; i++){
       if(this._analysisAxis[i].hasFakeData()){
        return true;
       }
     }
     
     return false;
   };
   
   /**
      * @name sap.viz.data.CrosstableDataset#getDataPointCount
      * @ignore
      */
   crossTableDataSet.prototype.getDataPointCount = function(){
     
     var dpCount = 0;
     // to handle tree chart to accept dataset without measureValuesGroup
     var mvDpCount = 0;
     if (this._measureValuesGroup.length) {
        mvDpCount = getMeasureValueDataPointCount(this._measureValuesGroup[0].getMeasureValues()[0]);
     }
     
     for(var i = 0; i < this._measureValuesGroup.length; i++){
       if(this._measureValuesGroup[i]){
         dpCount +=  mvDpCount * this._measureValuesGroup[i].getMeasureValues().length;
       }
     }
     
     return dpCount;
   };
   
    /**
      * @name sap.viz.data.CrosstableDataset#isEmptyDataSet
      * @ignore
    */
   crossTableDataSet.prototype.isEmptyDataset = function(){
      return this._emptyDataset;
   };
    /**
     * @name sap.viz.data.CrosstableDataset#ctx2TableData
     * @ignore
     */
    crossTableDataSet.prototype.ctx2TableData = function (rawCtx) {
        var convertDims = function (ctx, crosstable) {
            var a1Index = ctx.path.dii_a1;
            var a2Index = ctx.path.dii_a2;
            
            var dims = {};
            if (!crosstable.getAnalysisAxisByIdx(0)) {
                return null;
            }
            for (var i = 0; i < crosstable.getAnalysisAxisByIdx(0).getDimensionLabels().length; i++) {
                var dim = crosstable.getAnalysisAxisByIdx(0).getDimensionLabels()[i];
                dims[dim._uId] = dim._values[a1Index];
            }
            if (crosstable.getAnalysisAxisByIdx(1)) {
                for (var i = 0; i < crosstable.getAnalysisAxisByIdx(1).getDimensionLabels().length; i++) {
                    var dim = crosstable.getAnalysisAxisByIdx(1).getDimensionLabels()[i];
                    dims[dim._uId] = dim._values[a2Index];
                }
            }
            
            return dims;
        };
        var convertMeas = function (ctx, crosstable) {
            var a1Index = ctx.path.dii_a1;
            var a2Index = ctx.path.dii_a2;
            var mg = ctx.path.mg;
            var mi = ctx.path.mi;
            
            var obj = {};
            if (!crosstable.getMeasureValuesGroupByIdx(mg)) {
                return null;
            }
            var mea = crosstable.getMeasureValuesGroupByIdx(mg).getMeasureValues()[mi];
            var meaId = mea._uId;
            obj[meaId] = mea._values[a2Index][a1Index];
            return obj;
        };
        var data = {};
        if (TypeUtils.isPlainObject(rawCtx)) {
            data.dimension = convertDims(rawCtx, this);
            data.measure = convertMeas(rawCtx, this);
        } else if (TypeUtils.isArray(rawCtx)) {
            data.dimension = convertDims(rawCtx[0], this);
            var measures = {};
            for (var i = 0; i < rawCtx.length; i++) {
                if (!rawCtx[i]) {
                    continue;
                }
                var measure = convertMeas(rawCtx[i], this);
                for (var attr in measure) {
                    measures[attr] = measure[attr];
                }
            }
            data.measure = measures;
        } else {
            return;
        }
        return data;
    };

    /**
     * @name sap.viz.data.CrosstableDataset#ctx2ArrayData
     * @ignore
     */
    crossTableDataSet.prototype.ctx2ArrayData = function (rawCtx) {
        var convertDims = function (ctx, crosstable) {
            var a1Index = ctx.path.dii_a1;
            var a2Index = ctx.path.dii_a2;
            
            var dims = [];
            if (!crosstable.getAnalysisAxisByIdx(0)) {
                return null;
            }
            for (var i = 0; i < crosstable.getAnalysisAxisByIdx(0).getDimensionLabels().length; i++) {
                var dim = crosstable.getAnalysisAxisByIdx(0).getDimensionLabels()[i];
                dims.push({
                  key : dim._uId,
                  value : dim._values[a1Index]
                });
            }
            if (crosstable.getAnalysisAxisByIdx(1)) {
                for (var i = 0; i < crosstable.getAnalysisAxisByIdx(1).getDimensionLabels().length; i++) {
                    var dim = crosstable.getAnalysisAxisByIdx(1).getDimensionLabels()[i];
                    dims.push({
                      key : dim._uId,
                      value : dim._values[a2Index]
                    });
                }
            }
            
            return dims;
        };
        var convertMeas = function (ctx, crosstable) {
            var a1Index = ctx.path.dii_a1;
            var a2Index = ctx.path.dii_a2;
            var mg = ctx.path.mg;
            var mi = ctx.path.mi;
            
            var obj = [];
            if (!crosstable.getMeasureValuesGroupByIdx(mg)) {
                return null;
            }
            var mea = crosstable.getMeasureValuesGroupByIdx(mg).getMeasureValues()[mi];
            var meaId = mea._uId;
            obj.push({
              key :meaId,
              value : mea._values[a2Index][a1Index]
            });
            return obj;
        };
        var data = {};
        if (TypeUtils.isPlainObject(rawCtx)) {
            data.dimension = convertDims(rawCtx, this);
            data.measure = convertMeas(rawCtx, this);
        } else if (TypeUtils.isArray(rawCtx)) {
            data.dimension = convertDims(rawCtx[0], this);
            var measures = [];
            for (var i = 0; i < rawCtx.length; i++) {
                if (!rawCtx[i]) {
                    continue;
                }
                var measure = convertMeas(rawCtx[i], this);
                for (var element in measure) {
                    measures.push(measure[element]);
                }
            }
            data.measure = measures;
        } else {
            return;
        }
        return data;
    };
    /**
     * @name sap.viz.data.CrosstableDataset#tableData2Ctx
     * @ignore
     */
    crossTableDataSet.prototype.tableData2Ctx = function (data) {
        var dims = data.dimension;
        var meas = data.measure;
        if (TypeUtils.isEmptyObject(dims) && TypeUtils.isEmptyObject(meas)) {
            return [];
        }
        var getIndexs = function (array, keyValue) {
            var ret = [];
            for (var i = 0; i < array.length; i++) {
                if (array[i] === keyValue) {
                    ret[i] = i;
                }
            }
            return ret;
        };
        var getOnlyIndexes = function (indexes, dimsCount) {
            var onlyIndexes = [];
            // if no dimmension in data passed in, then we'll pick out all dimensions on the measures
            if (indexes.length === 0) {
                for (var i = 0; i < dimsCount; i++) {
                    onlyIndexes.push(i);
                }
            } else {                
                for (var i = 0; i < indexes[0].length; i++) {
                    var allHas = true;
                    for (var j = 0; j < indexes.length; j++) {
                        if (indexes[j][i] === undefined) {
                            allHas = false;
                            break;
                        }
                    }
                    if (allHas) {
                        onlyIndexes.push(i);
                    }
                }
            }
            return onlyIndexes;
        };
        var getDimensionValues = function (dim, dimValue, analysisAxis) {
            var ret = [];
            for (var i = 0; i < analysisAxis.length; i++) {
                var dimLabels = analysisAxis[i]._dimensionLabels;
                for (var j = 0; j < dimLabels.length; j++) {
                    if (dim === dimLabels[j]._uId) {
                        ret[i] = getIndexs(dimLabels[j]._values, dimValue);
                        return ret;
                    }
                }
            }
        };
        var aa1 = [];
        var aa2 = [];
        for (var key in dims) {
            var indexes = getDimensionValues(key, dims[key], this._analysisAxis);
            if (indexes[0]) {
                aa1.push(indexes[0]);
            } else if (indexes[1]) {
                aa2.push(indexes[1]);
            }
        }
        var onlyAA1 = [];
        var onlyAA2 = [];
        if (this._analysisAxis[0] && TypeUtils.isArray(this._analysisAxis[0]._dimensionLabels)) {
            onlyAA1 = getOnlyIndexes(aa1, this._analysisAxis[0]._dimensionLabels[0]._values.length);
        } else {
            var length = this.getDataPointCount()/ this.getMeasureValuesGroupCount();
            for (var i = 0; i < length; i++) {
                onlyAA1.push(i);
            }
        }
        if (this._analysisAxis[1] && TypeUtils.isArray(this._analysisAxis[1]._dimensionLabels)) {
            onlyAA2 = getOnlyIndexes(aa2, this._analysisAxis[1]._dimensionLabels[0]._values.length);
        } else {
            onlyAA2.push(0);
        }
        
        
        var mgCount = this._measureValuesGroup.length;
        var getMeasureValues = function (values, onlyAA1, onlyAA2, id, mg, mi) {
            var ret = [];
            for (var i = 0; i < onlyAA2.length; i++) {
                for (var j = 0; j < onlyAA1.length; j++) {
                    var obj = {};
                    obj[id] = values[onlyAA2[i]][onlyAA1[j]];
                    obj.mg = mg;
                    obj.mi = mi;
                    obj.dii_a1 = onlyAA1[j];
                    obj.dii_a2 = onlyAA2[i];
                    ret.push(obj);
                }
            }
            return ret;
        };
        var allMeasureValues = [];
        for (var i = 0; i < mgCount; i++) {
            var measureValues = this._measureValuesGroup[i]._measureValues;
            for (var j = 0; j < measureValues.length; j++) {
                var values = measureValues[j]._values;
                allMeasureValues = allMeasureValues.concat(getMeasureValues(values, onlyAA1, onlyAA2, measureValues[j]._uId, i, j));
            }
        }
        var allCtx = [];
        var packCtx = function (ctx) {
            var obj = {};
            obj.dii_a1 = ctx.dii_a1;
            obj.dii_a2 = ctx.dii_a2;
            obj.mg = ctx.mg;
            obj.mi = ctx.mi;
            return obj;
        };
        if (TypeUtils.isEmptyObject(meas)) {
            for (var i = 0; i < allMeasureValues.length; i++) {
                allCtx.push(packCtx(allMeasureValues[i]));
            }
        }else {
            for (var i = 0; i < allMeasureValues.length; i++) {
                for (var key in meas) {
                    if (meas[key] === allMeasureValues[i][key]) {
                        allCtx.push(packCtx(allMeasureValues[i]));
                    }
                }
            }
        }
        return allCtx;
    };
    
    /**
     * @name sap.viz.data.CorsstalbeDataset#toJSON
     * @ignore
     * @param {Object} options, optional
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object} ctJSON
     * Example:
     *      {
     *          id: "sap.viz.data.CrosstableDataset",
     *          data: <data object for CrosstableDataset>
     *          info: <info array for CrosstableDataset>
     *      }
     */
    crossTableDataSet.prototype.toJSON = function (options) {
        var id = "sap.viz.data.CrosstableDataset";
        var data = this.data();
        var info = this.info();// only 'additionalData' is supported
        info = (TypeUtils.isArray(info) && info.length > 0) ? info : undefined;
        if (options && options.emptyDataset === true) {
            var emptyDataValues = function (data) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].values && TypeUtils.isArray(data[i].values)) {
                        data[i].values = [];
                    }
                    if (data[i].infos && TypeUtils.isArray(data[i].infos)) {
                        delete data[i].infos;
                    }
                }
            };
            if (data[ANALYSISAXIS]) {
                var aa = data[ANALYSISAXIS];
                for (var i = 0; i < aa.length; i++) {
                    emptyDataValues(aa[i].data);
                }
            }
            if (data[MEASUREVALUESGROUP]) {
                var mg = data[MEASUREVALUESGROUP];
                for (var i = 0; i < mg.length; i++) {
                    emptyDataValues(mg[i].data);
                }
            }
            info = undefined;
        }
        var ctJSON = {
            id: id,
            data: data,
            info: info
        };
        return ctJSON;
    };
    
    /**
     * Deserialize CrosstableDataset
     * @ignore
     * @param {Object} ctJSON
     * @return {Objece} CrosstableDataset
     */
    crossTableDataSet.fromJSON = function (ctJSON) {
        if (!TypeUtils.isPlainObject(ctJSON) || ctJSON.id !== 'sap.viz.data.CrosstableDataset' || !ctJSON.hasOwnProperty('data')) {
            return;
        }
        var data = ObjectUtils.clone(ctJSON.data);
        var info = ObjectUtils.clone(ctJSON.info);
        var ctDataset = new crossTableDataSet();
        ctDataset.data(data);
        ctDataset.info(info);
        return ctDataset;
    };
    

    return crossTableDataSet;
    
 });

define('sap/viz/data/info/FlatTableInfoHandler',[],function(){
	var _handler = {};
	var handler = {};
	
	var geoInfoHandler = {
		'process':function(infoSet, infoData){
			if(infoData.type != 'geo'){
				return;
			}
			if(infoSet == null){
				infoSet = {};
			}
			infoSet[infoData.type] = infoData.info;
			return infoSet;
		},
		'find':function(infoset, rowIndex, selectedColumnIndexes){
			var geoInfos = infoset['geo'];
			var geoInfo = geoInfos[rowIndex];
			var infoResult;
			if(geoInfo==null){
				return;
			}
			for(var i = 0; i < selectedColumnIndexes.length; ++i){
				var colIndex = selectedColumnIndexes[i];
				if(infoResult == null){
					infoResult = [];
				}
				infoResult.push(geoInfo[colIndex]);
			}
			return infoResult;
		}
	};
	
	var additionalDataInfoHandler = {
		'process':function(infoSet, infoData){
			if(infoData.type != 'additionalData'){
				return;
			}
			if(infoSet == null){
				infoSet = {};
			}
			infoSet[infoData.type] = infoData.info;
			return infoSet;
		},
		'find':function(infoset, rowIndex, selectedColumnIndexes){
			var additionalDataInfos = infoset['additionalData'];
			var additionalDataInfo = additionalDataInfos[rowIndex];
			var infoResult;
			if(additionalDataInfo==null){
				return;
			}
			for(var i = 0; i < selectedColumnIndexes.length; ++i){
				var colIndex = selectedColumnIndexes[i];
				if(infoResult == null){
					infoResult = [];
				}
				infoResult.push(additionalDataInfo[colIndex]);
			}
			return infoResult;
		}
	};
	
	handler.get = function(type){
		return _handler[type];
	};
	
	handler.register = function(type, handler){
		_handler[type] = handler;
	};
	
	handler.register('geo', geoInfoHandler);
	handler.register('additionalData', additionalDataInfoHandler);
	
	return handler;
});
define('sap/viz/data/FlatTableDataset',['sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/ObjectUtils', 'sap/viz/data/info/FlatTableInfoHandler',
    'sap/viz/base/utils/FunctionUtils', 'sap/viz/lang/langManager', 'exports'
], function(util, ObjectUtils, FlatTableInfoHandler, FunctionUtils, langManager) {
    var colName = 'fields';
    var rowName = "data";
    var contextIdName = "_context_row_number";
    var measureTypeName = "Measure";
    var dimesionTypeName = "Dimension";
    var sematicTypeName = "semanticType";

    function generateContextId(data) {
        if (data.context === undefined) {
            return false;
        }
        var contextIdNameTemp;
        if (util.isArray(data.context)) {
            contextIdNameTemp = data.context[0];
        } else {
            contextIdNameTemp = data.context;
        }
        if (contextIdNameTemp === contextIdName) {
            return true;
        } else {
            var cols = data.metadata[colName],
                i;
            for (i = cols.length - 1; i >= 0; --i) {
                if (cols[i].id === contextIdNameTemp && cols[i].name === contextIdNameTemp) {
                    //if context id already exists in original data, return false to indicate no context id is generated
                    return false;
                }
            }
            // if go this path ,then the context is wrong.
            return true;
        }
    }
    /**
     * @constructor
     * Constructor of flat table dataset.
     * @param data, example:
     *             {
     *                 metadata:{
     *                     fields:[{
     *                         id: 'Year',
     *                      semanticType: 'Dimension'
     *                     },{
     *                         id: 'Profit',
     *                      semanticType: 'Measure'
     *                     }],
     *                     summary:{}
     *                 },
     *                 data:[
     *                     [2001,100000],
     *                     [2002,200000]
     *                 ],
     *                 info:[    //optional
     *                     {}
     *                 ]
     *             }
     */
    var FlatTableDataset = function(dataset, dataSettings) {
        this._infoset = {};
        if (dataSettings){
            this._isClone = !dataSettings.skipCloneData;
        }else{
            this._isClone = true;
        }
        if (dataset) {
            this.data(dataset);
            if (this._dataset.info != null) {
                this.info(this._dataset.info);
            }
            this._emptyDataset = false;
        } else {
            this._emptyDataset = true;
        }
    };

    FlatTableDataset.prototype.destroy = function() {
        this._infoset = null;
        this._table = null;
        this._isIdGenerated = null;
        this._data = null;
        if(this._dataset){
            this._dataset.data = null;        
            this._dataset.metadata = null;
        }
        this._dataset = null;
        this._emptyDataset = null;
    };

    FlatTableDataset.prototype._getTypeByIndex = function(index) {
        var type = this._dataset.metadata.fields[index].semanticType;
        if (type === dimesionTypeName) {
            return 'Dimension';
        } else if (type === measureTypeName) {
            return 'Measure';
        }
    };
    /**
     * Get/set for the property data.
     * @param value {Object}:
     * example {
     *         metadata:{},
     *         data:[]
     * }
     * @returns {Object} instance of FlatTableDataset
     */
    FlatTableDataset.prototype.data = function(value) {
        if (value != null) {
            if (value.metadata == null || value.data == null) {
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM'));
            }
            this._dataset = this._isClone?ObjectUtils.clone(value):value;
            //remove quotes from measure
            var data = this._dataset.data;
            var fields = this._dataset.metadata.fields;

            if (this._dataset.metadata.context) {
                this._dataset.context = this._dataset.metadata.context;
            }
            var i, j;
            for (i = 0; i < fields.length; i++) {
                for (j = 0; j < data.length; j++) {
                    if (fields[i].semanticType === "Measure") {
                        if (typeof data[j][i] !== "number") {
                            if (util.isString(data[j][i]) && (data[j][i].trim() !== "")) {
                                data[j][i] = Number(data[j][i]); //string to float
                            } else {
                                data[j][i] = null; // otherwise to null
                            }
                        }
                        if (util.isNaN(data[j][i])) {
                            data[j][i] = null;
                        }
                    }
                }
            }
            this._data = this._dataset[rowName];
            this._table = null;
            this._isIdGenerated = generateContextId(this._dataset);
            return this;
        }
        return {
            metadata: this._isClone?ObjectUtils.clone(this._dataset.metadata):this._dataset.metadata,
            data: this._isClone?ObjectUtils.clone(this._dataset.data):this._dataset.data
        };
    };
    /**
     * get the data of specified column
     * @param id {String} id of column
     * @returns {Array}
     */
    FlatTableDataset.prototype.getMetadata = function(id) {
        if (id === contextIdName) {
            return [{
                id: contextIdName,
                name: contextIdName
            }];
        }
        var cols = this._dataset.metadata[colName];
        for (var i = 0, len = cols.length; i < len; ++i) {
            var col = cols[i];
            if (col.id === id) {
                col = ObjectUtils.clone(col);
                //we want to know the col index of this column
                col.index = i;
                return [col];
            }
        }
        return [];
    };

    /**
     * Get the meta data of the field of the specified index
     * @param index {Number}
     * @returns
     */
    FlatTableDataset.prototype.getMetadataByIndex = function(index) {
        return this._dataset.metadata[colName][index];
    };

    FlatTableDataset.prototype._getColumnIdOfSemanticType = function(semanticType) {
        var cols = this._dataset.metadata[colName];
        var result = [];
        var length = cols.length;
        for (var i = 0; i < length; ++i) {
            var col = cols[i];
            if (col[sematicTypeName] === semanticType) {
                if (this._dataset.context) {
                    if (this._dataset.context.indexOf(col.id) > -1) {
                        continue;
                    }
                }
                result.push(col.id);
            }
        }
        return result;
    };
    /**
     * get the column id of measures
     * @returns {Array}
     */
    FlatTableDataset.prototype.getMeasures = function() {
        return this._getColumnIdOfSemanticType(measureTypeName);
    };
    /**
     * get the column id of dimensions
     * @returns {Array}
     */
    FlatTableDataset.prototype.getDimensions = function() {
        return this._getColumnIdOfSemanticType(dimesionTypeName);
    };
    /**
     * Transform the data into an object table
     * @returns {Array} the data in the object table format
     */
    FlatTableDataset.prototype.getTable = function() {
        if (this._table != null) {
            return this._table;
        }
        var cols = this._dataset.metadata[colName];
        var rows = this._data;
        var result = [];
        for (var i = 0; i < rows.length; ++i) {
            var item = {};
            for (var j = 0; j < cols.length; ++j) {
                item[cols[j].id] = rows[i][j];
            }
            result.push(item);
        }
        this._table = result;
        return this._table;
    };
    /**
     * get the specified row item of some specified type
     * @param rowIndex {Number} the index of the row you want to get
     * @returns {Array|Object}
     */
    FlatTableDataset.prototype.getRow = function(rowIndex) {
        var row = this._data[rowIndex];
        if (row == null) {
            return;
        }
        return row.slice(0);
    };
    /**
     * for now we only support simple criteria which is key:value pairs
     * and we return all rows match the criteria
     * @param criteria
     * @returns {Array} all rows index match the criteria
     */
    FlatTableDataset.prototype.query = function(criteria) {
        var ret = [];
        var rowMatched = true;
        for (var i = 0, len = this._data.length; i < len; i++) {
            var row = this._data[i];
            rowMatched = true;
            for (var key in criteria) {
                if (criteria.hasOwnProperty(key)) {
                    var meta = this.getMetadata(key);
                    if (meta && meta.length > 0 && row[meta[0].index] !== criteria[key]) {
                        rowMatched = false;
                        break;
                    }
                }
            }
            if (rowMatched) {
                ret.push(i);
            }
        }
        return ret;
    };
    /**
     * set a new row to the dataset with its specified row index.
     * @param {Number} rowIndex
     * @param {Array} rowItem
     */
    FlatTableDataset.prototype.setRow = function(rowIndex, rowItem) {
        var currentRowNum = this._data.length;
        if(!currentRowNum || rowIndex >= currentRowNum){
            return;
        }
        var numCols = this._dataset.metadata[colName].length;
        var rowData = {};
        var rawRowData = [],
            colId;
        if (util.isArray(rowItem)) {
            for (var i = 0; i < numCols - 1; ++i) {
                colId = this._dataset.metadata[colName][i].id;
                rowData[colId] = rowItem[i];
                rawRowData[i] = rowItem[i];
            }
            var lastColumnId = this._dataset.metadata[colName][numCols - 1].id;
            if(lastColumnId === contextIdName){
                rowData[contextIdName] = this._data[rowIndex][numCols - 1];
                rawRowData[numCols - 1] = this._data[rowIndex][numCols - 1];
            }else{
                rowData[lastColumnId] = rowItem[numCols-1];
                rawRowData[numCols - 1] = rowItem[numCols-1];
            }
        } else {
            //TODO error handle for format error
            return;
        }
        this._data[rowIndex] = rawRowData;
        if (this._table) {
            this._table[rowIndex] = rowData;
        }
    };
    FlatTableDataset.prototype._getInfoOfSelectedColumnsByRowIndex = function(selectedColumnIndexes, rowIndex) {
        var result = null;
        for (var infoType in this._infoset) {
            if (this._infoset.hasOwnProperty(infoType)) {
                var info = this._infoset[infoType];
                var infoResult = null;
                if (info == null) {
                    continue;
                }
                var handler = FlatTableInfoHandler.get(infoType);
                if (handler != null && util.isFunction(handler.find)) {
                    infoResult = handler.find(this._infoset, rowIndex, selectedColumnIndexes);
                }
                if (result == null && infoResult != null) {
                    result = {};
                }
                if (result != null) {
                    result[infoType] = infoResult;
                }
            }
        }
        return result;
    };

    FlatTableDataset.prototype._getAllColumnIds = function() {
        var cols = this._dataset.metadata[colName];
        var result = [];
        var length = cols.length;
        for (var i = 0; i < length; ++i) {
            result.push(cols[i].id);
        }
        return result;
    };

    FlatTableDataset.prototype.getContext = function() {
        if (util.isArray(this._dataset.context)) {
            //Only using the first context.
            return [this._dataset.context[0]];
        } else if (this._dataset.context) {
            return [this._dataset.context];
        } else {
            return [];
        }
    };

    FlatTableDataset.prototype.columnDataInFields = function(selectedColumns) {
        if (selectedColumns !== undefined && !util.isArray(selectedColumns)) {
            // TODO throw error 
            FunctionUtils.error("Invalid Parameter");
        }
        if (selectedColumns == null || selectedColumns.length === 0) {
            return this._data.slice(0);
        } else {
            var rowData = this._data;
            var hasInfo = this._infoset != null;
            var result, i;
            var selectedColumnIndexes = [];
            var allColumnIds = this._getAllColumnIds();
            var initialId = 0;

            for (i = 0; i < selectedColumns.length; ++i) {
                selectedColumnIndexes.push(allColumnIds.indexOf(selectedColumns[i]));
            }
            var returnData = [];
            for (i = 0; i < rowData.length; ++i) {
                var data = [];
                data.push(initialId++);
                for (var j = 0; j < selectedColumnIndexes.length; ++j) {
                    var colIndex = selectedColumnIndexes[j];
                    data = rowData[i][colIndex];
                    
                    var dataValue = rowData[i][colIndex];
                    if (util.isArray(dataValue)) {
                        data = dataValue.slice(0);
                    } else if (dataValue instanceof Object) {
                        data = ObjectUtils.extend(true, {}, dataValue);
                    } else {
                        data = dataValue;
                    }
                    if(!util.isExist(returnData[j])) {
                        returnData[j] = [];
                    }
                    returnData[j][i] = data;
                }
            }
            var parsedData = {};
            for (i = 0; i < returnData.length; i++) {
                parsedData[selectedColumns[i]] = returnData[i];
            }
            result = {
                data: parsedData
            };
            return result;
        }
    };

    /**
     * seleted the data of specified columns
     * @param selectedColumns :['columnId1','columnId2']
     * @return {Array} clone of the this._data or its subset
     */
    FlatTableDataset.prototype.dataInFields = function(selectedColumns) {
        if (selectedColumns !== undefined && !util.isArray(selectedColumns)) {
            // TODO throw error 
            FunctionUtils.error("Invalid Parameter");
        }
        if (selectedColumns == null || selectedColumns.length === 0) {
            return this._data.slice(0);
        } else {
            var rowData = this._data;
            var hasInfo = this._infoset != null;
            var result = [],
                i;
            var selectedColumnIndexes = [];
            var allColumnIds = this._getAllColumnIds();
            var initialId = 0;

            for (i = 0; i < selectedColumns.length; ++i) {
                selectedColumnIndexes.push(allColumnIds.indexOf(selectedColumns[i]));
            }

            for (i = 0; i < rowData.length; ++i) {
                var data = [];
                var info = null;
                if (selectedColumns[0] === contextIdName) {
                    data.push(initialId++);
                } else {
                    for (var j = 0; j < selectedColumnIndexes.length; ++j) {
                        var colIndex = selectedColumnIndexes[j];
                        var dataValue = rowData[i][colIndex];
                        if (util.isArray(dataValue)) {
                            data.push(dataValue.slice(0));
                        } else if (dataValue instanceof Object) {
                            data.push(ObjectUtils.extend(true, {}, dataValue));
                        } else {
                            data.push(dataValue);
                        }
                    }
                    info = this._getInfoOfSelectedColumnsByRowIndex(selectedColumnIndexes, i);
                }

                result.push({
                    data: data,
                    info: info
                });
            }
            return result;
        }
    };

    /**
     * Get/set for the info.
     * @param {String|Array of Object} value
     */
    FlatTableDataset.prototype.info = function(value) {
        if (value == null) {
            var result = [];
            if (this._infoset['additionalData'] != null) {
                result.push({
                    type: 'additionalData',
                    info: this._infoset['additionalData']
                });
            }
            return result;
        } else if (util.isString(value)) {
            return [{
                type: value,
                info: this._infoset[value]
            }];
        } else if (util.isArray(value)) {
            for (var i = 0; i < value.length; ++i) {
                var infoData = value[i];
                var handler = FlatTableInfoHandler.get(infoData.type);
                if (handler != null && util.isFunction(handler.process)) {
                    this._infoset = handler.process(this._infoset, infoData);
                }
            }
            return this;
        }

    };

    FlatTableDataset.prototype.isEmptyDataset = function() {
        if (this.getDataPointCount() === 0) {
            return true;
        } else {
            return false;
        }
    };

    FlatTableDataset.prototype.getDataPointCount = function() {
        var count = 0;
        if (this._dataset.data && this._dataset.data[0]) {
            count = this._dataset.data[0].length * this._dataset.data.length;
        }
        return count;
    };

    FlatTableDataset.prototype.hasFakeData = function() {
        if (this._dataset.metadata.fields && this._dataset.metadata.fields[0]) {
            var fields = this._dataset.metadata.fields;
            for (var i = 0; i < fields.length; i++) {
                if (fields[i].semanticType && (fields[i].semanticType === dimesionTypeName || fields[i].semanticType ===
                    measureTypeName) && fields[i].isFake === true) {
                    return true;
                }
            }
        }
        return false;
    };

    /**
     * internal used for composing data form ctx
     * @ignore
     */
    FlatTableDataset.prototype.ctx2TableData = function(rawCTX) {
        var data = {};
        if (!Array.isArray(rawCTX)) {
            rawCTX = [rawCTX];
        }
        var dims = {};
        var measures = {};
        for (var i = 0; i < rawCTX.length; i++) {
            var ctx = rawCTX[i];
            if (!ctx) {
                continue;
            }
            var row = this.getRow(ctx.row);
            //for each value in row, if it's a dimension put it in dims
            //if it's a measure, put it in measure if it's index is same as ctx.col
            for (var j = 0; j < row.length; j++) {
                var eachMetadata = this.getMetadataByIndex(j);
                if (eachMetadata.semanticType === dimesionTypeName) {
                    dims[eachMetadata.name] = row[j];
                } else if (eachMetadata.semanticType === measureTypeName && j === ctx.col) {
                    measures[eachMetadata.name] = row[j];
                }
            }
        }
        data.dimension = dims;
        data.measure = measures;
        return data;
    };

    /**
     * Serialize FlatTableDataset.data to JSON format
     * @ignore
     * @param {Object} options, optional
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object} ftJSON
     * Example:
     * {
     *    id: "sap.viz.data.FlatTableDataset",
     *    data: <data object for FlatTableDataset>,
     *    info: <info array for FlatTableDataset>
     * }
     */
    FlatTableDataset.prototype.toJSON = function(options) {
        var id = "sap.viz.data.FlatTableDataset";
        var data = this.data();
        // var infos = ObjectUtils.clone(this._infoset);
        infos = this._infoset;
        var info = [];
        for (var key in infos) {
            if (infos.hasOwnProperty(key)) {
                var obj = {};
                obj.type = key;
                obj.info = infos[key];
                info.push(obj);
            }
        }
        info = info.length > 0 ? info : undefined;
        if (this._isIdGenerated) {
            for (var i = 0; i < data.data.length; i++) {
                data.data[i].pop();
            }
            data.metadata.fields.pop();
        }
        if (options && options.emptyDataset === true) {
            data.data = [];
            info = undefined;
        }
        var ftJSON = {
            id: id,
            data: data,
            info: info
        };
        return ftJSON;
    };

    /**
     * Deserialize stringified FlatTableDataset.data back to object
     * @param {Object} ftJSON
     * @param {Object} [dataSettings] The settings of FlatTableDataset in a JSON object
     * @return {Object} data Object of FlatTableDataset
     */
    FlatTableDataset.fromJSON = function(ftJSON, dataSettings) {
        if (!util.isPlainObject(ftJSON) || ftJSON.id !== 'sap.viz.data.FlatTableDataset' || !ftJSON.hasOwnProperty(
            'data')) {
            return;
        }
        var isClone = true;
        if (dataSettings){
            isClone = !dataSettings.skipCloneData;
        }
        var data;
        if (isClone) {
            data = ObjectUtils.clone(ftJSON.data);
            var info = ObjectUtils.clone(ftJSON.info);
            if (info !== undefined) {
                data.info = info;
            }
        } else {
            data = {};
            for (var i in ftJSON.data) {
                if (ftJSON.data.hasOwnProperty(i)) {
                    data[i] = ftJSON.data[i];
                }
            }
            if (ftJSON.info !== undefined) {
                data.info = ftJSON.info;
            }
        }
        var ftDataset = new FlatTableDataset(data, dataSettings);
        return ftDataset;
    };

    return FlatTableDataset;
});

define('sap/viz/manifest',['sap/viz/base/utils/TypeUtils','sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/ObjectUtils', 'sap/viz/lang/langManager', 'sap/viz/base/Logger', 'exports'],
function Setup(TypeUtils, FunctionUtils, ObjectUtils,langManager, Logger) {
  /**
   * <pre>
   * Manifest is an internal collection to store all definitions/configurations.
   * There are three built-in categories:
   *      feeds: store definitions of all feed groups
   *      module: store definitions of all modules
   *      viz: store definitions of all charts
   * </pre>
   * @module sap.viz.manifest
   * @example <caption>Sample Code:</caption>
   * var Manifest = sap.viz.manifest;
   * @ignore
   */

  var manifest = {};
  /**
   * <pre>
   * register a new category in manifest.
   * Once a category is registered, you can access it by Manifest[name] or Manifest.name
   * </pre>
   * @method sap.viz.manifest#registerCategory
   * @param {String}name name of the new category
   * @param {Function} factory optional and if provided,it will become "item factory function" of this category
   * @param {Object} factoryThisObj optional and if provided, it will become the object executed by item factory function
   * @returns {[Object] category} the new category {link sap.viz.manifest.xxxcategory} 
   * @example <caption>Sample Code:</caption>
   * manifest.registerCategory("feeds", function(obj) {
   *
   * var feeds = {};
   *  obj.feeds.forEach(function(o) {
   *    feeds[o.id] = o;
   *  });
   *
   * Object.defineProperty(obj, "feedsMap", {
   *    value : feeds,
   *    writable : false,
   *    enumerable : false,
   *    configurable : false
   *  });
   *
   *  return obj;
   * });
   * @ignore
   */
  manifest.registerCategory = function(name, factory, factoryThisObj) {
    if (!TypeUtils.isNonEmptyString(name)) {
      FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CATEGORY_NAME_NOT_EMPTY'));
    }

    if (factory && !TypeUtils.isFunction(factory)) {
      FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION'));
    }

    if (manifest.hasOwnProperty(name)) {
      FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_EXIST_CATEGORY_NAME', name));
    }

    var collection = d3.map();
    /**
     * xxx represents feeds, module and viz. The three categories have been registered into manifest and could provide some common APIs. 
     * @class sap.viz.manifest.xxx
     * @ignore
     */
    var category = {
        /**
           * Load an item from category by id.</br>
           * </br>
           * If the item is a Built-in_Manifest_Objects, it will provide some other APIs.Please see the corresponding object in Built-in_Manifest_Objects.</br>
           * @see Built-in_Manifest_Objects
           * @method sap.viz.manifest.xxx#get
           * @param {String} id the id of item
           * @param {Object} throwErrorIfNull optional, a exception type
           * @returns {Object} the item loaded from category by id
           * @example <caption>Sample Code:</caption>
           * var moduleFeeds =  manifest.feeds.get(id);//xxx represents feeds
           * var barModule = manifest.module.get(barId);//xxx represents module
           * var lineChart = manifest.viz.get(lineChartId);//xxx represents viz
           * @ignore
           */
      get : function(id, throwErrorIfNull) {
        var manifest = this;
        function fetchqueue(){
            var queue;
            if(sap&& sap.viz&& sap.viz.extapi&& sap.viz.extapi.manifest&&sap.viz.extapi.manifest._queue){
                queue = sap.viz.extapi.manifest._queue[name];
            }else if(window.__sap_temp_v2){
                queue = window.__sap_temp_v2.manifest._queue[name];
            }
            if(!queue){
                return;
            }
            if(queue["registerList"]){
                queue["registerList"].forEach(function(item){
                    manifest.register(item);
                });
                queue["registerList"]=[];
            }
            if(queue["unregisterList"]){
                queue["unregisterList"].forEach(function(item){
                    manifest.unregister(item);
                });
                queue["unregisterList"]=[];
            }
        }
        fetchqueue();
        var result = collection.get(id);
        if (result === undefined && throwErrorIfNull) {
          FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'), id, name);
        }
        
        if(result && result["__needParsed__"] === true){
          var isAbstract = result["abstract"] === true;
          result = ObjectUtils
              .extend(true, null, result.base !== undefined ? category.get(
                  result.base, true) : null, result);
  
          Object.defineProperty(result, "abstract", {
            value : isAbstract,
            enumerable : false
          });
  
          if (factory && !isAbstract) {
            factory.call(factoryThisObj, result, manifest);
          }
          
          delete result["__needParsed__"];
          collection.set(id, result);
        }
        return result;
      },
      
      getAll : function() {
        var ret = [];
        for (var key in collection) {
            // since d3 has its own map prefix, d3_map_prefix = "\0", it's necessary to remove it from each key
            key = key.replace('\0', '');
            ret.push(category.get(key));
        }
		return ret;
      },
      
      getManifest : function() {
		if (arguments.length === 1 && TypeUtils.isString(arguments[0])) {
			return new Array(category.get(arguments[0]));
		} else if (arguments.length === 2 && TypeUtils.isString(arguments[0]) && (typeof arguments[1] === "boolean")) {
			return new Array(category.get(arguments[0], arguments[1]));
		} else if (arguments.length === 0) {
			return category.getAll();
		} else {
			Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
			return;
		}      	
      },
      
      /**
       * <pre>
       * Iterate whole category execute callback function for every item which has been registered into xxx. 
       * </pre>
       * @method sap.viz.manifest.xxx#each
       * @param {Function} callback a callback function will be executed for every item.This function must accept two parameters.The first one is an object and the second one is the id.
       * @param {Object} thisObj optional and default value is obj self
       * @return {Object} manifest
       * @example <caption>Sample Code:</caption>
       * manifest.xxx.each(function(obj, id){
       *   .... 
       * });
       * @ignore
       */
      each : function(callback, thisObj) {
        collection.forEach(function(id) {
          callback.call(thisObj, category.get(id), id);
        });
        return manifest;
      },
      
      /**
       * unregister the item with specified id from category
       * @method sap.viz.manifest.xxx#unregister
       * @param {String} id id of the item being unregistered
       * @return {Object} the removed module Object
       * @example <caption>Sample Code:</caption>
       * manifest.module.unregister('sap.viz.modules.bar');
       * @ignore
       */
      unregister : function (id) {
        var ret;
        if(TypeUtils.isExist(id)){
          ret = collection.get(id);
          collection.remove(id);
        }
        return ret;
      },
      
      /**
       * Register an item into category
       * @method sap.viz.manifest.xxx#register 
       * @param {Object} newItems variable parameters, at least need one item to be registered into category
       * @return {Object} manifest
       * @example <caption>Sample Code:</caption>
       * manifest.viz.register(chartOne);//xxx represents viz
       * ....
       * manifest.viz.register(chartOne,chartTwo,chartThree);
       * ....
       * manifest.module.register(tooltip);//xxx represents module
       * @ignore
       */
      register : function() {
        Array.prototype.forEach.call(arguments, function(obj) {
          if (TypeUtils.isUndefined(obj)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT'));
          }

          var idStr = obj.id;

          if (!TypeUtils.isNonEmptyString(idStr)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID'));
          }

          if (collection.has(idStr)) {
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_ALREADY_EXIST_IN_CATEGORY', idStr, name));
          }
          
          obj["__needParsed__"] = true;          

          collection.set(idStr, obj);
        });

        return manifest;
      }
    };

    manifest[name] = category;
    return category;
  };
  
  /**
   * unregister category with the specified category name
   * @param {String} cname name of the category to be unregistered
   * @returns {Boolean} true if successfully deleted 
   * @ignore
   */
  manifest.unregisterCategory = function (cname){
    return cname in manifest && delete manifest[cname];
  };
  
  /**
   * {@link sap.viz.manifest.feeds} is a category which have been registered into manifest. It could provide some common APIs. 
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Feed instead.
   * @class sap.viz.manifest.feeds
   */
  /**
  * Load an item from {@link sap.viz.manifest.feeds}  by id.</br>
  * </br>
  * The item loaded from {@link sap.viz.manifest.feeds} will provide some API.</br>
  * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Feed.get instead.
  * @method sap.viz.manifest.feeds#get
  * @param {String} id the id of item
  * @param {Object} throwErrorIfNull optional, a exception type
  * @returns {Object} {@link Built-in_Manifest_Objects.feedsManifest}
  * @example <caption>Sample Code:</caption>
  * var moduleFeeds =  manifest.feeds.get(id);
  */
  /**
  * 
    * Iterate whole {@link sap.viz.manifest.feeds} category execute callback function for every item which has been registered into {@link sap.viz.manifest.feeds}. 
  * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.

  * @method sap.viz.manifest.feeds#each
  * @param {Function} callback a callback function will be executed for every item.This function must accept two parameters.The first one is an object and the second one is the id.
  * @param {Object} thisObj optional and default value is obj self
  * @return {Object} {@link sap.viz.manifest.feeds}
  * @example <caption>Sample Code:</caption>
  * 
  * manifest.feeds.each(function(obj, id){
  *   .... 
  * });
  */
  /**
   * Register an item into {@link sap.viz.manifest.feeds} category
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.manifest.Feed.register instead.
   * @method sap.viz.manifest.feeds#register 
   * @param {Object} newItems variable parameters, at least need one item to be registered into category
   * @return {Object} {@link sap.viz.manifest.feeds}
   * @example <caption>Sample Code:</caption>
   * manifest.feeds.register(chartOneFeeds);
   * manifest.feeds.register(chartTwoFeeds,chartThreeFeeds);
   */
  
  /**
   * unregister an item from {@link sap.viz.manifest.feeds} category
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.manifest.Feed.unregister instead.
   * @method sap.viz.manifest.feeds#unregister 
   * @param {String} id id of the feed being unregistered
   * @return {Object} the removed feed object {@link sap.viz.manifest.feeds}
   * @example <caption>Sample Code:</caption>
   * manifest.feeds.unregister('CHART_FEED_ID');
   */

   /**
   * {@link sap.viz.manifest.viz} is a category which have been registered into manifest. It could provide some common APIs. 
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Viz instead.
   * @class sap.viz.manifest.viz
   */
  /**
  * Load an item from {@link sap.viz.manifest.viz}  by id.</br>
  * </br>
  * The item loaded from {@link sap.viz.manifest.viz} will provide some API.</br>
  * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Viz.get instead.
  * @method sap.viz.manifest.viz#get
  * @param {String} id the id of item
  * @param {Object} throwErrorIfNull optional, a exception type
  * @returns {Object} {@link Built-in_Manifest_Objects.vizManifest}
  * @example <caption>Sample Code:</caption>
  * var lineChart =  manifest.viz.get(lineChartId);
  */
  /**
  * 
    * Iterate whole {@link sap.viz.manifest.viz} category execute callback function for every item which has been registered into {@link sap.viz.manifest.viz}. 
  * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
  * @method sap.viz.manifest.viz#each
  * @param {Function} callback a callback function will be executed for every item.This function must accept two parameters.The first one is an object and the second one is the id.
  * @param {Object} thisObj optional and default value is obj self
  * @return {Object} {@link sap.viz.manifest.viz}
  * @example <caption>Sample Code:</caption>
  * manifest.viz.each(function(obj, id){
  *   .... 
  * });
  */
  /**
   * Register an item into {@link sap.viz.manifest.viz} category
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.manifest.Viz.register instead.
   * @method sap.viz.manifest.viz#register 
   * @param {Object} newItems variable parameters, at least need one item to be registered into category
   * @return {Object} {@link sap.viz.manifest.viz}
   * @example <caption>Sample Code:</caption>
   * manifest.viz.register(lineChart);
   * manifest.viz.register(pieChart,radarChart);
   */
  
  /**
   * unregister an item from {@link sap.viz.manifest.viz} category
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.manifest.Viz.unregister instead.
   * @method sap.viz.manifest.viz#unregister 
   * @param {String} id id of the viz being unregistered
   * @return {Object} the removed viz object {@link sap.viz.manifest.viz}
   * @example <caption>Sample Code:</caption>
   * manifest.viz.unregister('viz/bar');
   */

   /**
   * {@link sap.viz.manifest.module} is a category which have been registered into manifest. It could provide some common APIs. 
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Module instead.
   * @class sap.viz.manifest.module
   */
  /**
  * Load an item from {@link sap.viz.manifest.module}  by id.</br>
  * </br>
  * The item loaded from {@link sap.viz.manifest.module} will provide some API.</br>
  * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Module.get instead.
  * @method sap.viz.manifest.module#get
  * @param {String} id the id of item
  * @param {Object} throwErrorIfNull optional, a exception type
  * @returns {Object} {@link Built-in_Manifest_Objects.moduleManifest}
  * @example <caption>Sample Code:</caption>
  * var lineModule =  manifest.viz.get(lineModuleId);
  */
  /**
  * 
    * Iterate whole {@link sap.viz.manifest.module} category execute callback function for every item which has been registered into {@link sap.viz.manifest.module}. 
  * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
  * @method sap.viz.manifest.module#each
  * @param {Function} callback a callback function will be executed for every item.This function must accept two parameters.The first one is an object and the second one is the id.
  * @param {Object} thisObj optional and default value is obj self
  * @return {Object} {@link sap.viz.manifest.module}
  * @example <caption>Sample Code:</caption>
  * manifest.module.each(function(obj, id){
  *   .... 
  * });
  */
  /**
   * Register an item into {@link sap.viz.manifest.module} category
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.manifest.Module.register instead.
   * @method sap.viz.manifest.module#register 
   * @param {Object} newItems variable parameters, at least need one item to be registered into category
   * @return {Object} {@link sap.viz.manifest.module}
   * @example <caption>Sample Code:</caption>
   * manifest.module.register(lineModule);
   * manifest.module.register(pieModule,radarModule);
   */

  /**
   * unregister an item from {@link sap.viz.manifest.module} category
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.manifest.Module.unregister instead.
   * @method sap.viz.manifest.module#unregister 
   * @param {String} id id of the module being unregistered
   * @return {Object} the removed module object {@link sap.viz.manifest.module}
   * @example <caption>Sample Code:</caption>
   * manifest.module.unregister('sap.viz.modules.bar');
   */
  return manifest;
});
define('sap/viz/TemplateManager',[
    'sap/viz/manifest',
    'sap/viz/base/utils/FunctionUtils',
    'sap/viz/base/utils/TypeUtils',
    'sap/viz/base/utils/ObjectUtils',
    'sap/viz/lang/langManager',
    'sap/viz/base/utils/loadResource',
    'exports'
], function(manifest, FunctionUtils, TypeUtils, ObjectUtils, langManager, loadResource) {

    var listeners = [];
    var currentTemplate;
    var defaultTemplateId = "default";
    var defaultTemplate = {
        id : defaultTemplateId,
        name : "Default"
    };

    var templateCategory = manifest.registerCategory("template", function(obj) {
        var css = obj.css;
        if (!TypeUtils.isString(css)) {
            var text = "";
            for (var selector in css) {
                if (css.hasOwnProperty(selector)) {
                    text += selector + "{";
                    var declaration = css[selector];
                    for (var name in declaration) {
                        if (declaration.hasOwnProperty(name)) {
                            text += name + ":" + declaration[name] + ";";
                        }
                    }
                    text += "}";
                }
            }
            obj.css = text;
        }
        Object.defineProperties(obj, {
            props : {
                value : function(vizId) {
                    var properties = obj.properties;
                    if (properties) {
                        return properties[vizId];
                    }
                }
            }
        });
        return obj;
    });

    function getUrl(path, id){
        // delete query string.
        var path = path.split("?")[0];
        path = /\/$/.test(path) ? path : path + '/';
        return path + id + "/template.js";
    }

    function takeinDefQueue(id){
        var templateConfigs = [];
        var templates = window.sap && sap.viz && sap.viz.extapi && sap.viz.extapi.manifest &&
                sap.viz.extapi.manifest._queue && sap.viz.extapi.manifest._queue.template &&
                sap.viz.extapi.manifest._queue.template.configMap;
        var registered = !!templateCategory.get(id);
        var templatesById = templates && templates[id];

        if(templatesById){
            for(var i = 0; i < templatesById.length; ++i){
                var template = templatesById[i];
                if(registered){
                    manager.extend(id, template);
                }else{
                    manager.register(template);
                    registered = true;
                }
            }
        }
        return templateCategory.get(id);
    }

    /** @lends sap.viz.TemplateManager */
    var manager = {
        /**
         * The file paths of templates folder. {@link sap.viz.TemplateManager} will discover available templates in this
         * folder.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.env.Resource.path instead.
         * @default ["../../../resources/templates"]
         */
        loadPath : ["../../../resources/templates"],

        /**
         * Return current applied template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.current instead.
         * @returns {Object} the manifest of template
         */
        current : function() {
            return currentTemplate;
        },

        /**
         * Apply(switch) a template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.env.Template.set instead.
         * @param {String}
         *          id the template id
         * @param {Function}
         *          [cb] the call back function. It will be executed after template is applied successfully with current
         *          template as parameter. *
         * @param {Object}
         *          [thisObj] "this" object during calling call back function.
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         *
         */
        apply : function(id, cb, thisObj, failedCallback) {
            var template = takeinDefQueue(id);
            var paths = manager.loadPath;

            function onComplete(errors) {
                var template = takeinDefQueue(id);
                if(template){
                    currentTemplate = template;
                    for(var i = 0; i < listeners.length; ++i){
                        var listener = listeners[i];
                        listener.fn.apply(listener.scope, [template, cb]);
                    }
                    if (cb) {
                        cb.call(thisObj, template);
                    }
                }else{
                    if(failedCallback){
                        failedCallback(id, 'Loading template ' + id + ' failed.');
                    }
                    try{
                        FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_LOADING_TEMPLATE_FAIL', id));
                    }catch(e){
                        // Not a fatal error.
                    }
                }
            }

            if (template) {
                onComplete(template);
            } else {
                loadResource({
                    id: id,
                    paths: manager.loadPath,
                    getUrl: getUrl,
                    onComplete: onComplete
                });
            }
            return manager;
        },

        /**
         * Register new templates.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.register instead.
         * @param {Object...}
         *          templates the template descriptors(may be multiple).
         *
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        register : function() {
            templateCategory.register.apply(templateCategory, arguments);
            return manager;
        },

        /**
         * Extend/modify an existing template.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.env.Template.register instead.
         * @param {String}
         *          id the template id
         * @param {Object}
         *          obj the extended part.
         *
         * @returns {Object} {@link sap.viz.TemplateManager}         
         */
        extend : function(id, obj) {
            var template = templateCategory.get(id) || takeinDefQueue(id);
            if(template){
                ObjectUtils.extend(true, template.properties, obj.properties);
                template.css += obj.css || "";
            }
            return manager;
        },

        /**
         * Add a listener which will be executed when current template is changed.
         * @ignore
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         * 
         * @returns {Object} {@link sap.viz.TemplateManager}
         */
        addListener: function (listener) {
            listeners.push(listener);
            return manager;
        },

        /**
         * Remove the listener.
         * @ignore
         * @param {Object} listener
         *          the listener reference
         * 
         * @returns {Object} {@link sap.viz.TemplateManager} 
         */
        removeListener: function (listener) {
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners.splice(index, 1);
            }
            return manager;
        }
    };

    var apiProp = {
        writable : false,
        configurable : false
    };
    Object.defineProperties(manager, {
        current : apiProp,
        apply : apiProp,
        register : apiProp
    });

    manager.register(defaultTemplate);
    currentTemplate = templateCategory.get(defaultTemplateId);
    return manager;
});

define('sap/viz/base/utils/Objects',['sap/viz/base/utils/TypeUtils'],
function Setup(TypeUtils) {
    
	var objects = {
	    // copy from sap.viz.base.utils.ObjectUtils.extend
	    // in this version, when target is array, just use src replace target
	    extend : function() {
	      var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;

	      // Handle a deep copy situation
	      if (typeof target === "boolean") {
	        deep = target;
	        target = arguments[1] || {};
	        // skip the boolean and the target
	        i = 2;
	      }

	      // Handle case when target is a string or something (possible in
	      // deep
	      // copy)
	      if (typeof target !== "object" && !TypeUtils.isFunction(target)) {
	        target = {};
	      }

	      // extend itself if only one argument is passed
	      if (length === i) {
	        target = this;
	        --i;
	      }

	      for (; i < length; i++) {
	        // Only deal with non-null/undefined values
	        if ((options = arguments[i]) !== null) {
	          // Extend the base object
	          for (name in options) {
	            if (options.hasOwnProperty(name)){
	              src = target[name];
	              copy = options[name];

	              // Prevent never-ending loop
	              if (target === copy) {
	                continue;
	              }

	              // Recurse if we're merging plain objects or arrays
	              // in this version, when target is array, just src replace target
	              if (deep && copy && (TypeUtils.isPlainObject(copy))) {
	                if (copyIsArray) {
	                  copyIsArray = false;
	                  clone = src && TypeUtils.isArray(src) ? src : [];

	                } else {
	                  clone = src && TypeUtils.isPlainObject(src) ? src : {};
	                }
	                // Never move original objects, clone them
	                target[name] = objects.extend(deep, clone, copy);
	                // Don't bring in undefined values
	              } else if (copy !== undefined) {
	                target[name] = copy;
	              }              
	            }
	          }
	        }
	      }
	      // Return the modified object
	      return target;
	    },    
	    equal: function (objA, objB){
	      if(typeof arguments[0] !== typeof arguments[1]){
	        return false;
	      }
	      if (objA === undefined){
	        if (objB !== undefined){
	          return false;
	        }
	      }
	      if (objA === null){
	        if (objB !== null){
	          return false;
	        }
	      }
	      if(objA instanceof Array){
	        if (!(objB instanceof Array)){
	          return false;
	        }
	        if(objA.length !== objB.length){
	          return false;
	        }
	        var arrayEqualResult = true;
	        for(var i = 0; i < objA.length; i++){
	          if(typeof objA[i] !== typeof objB[i]){
	            return false;
	          }
	          if(typeof objA[i] === 'boolean' || typeof objA[i] === 'number' || typeof objA[i] === 'string' || typeof objA[i] === 'undefined' || objA[i] === null){
	            arrayEqualResult = (objA[i] === objB[i]);
	          }
	          else if(objA[i] instanceof Object){
	            arrayEqualResult = this.equal(objA[i] , objB[i]);
	          }
	          else{
	            return false;
	          }
	          if(!arrayEqualResult){
	            return false;
	          }
	        }
	        return true;
	      }
	      if(objA instanceof Object && objB instanceof Object && typeof objA !== 'function' && typeof objB !== 'function'){
	        if (objB === null || objB instanceof Array){
	          return false;
	        }
	        var attrLenA = 0, attrLenB = 0;
	        var attr;
	        for(attr in objA){
	          if (objA.hasOwnProperty(attr)){
	            if(typeof objA[attr] === 'boolean' || typeof objA[attr] === 'number' || typeof objB[attr] === 'string' || typeof objA[attr] === 'undefined' || objA[attr] === null){
	              if(objA[attr] !== objB[attr]){
	                return false;
	              }
	            }
	            else{
	              if(!this.equal(objA[attr], objB[attr])){
	                return false;
	              }
	            }
	            attrLenA++;
	          }
	        }
	        for(attr in objB){
	         if(objB.hasOwnProperty(attr)){
	           attrLenB++;
	         }
	        }
	        if(attrLenA !== attrLenB){
	          return false;
	        }
	        return true;
	      }
	      return objA === objB;
	    }
	};
	return objects;
});
define('sap/viz/format/XCFormat',['sap/viz/base/utils/Objects'],
function Setup(Objects) {
	
	var NF = {
			format: function(value){
				return value;
			},
			locale: function(){
				
			},
			DEFAULT_FORMAT_DATE_TIME : '',
			DEFAULT_FORMAT_TIME : '',
			DEFAULT_FORMAT_SHORT_DATE : '',
			DEFAULT_FORMAT_LONG_DATE : '',
			DEFAULT_FORMAT_NUMBER : '',
			DEFAULT_FORMAT_BOOLEAN : ''
	}, snf = null, locale = 'en';
	var isUseDefaultFormatter = false;

	if(window.sap && sap.common && sap.common.globalization && sap.common.globalization.NumericFormatManager){
		snf = sap.common.globalization.NumericFormatManager;
		
		NF = Objects.extend( true, NF, {
			
			format : function(value, pattern){
				if(isUseDefaultFormatter === true && (pattern === null || pattern === undefined)){
					return snf.formatToText(value, this.DEFAULT_FORMAT_NUMBER, true);
				}
				return snf.formatToText(value, pattern, true); // we always try to convert number to string
			},
			
			locale : function(_){
				if(!arguments.length){
					return locale;
				}
				locale = _;
				snf.setPVL(locale);
				
				//reset default format string
				NF.DEFAULT_FORMAT_DATE_TIME = snf.DEFAULT_FORMAT_DATE_TIME;
				NF.DEFAULT_FORMAT_TIME = snf.DEFAULT_FORMAT_TIME;
				NF.DEFAULT_FORMAT_SHORT_DATE = snf.DEFAULT_FORMAT_SHORT_DATE;
				NF.DEFAULT_FORMAT_LONG_DATE = snf.DEFAULT_FORMAT_LONG_DATE;
				NF.DEFAULT_FORMAT_NUMBER = snf.DEFAULT_FORMAT_NUMBER;
				NF.DEFAULT_FORMAT_BOOLEAN = snf.DEFAULT_FORMAT_BOOLEAN;
			},

			useDefaultFormatter : function(_){
				if(!arguments.length){
					return isUseDefaultFormatter;
				}
				isUseDefaultFormatter = _;
			},	
			DEFAULT_FORMAT_DATE_TIME : snf.DEFAULT_FORMAT_DATE_TIME,
			DEFAULT_FORMAT_TIME : snf.DEFAULT_FORMAT_TIME,
			DEFAULT_FORMAT_SHORT_DATE : snf.DEFAULT_FORMAT_SHORT_DATE,
			DEFAULT_FORMAT_LONG_DATE : snf.DEFAULT_FORMAT_LONG_DATE,
			DEFAULT_FORMAT_NUMBER : snf.DEFAULT_FORMAT_NUMBER,
			DEFAULT_FORMAT_BOOLEAN : snf.DEFAULT_FORMAT_BOOLEAN
			
		});
	}
	
	return NF;
});
define('sap/viz/format/FormatManager',['sap/viz/base/utils/TypeUtils','sap/viz/format/XCFormat', 'exports'],
function Setup(TypeUtils, XCFormat) {

  var locale = 'en', formatUtil = XCFormat, props = null, USE_DEFAULT_FORMATTER = 'use_default_formatter';
  var listeners = [];
  var useDefaultFormatter = null;
  var FM = 
     /** @lends sap.viz.format.FormatManager */
  {
       /**
           * @constructs
          */
      constructor : function(){
        return;
      },
      
      /**
           * Apply a locale
           * 
           * @param {String}
           *       locale
           * 
           * @returns {Object} {@link sap.viz.format.FormatManager}
           * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.		   
           */
      apply : function(_){
          // formalize the locale to support both 'en_US' and 'en-US'
          locale = _.split("-").join("_");
          XCFormat.locale(locale);
          if (TypeUtils.isFunction(formatUtil.locale)) {
              formatUtil.locale(locale);
          }
      },
      
      /**
           * format a string
           * 
           * @param {String}
           *       value
           * 
           * @param {String}
           *       pattern
           * 
           * @returns {Object} {@link sap.viz.format.FormatManager}
           * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.		   
           */
      format : function(value, pattern){
        var result = formatUtil.format(value, pattern);
        if (result === USE_DEFAULT_FORMATTER)
        {
            return XCFormat.format(value, pattern);
        }
        return result;
      },
      
      /**
           * set/get format function
           * 
           * @param {Object}
           *       func
           * 
           * @returns {Object} {@link sap.viz.format.FormatManager}
	* @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
           */
      formatFunc : function(_){
        if ( _!==undefined && _!== null && TypeUtils.isFunction(_.format)) {
            formatUtil = _;
        }
        return formatUtil;
      },

      onFormatChanged:function() {
        listeners.forEach(function(listener) {
          listener.fn.apply(listener.scope);
        });
      },

      addListener: function(listener) {
        listeners.push(listener);
      },
      removeListener: function(listener) {
        var index = listeners.indexOf(listener);
        if (index !== -1) {
          listeners.splice(index, 1);
        }
      },

      useDefaultFormatter : function(_){
         if(!arguments.length){
          return XCFormat.useDefaultFormatter();
        }
        if(useDefaultFormatter !== _)
        {
          XCFormat.useDefaultFormatter(_);
          this.onFormatChanged();
		  useDefaultFormatter= _;
        }

      },

      /**
         * default data time format. It will changed by locale. 
        */
      DEFAULT_FORMAT_DATE_TIME : formatUtil.DEFAULT_FORMAT_DATE_TIME,
      /**
         * default time format. It will changed by locale. 
        */
      DEFAULT_FORMAT_TIME : formatUtil.DEFAULT_FORMAT_TIME,
      /**
         * default short data format. It will changed by locale. 
        */
      DEFAULT_FORMAT_SHORT_DATE : formatUtil.DEFAULT_FORMAT_SHORT_DATE,
      /**
         * default long data format. It will changed by locale. 
        */
      DEFAULT_FORMAT_LONG_DATE : formatUtil.DEFAULT_FORMAT_LONG_DATE,
      /**
         * default number format. It will changed by locale. 
        */
      DEFAULT_FORMAT_NUMBER : formatUtil.DEFAULT_FORMAT_NUMBER,
      /**
         * default boolean format. It will changed by locale. 
        */
      DEFAULT_FORMAT_BOOLEAN : formatUtil.DEFAULT_FORMAT_BOOLEAN,
      /**
         *  use default XCFormatter.
       */
      DEFAULT_FORMATTED_VALUE : USE_DEFAULT_FORMATTER,
  };
  
  return FM;
});
define('sap/viz/Locale',['sap/viz/lang/langManager', 'sap/viz/format/FormatManager', 'sap/viz/base/utils/TypeUtils', 'exports'], function Setup(langManager, FormatManager, TypeUtils) {
    var locale = 'en', listeners = [], callback;

    function internalCallback() {
        onLocaleChanged(locale);
        if (TypeUtils.isFunction(callback)) {
            callback.apply();
        }
    }

    function onLocaleChanged(locale) {
        listeners.forEach(function(listener) {
            listener.fn.apply(listener.scope, [locale]);
        });
    }

    var Locale =
    /** @lends sap.viz.Locale */
    {
        /**
         * @constructs
         */
        constructor : function() {
            return;
        },

        /**
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.env.Locale.set/get instead.
         * @param {String}
         *       locale
         *
         * @returns {Object} {@link sap.viz.Locale}
         */
        locale : function(loc, callbackFunc) {
            if (!arguments.length) {
                return locale;
            }
            locale = loc;
            callback = callbackFunc;
            FormatManager.apply(locale);
            langManager.apply(locale, internalCallback);
            return Locale;
        },

        /**
         * Add a listener which will be executed when current language is changed.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.env.Locale.addListener instead.
         * @param {Object}
         *          listener
         * @param {Function}
         *          listener.fn the listener function
         * @param {Object}
         *          listener.scope the "this" object in the listener function
         *
         * @returns {Object} {@link sap.viz.Locale}
         */
        addListener : function(listener) {
            listeners.push(listener);
            return Locale;
        },

        /**
         * Remove the listener.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.extapi.env.Locale.removeListener instead.
         * @param {Object} listener
         *          the listener reference
         *
         * @returns {Object} {@link sap.viz.Locale}
         */
        removeListener : function(listener) {
            var index = listeners.indexOf(listener);
            if (index !== -1) {
                listeners.splice(index, 1);
            }
            return Locale;
        }
    };

    return Locale;
}); 
define('sap/viz/base/utils/log/Analyzer',['sap/viz/base/Logger', 'exports'],
function Setup(LOG) {
  function Stack() {
    this.stac = [];

    this.pop = function() {
      return this.stac.pop();
    };

    this.push = function(item) {
      this.stac.push(item);
    };

    this.peek = function() {
      return this.stac[this.stac.length - 1];
    };
  }

  /*
   * return {
   *   'usedJSHeapSize' : [OPTIONAL] int
   *   'totalJSHeapSize' : [OPTIONAL] int
   *   'flag' : string
   * }
   */
  function parseProfilingMsg(msg) {
    //[18403120][24402304][767557632]Render: layout
    var ret = {};
    var exp = /\[\d+\]/g;
    var exp2 = /\d+/;
    var exp3 = /[^\d\[\]]+/;
    var heapsize = msg.match(exp);
    if(heapsize) {
      ret.usedJSHeapSize = heapsize[0].match(exp2)[0];
      ret.totalJSHeapSize = heapsize[1].match(exp2)[0];
    }
    ret.flag = msg.match(exp3)[0];
    return ret;
  }
  
  /*
   * return {
   *   'name': string,
   *   'client': string,
   *   'info' : Array
   * }
   */
  function parseContextMsg(msg) {
    //"[Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.152 Safari/537.22]creation:3:16:0"
    //[useragent]contextname:[:additional values]
    var ret = {};
    var exp = /\[.+\]/;
    var exp2 = /\]:.+$/;
    ret.client = msg.match(exp)[0];
    var ctxMatch = msg.match(exp2);
    if(ctxMatch){
      var ctxa = ctxMatch[0].split(':');
      ret.name = ctxa[1];
      ctxa.shift();
      ctxa.shift();
      ret.info = ctxa;
    }
    return ret;
  }
  
  //TODO FIXME @Eddy CHANGE TO STRING
    var threshold = LOG.LEVEL.DEBUG;
    var msgs = [];
    var layout = null;
  var Analyzer = {
    // add property threshold to adapt new log framework and each appender needs a threshold property
    threshold: threshold,
    doAppend : function(logTime, logLevel, logCate, logMsg) {
      msgs.push([logTime, logLevel, logCate, logMsg]);
    },
    setLayout : function(layout) {
      return layout.format && (this.layout = layout);
    },
    getLevel : function() {
      return threshold;
    },
    setLevel : function(level) {
      threshold = level;
    },
    
    reset : function(){
      msgs = [];
    },
    
    pnrProfiling: function(msg){
        //chrome supports window.performance.memory, we include it in profile message
        if(window && window.performance && window.performance.memory){
          var m = window.performance.memory;
          msg = '[' + m.usedJSHeapSize + '][' + m.totalJSHeapSize + '][' + m.jsHeapSizeLimit + ']' + msg;
        }
        LOG.debug(msg, 'PROFILING');
     },
     
    pnrContext: function(msg){
        //try to get as many env contexts as possible
        if(window && window.navigator){
          msg = "[" + window.navigator.userAgent + "]" + msg;
        }
        LOG.debug(msg, 'CONTEXT');
      }, 
 
      profiling : function() {
        LOG.disable();
        
        var pfa = [];
        var ctxmsg;
        var currentPF;
        
        var pStartMsg;
        var pEndMsg;
        var calculateDoneFlag = "pnr.calculate.done";
        for(var i = 0, len = msgs.length; i < len; i++) {
          //typical msg:
          //[1362633819088][DEBUG][PROFILING]-[18403120][24402304][767557632]Render: layout
          //[1362633819099][DEBUG][PROFILING]-[18786948][24402304][767557632]Render: layout
        	pStartMsg = msgs[i];
          if(pStartMsg[2] === 'CONTEXT'){ //group the context, push a new currentPF 
               ctxmsg = parseContextMsg(pStartMsg[3]);
	           currentPF = {
	              ctx: {
	                name: ctxmsg.name,
	                client: ctxmsg.client,
	                info: ctxmsg.info
	              },
	              data : []
	            };
	            pfa.push(currentPF);
          }else if(pStartMsg[2] === 'PROFILING') {
    		if(pfa.length<1){ // chekc pfa  has currentPF.
    			currentPF = {data : []};
      	        pfa.push(currentPF);
      		}

            var startMsg = parseProfilingMsg(pStartMsg[3]);
  			
          	for(var j=i+1;j<len;j++)
          	{
          		pEndMsg = msgs[j];
  				var endMsg = parseProfilingMsg(pEndMsg[3]);
          		if(startMsg.flag && endMsg.flag === startMsg.flag &&  (pStartMsg.length > 0 && pStartMsg[pStartMsg.length-1] !== calculateDoneFlag)){
					if(pEndMsg[pEndMsg.length-1] !=calculateDoneFlag){
        				msgs[j].push(calculateDoneFlag);
					}

					// [start.flag, endTime-startTime, startTime, endTime, end.usedJSHeapSize - start.usedJSHeapSize, end.totalJSHeapSize - start.totalJSHeapSize, end.usedJSHeapSize, end.totalJSHeapSize]
          			currentPF.data.push([startMsg.flag, pEndMsg[0] - pStartMsg[0], pStartMsg[0], pEndMsg[0], endMsg.usedJSHeapSize - startMsg.usedJSHeapSize, endMsg.totalJSHeapSize - startMsg.totalJSHeapSize, endMsg.usedJSHeapSize, endMsg.totalJSHeapSize]);
          			break;
          		}
          	}
          	
            }
          }
        
        LOG.enable();
        
        return pfa;
      },

    };

  return Analyzer;
});
define('sap/viz/env',['sap/viz/base/utils/TypeUtils','sap/viz/base/Logger','sap/viz/Locale',
'sap/viz/base/utils/log/Analyzer', 'sap/viz/base/utils/ObjectUtils', 'exports'],
function Setup(TypeUtils, LOG, Locale, analyzer, ObjectUtils) {
    var _setLogLevel = function(_level) {
        if(TypeUtils.isExist(_level)) {
            LOG.setLevel(_level);
        }
    };
    var _initLogger = function(options) {
        if(!options) {
            return;
        }
            
        if(options.enable) {
            LOG.enable();
        }
           
        if(!options.appenders){
            //no customize appenders, we'll use default appender
            if(options.level){
              //FIXME @Eddy, allow set level with string
              //FIXME and only for debug, trace we will use analyzer as appender
              //otherwise we set this level to default appender
              LOG.setAppenders([{appenderKey: 'sap.viz.util.analyzer', appender: analyzer}]);
            }
            return;
        }
        //if user set appenders, we remove default appender
        LOG.setAppenders([]);   
        for(var i = 0, l = options.appenders.length; i < l; i++) {
            var appender = options.appenders[i];
            if(appender.appenderKey) {
                 LOG.addAppender(appender.appenderKey, appender.appender);    
            }
               
            else {
                 LOG.addAppender(appender.appender);
            }
               
        }
        // LOG.addAppender('analyzerAppender', new AnalyzerAppender());
        // LOG.addAppender("ajaxApp", new LOG.AjaxAppender("http://localhost:8800"));
        // LOG.getAppender("ajaxApp").setLevel(LOG.LEVEL.DEBUG);
        //LOG.getAppender("[default]").setLevel(_level);
    };
    
    var _initLocal = function(options, callback){
      Locale.locale(options.locale, callback);
    };
    
    var setting = {};

    var env =
    /**
     * @lends sap.viz.Environment
     */
    {
        /**
         * @constructs
         */
        constructor : function() {

        },
        /**
         * initialize visualization environment
	 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
         * @param {Object}
         *            option {locale:'en_US'}
         *
         */
        initialize : function(option, callback) {
          if (!option) {
              return;  
          }
            _initLogger(option.log);
            if (option.locale){
              _initLocal(option, callback);
            } else {
                   if(callback) {
                       callback.call();
                   }
            }
            
            setting = ObjectUtils.extend(true, {}, setting, option);
            // _setLogLevel(option.log);
        },
        
        /**
         * get Environment setting.
         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
         * @return {Object}
         *            option {locale:'en_US'}
         *
         */
        getEnvSetting : function(){
            return setting;
        },

        /**
         * @ignore
         * @param enable
         */
        setLoggerEnable : function(enable) {
            if(enable === true) {
                 LOG.enable();
            }
               
            else if(enable === false) {
                 LOG.disable();    
            }
               
        },
        
        /**
         * @ignore
         * @returns TODO: add desc
         */
        addLogAppender : function() {
            if(arguments.length === 1) {
                return LOG.addAppender(arguments[0]);
            }
                
            else if(arguments.length === 2) {
                return LOG.addAppender(arguments[0], arguments[1]);
            }
               
        },
        
        /**
         * @ignore
         * @param key
         * @returns TODO: add desc
         */
        removeLogAppender : function(key) {
            return LOG.removeAppender(key);
        }
    };

    return env;
});
define('sap/viz/config',['sap/viz/base/utils/FunctionUtils', 'sap/viz/env', 'exports'],
function Setup(FunctionUtils, env) {
  
  var configs = {};
  
  var enableCanvg = false; 
  
  var manager = {
      
      constructor : function(){
        return;
      },
      
      enableCanvg : function(_) {
          if(!arguments.length){
            //get option from environment.
            return (env.getEnvSetting().enableCanvg !== undefined) ? env.getEnvSetting().enableCanvg : enableCanvg ;
          }
          enableCanvg = _;
          return manager;
      },
      
      register : function(obj) {
//          if(configs.hasOwnProperty(obj.id)){
//            return;
//          }
          configs[obj.id] = obj.value;
          return manager;
      },
        
      get: function(ids){
        if(configs.hasOwnProperty(ids)){
          return configs[ids];
        }
      },
      
      getConfigs : function() {
          return configs;
      }
  };
  return manager;
});
define('sap/viz/data/utils/CTB2TBConvertUtil',['sap/viz/base/utils/ObjectUtils', 'sap/viz/base/utils/TypeUtils', 'exports'], function(ObjectUtils, TypeUtils) {
    var ANALYSISAXIS = "analysisAxis";
    var MEASUREVALUESGROUP = "measureValuesGroup";
    var _hasAxis;
    var _hasValuesGroup;
    var _crosstableDataset;
    var _feeding;
    var _axis;
    var _valuesGroup;
    var _step;

    var CTB2TBConvertUtil = function() {

    };

    var getFeedId = function(index, type) {
        if (_feeding) {
            for (var i in _feeding) {
                var binding = _feeding[i].binding;
                for (var j in binding) {
                    if (binding[j].type === type && binding[j].index === index) {
                        return _feeding[i].feedId;
                    }
                }
            }
        }
    };

    // check whether the crosstable has analysis axis
    var checkAxis = function() {
        _axis = _crosstableDataset[ANALYSISAXIS];
        if (_axis === undefined || !TypeUtils.isArray(_axis) || _axis.length <= 0) {
            _hasAxis = false;
        } else {
            _hasAxis = true;
        }
    };
    // check whether the crosstable has measure values group
    var checkValuesGroup = function() {
        _valuesGroup = _crosstableDataset[MEASUREVALUESGROUP];
        if (_valuesGroup === undefined || !TypeUtils.isArray(_valuesGroup) || _valuesGroup.length <= 0) {
            _hasValuesGroup = false;
        } else {
            _hasValuesGroup = true;
        }
    };
    // get count of values of a dimension
    var getAxesValuesCount = function(index) {
        if (!_hasAxis || _axis[index] === undefined) {
            return 1;
        }
        return _axis[index].data[0].values.length;
    };
    // get count of dimensions of an axes
    var getDimsCount = function(index) {
        if (!_hasAxis || _axis[index] === undefined) {
            return 1;
        }
        return _axis[index].data.length;
    };
    // get count of measures of a group
    var getMeasCount = function(index) {
        if (!_hasValuesGroup || _valuesGroup[index] === undefined) {
            return 1;
        }
        return _valuesGroup[index].data.length;
    };
    // locate dimension data in FlatTableDataset.data
    var locateDim = function(aaIndex, dimIndex, vaIndex) {
        var r = [];
        var c = 0;
        if (aaIndex === 0) {
            for (var i = 0; i < _step; i++) {
                r.push(_step * vaIndex + i);
            }
        } else if (aaIndex === 1) {
            var count = getAxesValuesCount(0);
            for (var i = 0; i < count; i++) {
                r.push(_step * i + vaIndex);
            }
        }
        for (var i = aaIndex; i > 0; i--) {
            c = c + getDimsCount(i - 1);
        }
        c = c + dimIndex;
        return {
            r : r,
            c : c
        };
    };
    // locate measure data in FlatTable.data
    var locateMea = function(mvIndex, meaIndex, vaArrayIndex, vaIndex) {
        var r = 0;
        var c = 0;
        r = vaIndex * _step + vaArrayIndex;
        for (var i = mvIndex; i > 0; i--) {
            c = c + getMeasCount(i - 1);
        }
        c = c + meaIndex;
        return {
            r : r,
            c : c
        };
    };
    // check duplicate metadata fields
    var checkDuplicateMetaData = function (fields, id) {
        var ret = -1;
        for (var i = 0; i < fields.length; i++) {
            if (fields[i].id === id) {
                ret = i;
                break;
            }
        }
        
        return ret;
    };
    
    /**
     * Convert a crosstable dataset to a flat table dataset
     * @param CrosstableDataset {Object}
     * @param CrosstableDataset feeding {Object}
     * @returns  {dataset: flatTableDataset, feeding: flatTableFeeding}
     */
    CTB2TBConvertUtil.prototype.crossTable2FlatTable = function(crosstableDataset, feeding) {
        var feeding = this.crossTable2FlatTableFeed(crosstableDataset, feeding);
        var dataset = this.crossTable2FlatTableData(crosstableDataset, feeding);
        return {
            dataset : dataset,
            feeding : feeding
        };
    }
    
    /**
     * Convert a crosstable dataset to a flat table dataset
     * @param CrosstableDataset {Object}
     * @param CrosstableDataset feeding {Object}
     * @returns FlatTable feeding {Objcect}
     */
    CTB2TBConvertUtil.prototype.crossTable2FlatTableFeed = function(crosstableDataset, feeding) {
        _crosstableDataset = crosstableDataset.data();
        _feeding = feeding;
        checkAxis();
        checkValuesGroup();
        var flatTableFeeding = {}, feedId;
        if (_hasAxis) {
            var dimIndex;
            for (var i = 0; i < _axis.length; i++) {
                dimIndex = _axis[i].index;
                feedId = getFeedId(dimIndex, ANALYSISAXIS);
                if (feedId) {
                    flatTableFeeding[feedId] = [];
                    for (var j in _axis[i].data) {
                        flatTableFeeding[feedId].push(_axis[i].data[j].name);
                    }
                }
            }
        }
        if (_hasValuesGroup) {
            var dimIndex;
            for (var i = 0; i < _valuesGroup.length; i++) {
                dimIndex = _valuesGroup[i].index;
                feedId = getFeedId(dimIndex, MEASUREVALUESGROUP);
                if (feedId) {
                    flatTableFeeding[feedId] = [];
                    for (var j in _valuesGroup[i].data) {
                        flatTableFeeding[feedId].push(_valuesGroup[i].data[j].name);
                    }
                }
            }
        }
        return flatTableFeeding;
    };

    /**
     * Convert a crosstable dataset to a flat table dataset
     * @param CrosstableDataset {Object}
     * @returns FlatTableDataset {Objcect}
     */
    CTB2TBConvertUtil.prototype.crossTable2FlatTableData = function(crosstableDataset) {
        _crosstableDataset = crosstableDataset.data();
        checkAxis();
        checkValuesGroup();
        _step = getAxesValuesCount(1);
        var metadata = {
            fields : []
        };
        var data = [];
        var dimData = [];
        var meaData = [];
        var flatTableData = {};
        var sameDimensionRecord = {};
        

        if (_hasAxis) {
            var dims = [];
            var semanticType = 'Dimension';
            for (var i = 0; i < _axis.length; i++) {
                dims = _axis[i].data;
                for (var j = 0; j < dims.length; j++) {
                    var name = dims[j].name ? dims[j].name : ("id" + i + j);
                    var id = dims[j].id ? dims[j].id : name;
                    var duplicateId = checkDuplicateMetaData(metadata.fields, id);
                    if (duplicateId > -1) {
                        sameDimensionRecord[id] = sameDimensionRecord[id] || [duplicateId];
                        sameDimensionRecord[id].push(metadata.fields.length);
                    }
                    // push dimension metadata
                    metadata.fields.push({
                        id : id,
                        semanticType : semanticType,
                        name : name
                    });
                    // push dimension data values
                    for (var k = 0; k < dims[j].values.length; k++) {
                        var loc = locateDim(i, j, k);
                        for (var l = 0; l < loc.r.length; l++) {
                            if (dimData[loc.r[l]] === undefined) {
                                dimData[loc.r[l]] = [];
                            }
                            dimData[loc.r[l]][loc.c] = dims[j].values[k];
                        }
                    }
                }
            }
        }
        if (_hasValuesGroup) {
            var meas = [];
            var semanticType = 'Measure';
            for (var i = 0; i < _valuesGroup.length; i++) {
                meas = _valuesGroup[i].data;
                for (var j = 0; j < meas.length; j++) {
                    var name = meas[j].name ? meas[j].name : ("id" + i + j);
                    var id = meas[j].id ? meas[j].id : name;
                    // push measure metadata
                    metadata.fields.push({
                        id : id,
                        semanticType : semanticType,
                        name : name
                    });
                    // push measure data values
                    for (var k = 0; k < meas[j].values.length; k++) {
                        var dataValues = meas[j].values[k];
                        for (var l = 0; l < dataValues.length; l++) {
                            var loc = locateMea(i, j, k, l);
                            if (meaData[loc.r] === undefined) {
                                meaData[loc.r] = [];
                            }
                            meaData[loc.r][loc.c] = dataValues[l];
                        }
                    }
                }
            }
        }
        // if (meaData.length !== dimData.length) {
        // TODO throw error while data doesn't match metadata
        // console.log("crosstable data error");
        // }
        // concat dimension data and measure data
        var rowsCount = dimData > meaData ? dimData.length : meaData.length;
        if (_hasValuesGroup && _hasAxis) {
            for (var i = 0; i < rowsCount; i++) {
                if (TypeUtils.isArray(dimData[i])) {
                    var different = false;
                    for (var key in sameDimensionRecord) {
                        var value;
                        for (var j = 0; j < sameDimensionRecord[key].length; j++) {
                            value = j === 0 ? dimData[i][sameDimensionRecord[key][j]] : value;
                            if (value !== dimData[i][sameDimensionRecord[key][j]]) {
                                different = true;
                                break;
                            }
                        }
                        if (different) {
                            break;
                        }
                    }
                    if (different) {
                        continue;
                    }
                    data.push(dimData[i].concat(meaData[i]));
                }
            }
        } else if (!_hasValuesGroup && _hasAxis) {
            data = dimData;
        } else if (_hasValuesGroup && !_hasAxis) {
            data = meaData;
        } else {
            return;
        }
        flatTableData.metadata = metadata;
        flatTableData.data = data;
        return ObjectUtils.clone(flatTableData);
    };

    var returnValue = new CTB2TBConvertUtil();
    return returnValue;
}); 
define('sap/viz/data/MultiAxesDataAdapter',['sap/viz/base/utils/TypeUtils','sap/viz/base/utils/FunctionUtils', 'exports'],
function Setup(TypeUtils, FunctionUtils){


   /**
    * @name sap.viz.data.MultiAxesDataAdapter
    * @constructor
    * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
      */
   function MultiAxesDataAdapter(bindingInfo){
     this._bindingInfo = bindingInfo;
     this._aa  = [];
     this._mg  = [];
     this._fakeData = false;
     this._dataPointCount = 0;
     this._emptyDataset = false;
   }
   
   /**
    * @name sap.viz.data.MultiAxesDataAdapter#addAnalysisAxis
    * @function
    * @param {Object} aa
    * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
    */
   MultiAxesDataAdapter.prototype.addAnalysisAxis = function(aa){
        if(aa){
           this._aa.push(aa);
        }
   };
   
   /**
    * @name sap.viz.data.MultiAxesDataAdapter#addMeasureValuesGroup
    * @function 
    * @param {Object} mg
    * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.	
    */
   MultiAxesDataAdapter.prototype.addMeasureValuesGroup = function(mg){
        if(mg){
          this._mg.push(mg);
        }
   };
   
   /**
    * @name sap.viz.data.MultiAxesDataAdapter#getAnalysisAxisDataByIdx
    * @function 
    * @param {Object} index
    * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.	
    */
   MultiAxesDataAdapter.prototype.getAnalysisAxisDataByIdx = function(idx){
     if(!arguments.length){
        return this._aa;
     }
     
     for(var i = 0; i < this._aa.length; i++){
       if(this._aa[i].index === idx){
          return this._aa[i];
       }
     }
     
     return null;
   };
   
   /**
    * @name sap.viz.data.MultiAxesDataAdapter#getMeasureValuesGroupDataByIdx
    * @function 
    * @param {Object} index
    * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.	
    */
   MultiAxesDataAdapter.prototype.getMeasureValuesGroupDataByIdx = function(idx){
     if(!arguments.length){
        return this._mg;
     }
     
     for(var i = 0; i < this._mg.length; i++){
       if(this._mg[i].index === idx){
          return this._mg[i];
       }
     }
     
     return null;
   };
   
   MultiAxesDataAdapter.prototype.createDataAdapterForModule = function(ctx){
     
      var subDataAdapter = new MultiAxesDataAdapter();
      var i;
      if(ctx && ctx.aa){
        for(i = 0; i < ctx.aa.length; i++){
          var aa = this.getAnalysisAxisDataByIdx(ctx.aa[i] - 1);
          if(aa){
             subDataAdapter.addAnalysisAxis({index:i, values: aa.values});
          }
        } 
      }
      
      if(ctx && ctx.mg){
        for(i = 0; i < ctx.mg.length; i++){
          var mg = this.getMeasureValuesGroupDataByIdx(ctx.mg[i] - 1);
          if(mg){
             subDataAdapter.addMeasureValuesGroup({index: i, values: mg.values});
          }
        }
      }
      
      return subDataAdapter;
     
   };
   
   MultiAxesDataAdapter.prototype.getBindingInfo = function(){
        return this._bindingInfo;
   };
   
   MultiAxesDataAdapter.prototype.fakeData = function(_){
     if (!arguments.length){
         return this._fakeData;
     }
     
     this._fakeData = _;
   };
   

   MultiAxesDataAdapter.prototype.dataPointCount = function(_){
     if (!arguments.length){
       return this._dataPointCount;
     }
     
     this._dataPointCount = _;
   };
   
   MultiAxesDataAdapter.prototype.emptyDataset = function(_){
     if (!arguments.length){
         return this._emptyDataset;
     }
     
     this._emptyDataset = _;
   };
   
   return MultiAxesDataAdapter;
   
});
define('sap/viz/data/handler/MeasureDataHandler',['sap/viz/base/utils/FunctionUtils', 'sap/viz/lang/langManager', 'exports'],

function Setup(FunctionUtils, langManager){
  
  var MeasureValuesDataHandler = {
      
      makeMeasureValues: function(ctx, mvg, axisIndex, maxAxisNumber, matchMeasure){
          
          var values = [];
          for(var i = 0; i < mvg.values.length; i++){
              if(matchMeasure && i !== ctx.path.mi){
                 continue;
              }
            
              var value = {};
              var mv = mvg.values[i];
              var rows = mv["rows"];
              value["col"] = mv["col"];
              if(ctx){
                 value["rows"] = this.createMeasureValues(ctx, rows, axisIndex, maxAxisNumber);
              }else{
                value["rows"] = this.createMeasureValuesWithoutCtx(rows, axisIndex, maxAxisNumber);
              }
          
              values.push(value);
           }
          
          return values;
        },
       
        /**
         * Create Measure values without context
         *   
         * @param rows
         * @param axisIndex
         * @returns {Array}
         */
        createMeasureValuesWithoutCtx_1_2 : function(rows, axisIndex){
          var values = [], j, row;
          if(axisIndex[0] === 1){
             row = [];
             for(j = 0; j < rows[0].length; j++){
               row.push(rows[0][j]);
             }   
             values.push(row);
           
          }else if(axisIndex[0] === 2){     
             for(j = 0; j < rows[0].length; j++){
               row = [];
               row.push(rows[0][j]);
               values.push(row);
             }   
          }else{
             FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
         } 
          
          return values;
        },
        
        createMeasureValuesWithoutCtx_1_3 : function(rows, axisIndex){
           var values = [], j, row;
           if(axisIndex[0] === 1){
              row = [];
              for(j = 0; j < rows[0].length; j++){
                  row.push(rows[0][j]);
           }   
              
           values.push([row]);
           
         }else if(axisIndex[0] === 2){
              row = [];
              for(j = 0; j < rows[0].length; j++){
                  row.push([rows[0][j]]);
              }
              
              values.push(row);
              
         }else if(axisIndex[0] === 3){   
               for(j = 0; j < rows[0].length; j++){
                   row = [];
                   row.push([rows[0][j]]);
                   values.push(row);
               }
         }else{
           FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
         }  
           
         return values;
         
        },
        
        createMeasureValuesWithoutCtx : function(rows, axisIndex, maxAxisNumber){
           if(axisIndex.length === 1){
             if(maxAxisNumber === 1 || maxAxisNumber === 2){
                return this.createMeasureValuesWithoutCtx_1_2(rows, axisIndex); 
             }else if(maxAxisNumber === 3){
                return this.createMeasureValuesWithoutCtx_1_3(rows, axisIndex);
             }else{
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
             }
           }else if(axisIndex.length === 2){
             if(maxAxisNumber === 2){
                return rows;
             }
             else if(maxAxisNumber === 3){
                return this.createMeasureValues_2_3(rows, axisIndex); 
             }else{
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
             } 
             
           }else{
             FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
           }
           
           FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
      },
      
      /**
         * Create Measure values without context
         *   
         * @param rows
         * @param axisIndex
         * @returns {Array}
         */
        createMeasureValues_1_2 : function(ctx, rows, axisIndex){
          var values = [], j, row;
           if(axisIndex[0] === 1){
              row = [];
              for(j = 0; j < rows.length; j++){
                  row.push(rows[j][ctx.path.dii]);
              } 
              
           values.push(row);
           
         }else if(axisIndex[0] === 2){
           
           for(j = 0; j < rows.length; j++){
             row = [];
             row.push(rows[j][ctx.path.dii]);
             values.push(row);
           }  
           
         }else{
           FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
         } 
          
          return values;
        },
        
        createMeasureValues_1_3 : function(ctx, rows, axisIndex){
          var values = [], j, row;
          if(axisIndex[0] === 1){
             
           row = [];
           for(j = 0; j < rows.length; j++){
             row.push(rows[j][ctx.path.dii]);
           }   
           values.push([row]);
           
         }else if(axisIndex[0] === 2){
           row = [];
           for(j = 0; j < rows.length; j++){
             
             row.push([rows[j][ctx.path.dii]]);
             
           }  
           values.push(row);
           
         }else if(axisIndex[0] === 3){
           
           for(j = 0; j < rows.length; j++){
             row = [];
             row.push([rows[j][ctx.path.dii]]);
             values.push(row);
           }
           
         }else{
           FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
         }
           
           return values;
        },
      
      createMeasureValues : function(ctx, rows, axisIndex, maxAxisNumber){
         var values = [];
         if(axisIndex.length === 1){
             if(maxAxisNumber === 1 || maxAxisNumber === 2){
              return this.createMeasureValues_1_2(ctx, rows, axisIndex); 
             }else if(maxAxisNumber === 3){
               return this.createMeasureValues_1_3(ctx, rows, axisIndex);
             }else{
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
             }
         }else if(axisIndex.length === 2){
             if(maxAxisNumber === 2){
                return rows;
             }else if(maxAxisNumber === 3){
                return this.createMeasureValues_2_3(rows, axisIndex);
             }else{
              FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
             }
         }else{
             FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
         }
           
         
           return values;
      },
     
        createMeasureValues_2_3 : function(rows, axisIndex){
          var i ,j, values;
          if(axisIndex[0] === 1 && axisIndex[1] === 2){
            return [rows];
          }else if(axisIndex[0] === 1 && axisIndex[1] === 3){
            values = [];
            for(i = 0 ; i < rows.length; i++){
                values.push([rows[i]]);
            }
            return values;
            
          }else if(axisIndex[0] === 2 && axisIndex[1] === 3){
            values = [];
            for(i = 0 ; i < rows.length; i++){
              var value = [];
              var cols = rows[i];
              for(j = 0; j < cols.length; j++){
                var col = cols[j];
                value.push([col]);
              }
              values.push(value);
            }
            
            return values;
          }else{
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
          }
        }
        
     };
  
  return MeasureValuesDataHandler;
});
define('sap/viz/data/handler/SingleChartDataHandler',['sap/viz/base/utils/FunctionUtils','sap/viz/data/MultiAxesDataAdapter','sap/viz/data/handler/MeasureDataHandler', 'sap/viz/lang/langManager', 'exports'],
 function Setup(FunctionUtils, MultiAxesDataAdapter, MeasureDataHandler, langManager){
   
   
   function initMeasureValueAxisIndex(bindingInfo){
     
      //axis 1 has been feeded with crosstable
      if(bindingInfo[0] === true){
       if(bindingInfo[1] === true){
          return [1 ,2];
       }
       else if(bindingInfo[2] === true){
        // pass crosstable data to module if module accpet more than 2 axis feed
          return [1, 2];
       }
       else if(bindingInfo[3] === true){// Multi Radar, aa 4 could not be feeded
          FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
       }
       else{
          return [1];
       }
      }else if(bindingInfo[1] === true){
       if(bindingInfo[2] === true){
          //pass crosstable data to module if module accpet more than 2 axis feed
          return [1,2];
       }
       else if(bindingInfo[3] === true){
          FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
       }
       else{
         //pass crosstable data to module if module accpet more than 2 axis feed
         if(bindingInfo.length > 2){
            return [1];
         }
         else{
            return [2];
         }
       }
      }else if(bindingInfo[2] === true){
        if(bindingInfo[3] === true){
           FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_SUPPORTED'));
        }
        else{
         //pass crosstable data to module if module accpet more than 2 axis feed
         return [1];
        }
      }else{
        for(var i = 0; i< bindingInfo.length;i++){
          if(bindingInfo[i] === true){
            FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_DETERMINE_AXIS_INDEX'));
          }
        }
        //all false
        return [1];
      }
       
      FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_DETERMINE_AXIS_INDEX'));
     
    } 
   
   function SinngleChartDataHandler(dataAdapter){
        this._dataAdapter =  dataAdapter;
   }
   
   SinngleChartDataHandler.prototype.getDataAdapter = function(){
      if(this._dataAdapter.getBindingInfo===undefined||this._dataAdapter.getBindingInfo() === null || this._dataAdapter.getBindingInfo() === undefined ){
         return this._dataAdapter;
      }
      else{
         return this.getChartDataAdapter();
      }
   };
   
   SinngleChartDataHandler.prototype.getChartDataAdapter = function(){
      var measureAxisIndex = initMeasureValueAxisIndex(this._dataAdapter.getBindingInfo());
      var aa = this._dataAdapter.getAnalysisAxisDataByIdx();
      var mg = this._dataAdapter.getMeasureValuesGroupDataByIdx();
      var dataAdapter = new MultiAxesDataAdapter(this._dataAdapter.getBindingInfo());
      for(var i = 0; i < aa.length; i++){
        var axis = aa[i];
        dataAdapter.addAnalysisAxis({index: axis.index, values: axis.values});
      }
      
      for(i = 0; i < mg.length; i++){
        var mvg = mg[i];
        dataAdapter.addMeasureValuesGroup({index:mvg.index, values: MeasureDataHandler.makeMeasureValues(null, mvg, measureAxisIndex, 2, false)});
      }
      
      return dataAdapter;
   };
   
   return SinngleChartDataHandler;
 });
define( "jquery", [], function () { return jQuery; } );

define('sap/viz/util/Objects',['sap/viz/base/utils/TypeUtils'],
function Setup(TypeUtils) {

  var objects = {
    // returns an array of the plot's parent nodes, in the same order as the "plots" array
    getPlotNodes : function(plots) {
      var nodes = [];
      for (var i = 0, len = plots.length; i < len; i++) {
        if (plots[i].parent()) {
          nodes.push(plots[i].parent().node());
        }
      }
      return nodes;
    },

    // returns the index of the plot (in the "plots" array) that contains the target element
    // nodes is optional and should contain the container elements for the plots
    plotIndexContainingTarget : function(plots, target, nodes) {
      var n = target,
        plotNodes = nodes || this.getPlotNodes(plots),
        idx;

      for (; n && n.ownerSVGElement; n = n.parentNode) {
        idx = plotNodes.indexOf(n);
        if (idx !== -1) {
          return idx;
        }
      }

      return -1;
    },

    // returns the plot module object that contains the target element
    plotContainingTarget : function(plots, target, nodes) {
      var plotIdx = this.plotIndexContainingTarget(plots, target, nodes);

      if (plotIdx !== -1) {
        return plots[plotIdx];
      }

      return null;
    },
        
    isLabelArea : function(classname, selectionMode)
    {
        var isAxisLabelArea = false;
        if(classname && classname.indexOf('v-labelarea') >= 0)//find it
        {
          if(selectionMode !== 'single')
          {
              //do not have label selection in 'single'
              isAxisLabelArea = true;
          }
        }
        return isAxisLabelArea;
    },
    
    size : function(obj){
      var ret = 0;
      //here we want to filter both undefined and null
      /*jshint eqnull:true */
      if (obj != null){
        if (obj.length === +obj.length){
          ret = obj.length;
        }else{
          for(var i in obj){
            if(obj.hasOwnProperty(i)){
              ret++;
            }
          }
        }
      }
      return ret;
    },

    normalizeNumbersCeil : function(obj)
    {
        for(var prop in obj)
        {
            if(obj.hasOwnProperty(prop))
            {
                if((typeof obj[prop]) === "number")
                {
                    //we do not use toFixed, because toFixed makes 5.54 to 5.5, but we need 5.6
                    var standard = 100000000;
                    var tempInt = Math.ceil(obj[prop] * standard);
                    obj[prop] = tempInt/standard;
                }
            }
        }
    }
    
  };
  return objects;
});
define('sap/viz/base/Observable',['sap/viz/base/Class','sap/viz/base/utils/TypeUtils'],
function Setup(Class, TypeUtils) {
	var ArraySlice = Array.prototype.slice, ObjectGetPrototypeOf = Object.getPrototypeOf;
	function addEvents(/* event1, event2,...,eventn */) {
		var es = this._events, en, len = arguments.length;
		while (--len >= 0) {
			if (!es.hasOwnProperty(en = arguments[len])) {
				es[en] = [];
			}
		}
	}

	var Observable = Class.define({
		/**
		 * To utilize observable object, You have to extend your object from it,
		 * and set the 'events' property as Array of event name to the
		 * constructor
		 * 
		 * @name sap.viz.base.utils.Observable
		 * @constructor
		 */
		constructor : function(option) {
			this._events = {};
			var c = this, t;
			while ((c = ObjectGetPrototypeOf(c)).constructor !== Object) {
				if ((t = c.events) && t.length) {
					addEvents.apply(this, t);
				}
			}
			if (option) {
				if (t = option.listeners) {
					this.on(t);
					delete option.listeners;
				}
			}
		},

		/**
		 * Add events that could be monitored
		 * 
		 * @name sap.viz.base.utils.Observable#addEvents
		 * @function
		 * @parameter {String|String|...} event1,event2,event3... variable
		 *            length arguments of String
		 */
		addEvents : addEvents,
		/**
		 * Get the supported events
		 * 
		 * @name sap.viz.base.utils.Observable#getSupportedEvents
		 * @function
		 * @return {Array} an array of event names
		 */
		getSupportedEvents : function() {
			return this._events.key();
		},

		/**
		 * Add event listeners
		 * 
		 * @name sap.viz.base.utils.Observable#on
		 * @function
		 * @param {String|Object}
		 *            eventName the event to be monitored, or a object which key
		 *            is eventName and value is corresponding listener
		 * @param {Function}
		 *            [listener] the function to be triggered when event is
		 *            fired
		 * @param {String}
		 *            [category] optional string to give the listener a
		 *            category, could be used in removing listener
		 */
		on : function(event, listener, category) {
			if (arguments.length >= 1) {
				if (arguments.length > 1) {
					var t = {};
					t[event] = listener;
					event = t;
				}
				for ( var en in event) {
					if (listener = this._events[en]) {
						event[en]['category'] = category;
						listener.push(event[en]);
					}
				}
			}
			return this;
		},

		/**
		 * Check whether the listener is listening on the event
		 * 
		 * @name sap.viz.base.utils.Observable#isListening
		 * @function
		 * @param {String}
		 *            eventName the eventName to which the listener is
		 *            monitoring
		 * @param {Function}
		 *            listener the listener to find
		 * 
		 * @returns {Boolean}
		 */
		isListening : function(eventName, listener) {
			if (eventName = this._events[eventName]) {
				return eventName.indexOf(listener) > -1;
			}
			return false;
		},

		/**
		 * Remove the registered listener for given event, if no listener
		 * function specified, all listeners registered will be removed, instead
		 * to specify listener function, it can also accept a string to indicate
		 * category of listener, in this case only listeners in the given
		 * category will be removed
		 * 
		 * @name sap.viz.base.utils.Observable#un
		 * @function
		 * @param {String}
		 *            eventName the eventName to which the listener is
		 *            monitoring
		 * @param {Function|String}
		 *            (listener) the listener to find or a string to indicate
		 *            the category of listener
		 */
		un : function(eventName, fn) {
			if (arguments.length === 1) {
				var es = this._events;
				if (es.hasOwnProperty(eventName)) {
					es[eventName] = [];
				}
			} else if (arguments.length === 2) {
				var event = this._events[eventName];
				if (event) {
					if (typeof fn === 'function') {
						var idx;
						while ((idx = event.indexOf(fn)) > -1) {
							event.splice(idx, 1);
						}
					} else {
						var len = event.length;
						while (len--) {
							if (event[len].category === fn) {
								event.splice(len, 1);
							}
						}
					}
				}
			}
		},

		/**
		 * Purge all listeners registered on the observable object
		 * 
		 * @name sap.viz.base.utils.Observable#purgeListeners
		 * @function
		 * @param {String}
		 *            eventName the eventName to which the listener is
		 *            monitoring
		 * @returns {Boolean}
		 */
		purgeListeners : function() {
			var es = this._events;
			for ( var e in es) {
				es[e] = [];
			}
		},

		/**
		 * Fire an event
		 * 
		 * @name sap.viz.base.utils.Observable#fireEvent
		 * @function
		 * @param {String}
		 *            eventName name of the event to be fired
		 * @param {Object}
		 *            args additional arguments passed to listener
		 */
		fireEvent : function(eventName) {
			var args = ArraySlice.call(arguments, 1);
			if (eventName = this._events[eventName]) {
				for ( var i = 0, len = eventName.length; i < len; i++) {
					eventName[i].apply(this, args);
				}
			}
		}
	});

	return Observable;
});
define('sap/viz/mvc/ThemeManager',['sap/viz/base/utils/ObjectUtils','sap/viz/base/Observable'],
function Setup(ObjUtils, Observable) {
	/**
	 * A global theme manager
	 * 
	 * @class sap.viz.mvc.ThemeManager
	 */
	var ThemeManager = new (Observable.extend(
	{
		events : [ 'defaultThemeChanged', 'themeSettingChanged' ],
		constructor : function(options) {
			this._themeReg = {};
		},
		/**
		 * Get or set the global default theme
		 * 
		 * @name sap.viz.mvc.ThemeManager#defaultTheme
		 * @function
		 * @param {String}
		 *            [theme] the name of the default theme.
		 * @return {String} the name of the current default theme
		 */
		defaultTheme : function(theme) {
			if (theme !== undefined) {
				if (this._defaultTheme !== theme && this.hasThemeInstalled(theme)) {
					var old = this._defaultTheme;
					this._defaultTheme = theme;
					this.fireEvent('defaultThemeChanged', old, theme);
				}
				return this;
			}
			return this._defaultTheme;
		},
		/**
		 * Check whether the theme has already been installed.
		 * 
		 * @name sap.viz.mvc.ThemeManager#hasThemeInstalled
		 * @function
		 * @param {String}
		 *            theme the name of the theme.
		 * @return {Boolean}
		 */
		hasThemeInstalled : function(theme) {
			return this._themeReg.hasOwnProperty(theme);
		},
		/**
		 * Install a new theme, if it's been already installed, nothing happens.
		 * 
		 * @name sap.viz.mvc.ThemeManager#installTheme
		 * @function
		 * @param {String}
		 *            name the name of the new theme
		 * @param {Object}
		 *            settings the settings of the theme
		 */
		installTheme : function(name, settings) {
			if (!this._themeReg.hasOwnProperty(name)) {
				this._themeReg[name] = ObjUtils.extend({}, settings);
			}
		},
		/**
		 * Get the settings of given theme.
		 * 
		 * @name sap.viz.mvc.ThemeManager#getThemeSettings
		 * @function
		 * @param {String}
		 *            theme the name of the theme.
		 * @return {Object} the settings of the theme
		 */
		getThemeSettings : function(theme) {
			if (this._themeReg.hasOwnProperty(theme)) {
				return ObjUtils.extend({}, this._themeReg[theme]);
			}
		},
		/**
		 * Update a value of a given theme's property, will fire
		 * <b>themeSettingChanged</b> event if succeed.
		 * 
		 * @name sap.viz.mvc.ThemeManager#updateThemeSetting
		 * @function
		 * @param {String}
		 *            theme the name of the theme.
		 * @param {String}
		 *            key the key whose value to be updated.
		 * @param {String}
		 *            value the new value of the key
		 */
		updateThemeSetting : function(theme, key, value) {
			if (this._themeReg.hasOwnProperty(theme)) {
				var old = this._themeReg[theme][key];
				this._themeReg[theme][key] = value;
				this.fireEvent('themeSettingChanged', theme, key, old, value);
			}
		}
	}))();
	return ThemeManager;
});
define('sap/viz/mvc/ImageManager',['sap/viz/base/utils/FunctionUtils'],
function Setup(FuncUtils) {
	/**
	 * The image object
	 * 
	 * @name sap.viz.mvc.Image
	 * @constructor
	 */
	var img = function(htmlImageElement) {
		this._imgEl = htmlImageElement;
	};

	/**
	 * Return the underlying htmlImageElement
	 * 
	 * @name sap.viz.mvc.Image#getBitmap
	 * @function
	 * @returns {HtmlImageElement}
	 */
	img.prototype.getBitmap = function() {
		return this._imgEl;
	};

	/**
	 * Get or set the visual width of the image
	 * 
	 * @name sap.viz.mvc.Image#width
	 * @param {undefined|Number}
	 *            width the new width of the image
	 * @returns {this|Number} when in set mode the return will be the image
	 *          object itself; in get mode the return will be the width
	 */
	img.prototype.width = function(width) {
		if (width !== undefined) {
			this._imgEl.width = width;
			return this;
		}
		return this._imgEl.width;
	};

	/**
	 * Get or set the visual height of the image
	 * 
	 * @name sap.viz.mvc.Image#height
	 * @param {undefined|Number}
	 *            height the new height of the image
	 * @returns {this|Number} when in set mode the return will be the image
	 *          object itself; in get mode the return will be the height
	 */
	img.prototype.height = function(height) {
		if (height !== undefined) {
			this._imgEl.height = height;
			return this;
		}
		return this._imgEl.height;
	};

	/**
	 * Get the intrinsic height of the image
	 * 
	 * @name sap.viz.mvc.Image#intrinsicHeight
	 * @returns {Number}
	 */
	img.prototype.intrinsicHeight = function() {
		return this._imgEl.naturalHeight;
	};

	/**
	 * Get the intrinsic width of the image
	 * 
	 * @name sap.viz.mvc.Image#intrinsicWidth
	 * @returns {Number}
	 */
	img.prototype.intrinsicWidth = function() {
		return this._imgEl.naturalWidth;
	};

	/**
	 * Get the url of the image
	 * 
	 * @name sap.viz.mvc.Image#url
	 * @returns {String} the url of the image
	 */
	img.prototype.url = function() {
		return this._imgEl.src;
	};

	var _imageCache = {};
	var _id2src = {};
	var _src2ids = {};

	/**
	 * This class defines global shared image manager used for loading external
	 * image. The loading process is asynchronously. The loaded images are
	 * indentified by src urls internally, and can shared within the all viz
	 * application. You must assign an id when loading an image. You can
	 * retrieve the loaded image by id only. the same image can be assigned
	 * multiple ids.
	 * 
	 * @name sap.viz.mvc.ImageManager
	 * @class
	 */
	var ImageManager = {
		/**
		 * Load an image designated by URL. The loading is asynchronized, the
		 * image will be available when the onComplete is called
		 * 
		 * @param {String}
		 *            id the caller-provided Id of the image to be loaded and
		 *            retrieved later.
		 * @param {String}
		 *            url the url of the image to be loaded
		 * @param {Function}
		 *            [onComplete], the on complete callback. the single
		 *            argument is of type boolean indicating the if loaded
		 *            successful
		 */
		loadImage : function(id, url, onComplete) {
			if (id && url) {
				onComplete = onComplete || FuncUtils.noop;
				if (_id2src.hasOwnProperty(id)) {
					if (_imageCache[_id2src[id]]) {
						onComplete(true);
						return;
					}
				}
				var imgEl = new Image();
				imgEl.onabort = imgEl.onerror = function() {
					onComplete(false, {
						id : id,
						url : url
					});
				};
				imgEl.onload = function() {
					var src = imgEl.src;
					if (!_imageCache.hasOwnProperty(src)) {
						var imgObj = new img(imgEl);
						_id2src[id] = src;
						_src2ids[src] = {
							ids : {
								id : id
							},
							length : 1
						};
						_imageCache[src] = imgObj;
					} else {
						_id2src[id] = imgEl.src;
						_src2ids[src].ids[id] = id;
						_src2ids[src].length++;
					}
					onComplete(true, {
						id : id,
						url : url
					});
				}.bind(this);
				imgEl.src = url;
			}
		},
		/**
		 * Load an array of images concurrently. The loading is asynchronized,
		 * the images will be available when the onComplete is called
		 * 
		 * @param {Object[]}
		 *            urls the array of the image url to be loaded. The urls
		 *            should follow the format:
		 * 
		 * <pre>
		 * [ {
		 * 	id : 'IMAGE_ID',
		 * 	url : 'IMAGE_URL'
		 * } ]
		 * </pre>
		 * 
		 * @param {Function}
		 *            [onComplete] the on-complete function callback. the single
		 *            argument is of type boolean indicating the if loaded
		 *            successful
		 */
		loadImages : function(urls, onProgress, onComplete) {
			onProgress = onProgress || FuncUtils.noop;
			onComplete = onComplete || FuncUtils.noop;
			var total = urls.length;
			if (total == 0) {
				onComplete(true);
			} else {
				var count = 0;
				var _stepFunction = function(isSuccessful, imgInfo) {
					count++;
					if (count < total) {
						onProgress(count / total, isSuccessful, imgInfo);
					} else {
						onComplete(true, imgInfo);
					}
				};
				for ( var i = 0, len = urls.length; i < len; i++) {
					ImageManager.loadImage(urls[i].id, urls[i].url, _stepFunction);
				}
			}
		},

		/**
		 * Check if the image has been loaded
		 * 
		 * @param {String}
		 *            id the id of the image to be checked
		 * @returns {Boolean}
		 */
		hasImage : function(id) {
			return _id2src.hasOwnProperty(id);
		},

		/**
		 * Get the loaded image by its id, the caller has to ensure the image is
		 * loaded
		 * 
		 * @param {String}
		 *            id the id of the image to get
		 * @returns {sap.viz.mvc.Image}
		 */
		getImage : function(id) {
			if (_id2src.hasOwnProperty(id)) {
				return _imageCache[_id2src[id]];
			}
		},

		/**
		 * Remove the loaded image from internal cache
		 * 
		 * @param {String}
		 *            id the id of the image
		 */
		disposeImage : function(id) {
			if (_id2src.hasOwnProperty(id)) {
				var src = _id2src[id];
				delete _id2src[id];
				delete _src2ids[src].ids[id];
				_src2ids[src].length--;
				if (!_src2ids[src].length) {
					delete _src2ids[src];
					delete _imageCache[src];
				}
			}
		}
	};
	return ImageManager;
});
define('sap/viz/base/utils/DomUtils',[],
function Setup() {
//	
	var expando = ( '' + Math.random() ).replace( /\D/g, "" ), cache = {/*listener, data*/}, guid = 1;
	var DomWrapper = function(elem) {
		if (arguments.length !==1) {
			throw new Error('One and only one argument is expected.');
		}
		if (typeof elem === 'string') {
			if (elem.length < 2 || elem.charAt(0) !== '#') {
				throw new Error('Only support id selector, please start with #');
			}
			var id = elem.substring(1);
			elem = document.getElementById(id);
//			if (!elem) throw new Error("Can't get an element with id = " + id);
		} else if (elem && typeof elem.jquery === 'string') {
			elem = elem[0];
		}
		if (elem && !elem.nodeType) {
			throw new Error("The argument passed in must be an HTML node.");
		}
		this.elem = elem;
	};
	var utils = {
		css: function(elem, name, value) {
			if (typeof name === 'object') {
				for (var key in name) {
					this.css(elem, key, name[key]);
				}
				return;
			}
			//convert name to camelname
			name = name.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function(all, letter) {
				return ( letter + "" ).toUpperCase();
			});
			if (value === undefined) { //get css value
				var ret, 
					style = elem.style;
				if (window.getComputedStyle) {
					var computed = window.getComputedStyle(elem, null);
					// getPropertyValue is only needed for .css('filter') in IE9, see #12537
					ret = computed.getPropertyValue( name ) || computed[ name ];	
					if (ret === '') {
						if ( !utils.contains(elem.ownerDocument, elem) ){ //a doesn't contain b
							ret = style[name];
						}
					}
				} else if (document.documentElement.currentStyle) {
					ret = elem.currentStyle && elem.currentStyle[name];
					if (ret === null && style && style[name])
						ret = style[name];
				}
				return ret;
			}
			//set css value
			if (typeof name === 'object') {
				for (var key in name) {
					this.css(elem, key, name[key]);
				}
			} else {
				if (!isNaN(value))
					value += 'px';
				elem.style[name] = value;
			}
		},		
		getWindow: function( elem ) {
			return elem !== null && elem == elem.window ?
				elem :
				elem.nodeType === 9 ?
					elem.defaultView || elem.parentWindow :
					false;
		},
		contains: function ( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
		},
		bodyOffset: function( body ) {
			var top = body.offsetTop,
				left = body.offsetLeft;
	
			if ( body.offsetTop !== 1 ) { //jQuery.support.doesNotIncludeMarginInBodyOffset
				top  += parseFloat( utils.css(body, "marginTop") ) || 0;
				left += parseFloat( utils.css(body, "marginLeft") ) || 0;
			}
	
			return { top: top, left: left };
		}	
	};
	DomWrapper.prototype = {
		constructor: DomWrapper, 
		get: function(idx) {
			if (idx !== 0) throw new Error("Only get(0) is supported");
			return this.elem;
		},
		css: function(name, value) {
			var ret = utils.css(this.elem, name, value);
			if (value === undefined && typeof name !== 'object') return ret;
			return this;
		},
		/*
		 * Note: the logic of computing width & height in jQuery is very complicated, mainly deal with window and document,
		 * here we call css only to get its value because in most cases we don't query width & height of window or document
		 * 
		 */
		width: function(value) { 
			if (this.elem == this.elem.window || this.elem.nodeType === 9) {
				throw new Error("this method does not support window or document");
			}
			if (arguments.length === 0) {
				var val = this.css('width'),
					num = parseFloat(val);
				return isNaN(num) ? 0 : num;
			}
			return this.css('width', value);
		},
		height: function(value) {
			if (this.elem == this.elem.window || this.elem.nodeType === 9) {
				throw new Error("this method does not support window or document");
			}
			if (arguments.length === 0) {
				var val = this.css('height'),
					num = parseFloat(val);
				return isNaN(num) ? 0 : num;
			}
			return this.css('height', value);
		},
		offset: function() {
			if (arguments.length) throw new Error("Don't support set offset.");
			var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
				box = { top: 0, left: 0 },
				elem = this.elem,
				doc = elem && elem.ownerDocument;
		
			if ( !doc ) {
				return;
			}
		
			if ( (body = doc.body) === elem ) {
				return utils.bodyOffset( elem );
			}
		
			docElem = doc.documentElement;
		
			// Make sure it's not a disconnected DOM node
			if ( !utils.contains( docElem, elem ) ) {
				return box;
			}
		
			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== "undefined" ) {
				box = elem.getBoundingClientRect();
			}
			win = utils.getWindow( doc );
			clientTop  = docElem.clientTop  || body.clientTop  || 0;
			clientLeft = docElem.clientLeft || body.clientLeft || 0;
			scrollTop  = win.pageYOffset || docElem.scrollTop;
			scrollLeft = win.pageXOffset || docElem.scrollLeft;
			return {
				top: box.top  + scrollTop  - clientTop,
				left: box.left + scrollLeft - clientLeft
			};			
		},
		attr: function(name, value) {
			if (arguments.length === 1) {
				return this.elem.getAttribute(name);
			} else if (arguments.length === 2){
				this.elem.setAttribute(name, value);
				return this;
			} else {
				throw new Error('Illegal argument number = ' + arguments.length);
			}
		},
//		append: function(child) {
//			if (child instanceof this.constructor) child = child.elem;
//			this.elem.appendChild(child);
//		},
//		prepend: function(newElem) {
//			if (newElem instanceof this.constructor) newElem = newElem.elem;
//			this.elem.insertBefore(newElem, this.elem.firstChild);
//		},
//		insertBefore: function(newElem) {
//			if (newElem instanceof this.constructor) newElem = newElem.elem;
//			if (this.elem.parentNode) {
//				this.elem.parentNode.insertBefore(newElem, this.elem);
//			}
//		},
//		insertAfter: function(newElem) {
//			if (newElem instanceof this.constructor) newElem = newElem.elem;
//			if (this.elem.parentNode) {
//				this.elem.parentNode.insertAfter(newElem, this.elem);
//			}
//		},
		detach: function() {
			if (this.elem && this.elem.parentNode) 
				this.elem.parentNode.removeChild(this.elem);
			this.elem = undefined;
		},
		parent: function() {
			var cur = this.elem;
			while (cur && cur.nodeType !== 9) {
				cur = cur.parentNode;
				if (!cur || cur.nodeType === 1) {
					break;
				}
			}
			return DomUtils(cur);
		},
		offsetParent: function () {
		    function nodeName( elem, name ) {
                return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
            }
            return (function() {
                var offsetParent = this.offsetParent || document.documentElement;
                while ( offsetParent && ( !nodeName( offsetParent, "html" ) && (new DomWrapper(offsetParent)).css("position") === "static" ) ) {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || document.documentElement;
            }).call(this.elem);
        },
		length: function() {
			return this.elem ? 1 : 0;
		},
		prev: function() {
			do {
				this.elem = this.elem.previousSibling;
			} while (this.elem && this.elem.nodeType !== 1);
			return this;
		},
		next: function() {
			do {
				this.elem = this.elem.nextSibling;
			} while (this.elem && this.elem.nodeType !== 1);
			return this;
		},
		bind: function(type, fn) {
			if (typeof type !== 'string' || typeof fn !== 'function' || arguments.length !== 2) {
				throw new Error('Invalid arguments, you must pass in two arguments, ' +
						'the first one is event type in string, ' +
						'and the second one is a function.');
			}
			// Don't attach events to text/comment nodes 
			if ( this.elem.nodeType === 3 || this.elem.nodeType === 8 ) {
				return;
			}			
			var elem = this.elem,
				id = elem[expando] || (elem[expando] = guid++),
				listener = (cache[id] || (cache[id] = {})).listener;
			if (!listener) {
				listener = cache[id].listener = (function() {
					var handlers = {};
					var listener = function(event) {
						var fns = handlers[event.type];
						if (!fns) {
							return;
						}
						for (var i = 0; i < fns.length; i++) {
							var ret = fns[i].apply(elem, arguments);
							if (ret === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					};
					listener.addHandler = function(type, fn) {
						var fns = handlers[type] || (handlers[type] = []);
						fns.push(fn);
					};
					listener.removeHandler = function(type, fn) {
						if (fn === undefined) {
							delete handlers[type];
						} else {
							var fns = handlers[type],
								idx = fns ? fns.indexOf(fn) : -1;
							if (fns && idx >= 0) {
								fns.splice(idx, 1);
								if (fns.length === 0) delete handlers[type];
							}
						}
					};
					listener.clean = function() {
					  var ret = [];
						for (var type in handlers) {
						  ret.push(type);
							delete handlers[type];
						}
						return ret;
					};
					listener.listeningType = function(type) {
						return handlers[type] !== undefined;
					};
					listener.isEmpty = function(typeToBeCheck) {
					  if (arguments.length === 0){
					    for (var type in handlers) {
                return false;
              }
              return true;  
					  }else{
					    return handlers[typeToBeCheck] === undefined;
					  }
						
					};
					
					return listener;
				})();
			}
			if (!listener.listeningType(type)) {
				if (elem.addEventListener) {
					elem.addEventListener(type, listener, false);
				} else if (elem.attachEvent) {
					elem.attachEvent("on" + type, listener);
				}
			}
			listener.addHandler(type, fn);
		},
		unbind: function(type, fn) {
			if ((arguments.length > 0 && typeof type !== 'string') || arguments.length > 2 || (arguments.length ===2 && typeof fn !== 'function')) {
				throw new Error('Invalid arguments, you must pass in one or two arguments, ' +
						'the first one (mandatory) is event type in string, ' +
						'and the second one (optional) is a function.');
			}
			var elem = this.elem,
				id = elem[expando],
				listener = id ? (cache[id] && cache[id].listener) : undefined;
			if (!listener) return;
			var typeToBeChecked;
			if (arguments.length === 0) {//remove all events;
				typeToBeChecked = listener.clean();
			} else {
				listener.removeHandler(type, fn);
				typeToBeChecked = [type];
			}
			for(var i = 0, len = typeToBeChecked.length; i < len; i++){
			  var typeIter = typeToBeChecked[i];
  			if (listener.isEmpty(typeIter)) {
          if (elem.removeEventListener) {
            elem.removeEventListener(typeIter, listener, false);
          } else if (elem.detachEvent) {
            elem.detachEvent("on" + typeIter, listener);
          }
        }  
			}
			if (listener.isEmpty()) {
			  delete cache[id].listener;
			}
		},
		data: function(name, value) {
			var elem = this.elem,
				id = elem[expando] || (elem[expando] = guid++),
				data = (cache[id] || (cache[id] = {})).data;
			if (value === undefined && !data) return;
			if (typeof data !== 'object') {
				data = cache[id].data = {};
			}
			if (typeof name === 'object') {
				for (var key in name) {
					this.data(key, name[key]);
				}
				return this;
			}
			if (value === undefined) { //get
				return data[name];
			}
			data[name] = value;
			return this;
		},
		removeData: function(name) {
			var elem = this.elem,
				id = elem[expando];
			if (!id || !cache[id]) return;
			var data = cache[id].data;
			if (!data || !data[name]) return;
			delete data[name];
			//delete data if it's empty
			var empty = true;
			for (var i in data) {
				empty = false;
				break;
			}
			if (empty) {
				delete cache[id].data;
			}
			//delete cache if it's empty
			empty = true;
			for (var i in cache[id]) {
				empty = false;
				break;
			}
			if (empty) {
				delete cache[id];
			}
		}
	};
	var DomUtils = function(elem) {
//		if (elem instanceof DomWrapper) return elem;
		var wrapper = new DomWrapper(elem);
		return wrapper;
	};
	return (DomUtils);
});
define('sap/viz/base/UADetector',[],

function Setup() {
	var devicePixRatio = window.devicePixelRatio || 1;
	var versionSearchString;
	var searchString = function(data) {
		for ( var i = 0; i < data.length; i++) {
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1) {
					return data[i].identity;
				}
			} else if (dataProp) {
				return data[i].identity;
			}
		}
	};
	var seps = [ ';', ' ' ];
	var searchVersion = function(dataString) {
		var index = dataString.indexOf(versionSearchString);
		if (index == -1)
			return;
		var versionStr = dataString.substring(index + versionSearchString.length + 1);
		var i = 0, l = seps.length, sepIndex = -1;
		while (sepIndex === -1 && i < l)
			sepIndex = versionStr.indexOf(seps[i++]);
		if (sepIndex !== -1)
			versionStr = versionStr.slice(0, sepIndex);
		return versionStr;
	};
	var dataBrowser = [ {
		string : navigator.userAgent,
		subString : "Chrome",
		identity : "Chrome"
	}, {
		string : navigator.userAgent,
		subString : "OmniWeb",
		versionSearch : "OmniWeb/",
		identity : "OmniWeb"
	}, {
		string : navigator.userAgent,
		subString : "Safari",
		identity : "Safari",
		versionSearch : "Version"
	}, {
		string : navigator.userAgent,
		subString : "Apple",
		identity : "UIWebView",
		versionSearch : "AppleWebKit"
	}, {
		prop : window.opera,
		identity : "Opera",
		versionSearch : "Version"
	}, {
		string : navigator.vendor,
		subString : "iCab",
		identity : "iCab"
	}, {
		string : navigator.vendor,
		subString : "KDE",
		identity : "Konqueror"
	}, {
		string : navigator.userAgent,
		subString : "Firefox",
		identity : "Firefox"
	}, {
		string : navigator.vendor,
		subString : "Camino",
		identity : "Camino"
	}, {// for newer Netscapes (6+)
		string : navigator.userAgent,
		subString : "Netscape",
		identity : "Netscape"
	}, {
		string : navigator.userAgent,
		subString : "MSIE",
		identity : "Explorer",
		versionSearch : "MSIE"
	}, {
		string : navigator.userAgent,
		subString : ".NET",
		identity : "Explorer"
	}, {
		string : navigator.userAgent,
		subString : "Gecko",
		identity : "Mozilla",
		versionSearch : "rv"
	}, {// for older Netscapes (4-)
		string : navigator.userAgent,
		subString : "Mozilla",
		identity : "Netscape",
		versionSearch : "Mozilla"
	} ];

	var dataOS = [ {
		string: navigator.userAgent,
		subString: "Windows Phone",
		identity: "WindowsPhone"
	}, {
		string : navigator.platform,
		subString : "Win",
		identity : "Windows"
	}, {
		string : navigator.platform,
		subString : "Mac",
		identity : "Mac"
	}, {
		string : navigator.userAgent,
		subString : "iPhone",
		identity : "iPhone/iPod"
	}, {
		string : navigator.userAgent,
		subString : "iPad",
		identity : "iPad"
	}, {
		string : navigator.platform,
		subString : "Linux",
		identity : "Linux"
	} ];

	var dataRenderEngine = [ {
		string : navigator.userAgent,
		subString : "Presto",
		identity : "Presto"
	}, {
		string : navigator.userAgent,
		subString : "KHTML",
		identity : "KHTML"
	}, {
		string : navigator.userAgent,
		subString : "Gecko",
		identity : "Gecko"
	}, {
		string : navigator.userAgent,
		subString : "Trident",
		identity : "Trident"
	} ];
	
	var dataMobile = [{
		string : navigator.userAgent,
		subString : 'Touch',
		identity : 'Touch'
	}, {
		string : navigator.userAgent,
		subString : 'Android',
		identity : 'Android',
	}, {
		string : navigator.userAgent,
		subString : 'iPhone',
		identity : 'iPhone'
	}, {
		string : navigator.userAgent,
		subString : 'iPad',
		identity : 'iPad'
	}];
	
	var _userAgent = searchString(dataBrowser) || "An unknown browser", _version = searchVersion(navigator.userAgent)
			|| searchVersion(navigator.appVersion) || "an unknown version", _isIE = searchString(dataBrowser) === "Explorer", _isFirefox = searchString(dataBrowser) === 'Firefox', _isChrome = searchString(dataBrowser) === 'Chrome', _isSafari = searchString(dataBrowser) === 'Safari', _isUIWebView = searchString(dataBrowser) === 'UIWebView', _os = searchString(dataOS)
			|| "an unknown OS", _renderEngine = searchString(dataRenderEngine) || "An unknown RenderEngine",  _mobile = searchString(dataMobile), _pointerEnabled = navigator.pointerEnabled === true;
	var UADetector = {
		userAgent : function() {
			return _userAgent;
		},
		version : function() {
			return _version;
		},
		isIE : function() {
			return _isIE;
		},
		isFirefox : function() {
			return _isFirefox;
		},
		isChrome : function() {
			return _isChrome;
		},
		isSafari : function() {
			return _isSafari;
		},
		isUIWebView : function() {
			return _isUIWebView;
		},
		os : function() {
			return _os;
		},
		devicePixelRatio : function() {
			return devicePixRatio;
		},
		renderEngine : function() {
			return _renderEngine;
		},
		isMobile : function(){
			return _mobile !== undefined;
		},
		isWindowsSurface: function() {
			return ((_os === 'Windows' || _os === 'WindowsPhone') && (_mobile === 'Touch'));
		},
		isWindowsPhone: function(){
			return ((_os === 'WindowsPhone') && (_mobile === 'Touch'));
		},
		isPointerEnabled: function() {
			return _isIE && _pointerEnabled;
		}
	};
	return (UADetector);
});
define('sap/viz/base/utils/LinkedHashSet',['sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/TypeUtils'],
function Setup(FuncUtils, TypeUtils) {

	function hasNextInOrder() {
		this._cursor = this._cursor.next;
		return this._cursor !== this._sentinel;
	}

	function hasNextInReverse() {
		this._cursor = this._cursor.prev;
		return this._cursor !== this._sentinel;
	}
	/**
	 * Iterator for LinkedHashSet, to get an iterator for a linked hash Set
	 * instance, use {@link sap.viz.base.utils.LinkedHashSet#iterator}
	 * 
	 * @name sap.viz.base.utils.LinkedHashSet.Iterator
	 * @constructor
	 */
	function Iterator(lhs, reverseOrder) {
		this._lhs = lhs;
		this._sentinel = this._lhs._head;
		this._cursor = this._sentinel;
		if (reverseOrder) {
			this.hasNext = hasNextInReverse;
		} else {
			this.hasNext = hasNextInOrder;
		}
	}

	var proto = Iterator.prototype;

	/**
	 * Check and move to the next item
	 * 
	 * @name sap.viz.base.utils.LinkedHashSet.Iterator#hasNext
	 * @function
	 * @returns {Boolean}
	 */
	proto.hasNext = FuncUtils.noop;

	/**
	 * Get the next item, should be used in cooperated with
	 * {@link sap.viz.base.utils.LinkedHashSet#hasNext}
	 * 
	 * @name sap.viz.base.utils.LinkedHashSet.Iterator#next
	 * @function
	 * @returns {undefined|Object}
	 */
	proto.next = function() {
		return this._cursor.value;
	};

	/**
	 * Remove the current item from LinkedHashSet, this method is supposed to be
	 * called only once during each iteration, otherwise the internal state will
	 * get broken.
	 * 
	 * @name sap.viz.base.utils.LinkedHashSet.Iterator#remove
	 * @function
	 */
	proto.remove = function() {
		// move the cursor back one step
		if (this._cursor !== this._sentinel) {
			var item = this._cursor.value;
			this._cursor = this._cursor.prev;
			return this._lhs.remove(item);
		}
	};

	/**
	 * Create an empty LinedHashSet, most of the time you have to specify a
	 * hasher function used to calculate the hash value of each added item. The
	 * default implementation just uses the string representation of the item.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet
	 * @constructor
	 * @param {Function}
	 *            (hasher) function used to calculate the hash value of each
	 *            added item, default is String.
	 */
	var LinedHashSet = function(hasher) {
		this._hash = hasher || String;
		this._head = {
			value : undefined,
			next : undefined,
			prev : undefined
		};
		this._map = {};
		this._length = 0;
		this._head.next = this._head.prev = this._head;
	};
	proto = LinedHashSet.prototype;

	/**
	 * Add one item to the set. Old item with same hash will be replaced and
	 * returned.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#add
	 * @function
	 * @param {Object}
	 *            item the item to be added
	 * @returns {null|Object} old item if exists.
	 */
	proto.add = function(item) {
		var m = this._map;
		var ret = null;
		var key = this._hash(item);
		if (!m.hasOwnProperty(key)) {
			var node = {
				prev : null,
				value : item,
				next : null
			}, head = this._head, last = head.prev;
			m[key] = head.prev = node;
			node.prev = last;
			node.next = head;
			last.next = node;
			this._length++;
		} else {
			ret = m[key].value;
			m[key].value = item;
		}
		return ret;
	};
	/**
	 * Add items from another LinkedHashSet, the two hash set must share same
	 * hash function.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#addAll
	 * @function
	 * @param {sap.viz.base.utils.LinedHashSet}
	 *            other another LinedHashSet
	 * @returns {[]} array of replaced items
	 */
	proto.addAll = function(other) {
		var itr = LinedHashSet.iterator();
		var ret = [], added;
		while (itr.hasNext()) {
			if (added = this.add(itr.next()))
				ret.push(added);
		}
		return ret;
	};

	/**
	 * Insert item before other existing one, if the item exists, it will be
	 * removed first and insert then.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#insertBefore
	 * @function
	 * @param {Object}
	 *            item the item to be inserted
	 * @param {Object}
	 *            before target item
	 * @returns {Object} the value just inserted
	 */
	proto.insertBefore = function(item, before) {
		var m = this._map, hash = this._hash;
		var key = hash(item), beforeKey = hash(before);
		if (m.hasOwnProperty(beforeKey) && beforeKey !== key) {
			if (m.hasOwnProperty(key)) {
				this.remove(item);
			}
			var nnode = {
				prev : null,
				value : item,
				next : null
			};
			var bnode = m[beforeKey];
			nnode.prev = bnode.prev;
			bnode.prev.next = nnode;
			nnode.next = bnode;
			bnode.prev = nnode;
			m[key] = nnode;
			this._length++;
			return item;
		}
	};

	/**
	 * Insert item after other existing one, if the item exists, it will be
	 * removed first and insert then.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#insertAfter
	 * @function
	 * @param {Object}
	 *            item the item to be inserted
	 * @param {Object}
	 *            after target item
	 * @returns {Object} the value just inserted
	 */
	proto.insertAfter = function(item, after) {
		var m = this._map, hash = this._hash;
		var key = hash(item), afterKey = hash(after);
		if (m.hasOwnProperty(afterKey) && afterKey !== key) {
			if (m.hasOwnProperty(key)) {
				this.remove(item);
			}
			var nnode = {
				prev : null,
				value : item,
				next : null
			};
			var anode = m[afterKey];
			nnode.prev = anode;
			nnode.next = anode.next;
			anode.next.prev = nnode;
			anode.next = nnode;
			m[key] = nnode;
			this._length++;
			return item;
		}
	};

	/**
	 * Replace the existing item with given item, if the given item exists, it
	 * will be removed first.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#replace
	 * @function
	 * @param {Object}
	 *            item the given item
	 * @param {Object}
	 *            target target item to be replaced
	 * @returns {Object} the item replaced
	 */
	proto.replace = function(item, target) {
		var m = this._map, hash = this._hash;
		var key = hash(item), targetKey = hash(target);
		if (m.hasOwnProperty(targetKey) && targetKey !== key) {
			if (m.hasOwnProperty(key)) {
				this.remove(item);
			}
			var nnode = {
				prev : null,
				value : item,
				next : null
			};
			var rnode = m[targetKey];
			nnode.prev = rnode.prev;
			nnode.next = rnode.next;
			rnode.prev.next = nnode;
			rnode.next.prev = nnode;
			m[key] = nnode;
			delete m[targetKey];
			return rnode.value;
		}
	};
	/**
	 * Get first added item. If set is empty, undefined will be returned.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#first
	 * @function
	 * 
	 * @returns {undefined|Object}
	 */
	proto.first = function() {
		return this._head.next.value;
	};
	/**
	 * Get last added item. If set is empty, undefined will be returned.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#last
	 * @function
	 * 
	 * @returns {undefined|Object}
	 */
	proto.last = function() {
		return this._head.prev.value;
	};

	/**
	 * Get item next to the item specified, If the specified item doesn't exist
	 * or is the last one or the set is empty, undefined will be returned.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#next
	 * @function
	 * @param {Object}
	 *            item
	 * @returns {undefined|Object}
	 */
	proto.next = function(item) {
		var ret;
		if (ret = this._map[this._hash(item)]) {
			return ret.next.value;
		}
		return ret;
	};
	/**
	 * Get item previous to the item specified, If the specified item doesn't
	 * exist or is the first one or the set is empty, undefined will be
	 * returned.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#prev
	 * @function
	 * @param {Object}
	 *            item
	 * @returns {undefined|Object}
	 */
	proto.prev = function(item) {
		var ret;
		if (ret = this._map[this._hash(item)]) {
			return ret.prev.value;
		}
		return ret;
	};

	/**
	 * Move the specified item to the first of the linked list.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#moveToFirst
	 * @function
	 * @param {Object}
	 *            item
	 */
	proto.moveToFirst = function(item) {
		var node;
		if (node = this._map[this._hash(item)]) {
			var first = this._head.next;
			if (first !== node) {
				node.prev.next = node.next;
				node.next.prev = node.prev;

				node.next = first;
				node.prev = first.prev;
				first.prev.next = node;
				first.prev = node;
			}
		}
	};

	/**
	 * Move the specified item to the last of the linked list.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#moveToLast
	 * @function
	 * @param {Object}
	 *            item
	 */
	proto.moveToLast = function(item) {
		var node;
		if (node = this._map[this._hash(item)]) {
			var last = this._head.prev;
			if (last !== node) {
				node.prev.next = node.next;
				node.next.prev = node.prev;

				node.prev = last;
				node.next = last.next;
				last.next.prev = node;
				last.next = node;
			}
		}
	};

	/**
	 * A convenient method to get the item for given hash
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#has
	 * @function
	 * @param {String}
	 *            hash
	 * @returns {Boolean}
	 */
	proto.getByHash = function(hash) {
		var ret = this._map[hash];
		return ret ? ret.value : undefined;
	};

	/**
	 * Check the containment of the specified item
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#has
	 * @function
	 * @param {Object}
	 *            item
	 * @returns {Boolean}
	 */
	proto.has = function(item) {
		return this._map.hasOwnProperty(this._hash(item));
	};
	/**
	 * Remove the item from the set, if the item is not in the set, Null will be
	 * returned.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#remove
	 * @function
	 * @param {Object}
	 *            item
	 * @returns {Null|Object} the removed item
	 */
	proto.remove = function(item) {
		var m = this._map, key = this._hash(item);
		var ret = null;
		if (m.hasOwnProperty(key)) {
			var node = m[key];
			ret = node.value;

			node.prev.next = node.next;
			node.next.prev = node.prev;

			delete m[key];
			this._length--;
		}
		return ret;
	};
	/**
	 * Remove all items from the set
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#purgeAll
	 * @function
	 */
	proto.purgeAll = function() {
		this._map = {};
		// reset the sentinel
		this._head.next = this._head.prev = this._head;
		this._length = 0;
	};
	/**
	 * Whether the set is empty
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#isEmpty
	 * @function
	 * 
	 * @returns {Boolean}
	 */
	proto.isEmpty = function() {
		return this._length === 0;
	};
	/**
	 * Length of the set
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#length
	 * @function
	 * @returns {Integer}
	 */
	proto.length = function() {
		return this._length;
	};
	/**
	 * Get the iterator of the set
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#iterator
	 * @function
	 * @param {Boolean}
	 *            reverseOrder whether iterate in reverse order
	 * @returns {sap.viz.base.utils.LinedHashSet.Iterator}
	 */
	proto.iterator = function(reverseOrder) {
		return new Iterator(this, reverseOrder || false);
	};

	/**
	 * Return the contents of the set as an array, the order conforms to the
	 * traversal order.
	 * 
	 * @name sap.viz.base.utils.LinedHashSet#items
	 * @function
	 * 
	 * @returns {Array}
	 */
	proto.items = function() {
		var ret = [], c = head = this._head;
		while ((c = c.next) !== head) {
			ret.push(c.value);
		}
		return ret;
	};
	return LinedHashSet;
});
define('sap/viz/mvc/GestureDetector',['sap/viz/base/Class','sap/viz/base/utils/FunctionUtils'],
function Setup(Class, FuncUtils) {
	var noop = FuncUtils.noop;
	/**
	 * Possible State. Gesture Detector is ready to detect gesture
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Possible
	 * @field
	 * 
	 */
	var Possible = 0;
	/**
	 * Began State. Gesture Detector is ready to detect continuous gesture
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Began
	 * @field
	 * 
	 */
	var Began = 1;
	/**
	 * Began State. Gesture Detector is continuous to detect continuous gesture
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Changed
	 * @field
	 * 
	 */
	var Changed = 2;
	/**
	 * Recognized State. Discrete Gesture is detected
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Recognized
	 * @field
	 * 
	 */
	var Recognized = 3; // Recognized == Ended
	/**
	 * Ended State. Continuous Gesture is detected
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Ended
	 * @field
	 * 
	 */
	var Ended = 3;
	/**
	 * Ended State. Continuous Gesture is stop to detected
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Canceled
	 * @field
	 * 
	 */
	var Canceled = 4;
	/**
	 * Ended State. Detector fails to detect in current touch sequence
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState#Failed
	 * @field
	 * 
	 */
	var Failed = 5;

	var GestureDetector = Class
			.define({
				/**
				 * The base abstract gesture detector class
				 * 
				 * @name sap.viz.mvc.GestureDetector
				 * @constructor
				 */
				constructor : function() {
					this._grEnabled = true;
					this._grTouchTotal = 0;
					this._grTouchTracker = {};
					this._grActions = [];
					this._grCancelTouches = true;
					var state = Possible;
					Object.defineProperties(this, {
						'state' : {
							get : function() {
								return state;
							},
							set : function(value) {
								switch (value) {
								case Possible:
									state = Possible;
									break;
								case Began:
									state = Began;
									this._grActions.forEach(function(action, i) {
										action(this);
									}, this);
									break;
								case Changed:
									if (state === Began) {
										state = Changed;
									}
									this._grActions.forEach(function(action, i) {
										action(this);
									}, this);
									break;
								case Canceled:
									state = Canceled;
									this._grActions.forEach(function(action, i) {
										action(this);
									}, this);
									break;
								case Failed:
									state = Failed;
									break;
								case Ended:
								case Recognized:
									state = value;
									this._grActions.forEach(function(action, i) {
										action(this);
									}, this);
									break;
								}
							}
						},
						'watchedComponent' : {
							value : undefined,
							writable : true,
							enumerable : true
						}
					});
				},

				/**
				 * Add gesture function callback which will get triggered when
				 * gesture is detected. One function instance could only be
				 * added once. The returned value indicates whether the adding
				 * is succeed.
				 * 
				 * @name sap.viz.mvc.GestureDetector#addGestureAction
				 * @function
				 * @param {Function}
				 *            actionFn
				 * @returns {Boolean}
				 */
				addGestureAction : function(actionFn) {
					var actions = this._grActions;
					if (actions.indexOf(actionFn) === -1) {
						actions.push(actionFn);
						return true;
					}
					return false;
				},

				/**
				 * Remove a previous added gesture function callback, the
				 * returned value indicates whether the removing is succeed.
				 * 
				 * @name sap.viz.mvc.GestureDetector#removeGestureAction
				 * @function
				 * @param {Function}
				 *            actionFn, the function to be removed.
				 * @returns {Boolean}
				 */
				removeGestureAction : function(actionFn) {
					var actions = this._grActions, i = actions.indexOf(actionFn);
					if (i > -1) {
						actions.splice(i, 1);
						return true;
					}
					return false;
				},

				/**
				 * Get the location of the gesture, the location is calculated
				 * as the average of the locations of all touches on the screen.
				 * Caution: This function only return meaningful point value IF
				 * and ONLY IF the current state of this gesture detector is in
				 * one of the <b>Recognizing</b> states, a.k.a Began, Changed,
				 * Canceled, Ended, Recognized, otherwise undefined will return.
				 * 
				 * @function
				 * @returns {POINT}
				 */
				globalLocOfGesture : function() {
					var state = this.state;
					if (this._grEnabled
							&& (state === Began || state === Changed || state === Canceled || state === Ended || state === Recognized)) {
						var count = 0;
						var ttracker = this._grTouchTracker, p;
						var x = y = 0;
						for ( var tId in ttracker) {
							p = ttracker[tId].globalXY;
							x += p.x;
							y += p.y;
							count++;
						}
						if (count) {
							return {
								x : x / count,
								y : y / count
							};
						}
					}
				},

				/**
				 * Return an array of identifier of the touches currently
				 * involved in the gesture detection, Caution: This function
				 * only return meaningful array of touches IF and ONLY IF the
				 * current state of this gesture detector is in one of the
				 * <b>Recognizing</b> states, a.k.a Began, Canceled, Ended,
				 * Recognized, otherwise empty array will return.
				 * 
				 * @function
				 * @returns {Array}
				 */
				involvedTouchePoints : function() {
					var ret = [], state = this.state;
					if (this._grEnabled
							&& (state === Began || state === Changed || state === Canceled || state === Ended || state === Recognized)) {
						var ttracker = this._grTouchTracker;
						for ( var tId in ttracker) {
							if(ttracker[tId].globalXY !== undefined){
								ret.push(ttracker[tId].globalXY);
							}
								
						}
					}
					return ret;
				},

				/**
				 * Get the average position of all the touchs on the screen
				 * 
				 * @function
				 * @returns {POINT}
				 */
				globalLocOfTouchPoints : function() {
					var count = 0;
					var ttracker = this._grTouchTracker, p;
					var x = y = 0;
					for ( var tId in ttracker) {
						p = ttracker[tId].globalXY;
						x += p.x;
						y += p.y;
						count++;
					}
					if (count) {
						return {
							x : x / count,
							y : y / count
						};
					}
				},

				/**
				 * Return the number of touches currently on the screen
				 * 
				 * @function
				 * @returns {Number}
				 */
				totalTouches : function() {
					return this._grTouchTotal;
				},

				/**
				 * Get or set whether needs to cancel previous events of the
				 * touches when a gesture detected. Default is yes. The related
				 * logic like bookkeeping of the canceled touches among several
				 * gesture detectors, are currently implemented outside of
				 * gesture detector.
				 * 
				 * @function
				 * @returns {Boolean|this}
				 */
				cancelTouches : function(cancel) {
					if (arguments.length) {
						this._grCancelTouches = cancel ? true : false;
						return this;
					} else {
						return this._grCancelTouches;
					}
				},
				/**
				 * Get or set the <b>enable</b> status of the gesture detector.
				 * If the gesture detector is in detecting a continuous gesture,
				 * it will immediately transit to <b>canceled</b> state.
				 * Default is yes.
				 * 
				 * @function
				 * @returns {Boolean|this}
				 */
				enable : function(enable) {
					if (arguments.length) {
						enable = enable ? true : false;
						if (this._grEnabled !== enable) {
							this._grEnabled = enable;
							if (!enable) {
								if (this.state === Began || this.state === Canceled) {
									this.state = Canceled;
								} else {
									this.state = Failed;
								}
							}
						}
						return this;
					} else {
						return this._grEnabled;
					}
				},

				/**
				 * Process the touch start event of a touch sequence. This
				 * method is not intent to be overridden and is supposed to be
				 * called by the user.
				 * 
				 * @name sap.viz.mvc.GestureDetector#touchBegin
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchStartEvent
				 */
				touchBegin : function(touchStartEvent) {
				  //Win8 Surface will not have changedTouches
					var newTouches = (typeof touchStartEvent.changedTouches !== 'undefined') ? touchStartEvent.changedTouches : [touchStartEvent];
					var ttracker = this._grTouchTracker;
					var ownerComp = this.watchedComponent;
					var pagePosition = ownerComp.pagePosition();
					for ( var i = 0, t, len = newTouches.length; i < len; i++) {
						t = newTouches[i];
						//Win8 Surface will not have identifier, we use pointerId instead
						tId = (typeof t.identifier !== 'undefined') ? t.identifier : (typeof t.pointerId !== 'undefined') ? t.pointerId : 1;
						ttracker[tId] = {
							globalXY : ownerComp.pointTo({
								x : t.pageX - pagePosition.x,
								y : t.pageY - pagePosition.y
							})
						};
						this._grTouchTotal++;
					}
					if (this._grEnabled && (this.state === Possible || this.state === Began || this.state === Changed)) {
						this.doTouchBegin(touchStartEvent);
					}
				},
				/**
				 * Process the touch move event of a touch sequence. This method
				 * is not intent to be overridden and is supposed to be called by
				 * the user.
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#touchMove
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchMoveEvent
				 */
				touchMove : function(touchMoveEvent) {
					if (this._grEnabled && (this.state === Possible || this.state === Began || this.state === Changed)) {
						var movedTouches = (typeof touchMoveEvent.changedTouches !== 'undefined') ? touchMoveEvent.changedTouches : [touchMoveEvent];
						var ownerComp = this.watchedComponent;
						var pagePosition = ownerComp.pagePosition();
						var ttracker = this._grTouchTracker;
						for ( var i = 0, t, len = movedTouches.length; i < len; i++) {
							t = movedTouches[i];
							tId = (typeof t.identifier !== 'undefined') ? t.identifier : (typeof t.pointerId !== 'undefined') ? t.pointerId : 1;
							if (track = ttracker[tId]) {
							  track.globalXY = ownerComp.pointTo({
									x : t.pageX - pagePosition.x,
									y : t.pageY - pagePosition.y
								});
							}
						}
						this.doTouchMove(touchMoveEvent);
					}
				},
				/**
				 * Process the touch end event of a touch sequence. This method
				 * is not intent to be overridden and is supposed to be called by
				 * the user.
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#touchEnd
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchEndEvent
				 */
				touchEnd : function(touchEndEvent) {
					var endedTouches = (typeof touchEndEvent.changedTouches !== 'undefined') ? touchEndEvent.changedTouches : [touchEndEvent];
					var ttracker = this._grTouchTracker;
					var ownerComp = this.watchedComponent;
					var pagePosition = ownerComp.pagePosition();
					for ( var i = 0, t, tId, track, len = endedTouches.length; i < len; i++) {
						t = endedTouches[i];
						tId = (typeof t.identifier !== 'undefined') ? t.identifier : (typeof t.pointerId !== 'undefined') ? t.pointerId : 1;
						if (track = ttracker[tId]) {
							track.globalXY = ownerComp.pointTo({
								x : t.pageX - pagePosition.x,
								y : t.pageY - pagePosition.y
							});
							this._grTouchTotal--;
						}
					}
					if (this._grEnabled && (this.state === Possible || this.state === Began || this.state === Changed)) {
						this.doTouchEnd(touchEndEvent);
					}
					// Reset the detector only when all fingers lifted and in
					// 'ending' state
					//Somehow the mobile browser will omit the last touchEnd event or just combine the last several touchEnd event in one but
					//give the wrong changedTouches list. In this case, the _grTouchTotal counter will not come to zero and the component 
					//will be in the intermediate state and response to no further touches. Therefore, we count on the touches and targetTouches list 
					//to determine whether we should reset the gesture state. 
					if ((!this._grTouchTotal || (touchEndEvent.touches && touchEndEvent.touches.length === 0) 
					        || (touchEndEvent.targetTouches && touchEndEvent.targetTouches.length === 0))
							&& (this.state === Recognized || this.state === Failed || this.state === Canceled)) {
						this.reset();
					}
				},
				/**
				 * Process the touch cancel event of a touch sequence. This
				 * method is not intent to be override and is supposed to be
				 * called by the user.
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#touchCancel
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchCancelEvent
				 */
				touchCancel : function(touchCancelEvent) {
					var cancelledTouches = (typeof touchCancelEvent.changedTouches !== 'undefined') ? touchCancelEvent.changedTouches : [touchCancelEvent];
					var ttracker = this._grTouchTracker;
					var ownerComp = this.watchedComponent;
					var pagePosition = ownerComp.pagePosition();
					for ( var i = 0, t, tId, track, len = cancelledTouches.length; i < len; i++) {
						t = cancelledTouches[i];
						tId = (typeof t.identifier !== 'undefined') ? t.identifier : (typeof t.pointerId !== 'undefined') ? t.pointerId : 1;
						if (track = ttracker[tId]) {
							track.globalXY = ownerComp.pointTo({
								x : t.pageX - pagePosition.x,
								y : t.pageY - pagePosition.y
							});
							this._grTouchTotal--;
						}
					}
					if (this._grEnabled && (this.state === Possible || this.state === Began || this.state === Changed)) {
						this.doTouchCancel(touchCancelEvent);
					}
					// Reset the detector only when all fingers lifted and in
					// 'ending' state
					if ((!this._grTouchTotal || (touchCancelEvent.touches && touchCancelEvent.touches.length === 0) 
					        || (touchCancelEvent.targetTouches && touchCancelEvent.targetTouches.length === 0))
							&& (this.state === Recognized || this.state === Failed || this.state === Canceled)) {
						this.reset();
					}
				},
				/**
				 * This method should be overridden in subclass, to handle
				 * actual gesture detection
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#doTouchBegin
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchStartEvent
				 */
				doTouchBegin : noop,
				/**
				 * Gesture Detector uses this method to receive touches in
				 * moving phase of a touch sequence. This method should be
				 * overridden in subclass.
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#doTouchMove
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchMoveEvent
				 */
				doTouchMove : noop,
				/**
				 * This method should be overridden in subclass, to handle
				 * actual gesture detection
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#doTouchEnd
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchEndEvent
				 */
				doTouchEnd : noop,
				/**
				 * This method should be overridden in subclass, to handle
				 * actual gesture detection
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#doTouchCancel
				 * @function
				 * @param {DOMTouchEvent}
				 *            touchCancelEvent
				 */
				doTouchCancel : noop,
				/**
				 * Reset the state of this gesture detector. Subclass SHOULD NOT
				 * call this method. Override it if necessary.
				 * 
				 * 
				 * @name sap.viz.mvc.GestureDetector#reset
				 * @function
				 */
				reset : function() {
					this.state = Possible;
					this._grTouchTracker = {};
					this._grTouchTotal = 0;
				}
			});

	/**
	 * The mask used to specify gesture detector's state
	 * 
	 * @name sap.viz.mvc.GestureDetector.TransitionState
	 * @class
	 */
	GestureDetector.TransitionState = {
		Possible : Possible,
		Began : Began,
		Changed : Changed,
		Recognized : Recognized,
		Ended : Ended,
		Canceled : Canceled,
		Failed : Failed
	};
	return GestureDetector;
});
define('sap/viz/mvc/UIComponent',['sap/viz/base/Observable','sap/viz/base/utils/LinkedHashSet','sap/viz/base/utils/DomUtils',
'sap/viz/base/utils/FunctionUtils','sap/viz/mvc/GestureDetector'],
function Setup(Observable, LinkedHashSet, D, FuncUtils, GestureDetector) {
	// var $ = jQuery;
	var noop = FuncUtils.noop;
	// if (!$) {
	// FuncUtils.error('Cannot find jQuery');
	// }

	/**
	 * Mark width & height is not flexible when its parent component's size
	 * changed
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#None
	 * @field
	 * 
	 */
	var None = 0;
	/**
	 * Mark the left margin is flexible
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#FlexibleLeftMargin
	 * @field
	 */
	var FlexibleLeftMargin = 1 << 0;
	/**
	 * Mark the width is flexible
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#FlexibleWidth
	 * @field
	 */
	var FlexibleWidth = 1 << 1;
	/**
	 * Mark the right margin is flexible
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#FlexibleRightMargin
	 * @field
	 */
	var FlexibleRightMargin = 1 << 2;
	/**
	 * Mark the top margin is flexible
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#FlexibleTopMargin
	 * @field
	 */
	var FlexibleTopMargin = 1 << 3;
	/**
	 * Mark the height is flexible
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#FlexibleHeight
	 * @field
	 */
	var FlexibleHeight = 1 << 4;
	/**
	 * Mark the bottom margin is flexible
	 * 
	 * @name sap.viz.mvc.UIComponent.Autosizing#FlexibleBottomMargin
	 * @field
	 */
	var FlexibleBottomMargin = 1 << 5;

	var id = 0;
	var nextId = function() {
		return id++;
	};

	function walk(node, fn) {
		var pStack = [{
					node : node,
					childrenItr : node.children.iterator()
				}];
		var current, node, childrenItr;
		while (pStack.length) {
			current = pStack[pStack.length - 1];
			node = current.node;
			fn(node);
			childrenItr = current.childrenItr;
			if (childrenItr.hasNext()) {
				var child = childrenItr.next();
				pStack.push({
							node : child,
							childrenItr : child.children.iterator()
						});
			} else {
				pStack.pop();
			}
		}
	}

	function layout(oldsize, newsize) {
		if (this._autoresizable) {
			var subCompItr = this.children.iterator();
			var subComp, newFrame;
			while (subCompItr.hasNext()) {
				subComp = subCompItr.next();
				newFrame = resizeSubComp.call(this, subComp, oldsize, newsize);
				subComp.frame(newFrame);
			}
		} else {
			this.doLayout();
		}
	}

	function resizeSubComp(subComp, oldsize, newsize) {
		var origFrame = subComp.frame();
		var x = origFrame.x, y = origFrame.y, width = origFrame.width, height = origFrame.height;
		var ml = x, mr = oldsize.width - x - width, mt = y, mb = oldsize.height
				- y - height;
		var wdiff = newsize.width - oldsize.width, hdiff = newsize.height
				- oldsize.height;
		var arMask = subComp._autoresizingMask;
		var horizontalMask = FlexibleLeftMargin | FlexibleWidth
				| FlexibleRightMargin;
		var verticalMask = FlexibleTopMargin | FlexibleHeight
				| FlexibleBottomMargin;
		switch (arMask & horizontalMask) {
			case None :
				if (ml !== 0) {
					x += wdiff * ml / (ml + mr);
				}
				break;
			case FlexibleLeftMargin :
				x += wdiff;
				break;
			case FlexibleLeftMargin | FlexibleRightMargin :
			case FlexibleRightMargin :
				break;
			case FlexibleWidth :
				width += wdiff;
				break;
			case FlexibleLeftMargin | FlexibleWidth :
				if (width !== 0) {
					x += wdiff * ml / (ml + width);
					width += wdiff * width / (ml + width);
				}
				break;
			case FlexibleRightMargin | FlexibleWidth :
				if (width !== 0) {
					width += wdiff * width / (mr + width);
				}
				break;
			case FlexibleLeftMargin | FlexibleWidth | FlexibleRightMargin :
				if (oldsize.width !== 0) {
					var r = wdiff / oldsize.width;
					x += x * r;
					width += width * r;
				}
				break;
		}
		switch (arMask & verticalMask) {
			case None :
				if (mt !== 0) {
					y += hdiff * mt / (mt + mb);
				}
				break;
			case FlexibleTopMargin :
				y += hdiff;
				break;
			case FlexibleTopMargin | FlexibleBottomMargin :
			case FlexibleBottomMargin :
				break;
			case FlexibleHeight :
				height += hdiff;
				break;
			case FlexibleTopMargin | FlexibleHeight :
				if (height !== 0) {
					y += hdiff * mt / (mt + height);
					height += hdiff * height / (mt + height);
				}
				break;
			case FlexibleBottomMargin | FlexibleHeight :
				if (height != 0) {
					height += hdiff * height / (mb + height);
				}
				break;
			case FlexibleTopMargin | FlexibleHeight | FlexibleBottomMargin :
				if (oldsize.height) {
					var r = hdiff / oldsize.height;
					y += y * r;
					height += height * r;
				}
				break;
		}
		return {
			x : x,
			y : y,
			height : height,
			width : width
		};
	}

	function init(options) {
		var opt, dc = D(this.container);
		if (options.clipToBound === false) {
			dc.css('overflow', 'visible');
		}
		if (options.hidden === true) {
			dc.css('display', 'none');
			this._hidden = true;
		}
		if (options.autoResizingMask < 32) {
			this._autoresizingMask = +options.autoResizingMask;
		}
		if (opt = options.pin) {
			this._pinX = opt.x;
			this._pinY = opt.y;
		}
		if (opt = options.position) {
			this._x = opt.x;
			this._y = opt.y;
			dc.css('left', this._x - this._pinX * this._width);
			dc.css('top', this._y - this._pinY * this._height);
		}

		if (opt = options.size) {
			this._width = opt.w || opt.width;
			this._height = opt.h || opt.height;
			dc.width(this._width);
			dc.height(this._height);
		}
		registerMandatoryHandler.call(this);
	}

	function registerMandatoryHandler() {
		this.on({
					'sizeChanged' : updateContainerSize.bind(this),
					'heightChanged' : updateContainerHeight.bind(this),
					'widthChanged' : updateContainerWidth.bind(this),
					'positionChanged' : updateContainerPos.bind(this),
					'pinChanged' : updateContainerPin.bind(this)
				});
	}

	function updateContainerSize(os, ns) {
		var dc = D(this.container);
		dc.width(ns.width);
		dc.height(ns.height);
		if (this._pinX || this._pinY) {
			dc.css('left', this._x - this._pinX * ns.width);
			dc.css('top', this._y - this._pinY * ns.height);
		}
		this.doContentResize(os, ns);
		layout.call(this, os, ns);
	}
	function updateContainerWidth(ow, nw) {
		var dc = D(this.container);
		dc.width(nw);
		if (this._pinX) {
			dc.css('left', this._x - this._pinX * nw);
		}
		var os = {
			height : this._height,
			width : ow
		}, ns = {
			height : this._height,
			width : nw
		};
		this.doContentResize(os, ns);
		layout.call(this, os, ns);
	}

	function updateContainerHeight(oh, nh) {
		var dc = D(this.container);
		dc.height(nh);
		if (this._pinY) {
			dc.css('top', this._y - this._pinY * nh);
		}
		var os = {
			height : oh,
			width : this._width
		}, ns = {
			height : nh,
			width : this._width
		};
		this.doContentResize(os, ns);
		layout.call(this, os, ns);
	}

	function updateContainerPos(op, np) {
		var dc = D(this.container);
		dc.css('left', np.x - this._pinX * this._width);
		dc.css('top', np.y - this._pinY * this._height);
	}

	function updateContainerPin(oap, nap) {
		var dc = D(this.container);
		dc.css('left', this._x - nap.x * this._width);
		dc.css('top', this._y - nap.y * this._height);
	}

	function handleSubCompHide(comp) {
		var pv = comp.visibility();
		if (pv) {
			comp.doBeforeHide();
			comp.fireEvent('beforeHide');
		}
		comp._parentVisible = false;
		var subCompItr = comp.children.iterator();
		while (subCompItr.hasNext()) {
			handleSubCompHide.call(comp, subCompItr.next());
		}
		if (pv) {
			comp.doAfterHide();
			comp.fireEvent('afterHide');
		}
	}

	function handleSubCompShow(comp) {
		var pv = comp.visibility();
		comp._parentVisible = comp.parent.visibility();// true;
		if (!pv && comp.visibility()) {
			comp.doBeforeShow();
			comp.fireEvent('beforeShow');
		}
		var subCompItr = comp.children.iterator();
		while (subCompItr.hasNext()) {
			handleSubCompShow.call(comp, subCompItr.next());
		}

		if (!pv && comp.visibility()) {
			comp.doAfterShow();
			comp.fireEvent('afterShow');
		}
	}

	/**
	 * This class defines UI component which serves as the super class of every
	 * controls
	 * 
	 * @name sap.viz.mvc.UIComponent
	 * @class
	 * @augments sap.viz.base.utils.Observable
	 */
	var UIComponent = Observable.extend(
			/**
			 * @lends sap.viz.mvc.UIComponent
			 * 
			 */
			{
		events : ['widthChanged', 'heightChanged', 'sizeChanged',
				'positionChanged', 'pinChanged', 'attached', 'detached',
				'beforeShow', 'afterShow', 'beforeHide', 'afterHide',
				'focusin', 'focusout', 'focus', 'blur', 'mousedown', 'mouseup',
				'mouseenter', 'mouseleave', 'mousemove', 'click', 'dblclick',
				'touchstart', 'touchmove', 'touchend', 'touchcancel'],
		/**
		 * @constructor
		 * @param {Object}
		 *            options the options to initialize the UI component
		 * @param {Boolean}
		 *            [options.hidden] whether the UI component is hidden
		 * @param {Integer}
		 *            [options.autoresizingMask] the bitwise combination of the
		 *            autoresizing mask, default is
		 *            {@link  sap.viz.mvc.UIComponent.Autosizing#None}
		 * @param {Object}
		 *            [options.anchor] the anchor point of the UI component,
		 *            default is
		 * 
		 * <pre>
		 * {
		 * 	x : 0.5,
		 * 	y : 0.5
		 * }
		 * </pre>
		 * 
		 * @param {Object}
		 *            [options.position] the position of the UI component,
		 *            default is
		 * 
		 * <pre>
		 * {
		 * 	x : 0,
		 * 	y : 0
		 * }
		 * </pre>
		 * 
		 * @param {Object}
		 *            [options.size] the size of the UI component, default is
		 * 
		 * <pre>
		 * {
		 * 	width : 0,
		 * 	height : 0
		 * }
		 * </pre>
		 */
		constructor : function(options) {
			options = options || {};
			var id = options.id ? options.id + '_' + nextId() : 'UIComp_'
					+ nextId();
			Object.defineProperties(this, {
						'id' : {
							value : id,
							enumerable : true
						},
						'container' : {
							// DOM div container for this ui component
							value : D(document.createElement('div'))
									.attr('id', id).css('position', 'relative')
									.css({
												'overflow' : 'visible',
												'font-size' : '10px',
												'box-sizing' : 'border-box',
												'-moz-box-sizing' : 'border-box',
												'-ms-box-sizing' : 'border-box',
												'-webkit-box-sizing' : 'border-box',
												'-webkit-user-select' : 'none',
												'-webkit-tap-highlight-color' : 'rgba(0,0,0,0)'
											}).data('selfComp', this).get(0),
							enumerable : true,
							writable : true
						},

						'root' : {
							value : undefined,
							writable : true,
							enumerable : true
						},
						'parent' : {
							value : undefined,
							writable : true,
							enumerable : true
						},
						'children' : {
							value : new LinkedHashSet(function(item) {
										return item.id;
									}),
							enumerable : true,
							writable : true
						},
						'gestureDetectors' : {
							value : [],
							enumerable : true
						}
					});
			// Flag indicates if the underlying div is attached to DOM
			this._attached = false;

			this._hidden = false;

			this._parentVisible = false;

			this._autoresizable = true;

			this._autoresizingMask = None;

			this._x = 0;

			this._y = 0;

			this._width = 1;

			this._height = 1;

			this._pinX = 0.5;

			this._pinY = 0.5;

			init.call(this, options);
		},

		markAttached : function() {
			this._attached = true;
			if (this.parent)
				this._parentVisible = this.parent.visibility();
			if (this.visibility()) {
				this.doBeforeShow();
				this.fireEvent('beforeShow');
			}
			var subCompItr = this.children.iterator();
			while (subCompItr.hasNext()) {
				subCompItr.next().markAttached();
			}
			if (this.visibility()) {
				this.doAfterShow();
				this.fireEvent('afterShow');
			}
		},

		markDetached : function() {
			var pv = this.visibility();
			this._attached = false;
			if (pv) {
				this.doBeforeHide();
				this.fireEvent('beforeHide');
			}
			var subCompItr = this.children.iterator();
			while (subCompItr.hasNext()) {
				subCompItr.next().markDetached();
			}
			if (pv) {
				this.doAfterHide();
				this.fireEvent('afterHide');
			}
		},

		/**
		 * Mark the component as hidden, if the component is already marked as
		 * hidden, nothing will happen; Whether the component will be hidden and
		 * whether the events <b>beforeHide</b>, <b>afterHide</b> will get
		 * fired and the call-back methods <b>doBeforeHide</b>, <b>doAfterHide</b>
		 * will get triggered depend on two conditions: 1, whether its parent is
		 * current shown. 2, whether the component is attached to DOM currently.
		 * 
		 * @name sap.viz.mvc.UIComponent#markHide
		 * @function
		 * @returns {this}
		 */
		markHide : function() {
			if (this._hidden === false) {
				var pv = this.visibility();
				if (pv) {
					this.doBeforeHide();
					this.fireEvent('beforeHide');
				}
				this._hidden = true;
				D(this.container).css('display', 'none');
				var subCompItr = this.children.iterator();
				while (subCompItr.hasNext()) {
					handleSubCompHide.call(this, subCompItr.next());
				}
				if (pv) {
					this.doAfterHide();
					this.fireEvent('afterHide');
				}
			}
			return this;
		},

		/**
		 * Mark the component as shown, if the component is already marked as
		 * shown, nothing will happen; Whether the component will be shown and
		 * whether the events <b>beforeShow</b>, <b>afterShow</b> and the
		 * call-back methods <b>doBeforeShow</b>, <b>doAfterShow</b> will get
		 * triggered depend on two conditions: 1, all of its ancestors are
		 * marked as shown. 2, the component is currently attached to DOM.
		 * 
		 * @name sap.viz.mvc.UIComponent#markShow
		 * @function
		 * @returns {this}
		 */
		markShow : function() {
			if (this._hidden === true) {
				this._hidden = false;
				if (this.visibility()) {
					this.doBeforeShow();
					this.fireEvent('beforeShow');
				}
				D(this.container).css('display', 'block');
				var subCompItr = this.children.iterator();
				while (subCompItr.hasNext()) {
					handleSubCompShow.call(null, subCompItr.next());
				}
				if (this.visibility()) {
					this.doAfterShow();
					this.fireEvent('afterShow');
				}
			}
			return this;
		},

		clipToBound : function(clipToBound) {
			var dc = D(this.container);
			if (arguments.length) {
				dc.css('overflow', clipToBound ? 'hidden' : 'visible');
				return this;
			} else {
				return dc.css('overflow') === 'hidden';
			}
		},

		/**
		 * Get the current visibility of the component, the visibility is
		 * affected by the component's hidden/shown status, whether it's
		 * attached to DOM, whether it's ancestor components are shown.
		 * 
		 * 
		 * @name sap.viz.mvc.UIComponent#visibility
		 * @function
		 * @returns {Boolean}
		 */
		visibility : function() {
			return !this._hidden && this._attached && this._parentVisible;
		},

		/**
		 * Get and set whether the component should resize automatically when
		 * its parent's size changed
		 * 
		 * @name sap.viz.mvc.UIComponent#autoResizable
		 * @function
		 * @param {undefined|Boolean}
		 *            autoresize
		 * @returns {this|Boolean}
		 */
		autoResizable : function(autoResize) {
			if (arguments.length) {
				this._autoresizable = autoResize && true;
				return this;
			} else {
				return this._autoresizable && true;
			}
		},

		/**
		 * Get and set the autoresizing mask of the component
		 * 
		 * @name sap.viz.mvc.UIComponent#autoResizingMask
		 * @function
		 * @param {undefined|Integer}
		 *            mask
		 * @returns {this|Integer}
		 */
		autoResizingMask : function(mask) {
			if (arguments.length) {
				if (mask < 32) {
					this._autoresizingMask = +mask;
				}
				return this;
			} else {
				return this._autoresizingMask;
			}
		},

		/**
		 * Get the position of the component, the position is in Page coordinate
		 * system
		 * 
		 * @name sap.viz.mvc.UIComponent#pagePosition
		 * @function
		 * 
		 * <pre>
		 * {
		 *      x : ##,
		 *      y : ##,
		 * }
		 * </pre>
		 * 
		 * @returns {Object}
		 */
		pagePosition : function() {
			var offset = D(this.container).offset();
			return {
				x : offset.left,
				y : offset.top
			};
		},
		/**
		 * Get and set the position of the component, the position is in it's
		 * direct super component's coordinate system
		 * 
		 * @name sap.viz.mvc.UIComponent#position
		 * @function
		 * @param {Point|Number}
		 *            x x coordinate or <b>Point</b> object.
		 * @param {Number}
		 *            [y] y coordinate
		 * 
		 * 
		 * @returns {this|Point }
		 */
		position : function(x, y) {
			if (arguments.length === 0)
				return {
					x : this._x,
					y : this._y
				};

			if (arguments.length === 1) {
				y = x.y;
				x = x.x;
			}
			x = +x;
			y = +y;
			if (this._x !== x || this._y !== y)
				this.fireEvent('positionChanged', {
							x : this._x,
							y : this._y
						}, {
							x : this._x = x,
							y : this._y = y
						});
			return this;
		},
		/**
		 * Get and set the size of the component
		 * 
		 * @name sap.viz.mvc.UIComponent#size
		 * @function
		 * @param {Number|Size}
		 *            width the width of the layer or <b>Size</b> object
		 * @param {Number}
		 *            (height) the height of the layer, omitted when receiving a
		 *            <b>Size</b> object
		 * 
		 * Size Object is defined as:
		 * 
		 * <pre>
		 * {
		 *      width : ##,
		 *      height : ##
		 * }
		 * </pre>
		 * 
		 * @returns {this|Size}
		 */
		size : function(width, height) {
			if (!arguments.length)
				return {
					width : this._width,
					height : this._height
				};

			if (arguments.length === 1) {
				height = width.height;
				width = width.width;
			}
			height = +height;
			width = +width;
			if (width !== this._width || height !== this._height)
				this.fireEvent('sizeChanged', {
							width : this._width,
							height : this._height
						}, {
							width : this._width = width,
							height : this._height = height
						});

			return this;
		},
		/**
		 * Get and set the width of the component
		 * 
		 * @name sap.viz.mvc.UIComponent#width
		 * @function
		 * @param {Number}
		 *            width the new width of the layer
		 * 
		 * 
		 * @returns {this|Number}
		 */
		width : function(width) {
			if (!arguments.length)
				return this._width;

			width = +width;
			if (this._width !== width && width > 0)
				this.fireEvent('sizeChanged', {
							width : this._width,
							height : this._height
						}, {
							width : this._width = width,
							height : this._height
						});

			return this;
		},
		/**
		 * Get and set the height of the component
		 * 
		 * @name sap.viz.mvc.UIComponent#height
		 * @function
		 * @param {Number|Function}
		 *            (height) the new height of the layer or function returns
		 *            height value.
		 * 
		 * 
		 * @returns {this|Number}
		 * 
		 * 
		 * @returns {this|Number}
		 */
		height : function(height) {
			if (!arguments.length)
				return this._height;

			height = +height;
			if (this._height !== height && height > 0)
				this.fireEvent('sizeChanged', {
							width : this._width,
							height : this._height
						}, {
							width : this._width,
							height : this._height = height
						});

			return this;
		},
		/**
		 * Pin is used to specify which point the component's geometric boundary
		 * is used to locate the layer. If no argument specified, current Pin is
		 * returned, the default Pin is (0.5,0.5). If single argument specified,
		 * it must be either <b>Point</b> object or a function returns <b>Point</b>.
		 * If two arguments specified, they must be two numbers corresponding to
		 * x, y of Pin.
		 * 
		 * @name sap.viz.mvc.UIComponent#pin
		 * @function
		 * @param {Number|Point}
		 *            (x)
		 * @param {Number}
		 *            (y)
		 * 
		 * 
		 * @returns {this|Point }
		 */
		pin : function(x, y) {
			if (!arguments.length)
				return {
					x : this._pinX,
					y : this._pinY
				};

			if (arguments.length === 1) {
				y = x.y;
				x = x.x;
			}
			x = +x;
			y = +y;

			if (x !== this._pinX || y !== this._pinY)
				this.fireEvent('pinChanged', {
							x : this._pinX,
							y : this._pinY
						}, {
							x : this._pinX = x,
							y : this._pinY = y
						});

			return this;
		},
		/**
		 * Frame is a convenient way to update position and size of the
		 * component at once, frame defines the component's rectangular boundary
		 * using a rectangle in parent's layer's coordinate system. If no
		 * argument specified, the current frame is returned. If single argument
		 * specified, it must be either <b>Rect</b> object or a function
		 * returns <b>Rect</b> object, otherwise 4 arguments must be supplied.
		 * 
		 * @name sap.viz.mvc.UIComponent#frame
		 * @function
		 * @function
		 * @param {Rect|Number}
		 *            x could be Number, <b>Rect</b> object
		 * @param {Number)
		 *            (y)
		 * @param {Number)
		 *            (width)
		 * @param {Number)
		 *            (height)
		 * 
		 * 
		 * @returns {this|Rect }
		 */
		frame : function(x, y, width, height) {
			if (!arguments.length)
				return {
					x : this._x - this._pinX * this._width,
					y : this._y - this._pinY * this._height,
					width : this._width,
					height : this._height
				};

			if (arguments.length === 1) {
				y = x.y;
				width = x.width;
				height = x.height;
				x = x.x;
			}
			var newPosX = x + width * this._pinX, newPosY = y + height
					* this._pinY;
			if (width !== this._width || height !== this._height) {
				this.fireEvent('sizeChanged', {
							width : this._width,
							height : this._height
						}, {
							width : this._width = width,
							height : this._height = height
						});
			}
			if (newPosX !== this._x || newPosY !== this._y) {
				this.fireEvent('positionChanged', {
							x : this._x,
							y : this._y
						}, {
							x : this._x = newPosX,
							y : this._y = newPosY
						});
			}
			return this;
		},

		/**
		 * Append a component as its last child component, the visibility
		 * related events and call-back methods will get triggered on the
		 * component tree based on the appended component's visibility.
		 * 
		 * @name sap.viz.mvc.UIComponent#append
		 * @function
		 * @param {sap.viz.mvc.UIComponent}
		 *            subComp component to append
		 * @return {this}
		 */
		append : function(subComp) {
			if (subComp) {
				if (subComp.parent !== undefined)
					subComp.detach();
				subComp.parent = this;
				if (this.root) {
					walk(subComp, function(node) {
								node.root = this;
							}.bind(this.root));
				}
				this.children.add(subComp);
				this.container.appendChild(subComp.container);
				if (this._attached) {
					subComp.markAttached();
				}
				return this;
			}
		},

		/**
		 * Append this component to other component as a child
		 * 
		 * @param {sap.viz.mvc.UIComponent}
		 *            superComp component to be appended
		 * @return {this}
		 */
		appendTo : function(superComp) {
			superComp.append(this);
			return this;
		},
		/**
		 * Detach this component from its parent, the detached component is not
		 * destroyed and could be reattached later. the visibility related
		 * events and call-back methods will get triggered based on the detached
		 * component's previous visibility.
		 * 
		 * @name sap.viz.mvc.UIComponent#detach
		 * @function
		 */
		detach : function() {
			if (this.parent) {
				this.parent.children.remove(this);
				D(this.container).detach();
				this.parent = undefined;
				walk(this, function(node) {
							node.root = undefined;
						});
				this.markDetached();
			}
			return this;
		},

		before : function(target) {
			target.insertBefore(this);
			return this;
		},
		/**
		 * Insert this component as a child before the specified component, if
		 * this component has been attached to other component, it will be
		 * detached firstly.
		 * 
		 * @name sap.viz.mvc.UIComponent#insertBefore
		 * @function
		 * @param {sap.viz.mvc.UIComponent}
		 *            target the component to be inserted before
		 */
		insertBefore : function(target) {
			if (target && target.parent && target !== this) {
				if (this.parent) {
					this.detach();
				}
				var superComp = target.parent;
				this.parent = superComp;
				if (superComp.root) {
					walk(this, function(node) {
								node.root = this;
							}.bind(superComp.root));
				}
				superComp.children.insertBefore(this, target);
				this.container.parentNode.insertBefore(target.container,
						this.container);
				if (this._attached) {
					this.markAttached();
				}
			}
			return this;
		},

		after : function(target) {
			target.insertAfter(this);
			return this;
		},

		/**
		 * Insert this component as a child after the specified component, if
		 * this component has been attached to other component, it will be
		 * detached firstly.
		 * 
		 * @name sap.viz.mvc.UIComponent#insertAfterSubComponent
		 * @function
		 * 
		 * @param {sap.viz.mvc.UIComponent}
		 *            target the component to be inserted before
		 */
		insertAfter : function(target) {
			if (target && target.parent && target !== this) {
				if (this.parent) {
					this.detach();
				}
				var superComp = target.parent;
				this.parent = superComp;
				if (superComp.root) {
					walk(this, function(node) {
								node.root = this;
							}.bind(superComp.root));
				}
				superComp.children.insertAfter(this, target);
				this.container.parentNode.insertAfter(target.container,
						this.container);
				if (this._attached) {
					this.markAttached();
				}
			}
			return this;
		},
		/**
		 * Bring this component as the last component of its super component
		 * 
		 * @name sap.viz.mvc.UIComponent#bringToFront
		 * @function
		 * 
		 */
		bringToFront : function() {
			var superComp = this.parent;
			if (superComp) {
				if (superComp.children.last() !== this) {
					superComp.children.moveToLast(this);
					D(this.container).detach();
					// this.container.appendTo(subComp.container);
					subComp.container.appendChild(this.container);
				}
			}
			return this;
		},
		/**
		 * Send this component as the first component of its super component
		 * 
		 * @name sap.viz.mvc.UIComponent#bringToFront
		 * 
		 * @name sap.viz.mvc.UIComponent#sendToBack
		 * @function
		 */
		sendToBack : function() {
			var superComp = this.parent;
			if (superComp) {
				if (superComp.children.first() !== this) {
					superComp.children.moveToFirst(this);
					D(this.container).detach();
					// this.container.prependTo(subComp.container);
					subComp.container.insertBefore(this.container,
							subComp.container.firstChild);
				}
			}
			return this;
		},

		/**
		 * Convert the point from other component's coordinate system to this
		 * component's coordinate system. If the <b>this<b> component is
		 * detached from root, no convertion happens; if the <b>from</b>
		 * component is not specified or is detached, the specified x,y will be
		 * treated as a point in global coordinate system.
		 * 
		 * @name sap.viz.mvc.UIComponent#pointFrom
		 * @function
		 * @param {Number|Point}
		 *            x the x coordinate of the point or Point object
		 * @param {Number|sap.viz.mvc.UIComponent}
		 *            (y) the y coordinate of the point or other UIComponent
		 * @param {sap.viz.mvc.UIComponent}
		 *            (from)
		 * @returns {Point}
		 */
		pointFrom : function(x, y, from) {
			if (arguments.length === 1) {
				y = x.y;
				x = x.x;
				from = false;
			}
			if (arguments.length === 2) {
				if (isNaN(x)) {
					from = y;
					y = x.y;
					x = x.x;
				} else {
					from = false;
				}
			}
			x = +x;
			y = +y;
			from.root || (from = false);
			var root = this.root;
			if (root) {
				from || (from = root);

				// this -> from conversion
				var dx = 0, dy = 0, current = this, frame;
				while (current !== root && current !== from) {
					frame = current.frame();
					dx += frame.x;
					dy += frame.y;
					current = current.parent;
				}
				if (current !== from) {
					// "this" is not a child of "from"
					current = from;
					// from -> this conversion
					while (current !== root && current !== this) {
						frame = current.frame();
						x += frame.x;
						y += frame.y;
						current = current.parent;
					}
					if (current === this) {
						// "this" is an ancestor of "from"
						return {
							x : x,
							y : y
						};
					}
				}
				return {
					x : x - dx,
					y : y - dy
				};
			}
			return {
				x : x,
				y : y
			};
		},
		/**
		 * Convert local point to a point in the coordinate system of the
		 * specified component. If the <b>this<b> component is detached from
		 * root, no convertion happens; if the <b>to</b> component is not
		 * specified or is detached, the specified x,y will be converted to
		 * global coordinate system.
		 * 
		 * @name sap.viz.mvc.UIComponent#pointFrom
		 * @function
		 * @param {Number|Point}
		 *            x the x coordinate of the point or Point object
		 * @param {Number|sap.viz.mvc.UIComponent}
		 *            (y) the y coordinate of the point or other UIComponent
		 * @param {sap.viz.mvc.UIComponent}
		 *            (from)
		 * @returns {Point}
		 */
		pointTo : function(x, y, to) {
			if (arguments.length === 1) {
				y = x.y;
				x = x.x;
				from = false;
			}
			if (arguments.length === 2) {
				if (isNaN(x)) {
					from = y;
					y = x.y;
					x = x.x;
				} else {
					from = false;
				}
			}
			x = +x;
			y = +y;
			var root = this.root;
			if (root) {
				to || (to = root);
				return to.pointFrom(x, y, this);
			}
			return {
				x : x,
				y : y
			};
		},

		fireFocusEvent : function(event) {
			this.fireEvent(event.type, event);
			if (this.parent && event.shouldBubble()) {
				event.currentTarget = this.parent;
				this.parent.fireEvent(event);
			}
		},

		fireMouseEvent : function(event) {
			this.fireEvent(event.type, event);
			if (this.parent && event.shouldBubble()) {
				event.currentTarget = this.parent;
				event.currentLocalXY = {
					x : event.currentLocalXY.x + this._x - this._pinX
							* this._width,
					y : event.currentLocalXY.y + this._y - this._pinY
							* this._height
				};
				this.parent.fireMouseEvent(event);
			}
		},

		fireTouchEvent : function(event) {
			this.fireEvent(event.type, event);
			if (this.parent && event.shouldBubble()) {
				event.currentTarget = this.parent;
				this.parent.fireTouchEvent(event);
			}
		},

		/**
		 * Remove all listeners currently attached to the component
		 * 
		 * @name sap.viz.mvc.UIComponent#purgeListeners
		 * @function
		 */
		purgeListeners : function() {
			this._super();
		},
		/**
		 * Remove all listeners currently listening on the given event
		 * 
		 * @name sap.viz.mvc.UIComponent#un
		 * @function
		 * @param {String}
		 *            eventName
		 */
		un : function(eventName) {
			this._super.apply(this, arguments);
			if (arguments.length === 1) {
				switch (eventName) {
					case 'sizeChanged' :
						this.on('sizeChanged', updateContainerSize.bind(this));
						break;
					case 'heightChanged' :
						this.on('heightChanged', updateContainerHeight
										.bind(this));
						break;
					case 'widthChanged' :
						this
								.on('widthChanged', updateContainerWidth
												.bind(this));
						break;
					case 'positionChanged' :
						this.on('positionChanged', updateContainerPos
										.bind(this));
						break;
					case 'pinChanged' :
						this.on('pinChanged', updateContainerPin.bind(this));
						break;
				}
			}
		},
		/**
		 * Add a gesture detector to this component
		 * 
		 * @name sap.viz.mvc.UIComponent#addGestureDetector
		 * @function
		 * @param {sap.viz.mvc.GestureDetector}
		 *            detector
		 */
		addGestureDetector : function(detector) {
			if (detector instanceof GestureDetector) {
				detector.watchedComponent = this;
				this.gestureDetectors.push(detector);
			}
		},
		/**
		 * remove a previously added gesture detector to this component
		 * 
		 * @name sap.viz.mvc.UIComponent#addGestureDetector
		 * @function
		 * @param {sap.viz.mvc.GestureDetector}
		 *            detector
		 */
		removeGestureDetector : function(detector) {
			for (var i = 0, len = this.gestureDetectors.length; i < len; i++) {
				if (this.gestureDetectors[i] === detector) {
					this.gestureDetectors.splice(i, 1);
					detector.watchedComponent = undefined;
					len--;
				}
			}
		},

		/**
		 * Returns the farthest descendant uicomponent that can respond to the
		 * hit point.
		 * 
		 * @name sap.viz.mvc.UIComponent#hitTest
		 * @param {Number|Point}
		 *            x the x coordinate of the point or the point object
		 * @param {Number}
		 *            (y) the y coordinate of the point
		 * @returns {sap.viz.mvc.UIComponent}
		 */
		hitTest : function(x, y) {
			if (arguments.length = 1) {
				y = x.y;
				x = x.x;
			}
			var pStack = [{
						comp : this,
						subCompsItr : this.children.iterator(true)
					}];
			var comp, subCompsItr;
			while (pStack.length) {
				comp = pStack[pStack.length - 1];
				subCompsItr = comp.subCompsItr;
				comp = comp.comp;
				if (comp.visibility()) {
					if (subCompsItr.hasNext()) {
						var subComp = subCompsItr.next();
						pStack.push({
									comp : subComp,
									subCompsItr : subComp.children
											.iterator(true)
								});
						continue;
					} else {
						var point = comp.pointFrom(x, y, this);
						if (point.x >= 0 && point.y >= 0
								&& point.x < comp.width()
								&& point.y < comp.height()
								&& comp.pointContent(x, y))
							return comp;
					}
					pStack.pop();
				} else {
					pStack.pop();
				}
			}
		},

		/**
		 * Test whether the given local point is currently pointing the visual
		 * content of the UIComponent. Hitting test will furthur use this method
		 * to determine if a point is hitting the component after checking the
		 * boundary enclosing. Default implementation always returns true.
		 * 
		 * @name sap.viz.mvc.UIComponent#pointContent
		 * @function
		 * @param {Number|Point}
		 *            x the x coordinate of the point or Point object
		 * @param {Number}
		 *            (y) the y coordinate of the point
		 * @returns {Boolean}
		 */
		pointContent : function(x, y) {
			return true;
		},

		/**
		 * Implement this method to do adhoc sub-components layout, this method
		 * will be called on super component when its size changed.
		 * 
		 * @name sap.viz.mvc.UIComponent#doLayout
		 * @function
		 */
		doLayout : noop,

		/**
		 * Resize component's visual content, when the component's size changed,
		 * this method will be invoked before layout sub components
		 * 
		 * @name sap.viz.mvc.UIComponent#doContentResize
		 * @function
		 * @param {Object}
		 *            os the old size of the component
		 * @param {Object}
		 *            ns the new size of the component
		 */
		doContentResize : noop,

		/**
		 * This method will get called before the component becoming hidden
		 * 
		 * @name sap.viz.mvc.UIComponent#doBeforeHide
		 * @function
		 */
		doBeforeHide : noop,
		/**
		 * This method will get called after the component is hided
		 * 
		 * @name sap.viz.mvc.UIComponent#doAfterHide
		 * @function
		 */
		doAfterHide : noop,
		/**
		 * This method will get called before the component becoming visible
		 * 
		 * @name sap.viz.mvc.UIComponent#doBeforeShow
		 * @function
		 */
		doBeforeShow : noop,
		/**
		 * This method will get called after the component is visible
		 * 
		 * @name sap.viz.mvc.UIComponent#doAfterShow
		 * @function
		 */
		doAfterShow : noop,

		doDestroy : noop,

		destroy : function() {
			this.doDestroy();
			walk(this, function(node) {
						node.detach();
						node.purgeListeners();
					});
			D(this.container).removeData('selfComp');
			//remove reference
			//this._holder = null;
			if(this.children){
			  this.children = null;
			}
		}
	});
	UIComponent.Autosizing = {
		None : None,
		FlexibleLeftMargin : FlexibleLeftMargin,
		FlexibleWidth : FlexibleWidth,
		FlexibleRightMargin : FlexibleRightMargin,
		FlexibleTopMargin : FlexibleTopMargin,
		FlexibleHeight : FlexibleHeight,
		FlexibleBottomMargin : FlexibleBottomMargin
	};
	return UIComponent;
});
define('sap/viz/base/utils/LinkedHashMap',['sap/viz/base/utils/FunctionUtils'],
function Setup(FuncUtils) {
	function hasMoreInOrder() {
		if (this._count !== 0) {
			if (this._count === this._lhm._length) {
				this._cursor = this._lhm._head;
			} else {
				this._cursor = this._cursor.next;
			}
			this._count--;
			return true;
		} else {
			return false;
		}
	}

	function hasMoreInReverse() {
		if (this._count !== 0) {
			if (this._count === this._lhm._length) {
				this._cursor = this._lhm._last;
			} else {
				this._cursor = this._cursor.prev;
			}
			this._count--;
			return true;
		} else {
			return false;
		}
	}
	/**
	 * Iterator for LinkedHashMap, to get an iterator for a linkedHashMap
	 * instance, use {@link sap.viz.base.utils.LinkedHashMap#getIterator}
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator
	 * @constructor
	 */
	var lhmItr = function(lhm, reverseOrder) {
		this._lhm = lhm;
		this._reverse = reverseOrder || false;
		this._count = lhm._length;
		this._cursor = this._reverse ? this._lhm._last : this._lhm._head;
		if (this._reverse) {
			this.hasMore = hasMoreInReverse;
		} else {
			this.hasMore = hasMoreInOrder;
		}
	};

	var lhmItrP = lhmItr.prototype;

	/**
	 * Find if there is more item to iterate, calling this method will move the
	 * cursor forward to next item
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator#hasMore
	 * @function
	 * @returns {Boolean}
	 */
	lhmItrP.hasMore = FuncUtils.noop;

	/**
	 * Get the entry at the current cursor, calling this method without calling
	 * hasMore method will return the same entry
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator#next
	 * @function
	 * @returns {Object} with key & value property indicating the entry's key
	 *          and value object
	 */
	lhmItrP.next = function() {
		var ret = {
			key : this._cursor.key,
			value : this._cursor.value
		};
		return ret;
	};
	/**
	 * Get the value of entry at the current cursor, calling this method without
	 * calling hasMore method will return the same entry
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator#nextValue
	 * @function
	 * @returns {Object}
	 */
	lhmItrP.nextValue = function() {
		return this._cursor.value;
	};
	/**
	 * Get the key of entry at the current cursor, calling this method without
	 * calling hasMore method will return the same entry
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator#nextKey
	 * @function
	 * @returns {String}
	 */
	lhmItrP.nextKey = function() {
		return this._cursor.key;
	};
	/**
	 * Reset the iterator to initial state
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator#reset
	 * @function
	 */
	lhmItrP.reset = function() {
		this._count = this._lhm._length;
	};

	/**
	 * Remove the current entry from LinkedHashMap
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap.Iterator#remove
	 * @function
	 */
	lhmItrP.remove = function() {
		return this._lhm.remove(this._cursor.key);
	};

	/**
	 * Create an empty LinkedHashMap
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap
	 * @constructor
	 */
	var LinkedHashMap = function() {
		this._map = {};
		this._head = undefined;
		this._last = undefined;
		this._length = 0;
	};
	var lhmp = LinkedHashMap.prototype;

	/**
	 * Add one entry, if the key for the entry is already existing, then the old
	 * value will be replaced.
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#add
	 * @function
	 * @param {String}
	 *            key the key for the entry
	 * @param {Object}
	 *            value the value for the entry
	 * @returns {undefined|Object} undefined if key is new, otherwise will be
	 *          the replaced value
	 */
	lhmp.add = function(key, value) {
		var m = this._map;
		var ret = null;
		var node = {
			prev : null,
			key : key,
			value : value,
			next : null
		};
		if (!this._length) {
			this._head = this._last = node;
		}
		if (!m.hasOwnProperty(key)) {
			m[key] = node;
			this._length++;
			node.prev = this._last;
			this._last.next = node;
			this._last = node;
			this._last.next = this._head;
			this._head.prev = this._last;
		} else {
			ret = m[key].value;
			m[key].value = value;
		}
		return ret;
	};
	/**
	 * Add entries from an existing linked hash map, the duplicated entry will
	 * be replaced silently
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#addAll
	 * @function
	 * @param {sap.viz.base.utils.LinkedHashMap}
	 *            linkedHashMap another linkedHashMap to added
	 */
	lhmp.addAll = function(linkedHashMap) {
		var itr = linkedHashMap.getIterator();
		var entry;
		while (itr.hasMore()) {
			entry = itr.next();
			this.add(entry.key, entry.value);
		}
	};
	/**
	 * Insert the entry before one entry, if the inserted entry exists or the
	 * entry to be inserted before doesn't exist, insertion will fail silently
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#insertBefore
	 * @function
	 * @param {String}
	 *            key the key for the entry
	 * @param {Object}
	 *            value the value for the entry
	 * @param {String}
	 *            beforeKey the key of the entry to be inserted before
	 * @returns {Object} the value inserted
	 */
	lhmp.insertBefore = function(key, value, beforeKey) {
		var m = this._map;
		if (!m.hasOwnProperty(key) && m.hasOwnProperty(beforeKey)) {
			var nnode = {
				prev : null,
				key : key,
				value : value,
				next : null
			};
			var anode = m[beforeKey];
			if (anode !== this._head) {
				nnode.prev = anode.prev;
				anode.prev.next = nnode;
			} else {
				this._head = nnode;
				nnode.prev = this._last;
			}
			nnode.next = anode;
			anode.prev = nnode;
			m[key] = nnode;
			this._length++;
			return value;
		}
	};
	/**
	 * Insert the entry after one entry, if the inserted entry exists or the
	 * entry to be inserted after doesn't exist, insertion will fail silently
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#insertAfter
	 * @function
	 * @param {String}
	 *            key the key for the entry
	 * @param {Object}
	 *            value the value for the entry
	 * @param {String}
	 *            afterKey the key of the entry to be inserted after
	 * @returns {Object} the value inserted
	 */
	lhmp.insertAfter = function(key, value, afterKey) {
		var m = this._map;
		if (!m.hasOwnProperty(key) && m.hasOwnProperty(afterKey)) {
			var nnode = {
				prev : null,
				key : key,
				value : value,
				next : null
			};
			var anode = m[afterKey];
			if (anode !== this._last) {
				nnode.next = anode.next;
				anode.next.prev = nnode;
			} else {
				this._last = nnode;
				this._last.next = this._head;
			}
			anode.next = nnode;
			nnode.prev = anode;
			m[key] = nnode;
			this._length++;
			return value;
		}
	};
	/**
	 * Replace the existing entry with new entry, including key in place
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#replace
	 * @function
	 * @param {String}
	 *            key the key for the entry to be replaced
	 * @param {withKey}
	 *            withKey the key for the entry to be added
	 * @param {Object}
	 *            andValue the value of the entry to be added
	 * @returns {Object} the value to be replaced
	 */
	lhmp.replace = function(key, withKey, andValue) {
		var m = this._map;
		if (!m.hasOwnProperty(withKey) && m.hasOwnProperty(key)) {
			var nnode = {
				prev : null,
				key : withKey,
				value : andValue,
				next : null
			};
			var rnode = m[key];
			nnode.prev = rnode.prev;
			nnode.next = rnode.next;
			rnode.prev.next = nnode;
			rnode.next.prev = nnode;
			if (this._head === rnode)
				this._head = nnode;
			if (this._last === rnode)
				this._last = nnode;
			m[withKey] = nnode;
			delete m[key];
			return rnode.value;
		}
	};
	/**
	 * Get the value for the key
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#get
	 * @function
	 * @param {String}
	 *            key the key for the entry to get
	 * 
	 * @returns {Null|Object} the value for the key or Null if key is
	 *          non-existing
	 */
	lhmp.get = function(key) {
		var m = this._map;
		if (m.hasOwnProperty(key)) {
			return m[key].value;
		}
		return null;
	};
	/**
	 * Get the value of entry next to the entry associated with the given key
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#next
	 * @function
	 * @param {String}
	 *            key the key of the entry
	 * 
	 * @returns {Null|Object} the value for the key or Null if key is
	 *          non-existing
	 */
	lhmp.next = function(key) {
		var m = this._map;
		if (m.hasOwnProperty(key)) {
			return m[key].next;
		}
		return null;
	};
	/**
	 * Get the value of entry previous to the entry associated with the given
	 * key
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#prev
	 * @function
	 * @param {String}
	 *            key the key of the entry
	 * 
	 * @returns {Null|Object} the value for the key or Null if key is
	 *          non-existing
	 */
	lhmp.prev = function(key) {
		var m = this._map;
		if (m.hasOwnProperty(key)) {
			return m[key].prev;
		}
		return null;
	};
	/**
	 * Get the first inserted entry
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#getFirstInsert
	 * @function
	 * 
	 * @returns {Object} the value first inserted
	 */
	lhmp.getFirstInsert = function() {
		return this._head ? this._head.value : null;
	};
	/**
	 * Get the last inserted entry
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#getLastInsert
	 * @function
	 * 
	 * @returns {Object} the value last inserted
	 */
	lhmp.getLastInsert = function() {
		return this._last ? this._last.value : null;
	};
	/**
	 * Move entry associated with key to the last of the link
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#moveToLast
	 * @function
	 * @param {String}
	 *            key the key of the entry to move
	 */
	lhmp.moveToLast = function(key) {
		var m = this._map;
		if (m.hasOwnProperty(key) && this._last.key !== key) {
			var node = m[key];
			node.prev.next = node.next;
			node.next.prev = node.prev;
			node.prev = this._last;
			node.next = this._last.next;
			this._last.next = node;
			this._last = node;
			this._head = node.next;
			this._head.prev = node;

		}
	};
	/**
	 * Move entry associated with key to the first of the link
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#moveToFirst
	 * @function
	 * @param {String}
	 *            key the key of the entry to move
	 */
	lhmp.moveToFirst = function(key) {
		var m = this._map;
		if (m.hasOwnProperty(key) && this._head.key !== key) {
			var node = m[key];
			node.prev.next = node.next;
			node.next.prev = node.prev;
			node.next = this._head;
			node.prev = this._head.prev;
			this._head.prev = node;
			this._head = node;
			this._last = node.prev;
			this._last.next = node;
		}
	};
	/**
	 * Check whether having the key
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#has
	 * @function
	 * @param {String}
	 *            key the key of the entry to check
	 * @returns {Boolean}
	 */
	lhmp.has = function(key) {
		var m = this._map;
		return m.hasOwnProperty(key);
	};
	/**
	 * Remove the entry associated with the key
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#remove
	 * @function
	 * @param {String}
	 *            key the key of the entry to remove
	 * @returns {undefined|Object} the removed item or undefined if key is
	 *          non-existing
	 */
	lhmp.remove = function(key) {
		var m = this._map;
		var ret;
		if (m.hasOwnProperty(key)) {
			var node = m[key];
			ret = node.value;
			if (node === this._head) {
				this._head = node.next;
			}
			if (node === this._last) {
				this._last = node.prev;
			}
			node.prev.next = node.next;
			node.next.prev = node.prev;

			delete m[key];
			this._length--;
			if (this._length === 0) {
				this._head = this._last = undefined;
			}
			return ret;
		}
	};
	/**
	 * Remove all entries added before
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#purgeAll
	 * @function
	 */
	lhmp.purgeAll = function() {
		this._map = {};
		this._head = undefined;
		this._last = undefined;
		this._length = 0;
	};
	/**
	 * Whether the map is empty
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#isEmpty
	 * @function
	 * 
	 * @returns {Boolean}
	 */
	lhmp.isEmpty = function() {
		return this._length == 0;
	};
	/**
	 * Length of the map
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#length
	 * @function
	 * @returns {Integer}
	 */
	lhmp.length = function() {
		return this._length;
	};
	/**
	 * Get the iterator of the map
	 * 
	 * @name sap.viz.base.utils.LinkedHashMap#getIterator
	 * @function
	 * @param {Boolean}
	 *            reverseOrder whether iterate in reverse order
	 * @returns {sap.viz.base.utils.LinkedHashMap.Iterator}
	 */
	lhmp.getIterator = function(reverseOrder) {
		return new lhmItr(this, reverseOrder);
	};

	lhmp.keys = function() {
		var itr = this.getIterator(), keys = [];
		while (itr.hasMore())
			keys.push(itr.nextKey());
		return keys;
	};

	lhmp.values = function() {
		var itr = this.getIterator(), values = [];
		while (itr.hasMore())
			values.push(itr.nextValue());
		return values;
	};
	return LinkedHashMap;
});
define('sap/viz/base/utils/DomWatcher',['sap/viz/base/UADetector','sap/viz/base/utils/LinkedHashMap'],
function Setup(UADetector, LinkedHashMap) {
    var watcherId = 0, domNo = 1, observer;
    
    function nextWatcherId() {
        return watcherId++;
    }
    function nextDomNo() {
        return domNo++;
    }
                
    function isEmpty(obj) {
        for ( var prop in obj) {
            if (obj.hasOwnProperty(prop))
                return false;
        }
        return true;
    }
    function css(dom, prop) {
        var val = null;
        if (window.getComputedStyle) {
            val = window.getComputedStyle(dom, null)[prop];
        } else if (dom.currentStyle) {
            val = dom.currentStyle[prop];
        }
        return val;
    }
    function domDataAccessor(key, value) {
        if (!this._data)
            this._data = {};
        if (arguments.length === 2) {
            this._data[key] = value;
        } else
            return this._data[key];
    }
    var domTasks = new LinkedHashMap();
    //var observers = new LinkedHashMap();
    function eventHandler(mutations) {
        var task, dom, domNo, domTaskIt;
        mutations.forEach(
            function(mutation){
                dom = mutation.target;
                domNo = domDataAccessor.call(dom, 'domNo');
                if (!domNo)
                    return;
                domTaskIt = domTasks.get(domNo).getIterator();
                while (domTaskIt.hasMore()) {
                    task = domTaskIt.nextValue();
                    task.checkChange();
              }
            }
        );
    }
    
    var Observer = window.MutationObserver || window.WebKitMutationObserver;

    function addEventHandler(id) {
        var task = taskQueue.get(id);
        var dom = task.domElem;
        var domNo = domDataAccessor.call(dom, 'domNo');
        var observer;
        if (!domNo) {
            domNo = nextDomNo();
            domDataAccessor.call(dom, 'domNo', domNo);
            domTasks.add(domNo, new LinkedHashMap());
        }
        domTasks.get(domNo).add(task.id, task);
        observer = domDataAccessor.call(dom, 'observer');
        if (!observer){
            
            if(!Observer)
                return;
            
            observer = new Observer(eventHandler);
            domDataAccessor.call(dom, 'observer', observer);
        }
        observer.observe(dom, { attributes: true });
    }
    function removeFromEventHandler(task) {
        var dom = task.domElem;
        var domNo = domDataAccessor.call(dom, 'domNo');
        if (!domNo)
            return;

        if (domTasks.get(domNo).has(task.id)){
            domTasks.get(domNo).remove(task.id);
        }

        if (domTasks.get(domNo).isEmpty()) {
            domDataAccessor.call(dom, 'observer').disconnect();
            domDataAccessor.call(dom, 'observer', undefined);
            taskQueue.remove(task.id);
        }
    }
    var scannerInstance = undefined;
    var taskQueue = new LinkedHashMap();
    function scanner() {
        var taskItr = taskQueue.getIterator();
        var task;
        while (taskItr.hasMore()) {
            task = taskItr.nextValue();
            task.checkChange();
        }
    }
    function addIntervalTask(task) {
        if (!scannerInstance)
            scannerInstance = setInterval(scanner, 100);
        if (!taskQueue.has(task.id))
            taskQueue.add(task.id, task);
    }
    function removeIntervalTask(id) {
        if (taskQueue.has(id)) {
            taskQueue.remove(id);
        }
        if (taskQueue.isEmpty()) {
            clearInterval(scannerInstance);
            scannerInstance = undefined;
        }
    }
    function hookChange(task) {
        // var dom = task.domElem; no need use any more.
        
        addIntervalTask(task);
        /* fix the memory leak issue , MutationObserver profoundly degrades the performance.
         * please see https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Events/Mutation_events?redirectlocale=en-US&redirectslug=Web%2FGuide%2FDOM%2FEvents%2FMutation_events
         * so use interval approach for all browsers to watch properties change.
        if (typeof (MutationObserver) == "function" 
                || UADetector.isFirefox && parseInt(UADetector.version())>=14 
                || UADetector.isChrome && parseInt(UADetector.version())>=18) {
            addEventHandler(task.id);
        } else {
            // for browsers not support dom attributes change event, add a
            // iterval task to check properties changes.
            addIntervalTask(task);
        }
        */
    }
    function __watcher(id) {
        var task = taskQueue.get(id);
        if (!task)
            return;
        var dom = task.domElem;
        if (!task.callback)
            return;

        var changed = false;
        var i = 0;
        var changedProps = [];
        for ( var l = task.cssProps.length; i < l; i++) {
            var newVal = css(dom, task.cssProps[i]);
            if (task.lastestVals[i] != newVal) {
                task.lastestVals[i] = newVal;
                changed = true;
                changedProps.push(task.cssProps[i]);
            }
        }
        if (changed)
            // task.callback.call(caller, changedProps);
            task.callback(changedProps);
    }
    // var caller;
    var DomWatcher = {
        /**
         * watch a dom element on specific css properties, if change, excute
         * callback func, callback parameter is an array of changed properties
         * 
         * @param dom
         *            element to watch
         * @param props
         *            properties on element to watch, input as a string,
         *            properties should be seperated by comma ','
         *            valid properties are {position|size|show}
         * @param func
         *            function to execute on properties change, when calling
         *            DomWatcher.watch
         * @return generated watcher id
         */
        watch : function(dom, props, func) {
            // caller = this.watch.caller;
            var id = nextWatcherId();
            var task = {
                id : id,
                domElem : dom,
                cssProps : props.split(","),
                lastestVals : [ props.split(",").length ],
                callback : func,
                checkChange : function() {
                    __watcher(id);
                }
            };

            for ( var i = 0, len = task.cssProps.length; i < len; i++) {
                task.lastestVals[i] = css(dom, task.cssProps[i]);
            }
            if (!taskQueue.has(task.id))
                taskQueue.add(task.id, task);
            hookChange(task);
            return id;
        },
        unwatch : function(id) {
            var task = taskQueue.get(id);
            if (task){
                var dom = task.domElem;
                try{
                	removeIntervalTask(task.id);
                }catch(e){  // ignore if element was already unbound
                	
                }
                
                /* fix the memory leak issue , MutationObserver profoundly degrades the performance.
                 * please see https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Events/Mutation_events?redirectlocale=en-US&redirectslug=Web%2FGuide%2FDOM%2FEvents%2FMutation_events
                 * so use interval approach for all browsers to unwatch properties change.
                 * 
                try {
                    if (typeof (MutationObserver) == "function" 
                || UADetector.isFirefox && parseInt(UADetector.version())>=14 
                || UADetector.isChrome && parseInt(UADetector.version())>=18) {
                        removeFromEventHandler(task);
                    } else
                        removeIntervalTask(task.id);
                }
                // ignore if element was already unbound
                catch (e) {
                }
                */
            }
        }
    };
    return DomWatcher;
});
define('sap/viz/mvc/Event',['sap/viz/base/Class'],
function Setup(Class) {
	var Event = Class.define({
		/**
		 * Event class
		 * 
		 * @name sap.viz.mvc.Event
		 * @constructor
		 */
		constructor : function(type, target, canBubbling) {
			this.type = type;
			this.target = target;
			this.currentTarget = target;
			this.timestamp = Date.now();
			this.load = undefined;
			this._canBubbling = canBubbling !== undefined ? canBubbling : true;
		},

		/**
		 * Whether the event is in the bubbling phase
		 * 
		 * @name sap.viz.mvc.Event#isInBubbling
		 * @function
		 * @returns {Boolean}
		 * 
		 */
		isInBubbling : function() {
			return this.target.id !== this.currentTarget.id;
		},
		/**
		 * Whether the event should be bubbled
		 * 
		 * @name sap.viz.mvc.Event#shouldBubble
		 * @function
		 * @returns {Boolean}
		 * 
		 */
		shouldBubble : function() {
			return this._canBubbling;
		},
		/**
		 * Stop the event propagation in the bubbling phase
		 * 
		 * @name sap.viz.mvc.Event#stopPropagation
		 * @function
		 * 
		 */
		stopPropagation : function() {
			this._canBubbling = false;
		}
	});

	return Event;
});
define('sap/viz/mvc/MouseEvent',['sap/viz/mvc/Event'],
function Setup(Event) {
	/**
	 * This class defines Mouse Event
	 * 
	 * @name sap.viz.mvc.MouseEvent
	 * @class
	 * @augments sap.viz.mvc.Event
	 */
	var MouseEvent = Event.extend(
	/**
	 * @lends sap.viz.mvc.MouseEvent
	 * 
	 */
	{
		constructor : function(type, target, canBubbling, localXY, pageXY) {
			this.relatedTarget = undefined;
			this.targetLocalXY = localXY;
			this.currentLocalXY = localXY;
			this.pageXY = pageXY;
		}
	});
	return MouseEvent;
});
define('sap/viz/mvc/TouchEvent',['jquery', 'sap/viz/base/utils/FunctionUtils','sap/viz/mvc/Event', 'sap/viz/lang/langManager'],
function Setup($,FuncUtils, Event, langManager) {
	if (!$) {
		FuncUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_FIND_JQUERY'));
	}
	/**
	 * Touch class
	 * 
	 * @name sap.viz.mvc.Touch
	 * @constructor
	 */
	var Touch = function(identifier, target, localXY, pageXY) {
		this.identifier = identifier;
		this.target = target;
		this.localXY = localXY;
		this.pageXY = pageXY;
	};
	/**
	 * Touch List class
	 * 
	 * @name sap.viz.mvc.TouchList
	 * @constructor
	 */
	var TouchList = function(tArray, tMap) {
		this.tA = tArray, this.tM = tMap;
	};

	var tlp = TouchList.prototype;
	/**
	 * Return the length of the list
	 * 
	 * @name sap.viz.mvc.TouchList#length
	 * @function
	 * @returns {Number}
	 * 
	 */
	tlp.length = function() {
		return this.tA.length;
	};
	/**
	 * Get the touch at specified index
	 * 
	 * @name sap.viz.mvc.TouchList#item
	 * @function
	 * @param {Number}
	 *            index
	 * @returns {sap.viz.mvc.Touch}
	 */
	tlp.item = function(index) {
		if (index >= 0 && (index < this.tA.length)) {
			return this.tA[index];
		}
	};
	/**
	 * Get the touch with specified identifier
	 * 
	 * @name sap.viz.mvc.TouchList#identifiedTouch
	 * @function
	 * @param {Number}
	 *            identifier
	 * @returns {sap.viz.mvc.Touch}
	 */
	tlp.identifiedTouch = function(identifier) {
		if (identifier) {
			return this.tM[identifier];
		}
	};
	/**
	 * This class defines Touch Event
	 * 
	 * @name sap.viz.mvc.TouchEvent
	 * @class
	 * @augments sap.viz.mvc.Event
	 */
	var TouchEvent = Event.extend(
	/**
	 * @lends sap.viz.mvc.TouchEvent
	 * 
	 */
	{
		constructor : function(type, target, canBubbling, touches, targetTouches, changedTouches) {
			this.touches = touches;
			this.targetTouches = targetTouches;
			this.changedTouches = changedTouches;
		}
	});
	var _buildTouchListFromTouchList = function(touchlist) {
		var tArray = [], tMap = {};
		for ( var i = 0, targetComp, touch, len = touchlist.length; i < len; i++) {
			targetComp = _findTargetComp(touchlist[i]);
			if (targetComp) {
				// We only consider the touches originated from RIV component
				touch = _buildTouch(touchlist[i], targetComp);
				tArray.push(touch);
				tMap[touch.identifier] = touch;
			}
		}
		return new TouchList(tArray, tMap);
	};

	var _buildTouchListFromTouchArray = function(touchArray) {
		var tArray = [], tMap = {};
		for ( var i = 0, targetComp, touch, len = touchArray.length; i < len; i++) {
			targetComp = _findTargetComp(touchArray[i]);
			if (targetComp) {
				// We only consider the touches originated from RIV component
				touch = _buildTouch(touchArray[i], targetComp);
				tArray.push(touch);
				tMap[touch.identifier] = touch;
			}
		}
		return new TouchList(tArray, tMap);
	};

	var _findTargetComp = function(touch) {
		var cnode = $(touch.target);
		while (cnode.length && !cnode.data('selfComp')) {
			cnode = cnode.parent();
		}
		return cnode.data('selfComp');
	};

	var _buildTouch = function(touch, targetComp) {
		var targetCompPagePosition = targetComp.pagePosition();
		var localXY = {
			x : touch.pageX - targetCompPagePosition.x,
			y : touch.pageY - targetCompPagePosition.y
		};
		// binding to UIComponent instead of Element
		return new Touch(touch.identifier, targetComp, localXY, {
			x : touch.pageX,
			y : touch.pageY
		});
	};
	TouchEvent.buildFrom3TouchArray = function(type, target, touches, changedTouches, targetTouches, canBubbling) {
		var _touches = _buildTouchListFromTouchArray(touches);
		var _targetTouches = _buildTouchListFromTouchArray(targetTouches);
		var _changedTouches = _buildTouchListFromTouchArray(changedTouches);
		return new TouchEvent(type, target, canBubbling, _touches, _targetTouches, _changedTouches);
	};
	TouchEvent.buildFromDomTouchEvent = function(type, target, domTouchEvent, canBubbling) {
		var _touches = _buildTouchListFromTouchList(domTouchEvent.touches);
		var _targetTouches = _buildTouchListFromTouchList(domTouchEvent.targetTouches);
		var _changedTouches = _buildTouchListFromTouchList(domTouchEvent.changedTouches);
		return new TouchEvent(type, target, canBubbling, _touches, _targetTouches, _changedTouches);
	};
	return TouchEvent;
});
define('sap/viz/base/Math',['sap/viz/base/UADetector'],
function Setup(UADetector) {
    var OptMath = {
        PI : Math.PI,
        E : Math.E,
        LN10 : Math.LN10,
        LN2 : Math.LN2,
        LOG2E : Math.LOG2E,
        LOG10E : Math.LOG10E,
        SQRT1_2 : Math.SQRT1_2,
        SQRT2 : Math.SQRT2,

        abs : (function() {
            if(UADetector.isSafari() || (UADetector.isIE() && parseFloat(UADetector.version()) < 9)) {
                return function(n) {
                    return n < 0 ? -n : n;
                };
            } else {
                return Math.abs;
            }
        })(),

        acos : (function() {
            return Math.acos;
        })(),

        asin : (function() {
            return Math.asin;
        })(),

        atan : (function() {
            return Math.atan;
        })(),

        atan2 : (function() {
            return Math.atan2;
        })(),

        /**
         * Get the ceil of a number.
         *
         * @name sap.viz.base.Math#ceil
         * @function
         * @param {n}
         *            n must not be NaN
         * @returns {Number} the ceil of number
         */
        ceil : (function() {
            // if (UADetector.isFirefox()) {
            // return function(n) {
            // var i = n | 0;
            // return n <= 0 ? i : (i == n ? i : i + 1);
            // };
            // }
            // else if (UADetector.isChrome()) {
            // return function(n) {
            // return n <= 0 ? n | 0 : Math.ceil(n);
            // };
            // }
            // else {
            return Math.ceil;
            // }
        })(),

        cos : (function() {
            return Math.cos;
        })(),

        exp : (function() {
            return Math.exp;
        })(),

        /**
         * Get the floor of a number.
         *
         * @name sap.viz.base.Math#floor
         * @function
         * @param {n}
         *            n must not be NaN
         * @returns {Number} the floor of number
         */
        floor : (function() {
            // if(UADetector.isFirefox()) {
            // return function(n) {
            // var a = n | 0;
            // return n < 0 ? (a == n ? a : a - 1) : a;
            // };
            // } else
            return Math.floor;
        })(),

        log : (function() {
            return Math.log;
        })(),

        /**
         * Get the maximum number in an array.
         *
         * @name sap.viz.base.Math#max
         * @function
         * @param {array}
         *            array must be an array of Number
         * @returns {Number} the maximum number in array
         */
        max : (function() {
            // if(UADetector.isIE() && parseFloat(UADetector.version()) < 9) {
                return Math.max;
            // } else
                // return function() {
                    // var max = arguments[0];
                    // var length = arguments.length;
                    // for(var i = 1; i < length; i++) {
                        // max = arguments[i] > max ? arguments[i] : max;
                    // }
                    // return max;
                // };
        })(),

        /**
         * Get the minimum number in an array.
         *
         * @name sap.viz.base.Math#min
         * @function
         * @param {array}
         *            array must be an array of Number
         * @returns {Number} the minimum number in array
         */
        min : (function() {
            // if(UADetector.isIE() && parseFloat(UADetector.version()) < 9) {
                return Math.min;
			// }
			// else return function(){
		        // var min = arguments[0];
		        // var length = arguments.length;
				// for (var i=1; i<length; i++){
					// min = arguments[i] > min ? min : arguments[i];
				// }
				// return min;
            // };
        })(),

        pow : (function() {
            return Math.pow;
        })(),

        random : (function() {
            return Math.random;
        })(),

        /**
         * Get the round of a number.
         *
         * @name sap.viz.base.Math#round
         * @function
         * @param {n}
         *            n must not be NaN
         * @returns {Number} the round of number
         */
        round : (function() {
            return Math.round;
            //			if(UADetector.isFirefox() || (UADetector.isIE() && parseFloat(UADetector.version()) < 9)){
            //				return function(n) {
            //					return (n >= 0) ? (n + 0.5) | 0 : (n - 0.4999999999999999) | 0;
            //				};
            //			}
            //			else if(UADetector.isChrome()){
            //				return function(n) {
            //					return Math.floor(n + 0.5);
            //				};
            //			}
            //			else return Math.round;
        })(),

        sin : (function() {
            return Math.sin;
        })(),

        sqrt : (function() {
            return Math.sqrt;
        })(),

        tan : (function() {
            return Math.tan;
        })()
    };
    return OptMath;
});
define('sap/viz/mvc/VizFrame',['sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/DomUtils','sap/viz/base/UADetector','sap/viz/mvc/UIComponent',
'sap/viz/mvc/GestureDetector','sap/viz/base/utils/DomWatcher','sap/viz/mvc/Event',
'sap/viz/mvc/MouseEvent','sap/viz/mvc/TouchEvent','sap/viz/base/Math', 'sap/viz/lang/langManager','sap/viz/base/utils/TypeUtils'],
function Setup(FuncUtils, D, UADetector, UIComponent, GestureDetector,
        DomWatcher, Event, MouseEvent, TouchEvent, Math, langManager, TypeUtils) {
     var ArrayPush = Array.prototype.push;
    var error = FuncUtils.error;
    var isMobile = UADetector.isMobile();
    var cacheX, cacheY, cacheTime;
    var _maxDistance = 50;
    // Defines the maximum and minimum time for each tap
    var _maxTapTime = 150;
    var _minTapTime = 20;
    function isInDOM(el) {
        while (el = el.parentNode)
            if (el === document)
                return true;
        return false;
    }

    function getHittedComponent(event) {
        var domEntity = D(event.target);
        while (domEntity.length() && !(domEntity.data('selfComp') && domEntity.data('selfComp').root === this.root)) {
            domEntity = domEntity.parent();
        }
        return domEntity.length() ? domEntity.data('selfComp') : null;
    }

    var ts = GestureDetector.TransitionState;

    function regDOMEventHandlers() {
        var handler = handleDomEvent.bind(this);
        D(this.container).bind('click', handler);
        D(this.container).bind('dblclick', handler);
        D(this.container).bind('focusin', handler);
        D(this.container).bind('focusout', handler);
        D(this.container).bind('focus', handler);
        D(this.container).bind('blur', handler);
        D(this.container).bind('mousedown', handler);
        D(this.container).bind('mouseup', handler);
        D(this.container).bind('mouseenter', handler);
        D(this.container).bind('mouseleave', handler);
        D(this.container).bind('mousemove', handler);
        // Below events are supposed to be fired when the
        // element is attached/detached to/from document,
        // it's used to register touch listener correctly in
        // iOS Mobile Safari.
        if (UADetector.isWindowsSurface()) { 
            registerDOMTouchHandler.call(this);
        } else {
            D(this.container).bind('DOMNodeInsertedIntoDocument',
                    registerDOMTouchHandler.bind(this));
            D(this.container).bind('DOMNodeRemovedFromDocument',
                    unregisterDOMTouchHandler.bind(this));
        }
    }

    function registerDOMTouchHandler() {
        var handler = handleDomEvent.bind(this);

        if (UADetector.isWindowsSurface()) {
            D(this.container).bind('pointerdown', handler);
            D(this.container).bind('pointermove', handler);
            D(this.container).bind('pointerup', handler);
            D(this.container).bind('pointercancel', handler);
        } else {
            D(this.container).bind('touchstart', handler);
            D(this.container).bind('touchmove', handler);
            D(this.container).bind('touchend', handler);
            D(this.container).bind('touchcancel', handler);           
        }

    }

    function unregisterDOMTouchHandler() {
        if (UADetector.isWindowsSurface()) {
            D(this.container).unbind('pointerdown');
            D(this.container).unbind('pointermove');
            D(this.container).unbind('pointerup');
            D(this.container).unbind('pointercancel');
        } else {
            D(this.container).unbind('touchstart');
            D(this.container).unbind('touchmove');
            D(this.container).unbind('touchend');
            D(this.container).unbind('touchcancel');
        }
    }

    var _distance = function(xy1, xy2) {
        var dx = xy1.x - xy2.x;
        var dy = xy1.y - xy2.y;
        return Math.sqrt(dx * dx + dy * dy);
    };

    function pointEvent2TouchEvent (event) {
        if (event.type === 'pointerdown' || event.type === 'pointermove' || event.type === 'pointerup' || event.type === 'pointercancel') {
            event.touches = []; event.changedTouches=[]; event.targetTouches=[];
            var touch = {};
            touch.clientX = event.clientX;
            touch.clientY = event.clientY;
            touch.pageX = event.pageX;
            touch.pageY = event.pageY;
            touch.screenX = event.screenX;
            touch.screenY = event.screenY;
            touch.identifier = event.pointerId;
            touch.target=event.target;
            event.touches.push(touch);
            event.changedTouches.push(touch);
            event.targetTouches.push(touch);
        }
    }

    function handleDomEvent(event) {
        var hittedComp = getHittedComponent.call(this, event), e;
        pointEvent2TouchEvent(event);
        var eventStart = (event.type === 'touchstart') ? 'touchstart' : 'pointerdown',
            eventMove = (event.type === 'touchmove') ? 'touchmove' : 'pointermove',
            eventEnd = (event.type === 'touchend') ? 'touchend' : 'pointerup',
            eventCancel = (event.type === 'touchcancel') ? 'touchcancel' : 'pointerup';        
        switch (event.type) {
        case 'mousemove':
            if (isMobile && this._suppressMouseOnMobile) {
                event.preventDefault();
                break;
            }
            if (hittedComp) {
                var hittedCompPageXY = hittedComp.pagePosition();
                var localPoint = {
                    x : event.pageX - hittedCompPageXY.x,
                    y : event.pageY - hittedCompPageXY.y
                };
                if (this._msTracking.length) {
                    if (this._msTracking[this._msTracking.length - 1] !== hittedComp) {
                        var enteredComps = [];
                        var entered = hittedComp;
                        while (entered) {
                            enteredComps.push(entered);
                            entered = entered.parent;
                        }
                        var inCompCount = 0, checkFinished = false, minLen = Math
                                .min(this._msTracking.length,
                                        enteredComps.length);
                        while (true) {
                            var left = undefined;
                            if (!checkFinished
                                    && this._msTracking[inCompCount] === enteredComps[enteredComps.length
                                            - 1 - inCompCount]) {
                                inCompCount++;
                                checkFinished = inCompCount === minLen;
                            } else {
                                while (this._msTracking.length > inCompCount) {
                                    left = this._msTracking.pop();
                                    e = new MouseEvent('mouseleave', left,
                                            false, left.pointFrom(localPoint,
                                                    hittedComp), {
                                                x : event.pageX,
                                                y : event.pageY
                                            });
                                    e.relatedTarget = hittedComp;
                                    // load property of the dom event is used as
                                    // the vehicle to transfer information to
                                    // component event
                                    e.load = event.load;
                                    left.fireMouseEvent(e);
                                }
                                while (inCompCount < enteredComps.length) {
                                    var entered = enteredComps.shift();
                                    left = this._msTracking[enteredComps.length - 1];
                                    this._msTracking[enteredComps.length] = entered;
                                    e = new MouseEvent('mouseenter', entered,
                                            false, entered.pointFrom(
                                                    localPoint, hittedComp), {
                                                x : event.pageX,
                                                y : event.pageY
                                            });
                                    e.relatedTarget = left;
                                    e.load = event.load;
                                    entered.fireMouseEvent(e);
                                }
                                break;
                            }
                        }
                    }
                } else {
                    var entered = hittedComp, e;
                    do {
                        this._msTracking.push(entered);
                        e = new MouseEvent('mouseenter', entered, false,
                                localPoint, {
                                    x : event.pageX,
                                    y : event.pageY
                                });
                        e.load = event.load;
                        entered.fireMouseEvent(e);
                        entered = entered.parent;
                    } while (entered)
                    this._msTracking.reverse();
                }
                e = new MouseEvent('mousemove', hittedComp, true, localPoint, {
                    x : event.pageX,
                    y : event.pageY
                });
                e.load = event.load;
                hittedComp.fireMouseEvent(e);
            } else {
                while (this._msTracking.length) {
                    var left = this._msTracking.pop();
                    var framePagePosition = this.pagePosition();
                    e = new MouseEvent('mouseleave', left, false, {
                        x : event.pageX - framePagePosition.x,
                        y : event.pageY - framePagePosition.y
                    }, {
                        x : event.pageX,
                        y : event.pageY
                    });
                    e.load = event.load;
                    left.fireMouseEvent(e);
                }
            }
            break;
        case 'mouseleave':
            if (isMobile && this._suppressMouseOnMobile) {
                event.preventDefault();
                break;
            }
            while (this._msTracking.length) {
                var left = this._msTracking.pop();
                var leftCompPageXY = left.pagePosition();
                e = new MouseEvent('mouseleave', left, false, {
                    x : event.pageX - leftCompPageXY.x,
                    y : event.pageY - leftCompPageXY.y
                }, {
                    x : event.pageX,
                    y : event.pageY
                });
                e.load = event.load;
                left.fireMouseEvent(e);
            }
            break;
        case 'mouseup':
            if (isMobile && this._suppressMouseOnMobile) {
                event.preventDefault();
                break;
            }
            if (hittedComp) {
                var hittedCompPageXY = hittedComp.pagePosition();
                e = new MouseEvent('mouseup', hittedComp, true, {
                    x : event.pageX - hittedCompPageXY.x,
                    y : event.pageY - hittedCompPageXY.y
                }, {
                    x : event.pageX,
                    y : event.pageY
                });
                e.load = event.load;
                hittedComp.fireMouseEvent(e);
            }
            break;
        case 'mousedown':
            if (isMobile && this._suppressMouseOnMobile) {
                event.preventDefault();
                break;
            }
            if (hittedComp) {
                var hittedCompPageXY = hittedComp.pagePosition();
                e = new MouseEvent('mousedown', hittedComp, true, {
                    x : event.pageX - hittedCompPageXY.x,
                    y : event.pageY - hittedCompPageXY.y
                }, {
                    x : event.pageX,
                    y : event.pageY
                });
                e.load = event.load;
                hittedComp.fireMouseEvent(e);
            }
            break;
        case 'dblclick':
            if (isMobile && this._suppressMouseOnMobile) {
                event.preventDefault();
                break;
            }
            if (hittedComp) {
                if (this._focusedComp) {
                    if (this._focusedComp.id !== hittedComp.id) {
                        e = new Event('blur', this._focusedComp, false);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                        e = new Event('focusout', this._focusedLayer, true);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                        this._focusedComp = hittedComp;
                        e = new Event('focus', this._focusedComp, false);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                        e = new Event('focusin', this._focusedComp, true);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                    }
                } else {
                    this._focusedComp = hittedComp;
                    e = new Event('focus', this._focusedComp, false);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                    e = new Event('focusin', this._focusedComp, true);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                }
                var hittedCompPageXY = hittedComp.pagePosition();
                e = new MouseEvent('dblclick', this._focusedComp, true, {
                    x : event.pageX - hittedCompPageXY.x,
                    y : event.pageY - hittedCompPageXY.y
                }, {
                    x : event.pageX,
                    y : event.pageY
                });
                e.load = event.load;
                this._focusedComp.fireMouseEvent(e);
            } else {
                if (this._focusedComp) {
                    e = new Event('blur', this._focusedLayer, false);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                    e = new Event('focusout', this._focusedLayer, true);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                    this._focusedComp = undefined;
                }
            }
            break;
        case 'click':
            if (isMobile && this._suppressMouseOnMobile) {
                event.preventDefault();
                break;
            }
            if (hittedComp) {
                if (this._focusedComp) {
                    if (this._focusedComp.id !== hittedComp.id) {
                        e = new Event('blur', this._focusedComp, false);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                        e = new Event('focusout', this._focusedComp, true);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                        this._focusedComp = hittedComp;
                        e = new Event('focus', this._focusedComp, false);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                        e = new Event('focusin', this._focusedComp, true);
                        e.load = event.load;
                        this._focusedComp.fireFocusEvent(e);
                    }
                } else {
                    this._focusedComp = hittedComp;
                    e = new Event('focus', this._focusedComp, false);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                    e = new Event('focusin', this._focusedComp, true);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                }
                var hittedCompPageXY = hittedComp.pagePosition();
                e = new MouseEvent('click', this._focusedComp, true, {
                    x : event.pageX - hittedCompPageXY.x,
                    y : event.pageY - hittedCompPageXY.y
                }, {
                    x : event.pageX,
                    y : event.pageY
                });
                e.load = event.load;
                this._focusedComp.fireMouseEvent(e);
            } else {
                if (this._focusedComp) {
                    e = new Event('blur', this._focusedComp, false);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                    e = new Event('focusout', this._focusedComp, true);
                    e.load = event.load;
                    this._focusedComp.fireFocusEvent(e);
                    this._focusedComp = undefined;
                }
            }
            break;
        case 'pointerdown':
        case 'touchstart':
            //!isMobile || event.preventDefault();
            for ( var i = 0, touch, changedTouches = event.changedTouches, len = changedTouches.length; i < len; i++) {
                touch = changedTouches[i];
                // 'false' means the touch hasn't been
                // marked
                // cancelled
                this._touchSeqTracking[touch.identifier] = false;
            }

            // Handle gesture Detection
            handleGestureDetect.call(this, hittedComp, event);
            e = TouchEvent.buildFromDomTouchEvent(eventStart, hittedComp,
                    event);
            e.load = event.load;
            hittedComp.fireTouchEvent(e);
            // caching the current x
            cacheX = touch.pageX;
            // caching the current y
            cacheY = touch.pageY;
            cacheTime = event.timeStamp;
            break;
        case 'pointermove':
        case 'touchmove':
            //!isMobile || event.preventDefault();
            // Handle gesture Detection and fire touchmove
            // event when no gesture currently detected
            if (!handleGestureDetect.call(this, hittedComp, event)) {
                e = TouchEvent.buildFromDomTouchEvent(eventMove, hittedComp, event);
                e.load = event.load;
                hittedComp.fireTouchEvent(e);
            }
            break;
        case 'pointerup':
        case 'touchend':
            if (!hittedComp) {
                return;
            }

            //!isMobile || event.preventDefault();
            // Handle gesture Detection
            handleGestureDetect.call(this, hittedComp, event);
            var uncancelledTouchesArray = [], cancelledTouchesArray = [], touchesArray = [], targetTouchesArray = [];
            for ( var i = 0, touch, changedTouches = event.changedTouches, len = changedTouches.length; i < len; i++) {
                touch = changedTouches[i];
                this._touchSeqTracking[touch.identifier] === true ? cancelledTouchesArray
                        .push(touch)
                        : uncancelledTouchesArray.push(touch);
                delete this._touchSeqTracking[touch.identifier];
            }

            if (uncancelledTouchesArray.length) {
                // Some touches are not cancelled, so we
                // have to split the event into two events,
                // one for cancelled touches, one for
                // uncancelled touches
                for ( var i = 0, touch, targetTouches = event.targetTouches, len = targetTouches.length; i < len; i++) {
                    touch = targetTouches[i];
                    targetTouchesArray.push(touch);
                }
                for ( var i = 0, touch, touches = event.touches, len = touches.length; i < len; i++) {
                    touch = touches[i];
                    touchesArray.push(touch);
                }
                e = TouchEvent
                        .buildFrom3TouchArray(eventCancel, hittedComp,
                                touchesArray, cancelledTouchesArray,
                                targetTouchesArray);
                e.load = event.load;
                hittedComp.fireTouchEvent(e);
                e = TouchEvent.buildFrom3TouchArray(eventEnd, hittedComp,
                        touchesArray, uncancelledTouchesArray,
                        targetTouchesArray);
                e.load = event.load;
                hittedComp.fireTouchEvent(e);
            } else {
                // All ended touches are marked as cancelled
                e = TouchEvent.buildFromDomTouchEvent(eventCancel,
                        hittedComp, event);
                e.load = event.load;
                hittedComp.fireTouchEvent(e);
            }
            var distance = _distance({x: cacheX, y: cacheY}, {x: touch.pageX, y: touch.pageY});
            var tapTime = event.timeStamp - cacheTime;
            
            if(event.touches.length>0){
                break;
            } else {
                //We don't break the touchend event if the event.touches.length is smaller than 0, so it will force to trigger touchcancel event. 
                //This is a fix for android device which may missing fire a touchcancel after touchend with multi touches.
        //TODO:Add util to check the OS type.
                var agent = navigator.userAgent;
                var is_Android = /Android/i.test(agent); 
                if(!is_Android){
                    break;
                }
            }
           
        case 'pointercancel':
        case 'touchcancel':
            !isMobile || event.preventDefault();
            // Handle gesture Detection
            handleGestureDetect.call(this, hittedComp, event);
            for ( var i = 0, touch, changedTouches = event.changedTouches, len = changedTouches.length; i < len; i++) {
                touch = changedTouches[i];
                delete this._touchSeqTracking[touch.identifier];
            }
            e = TouchEvent.buildFromDomTouchEvent(eventCancel, hittedComp, event);
            e.load = event.load;
            hittedComp.fireTouchEvent(e);
            break;
        }
    }

    function handleGestureDetect(hittedComponent, origTouchEvent) {
        var grs = [];
        var thisLevel = hittedComponent;
        // find the gesture recognizers responsible for the
        // gesture detection of the component hierarchy
        do {
            ArrayPush.apply(grs, thisLevel.gestureDetectors);
        } while (thisLevel = thisLevel.parent)

        var someGestureDetected = false, gestureDetected, needToCancelTouches = false;
        for ( var i = 0, state, gd, len = grs.length; i < len; i++) {
            gd = grs[i];
            switch (origTouchEvent.type) {
            case 'pointerdown':
            case 'touchstart':
                gd.touchBegin(origTouchEvent);
                break;
            case 'pointermove':
            case 'touchmove':
                gd.touchMove(origTouchEvent);
                break;
            case 'pointerup':
            case 'touchend':
                gd.touchEnd(origTouchEvent);
                break;
            case 'pointercancel':
            case 'touchcancel':
                gd.touchCancel(origTouchEvent);
                break;
            }
            state = gd.state;
            gestureDetected = (state === ts.Began) || (state === ts.Changed)
                    || (state === ts.Recognized);
            someGestureDetected = someGestureDetected || gestureDetected;
            needToCancelTouches = needToCancelTouches
                    || (gestureDetected && gd.cancelTouches());
        }
        if (needToCancelTouches) {
            for ( var i = 0, touch, changedTouches = origTouchEvent.changedTouches, len = changedTouches.length; i < len; i++) {
                touch = changedTouches[i];
                // Mark all changed touch as cancelled
                this._touchSeqTracking[touch.identifier] = true;
            }
        }
        return someGestureDetected;
    }

    var VizFrame = UIComponent.extend({
        constructor : function(options) {
            options = options || {};
            if (options.holder) {
                
               

                this._holder = D(options.holder).get(0);

                D(this._holder).bind('DOMNodeInsertedIntoDocument', function() {
                    this.markAttached();
                }.bind(this));
                D(this._holder).bind('DOMNodeRemovedFromDocument', function() {
                    this.markDetached();
                }.bind(this));

                this.pin({
                    x : 0,
                    y : 0
                });
                // structure for event dispatching
                this._msTracking = [];
                this._touchSeqTracking = {};

                this.frame({
                    x : 0,
                    y : 0,
                    width : D(this._holder).width(),
                    height : D(this._holder).height()
                });
                this._watcherIds = [];
                // Zimo, 12/2/2014, to support createViz with customized size of chart
                // handle passed size object instead of using auto size
                var size = options.size;
                if (size && size.auto !== true 
                    && !TypeUtils.isNaN(size.width) && !TypeUtils.isNaN(size.height)
                    && size.width > 0 && size.height > 0) {
                    this.size(size);
                } else {
                    this.autoResizing = true;
                    this.autoResize();
                }
                this.clipToBound(false);
                
                this._suppressMouseOnMobile = false;
                regDOMEventHandlers.call(this);
                // this.container.appendTo(this._holder);
                this._holder.appendChild(this.container);
                this.markDetached();
                this.markHide();

                if (isInDOM(this._holder)) {
                    this.markAttached();
                }
                if (D(this._holder).css('display') === 'none'
                        || D(this._holder).css('visibility') === 'hidden' || D(this._holder).width() <= 0 || D(this._holder).height() <= 0) {
                    this._parentVisible = false;
                    this.markHide();
                } else {
                    this._parentVisible = true;
                    this.markShow();
                }
                this.root = this;
            } else {
                error(langManager.getLogMessage('IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME'));
            }
        },
        /**
            Ajust content size accordingly, on each time holder size changed. Set onoff=false to disable.
            In these cases, this feature may be failed:
            <pre>
            1. A div size is pixel value at first, but changed to percentage later.
            2. If the dom tree which the holder lays on changed, need to call autoResize again.
            </pre>
            @name sap.viz.mvc.VizFrame#autoResize
            @param {undefined|Boolean}
        */
        autoResize: function(onoff) {
            
            this._watcherIds.forEach(DomWatcher.unwatch);
            this._watcherIds = [];
            if(onoff === false){
                this.autoResizing = false;
                return;
            }
            this.autoResizing = true;
            this.size(true, D(this._holder).width(), D(this._holder).height());
            var onResize = function(dom, callback) {
                var percentSizeReg = /.*%/, 
                    dDom = D(dom), 
                    owidth = dDom.width(), 
                    oheight = dDom.height(), 
                    currentWatchedNode = dom;
                    
                function checkResized(){
                    if(dDom.width() !== owidth || dDom.height() !== oheight){
                        //return true;
                        callback();
                    }
                    return false;
                }
                this._watcherIds.push(DomWatcher.watch(dom, "width,height", callback));
                while((percentSizeReg.test(currentWatchedNode.style.width) || percentSizeReg.test(currentWatchedNode.style.height))
                            && currentWatchedNode !== undefined && currentWatchedNode.nodeName.toLowerCase() !== "html"){
                    
                    if(D(currentWatchedNode).css("position") !== "absolute"){
                         currentWatchedNode = D(currentWatchedNode).parent().get(0);
                    } else {
                        currentWatchedNode = D(currentWatchedNode).offsetParent();
                    }
                    this._watcherIds.push(DomWatcher.watch(currentWatchedNode, "width,height", checkResized));
                }
                
            }.bind(this);
            
            var resizeDelay;
            onResize(this._holder, function() {
                clearTimeout(resizeDelay);
                resizeDelay = setTimeout( function() {
                    this.size(true, D(this._holder).width(), D(this._holder).height());
                }.bind(this), 100);
            }.bind(this));
            
            return this;
        },
        size : function(){
            //get size, autoResizing
            if(arguments.length === 0){
                size = this._super.apply(this);
                size.auto = this.autoResizing;
                return size;
            }
            //check if callee is autoresize function
            if(arguments.length > 0 && arguments[0] == true){
                return this._super.apply(this, Array.prototype.slice.call(arguments, 1));
            }
            //set size
            var size = arguments[0];
            var currentSize = this.size();
            if (size) {
                if(size.width > 0 && size.height > 0){
                    size = size;
                } else if (size.width > 0 && currentSize.height > 0) {
                    size.height = currentSize.height;
                } else if (size.height > 0 && currentSize.width > 0) {
                    size.width = currentSize.width;
                } else if (size.height <= 0 && size.width <= 0) {
                    var ret =  this._super.apply(this, [size]);
                    this.autoResize(false);
                    this._parentVisible = false;
                    this.markHide();
                    return ret;
                } else {
                    return;
                }
                // workaround svg.getBBox() error in Firefox when containing div is display:none
                D(this.container).css('display', 'block');
                var ret =  this._super.apply(this, [size]);
                this.autoResize(false);
                this._parentVisible = true;
                this.markShow();
                return ret;
            }
        },
        suppressMouseOnMobile : function(onoff) {
            this._suppressMouseOnMobile = !!onoff;
        },
        doDestroy : function() {
            this._watcherIds.forEach(DomWatcher.unwatch);
            D(this._holder).unbind('DOMNodeInsertedIntoDocument');
            D(this._holder).unbind('DOMNodeRemovedFromDocument');
            D(this.container).unbind();
        },
        destroy : function() {
            this._super();
            this.doDestroy();
            this._msTracking = [];
            D(this.container).detach();
            this.container = null;
        }
    });
    return VizFrame;
});

define('sap/viz/mvc/UIController',['sap/viz/base/Class','sap/viz/base/utils/FunctionUtils','sap/viz/mvc/UIComponent'],
function Setup(Class, FuncUtils, UIComponent) {
	var noop = FuncUtils.noop;
	var Autosizing = UIComponent.Autosizing;
	var UIController = Class
			.define({
				/**
				 * The base class of Controller in VizKit MVC framework
				 * 
				 * @name sap.viz.mvc.UIController
				 * @constructor
				 */
				constructor : function(vizApp) {
					Object
							.defineProperties(
									this,
									{
										'application' : {
											value : vizApp,
											writable : false,
											enumerable : true,
											configurable : false
										},
										'rootUIComponent' : {
											value : new (this.constructor.prototype.RootComponentClass || UIComponent)(
													{
														size : {
															width : vizApp.vizFrame
																	.width(),
															height : vizApp.vizFrame
																	.height()
														},
														autoResizingMask : Autosizing.FlexibleWidth
																| Autosizing.FlexibleHeight,
														hidden : true,
														listeners : {
															'beforeShow' : this.beforeUIComponentAppear
																	.bind(this),
															'beforeHide' : this.beforeUIComponentDisappear
																	.bind(this),
															'afterShow' : this.afterUIComponentAppear
																	.bind(this),
															'afterHide' : this.afterUIComponentDisappear
																	.bind(this)
														}
													}),
											writable : true,
											enumerable : true
										}
									});
				},

				/**
				 * This method will be called automatically when app finishes
				 * launching.
				 * 
				 * @name sap.viz.mvc.UIController#initialize
				 * @param {Object}
				 *            the option passed in app's constructor
				 * @function
				 */
				initialize : noop,
				/**
				 * Fire the event supported by application which is declared in
				 * {@link sap.viz.mvc.VizApplication#getSupportedEvents}
				 * 
				 * @name sap.viz.mvc.UIController#fireAppEvent
				 * @function
				 */
				fireAppEvent : function(event, arguments) {
					this.application.fireEvent(event, arguments);
				},

				/**
				 * This method will be called when the managed UIComponent will
				 * become visible via set the hidden property
				 * 
				 * @name sap.viz.mvc.UIController#beforeUIComponentAppear
				 * @function
				 */
				beforeUIComponentAppear : noop,

				/**
				 * This method will be called after the managed UIComponent
				 * became visible via set the hidden property
				 * 
				 * @name sap.viz.mvc.UIController#afterUIComponentAppear
				 * @function
				 */
				afterUIComponentAppear : noop,
				/**
				 * This method will be called when the managed UIComponent will
				 * become visible via set the hidden property
				 * 
				 * @name sap.viz.mvc.UIController#beforeUIComponentDisappear
				 * @function
				 */
				beforeUIComponentDisappear : noop,
				/**
				 * This method will be called after the managed UIComponent
				 * became visible via set the hidden property
				 * 
				 * @name sap.viz.mvc.UIController#afterUIComponentDisappear
				 * @function
				 */
				afterUIComponentDisappear : noop,

				/**
				 * This method will be called when user apply a new theme, and
				 * if and only if the controller is the root controller.
				 * 
				 * @name sap.viz.mvc.UIController#doThemeApplied
				 * @function
				 * @param {String}
				 *            old the name of the old theme
				 * @param {String}
				 *            new the name of the new theme
				 */
				doThemeApplied : noop,

				/**
				 * This method will be called when user update the theme setting
				 * and if and only if the controller is the root controller.
				 * 
				 * @name sap.viz.mvc.UIController#doThemeUpdated
				 * @function
				 * @param {String}
				 *            key the key of the updated property
				 * @param {Object}
				 *            oldValue the old value
				 * @param {Object}
				 *            newValue the new value
				 */
				doThemeUpdated : noop,

				/**
				 * Default implementation is to destroy the component hierarchy
				 * it managed from the root. Subclass is encouraged to override
				 * this method to provide it's own implementation.
				 * 
				 * @name sap.viz.mvc.UIController#destroy
				 */
				destroy : function() {
					this.rootUIComponent.destroy();
					this.rootUIComponent = null;
				}
			});

	return UIController;
});
define('sap/viz/mvc/VizApplication',['sap/viz/base/Observable','sap/viz/base/utils/FunctionUtils','sap/viz/mvc/ThemeManager',
'sap/viz/mvc/ImageManager','sap/viz/mvc/VizFrame','sap/viz/mvc/UIComponent','sap/viz/mvc/UIController',
'sap/viz/base/Logger', 'sap/viz/lang/langManager'],
function Setup(Observable, FuncUtils, ThemeManager, ImageManager, VizFrame,
        UIComponent, UIController, LOG, langManager) {
    var noop = FuncUtils.noop, error = FuncUtils.error, unimplemented = FuncUtils.unimplemented, arrayPush = Array.prototype.push;
    var id = 0;
    function nextId() {
        return id++;
    }
    /**
     * The constructor of visualization.
     * 
     * @name sap.viz.mvc.VizApplication
     * @constructor
     * @param {Object}
     *            options The possible options could be:
     * 
     * <pre>
     * {
     *      id : 'ID_PREFIX',
     *      holder : 'Element', // The holder element
     *      launchOptions : 'Other Options', //the additional option that will pass to the
     *            {@link sap.viz.mvc.VizApplication#appDidFinishLaunching}
     * }
     * </pre>
     * 
     */
    var VizApplication = Observable.extend({
        /**
         * If there are images will be used in app, declares them here, app
         * launching process will make sure them loaded before finishing
         * launching.
         * 
         * @name sap.viz.mvc.VizApplication#images
         * @property todo
         */
        images : [],

        /**
         * Place holder for UIController subclass.
         * 
         * @name sap.viz.mvc.VizApplication#RootControllerClass
         * @property todo
         */
        RootControllerClass : UIController,

        constructor : function(options) {
            if (!arguments.length) {
                error(langManager.getLogMessage('IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE'));
            }
            var holder = options.holder, id = options.id;
            if (!holder) {
                error(langManager.getLogMessage('IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION'));
            }
            delete options.holder;
            delete options.id;
            var prototype = this.constructor.prototype;

            if (!(prototype.RootControllerClass)) {
                error(langManager.getLogMessage('IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER'));
            }

            this.appWillLaunch.apply(this, [ options ]);
            // Zimo, 12/2/2014, to support createViz with customized size of chart
            // pass in customized size object
            if (options.launchOptions && options.launchOptions.size) {
                var vizFrame = new VizFrame({
                    holder : holder,
                    size : options.launchOptions.size
                });    
            } else {
                var vizFrame = new VizFrame({
                    holder : holder
                }); 
            }

            var theme = ThemeManager.defaultTheme();
            Object.defineProperties(this, {
                'id' : {
                    value : id ? id + '_' + nextId() : 'VizApp_' + nextId(),
                    writable : false
                },
                'vizFrame' : {
                    value : vizFrame,
                    writable : false
                },
                'theme' : {
                    get : function() {
                        return theme;
                    },
                    set : function(value) {
                        theme = value;
                        if (ThemeManager.hasThemeInstalled(value)) {
                            theme !== value;
                            this.controller.doThemeApplied(theme);
                        }
                        return this;
                    }
                }
            });

            ThemeManager.on('defaultThemeChanged', function(oldDefault,
                    newDefault) {
                if (this._theme === oldDefault) {
                    this._theme = newDefault;
                    this.controller.doThemeApplied(newDefault);
                }
            }.bind(this), this.id);
            ThemeManager.on('themeSettingChanged', function(theme, key,
                    oldValue, newValue) {
                if (this._theme === theme) {
                    this.controller.doThemeUpdated(key, oldValue, newValue);
                }
            }.bind(this), this.id);

            var imagesToLoad = [];
            if (this.hasOwnProperty("images") && this.images) {
                arrayPush.apply(imagesToLoad, this.images);
            }
            arrayPush.apply(imagesToLoad, prototype.images);

            ImageManager.loadImages(imagesToLoad, undefined, function() {
                var rc = new prototype.RootControllerClass(this);
                Object.defineProperty(this, 'controller', {
                    value : rc,
                    writable : false,
                    enumerable : true,
                    configurable : false
                });
                var autoResize = this.vizFrame.size().auto;
                this.vizFrame.autoResize(false);
                this.vizFrame.append(rc.rootUIComponent);
                this.controller.initialize(options);
                this.appDidFinishLaunching.apply(this, [ options ]);
                this.vizFrame.autoResize(autoResize);
                rc.rootUIComponent.frame(0, 0, this.vizFrame.width(), this.vizFrame.height());
                rc.rootUIComponent.markShow();
            }.bind(this));
        },

        /**
         * This method will be called before the application starting to
         * launched. launchOptions(if any) will be passed as argument. Normally
         * you can declare any images that will be used.
         * 
         * @name sap.viz.mvc.VizApplication#appWillLaunch
         * @function
         * @param {Object}
         *            launchOption the launchOption which is passed in
         *            VizApplication constructor
         */
        appWillLaunch : noop,

        /**
         * This method will be called after the application fully launched. Any
         * visualization application specific initialization should be put here,
         * e.g. initialize necessary data structure.
         * 
         * @name sap.viz.mvc.VizApplication#appDidFinishLaunching
         * @function
         * @param {Object}
         *            launchOption the launchOption which is passed in
         *            VizApplication constructor
         */
        appDidFinishLaunching : noop,

        /**
         * Returns metadata about the current app instance. The metadata
         * contains 3 kinds of specification:SupportedEvent,
         * SupportedProperties, SupportedMethods
         * 
         * @name sap.viz.mvc.VizApplication#getMetadata
         * @function
         */
        getMetadata : unimplemented,

        /**
         * Subclass should implement this method to return plain object contains
         * the values of requested properties or all properties if no properties
         * 
         * 
         * @name sap.viz.mvc.VizApplication#getPropertyValues
         * @param {String}
         *            prop1
         * @param {String}
         *            prop2
         * @returns {Object} property bag
         * 
         */
        getPropertyValues : unimplemented,

        /**
         * Subclass should implement this method to accept a property bag.
         * 
         * 
         * 
         * @name sap.viz.mvc.VizApplication#setPropertyValues
         * @param {Object}
         *            property bag
         * 
         */
        setPropertyValues : unimplemented,

        /**
         * Destroy the viz application instance, after being destroyed calls to
         * this instance will not be gauranteed to return correctly
         * 
         * @name sap.viz.mvc.VizApplication#destroy
         */
        destroy : function() {
            ThemeManager.un('defaultThemeChanged', this.id);
            ThemeManager.un('themeSettingChanged', this.id);
            this.controller.destroy();
            this.vizFrame.destroy();
        }
    });

    return VizApplication;
});
define('sap/viz/style/Element',['jquery'],
function Setup($) {
  function StyleDef( value ) {
    this.update(value);
  }

  StyleDef.prototype = {
    toString : function() {
      var str = "", i;

      for (i in this) {
        if ( this.hasOwnProperty(i) ) {
          str += i + ":" + this[i] + ";";
        }
      }

      return str;
    },
    toAttrs : function( selection ) {
      for ( var i in this) {
        if ( this.hasOwnProperty(i) ) {
          selection.attr(i, this[i]);
        }
      }
    },
    update : function( obj ) {
      for ( var i in obj) {
        if ( obj.hasOwnProperty(i) ) {
          this[i] = obj[i];
        }
      }
    }
  };

  var html = document.documentElement, matches = html.matchesSelector || html.mozMatchesSelector ||
      html.webkitMatchesSelector || html.msMatchesSelector;

  function Element( el ) {

    if ( !el ) {
      var tempDoc = document.implementation.createHTMLDocument("");
      el = d3.select(tempDoc.body);
      if(tempDoc.domain !== document.domain){
        tempDoc.domain = document.domain;
      }
    }

    this.el = el;
  }

  Element.prototype = {
    destroy : function() {
      this.el = null;  
    },
    
    child : function( classNames, tagNames, defaultTagName, defaultStyle ) {
      if ( !Array.isArray(tagNames) ) {
        tagNames = [tagNames];
      }

      if ( !Array.isArray(classNames) ) {
        classNames = [classNames];
      }

      var el = this.el, create = false;
      var len = Math.max(tagNames.length, classNames.length);
      for ( var i = 0; i < len; i++) {
        var tagName = tagNames[i];
        var className = classNames[i];

        if ( !tagName && !className ) {
          create = true;
        }

        tagName = tagName || defaultTagName;

        if ( !create ) {
          var selector = tagName;
          if ( className ) {
            selector += "." + className.replace(" ", ".");
          }
          var node = el.node();
          var children = el.selectAll(selector).filter(function() {
            return this.parentNode === node;
          });

          if ( !children.empty() ) {
            el = children;
            continue;
          }

          create = true;
        }

        el = d3.select(el.node()).append(tagName).attr("class", className).datum({
          defaultStyle : new StyleDef(),
          currentStyle : new StyleDef(),
          userStyle : new StyleDef(),
          meta : {}
        });
      }

      var result = new Element(el);
      if ( defaultStyle ) {
        var data = el.datum();
        data.defaultStyle.update(defaultStyle);
        data.currentStyle.update(defaultStyle);
      }

      return result;
    },

    defaultStyle : function() {
      return this.el.datum().defaultStyle;
    },

    currentStyle : function() {
      return this.el.datum().currentStyle;
    },
    
    userStyle : function() {
      return this.el.datum().userStyle;
    },

    queryAll : function( selectorText ) {
      var result = [];
      this.el.selectAll(selectorText).each(function() {
        result.push(new Element(d3.select(this)));
      });
      return result;
    },

    match : function( selectorText ) {
      return matches.call(this.el.node(), selectorText);
    },

    update : function( selector, properties ) {
      var currentStyleValue = this.currentStyle();
      var userStyleValue = this.userStyle();
      var currentStylePriority = this.el.datum().meta;
      var styleManager = this.styleManager();
      $.each(properties, function( name, value ) {
        var currentPropertyPriority = currentStylePriority[name];
        var currentImportant = false, currentSelector;
        if ( currentPropertyPriority ) {
          currentImportant = currentPropertyPriority.important;
          currentSelector = currentPropertyPriority.selector;
        }
        var newImportant = value.important;
        if ( (newImportant && (!currentImportant || selector.nlt(currentSelector))) ||
            (!newImportant && !currentImportant && selector.nlt(currentSelector)) ) {
          currentStyleValue[name] = value.value;
          userStyleValue[name] = value.value;
          if ( !currentPropertyPriority ) {
            currentPropertyPriority = {};
            currentStylePriority[name] = currentPropertyPriority;
          }
          currentPropertyPriority.important = newImportant;
          currentPropertyPriority.selector = selector;
        }        
        if(styleManager && styleManager.module) {
          styleManager.applyProperty(selector.text, name, value.value);
        }
      });
      return this;
    },
    
    cleanChildren : function() {
      var node = this.el.node();
      var child;
      while ((child = node.firstChild)) {
        node.removeChild(child);
      }
      return this;
    }, 
        
    styleManager: function(_) {
      var node = this.el.node();
      if (!arguments.length) {
        if(node.styleManager) {
          return node.styleManager;
        }
        node = node.parentNode;
        while(node) {
          if(node.styleManager) {
            return node.styleManager;
          }
          node = node.parentNode;
        }
        return undefined;
      }
      node.styleManager = _;
      return this;
    }
  };

  return Element;
});
define('sap/viz/style/Manager',['jquery','sap/viz/style/Element'],
function Setup( $, Element ) {
  function StyleManager( sheets, moduleManifest, element, defaultTagName ) {
    var subEls = {};

    if ( !element ) {
      element = new Element();
    }

    this.el = element;
    this.el.styleManager(this);
        
    if ( moduleManifest ) {
      this.moduleProperties = moduleManifest.properties;
      var css = moduleManifest.css;
      if ( css ) {
        $.each(css, function( selector, obj ) {
          var className = selector.substring(1).replace(".", " ");
          var el = element.child(className, null, defaultTagName || "g", obj.value);
          className.split(" ").forEach(function( singleSelector ) {
            subEls[singleSelector] = el;
          });

          if ( sheets ) {
            sheets.forEach(function( sheet ) {
              sheet.iterate(function( selector, properties ) {
                if ( el.match(selector.text) ) {
                  el.update(selector, properties);
                }
              });
            });
          }
        });
      }
    }

    this.subEls = subEls;
    this.sheets = sheets;
    this.children = [];
    this.module = null;
  }

  StyleManager.prototype = {   
    query : function( selector ) {
      var currentNode = this.subEls[selector];
      if ( currentNode ) {
        return currentNode.currentStyle();
      }
    },

    queryDefault : function( selector ) {
      var currentNode = this.subEls[selector];
      if ( currentNode ) {
        return currentNode.defaultStyle();
      }
    },

    cssText : function( selector ) {
      return this.query(selector).toString();
    },

    child : function( moduleManifest, classNames, tagNames, defaultTagName ) {
      var c = new StyleManager(this.sheets, moduleManifest, this.el.child(classNames, tagNames, defaultTagName || "g"),
          defaultTagName);
      c.name = classNames ? classNames : undefined;    
      this.children.push(c);
      return c;
    },

    applyCSS : function( sheet ) {
        var root = this.el;
        sheet.rules.forEach(function( rule ) {
        rule.selectors.forEach(function( selector ) {
          root.queryAll(selector.text).forEach(function( match ) {
            match.update(selector, rule.properties);
          });
        });
      });
      return this;
    },
    
    applyProperty : function(selectorText, name, value) {
      var newProperties;
      var texts = selectorText.split(' ');
      var text = texts[texts.length - 1];
      for(var i in this.moduleProperties) {
        if(this.moduleProperties.hasOwnProperty(i) && this.moduleProperties[i] &&
            this.moduleProperties[i].cssClass && this.moduleProperties[i].cssClass.indexOf(text) >= 0) {
          var tempPro = (function buildProperties(pro) {                    
            if('Object' === pro.supportedValueType) {
              if(pro.cssClass && pro.cssClass.indexOf(text) < 0) {
                return null;
              }
              var res;
              var supportedValues = pro.supportedValues;
              for(var k in supportedValues) {
                if(supportedValues.hasOwnProperty(k)) {
                  var temp = buildProperties(supportedValues[k]);
                  if(temp) {
                    if(!res) {
                      res = {};
                    }
                    res[k] = temp;
                  }
                }                        
              }
              return res;
            }
            else {
                  if(function () {
                    if(!pro.cssStyle) {
                      return false;
                    }
                    var styles = pro.cssStyle.split(' ');
                    for(var m = 0; m < styles.length; m++) {
                      if(name === styles[m]) {
                        return true;
                      }
                    }
                    return false;
                  }()) {
                    return value;
                  }                                        
            }
          })(this.moduleProperties[i]);
          if(tempPro) {
            if(!newProperties) {
              newProperties = {};
            }
            newProperties[i] = tempPro;
          }
        }            
      }
      if(newProperties) {
        if(this.module && this.module.setProperties) {
          this.module.setProperties(newProperties);
        }
      }
      return this;
    },
    
    getCSS : function( sheet, prop ) {
      var res;
      var root = this.el;
      sheet.rules.forEach(function( rule ) {
        rule.selectors.forEach(function( selector ) {
          root.queryAll(selector.text).forEach(function( match ) {
            res = match.currentStyle()[prop];
          });
        });
      });
      return res;
    },
    
    getCurrentCSS : function(all) {
      var i = 0, j = 0, index = [], path = [], pathObj = {};
      var curr = this;
      var res = '';
      while(j >= 0) {
        if (i < curr.children.length) {
          index[j] = i;
          path[j] = curr.name;
          curr.children[i].parent = curr;
          curr = curr.children[i];
          j++;
          i = 0;
        } else {
          path[j] = curr.name;
          for (var k in curr.subEls) {
            if (curr.subEls.hasOwnProperty(k)) {
              var pathStr = '';
              var defStr = '';
              for (var n = 0; n < path.length; n++) {
                if (path[n]) {
                  pathStr += ' .' + path[n];
                }
              }
              pathStr += ' .' + k;
              
              if (pathObj.hasOwnProperty(pathStr)) {
                // avoid duplicated definition for multiple charts
                continue;
              }
              pathObj[pathStr] = null;
              
              var def = (all === true) ? curr.subEls[k].currentStyle() : curr.subEls[k].userStyle();
              for (var m in def) {
                if (def.hasOwnProperty(m)) {
                  defStr += m + ':' + def[m] + ';';
                }
              }
              if (defStr.length > 0) {
                pathStr += '{' + defStr + '}';
                res += pathStr;
              }
            }
          }
          
          curr = curr.parent;
          j--;
          i = index[j] + 1;
          path.pop();
        }
      }
      
      return res;
    },

    cleanChildren : function() {
      this.el.cleanChildren();
      return this;
    }
  };
  
  StyleManager.prototype.destroy = function(){
    if(this.el){
      this.el.destroy();
    }
    this.el = null;
    this.children = null;
  };

  return StyleManager;
});
define('sap/viz/util/fn/createContext',['jquery','sap/viz/style/Manager'],
function Setup( $, StyleManager ) {
  return function( moduleManifest, parentCtx, classNames, tagNames, paras ) {
    var styleManager = parentCtx.styleManager;
    if ( !styleManager ) {
      styleManager = new StyleManager();
    }
    styleManager = styleManager.child(moduleManifest, classNames, tagNames);
    var temp = {
      'styleManager' : styleManager,
      'destroy' : function(){
        for(var iter in this){
          if(this.hasOwnProperty(iter)){
            if(this[iter] && typeof this[iter].destroy === 'function'){
              this[iter].destroy();
              delete this[iter];
            }
          }
        }
      }
    };
    for ( var i in paras) {
      if (paras.hasOwnProperty(i)) {
        temp[i] = paras[i];
      }
    }
    $.each(parentCtx, function(key, value){
        if (key !== 'styleManager' && key !== 'destroy'){
            temp[key] = value;
        }
    });
    return temp;
  };
});
define('sap/viz/modules/manifests/Module',['sap/viz/manifest','sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/Objects','sap/viz/base/utils/TypeUtils',
'sap/viz/util/fn/createContext'],
function Setup(manifest, FunctionUtils, Objects, TypeUtils, createContext) {
  var KEEP_DEFINITION = true;
  function loadModule(modules, moduleConfig, moduleRefName) {
    var moduleId = moduleConfig.id;
    if (moduleId === undefined) {
      FunctionUtils.error("Cannot find module id in sub module config \"{0}\"",
          JSON.stringify(moduleConfig));
    }

    var module = manifest.module.get(moduleConfig.id, true);
    modules.push({
      module : module,
      config : moduleConfig,
      moduleRef : moduleRefName,
      subModules : module.subModules(moduleConfig, moduleRefName)
    });
  }

  function exactDefaultProperties(props, keepDefinition) {
    var defaultProps = {}, n, prop;
    for (n in props) {
      if (props.hasOwnProperty(n)) {
        prop = props[n];
        if (prop) {
          if (keepDefinition === true) {
            defaultProps[n] = Objects.extend(true, {}, prop);
          } else {
            defaultProps[n] = prop.supportedValueType === 'Object' ? exactDefaultProperties(
                prop.supportedValues, !KEEP_DEFINITION)
                : prop.defaultValue;
          }
        }
      }
    }
    return defaultProps;
  }
  /**
   * This is a instantce , which already have been registered into
   * {@link sap.viz.manifest.module}.</br> </br> Now, once an item is loaded
   * from {@link sap.viz.manifest.module}, it will automatically provide some
   * APIs .</br> </br>
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
   * @example  <caption>Sample Code:</caption>
   * var legend = manifest.module.get(legendID);
   * @see sap.viz.manifest.module#get
   * @class Built-in_Manifest_Objects.moduleManifest
   */
  manifest.registerCategory("module", function(obj) {
    var defaultPropertyValues;
    var allPropertyDefinitions;

    Object.defineProperties(obj, {
      subModules : {
        value : function(moduleConfig, parentRefName) {
          var subModules;
          var subModuleConfigs = Objects.extend(true, {}, moduleConfig.modules, moduleConfig.controllers);
          // TODO: fix those hard code when new layout is cheched in.
          if (!TypeUtils.isEmptyObject(subModuleConfigs)) {
            subModules = [];
            var subModuleConfig;
            for (var key in subModuleConfigs ){
              if (subModuleConfigs.hasOwnProperty(key)){
                subModuleConfig = subModuleConfigs[key];
                if (subModuleConfig) {
                  loadModule(subModules, subModuleConfig, parentRefName + '.' + key);
                }               
              }
            }
          }
          
          return subModules;
        }
      },
      /**
       * return properties of this module with or without definitions,
       * controlled by the parameter. if without definition, only default value
       * is returned for each property.
       * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
       * @method Built-in_Manifest_Objects.moduleManifest#props
       * @param {Boolean}
       *          withDefinition whether include definitions in the return
       *          object. by default false
       * @return {Object} properties of this module
       */
      props : {
        value : function(withDefinition) {
          if (withDefinition === KEEP_DEFINITION) {
            if (!allPropertyDefinitions) {
              allPropertyDefinitions = exactDefaultProperties(obj.properties,
                  KEEP_DEFINITION);
            }
            return allPropertyDefinitions;
          } else {
            if (!defaultPropertyValues) {
              defaultPropertyValues = exactDefaultProperties(obj.properties,
                  !KEEP_DEFINITION);
            }
            return Objects.extend(true, {}, defaultPropertyValues);
          }
        }
      },
      /**
       * execute the fn(function) defined in selected module. The default
       * argument of fn is the module self.</br>
       * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.       
       * @method Built-in_Manifest_Objects.moduleManifest#execute
       * @return {Object} the result of executing fn
       * @example  <caption>Sample Code:</caption>  
       * var moduleManifest = manifest.module.get(id);//get the item from module's manifest by id
       * var result = moduleManifest.execute();//execute the fn defined in the item
       */
      execute : {
        value : function( parentCtx, classNames, tagNames, paras ) {
           var fn = obj.fn;
           var ctx = classNames === true ? parentCtx : createContext(this, parentCtx, classNames, tagNames, paras);
           var ret;
          //TODO, Jimmy, temporary switch between old and new style, remove it when all modules have been migrated 
          if(fn.prototype.__new_style__){
            var target = new fn(obj, ctx);
            ret = function(selection){
               return target.render(selection);
            }
            for(var i in target){
              //if(target.hasOwnProperty(i)){
              if(typeof(target[i]) === 'function'){
                var targetFn = target[i];
                ret[i] = function(tFn){
                  return function(){
                    return tFn.apply(target, arguments);  
                  }
                }(targetFn);
              }
            }
            ret.instance = function (){
              return target;
            };
            
            ret.destroy = function(){
              if(target.destroy)
                target.destroy();
              target = null;
            };
            
          }else{
            ret = fn(obj, ctx); 
          }
          
          ctx.styleManager.module = ret;
          
          return ret;
        }
      }
    });
    return obj;
  });

  manifest.module.loadModule = loadModule;

  return manifest.module;
});
define('sap/viz/modules/GlobalConstants',[],
  function Setup() {
    var globalConstants = {
      Type: {
        Chart: 'CHART',
        Container: 'CONTAINER',
        Supplementary: 'SUPPLEMENTARY',
        Behavior: 'BEHAVIOR',
        Controller: 'CONTROLLER',

        Scientific: {
          Layout: 'Represents a layout algorithm'
        },

        Presentation: {
          Tooltip: 'Represents a tooltip'
        },

        ThirdParty: 'THIRDPARTY'
      },
      RenderTo: {
        SVG: 'SVG',
        DIV: 'DIV',
        NONE: 'NONE'
      },
      TRIGGER: {
        KEY: {
          API: {
            GET_SELECTION: 'Trigger_key_api_get_selection',
            SET_SELECTION: 'Trigger_key_api_set_selection',
          },
          CLICK_ON_DATAPOINT:'click_on_datapoint',
          CLICK_ON_NON_DATAPOINT:'click_on_non_datapoint',
          HOVER_ON_DATAPOINT:'hover_on_datapoint',
          HOVER_ON_NON_DATAPOINT:'hover_on_non_datapoint',
          HOVER_ON_LEGEND:'hover_on_legend',
          HOVER_ON_NON_LEGEND:'hover_on_non_legend',
          CLICK_ON_LEGEND:'click_on_legend',
          MOUSEUP_ON_LEGEND:'mouseup_on_legend',
          HOVER_ON_AXIS_LABEL:'hover_on_axis_label',
          HOVER_ON_NON_AXIS_LABEL:'hover_on_non_axis_label',
          CLICK_ON_AXIS_LABEL:'click_on_axis_label',
          MOUSEUP_ON_AXIS_LABEL:'mouseup_on_axis_label',
          LASSO_START_ON_EVENTLAYER:'lasso_start_on_eventLayer',
          LASSO_MOVE_ON_EVENTLAYER:'lasso_move_on_eventLayer',
          LASSO_END_ON_EVENTLAYER:'lasso_end_on_eventLayer',
          PAN_START_ON_EVENTLAYER:'pan_start_on_eventLayer',
          PINCH_START_ON_EVENTLAYER:'pinch_start_on_eventLayer',
          PINCH_MOVE_ON_EVENTLAYER:'pinch_move_on_eventLayer',
          PINCH_END_ON_EVENTLAYER:'pinch_end_on_eventLayer'
        },
        CSS: {
          MATCHMODE: {
            NEGATIVE: 'negative',
            POSITIVE: 'positive'
          }
        },
      },
      COLOR: {
        SAPColorSingleAxis: ["#748CB2", "#9CC677", "#EACF5E", "#F9AD79",
          "#D16A7C", "#8873A2", "#3A95B3", "#B6D949", "#FDD36C", "#F47958",
          "#A65084", "#0063B1", "#0DA841", "#FCB71D", "#F05620", "#B22D6E",
          "#3C368E", "#8FB2CF", "#95D4AB", "#EAE98F", "#F9BE92", "#EC9A99",
          "#BC98BD", "#1EB7B2", "#73C03C", "#F48323", "#EB271B", "#D9B5CA",
          "#AED1DA", "#DFECB2", "#FCDAB0", "#F5BCB4"
        ],

        SAPColorDualAxis1: ["#8FBADD", "#B8D4E9", "#7AAED6", '#A3C7E3',
          '#3D88C4', '#66A1D0', '#297CBE', '#5295CA', '#005BA3', '#146FB7',
          '#005395', '#0063B1'
        ],

        SAPColorDualAxis2: ["#F6A09B", "#F9C3C0", "#F58E88", '#F8B1AD',
          '#F05B52', '#F37D76', '#EE4A40', '#F16C64', '#D92419', '#ED382D',
          '#C52117', '#EB271B'
        ],
        SAPColorBulletReference:["#CCCCCC", "#ACA8A8", "#838282"]
      }
    };

    return globalConstants;
  });
define('sap/viz/util/makeInterfaceCompatible',[], function(){
   var makeInterfaceCompatible = function(module){
       //to compatible with new get/set interface design
       if(!module.setData && module.data){
           module.setData = function(){
               var ret = module.data.apply(module, arguments);
               return makeInterfaceCompatible(ret);
           };
           module.getData = module.data;
       }
       if(!module.setWidth && module.width){
           module.setWidth = function(){
               var ret = module.width.apply(module, arguments);
               return makeInterfaceCompatible(ret);
           };
           module.getWidth = module.width;
       }
       if(!module.setHeight && module.height){
           module.setHeight = function(){
               var ret = module.height.apply(module, arguments);
               return makeInterfaceCompatible(ret);
           };
           module.getHeight = module.height;
       }
       if(!module.setSize && module.size){
           module.setSize = function(){
               var ret = module.size.apply(module, arguments);
               return makeInterfaceCompatible(ret);
           };
           module.getSize = module.size;
       }
       if(!module.setProperties && module.properties){
           module.setProperties = function(){
               var ret = module.properties.apply(module, arguments);
               return makeInterfaceCompatible(ret);
           };
           module.getProperties = module.properties;
       }
       return module;
   };
   return makeInterfaceCompatible;
});
define('sap/viz/util/ignite',['sap/viz/base/utils/TypeUtils','sap/viz/modules/manifests/Module', 'sap/viz/util/makeInterfaceCompatible'],
function Setup( TypeUtils, manifest, makeInterfaceCompatible ) {
  return function( moduleId, parentCtx, classNames, tagNames, moduleParas ) {
    var moduleManifest;
    if ( TypeUtils.isString(moduleId) ) {
      moduleManifest = manifest.get(moduleId);
    } else {
      moduleManifest = moduleId;
      classNames = true;
    }

    return makeInterfaceCompatible(moduleManifest.execute(parentCtx, classNames, tagNames, moduleParas));
  };
});
define('sap/viz/style/Selector',[],
function Setup() {
  function Specificity( selectorText ) {
    this.b = 0;
    this.c = selectorText ? (selectorText.split('.').length - 1) : 0;
    this.d = 0;
  }

  Specificity.prototype = {
    nlt : function( s ) {

      if ( this.b === s.b ) {
        if ( this.c === s.c ) {
          return this.d >= s.d;
        }
        return this.c > s.c;
      }

      return this.b > s.b;
    }
  };

  function Selector( text ) {
    this.text = text;

    var specificity;
    Object.defineProperty(this, "specificity", {
      get : function() {
        if ( !specificity ) {
          specificity = new Specificity(text);
        }
        return specificity;
      }
    });
  }

  Selector.prototype = {
    nlt : function( s ) {
      if ( !s ) {
        return true;
      }
      return this.specificity.nlt(s.specificity);
    }
  };

  return Selector;
});
define('sap/viz/style/Sheet',['sap/viz/style/Selector'],
function Setup( Selector ) {
  function Sheet( source, id, notAppendDOM ) {
    this.source = source;
    var idSelector = (id && id.length > 0) ? "." + id + " " : "";

    var head = document.head;
    var styleElement = document.createElement("style");
    head.appendChild(styleElement);

    var sheet = styleElement.sheet;
    sheet.disabled = true;

    var ruleTexts = source.split("}");
    
    for ( var i = 0, len = ruleTexts.length - 1; i < len; i++) {
      if(ruleTexts[i].indexOf(",") < 0 || ruleTexts[i].indexOf(',') > ruleTexts[i].indexOf('{')){
         sheet.insertRule(idSelector + " " + ruleTexts[i] + "}", i);
      }else{
         var tempTexts = ruleTexts[i].split(",");
         var tempText = "";
         for(var k=0;k<tempTexts.length-1;k++){
            tempText = tempText + idSelector + tempTexts[k] + ",";
         }
         tempText += (idSelector + tempTexts[tempTexts.length-1]);
         
         sheet.insertRule(tempText + "}", i);
      }
    }

    this.rules = [];
    var cssRules = sheet.cssRules;
    for (i = 0, len = cssRules.length; i < len; i++) {
      var cssRule = cssRules[i];
       var selectorTexts = cssRule.selectorText.split(",");
       
      var selectors = selectorTexts.map(function( selector ) {
        return new Selector(selector.substring(idSelector.length,selector.length));
      });

      var properties = {};
      var style = cssRule.style;
      for ( var j = 0, styleLen = style.length; j < styleLen; j++) {
        var name = style[j];
        properties[name] = {
          value : style.getPropertyValue(name),
          important : style.getPropertyPriority(name) === "important"
        };
      }

      this.rules.push({
        selectors : selectors,
        properties : properties
      });
    }

    if (notAppendDOM) {
      head.removeChild(styleElement);
    } else {
      sheet.disabled = false;
      this.styleElement = styleElement;
    }
  }

  Sheet.prototype = {
    destroy : function() {
      if(this.styleElement && this.styleElement.parentNode) {
        this.styleElement.parentNode.removeChild(this.styleElement);
      }      
      return this;
    },

    iterate : function( cb ) {
      this.rules.forEach(function( rule ) {
        rule.selectors.forEach(function( selector ) {
          cb(selector, rule.properties);
        });
      });
      return this;
    }
  };

  return Sheet;
});

define('sap/viz/util/append',[],
function Setup () {
  return function ( markup, attrs ) {
    var node = this.append(markup);
    for ( var key in attrs ) {
      if ( attrs.hasOwnProperty(key) ) { node.attr(key, attrs[key]); }
    }
    return node;
  };
});
define('sap/viz/util/elementutil',[],
function Setup () {
  var ret = {
    'isSVG' : function(selection){
      return ret.isGElement(selection) || ret.isSVGElement(selection);
    },
    'isGElement' : function(selection){
      return selection.node().nodeName.toLowerCase() === 'g';
    },
    'isSVGElement' : function(selection){
      return selection.node().nodeName.toLowerCase() === 'svg';
    },
    'isDIV' : function(selection){
      return selection.node().nodeName.toLowerCase() === 'div';
    }
  };
  return ret;
});
define('sap/viz/util/fn/dombuilder',['sap/viz/modules/GlobalConstants','sap/viz/modules/manifests/Module','sap/viz/util/append','sap/viz/base/utils/FunctionUtils',
'sap/viz/util/elementutil'],
function Setup (Constants, ModuleDefs, append, FnUtil, elementutil) {

  /*
   * this function helps you create viz structure on parent based on passed in modules configuration.
   * @returns {Object} {'ModuleReferenceKey' : DOMElement/D3Selection(based on module's renderTo type)}
   */
  var retfn = function ( parent, conf ) {
    //if parent is svg/d3selection, we don't allow any more div children
    var parentSVG = elementutil.isSVG(parent);
    var root = parent;
    var ret = {};
    //if all sub modules is render to SVG/NULL, we need create only one SVG and append a 'g' for each of them
    //if sub modules have both SVG and DIV, we create div for DIV and create 'svg->g' element for each SVG sub modules
    var allSVG = true; 
    var key, module;
    for(key in conf){
      if(conf.hasOwnProperty(key) && conf[key]){
        module = ModuleDefs.get(conf[key].id);
        if(module && module.renderto === Constants.RenderTo.DIV){
          if(parentSVG){
            FnUtil.error('Configuration Error! Does not allow append div under svg element!');  
          }else{
            allSVG = false;
            break;  
          }
        } 
      }
    }

    for(key in conf){
      if(conf.hasOwnProperty(key) && conf[key]){
        module = ModuleDefs.get(conf[key].id);
        if(module){
          if(module.renderto === Constants.RenderTo.DIV){
            ret[key] = append.apply(root, ['div', {'class' : 'v-m-' + key}]);
          }else if (module.renderto === Constants.RenderTo.NONE){
            ret[key] = undefined;
          }else{
            //Jimmy, by default all current modules are rendered to SVG.
            ret[key] = append.apply(root, [parentSVG ? 'g' : 'svg', {'class' : 'v-m-' + key}]);
          }
        } 
      }
    }
    
    return ret;
  };
  
  return retfn;
});
define('sap/viz/util/fn/domposition',['sap/viz/util/elementutil'],
function Setup (elementutil) {
  
  var positionSVG = function(target, info){
    if(target && info){
      if(elementutil.isSVGElement(target)){
        //if it's SVG element, we should use left/top to position it, instead of transform
        target.attr('width', info.width);
        target.attr('height', info.height);
        target.style('position', 'absolute').style( 'box-sizing', 'border-box').style( 'left',info.x + 'px').style('top',info.y + 'px');
      }else{
        target.attr('transform', 'translate(' + info.x +', ' + info.y + ')'); 
      }
    }
  };
  
  var positionDIV = function(target, info){
    if(target && info){
      target.style('position', 'absolute').style('box-sizing', 'border-box').style('overflow','hidden').style('width',info.width + 'px').style('height',info.height + 'px').style('left', info.x + 'px').style('top', info.y + 'px');
    }
  };
  
  /*
   * this function helps you to position dom elements (selections) based on passed in layout info.
   * @returns 
   */
  var retfn = function ( layout, selections ) {
    var iter;
    for(iter in selections){
      if(selections.hasOwnProperty(iter)){
        if(layout[iter]){
          var info = layout[iter];
          if(elementutil.isSVG(selections[iter])){
            positionSVG(selections[iter], info);
          }else if(elementutil.isDIV(selections[iter])){
            positionDIV(selections[iter], info);
          }
        }
      }
    }
  };
  
  return retfn;
});
define('sap/viz/modules/event/Manager',[],
function Setup() {

    return function(){
        var component;

        var eventManager = {
            UIComponent : function(_) {
                if (!arguments.length) {
                    return component;
                }
                component = _;
                return eventManager;
            },

            on : function(type, listener) {
                component.on(type, listener);
                return eventManager;
            },

           addGestureDetector : function(_) {
                if (!arguments.length) {
                    return;
                }
                component.addGestureDetector(_);
                return eventManager;
            },
            
            destroy : function() {
              component = null;
            }
        };

        return eventManager;  
    };
});
define('sap/viz/util/UtilsRegister',[],
function Setup () {
  var utils = {};
  return {
    register : function(id, func) {
      utils[id] = func;
    },
    unregister : function(id) {
      utils[id] = undefined;
    },
    clear : function() {
      utils = {};
    },
    get : function(id) {
      return utils[id];
    }
  };
});
define('sap/viz/util/TextUtils',['sap/viz/base/utils/TypeUtils','sap/viz/base/UADetector'],
function Setup( TypeUtils, UADetector ) {
  var ns = "http://www.w3.org/2000/svg";
  var node;
  var canvasNode;
  var fasterFun;
  var sensitiveStyle = ["font", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style",
      "font-variant", "font-weight", "letter-spacing", "word-spacing", "alignment-baseline", "baseline-shift",
      "dominant-baseline"];
  var textSizeCache = [];
  var textSizeCacheForSuper = [];
  var textSizeCacheForCanvas = [];
  var myTextSizeCache = [];
  
  function getNode() {
    if ( !node ) {
      var svg = document.body.appendChild(document.createElementNS(ns, "svg"));
      svg.style.cssText = "position:absolute;top:-1000px;z-index:-9000;width:1px;height:1px";
      node = svg.appendChild(document.createElementNS(ns, "text"));
    }

    return node;
  }

  function applyText( text, style ) {
    var node = getNode();

    if ( !style ) {
      node.removeAttribute("style");
    } else {
      if ( !TypeUtils.isString(style) ) {
        var computedStyle = UADetector.isIE() ? style.ownerSVGElement.getComputedStyle(style) : window
            .getComputedStyle(style);

        var cssText = "";
        sensitiveStyle.forEach(function( i ) {
          var s = computedStyle.getPropertyValue(i);
          if ( s !== null ) {
            cssText += i + ":" + s + ";";
          }
        });
        style = cssText;
      }
      node.style.cssText = style;
    }
    if ( text === undefined || text === null ) {
      text = "";
    }

    node.textContent = text;
    return node;
  }

  function ellipsis( text, textNode, expectedLength, cssStyle, textApplied) {
    var index = "..." + cssStyle;
    var textStr = "";
    if(text){
      textStr = text.toString();
    }
    if ( expectedLength > 0 ) {
      if (myTextSizeCache[index]) {
        if(textStr.length > 3) {
          if(expectedLength < myTextSizeCache[index]/3*4) {
            if ( textNode ) {
              textNode.textContent = "";
            }
            return "";
          }
        } else {
          if(expectedLength < myTextSizeCache[index]/3*textStr.length) {
            if ( textNode ) {
              textNode.textContent = "";
            }
            return "";
          }
        }
      }
      var node,initTextLength;
      index = textStr + cssStyle;
      node = textApplied ? getNode() : applyText(textStr, cssStyle || textNode);
      initTextLength = node.getComputedTextLength();
      
      if (initTextLength  <= expectedLength ) {
        if ( textNode ) {
          textNode.textContent = textStr;
        }
        return textStr;
      }
      
      index = "..." + cssStyle;
      if (!myTextSizeCache[index]) {
        node.textContent = "...";
        myTextSizeCache[index] = node.getComputedTextLength();
      }

      expectedLength -= myTextSizeCache[index];
      node.textContent = textStr;
      if (expectedLength > 0) {
        var charNumber = textStr.length;
        var i = Math.ceil(expectedLength / initTextLength * charNumber);
        var subStr = textStr.substring(0, i);
        index = subStr + cssStyle;
        var textLength;
        var reText;
        //Chrome can not implement function getSubStringLength well when the string contains a left-to-right language and a right-to-left language.
        var txtcontent = node.textContent.toString();
        if(!UADetector.isIE()){
          node.textContent = txtcontent.substring(0, i);
          textLength = node.getComputedTextLength();
        }
        else{
          textLength = node.getSubStringLength(0, i);
        }
        if (textLength <= expectedLength) {
          while (++i <= charNumber) {
            subStr = textStr.substring(0, i);
            index = subStr + cssStyle;
            if (!UADetector.isIE()) {
              node.textContent = txtcontent.substring(0, i);
              textLength = node.getComputedTextLength();
            } else {
              textLength = node.getSubStringLength(0, i);
            }
            if (textLength > expectedLength) {
              reText = textStr.substring(0, i - 1) + "...";
              if (textNode) {
                textNode.textContent = reText;
                textNode.appendChild(document.createElementNS(textNode.namespaceURI, "title")).textContent = textStr;
              }
              if(!UADetector.isIE()){
                node.textContent = txtcontent;
              }
              return reText;
            }
          }
        } else {
          while (--i > 0) {
            subStr = textStr.substring(0, i);
            index = subStr + cssStyle;
            if (!UADetector.isIE()) {
              node.textContent = txtcontent.substring(0, i);
              textLength = node.getComputedTextLength();
            } else {
              textLength = node.getSubStringLength(0, i);
            }
            if (textLength <= expectedLength) {
              reText = subStr + "...";
              if (textNode) {
                textNode.textContent = reText;
                textNode.appendChild(document.createElementNS(textNode.namespaceURI, "title")).textContent = textStr;
              }
              node.textContent = txtcontent;
              return reText;
            }
          }
        }
        if(!UADetector.isIE()){
          node.textContent = txtcontent;
        }
      }
    }
    if ( textNode ) {
      textNode.textContent = "";
    }
    return "";
  }

  return {
    /**
     * Measure the dimension of the text in given style
     * 
     * @param {String}
     *          text the text to be measured
     * @param style
     *          the style definition text or a DOM node. If it is a node, its style will be used to measure text.
     * @returns {Object}
     */
    measure : function( text, style ) {
      if ( text === '' ) {
        return {
          width : 0,
          height : 0,
          x : 0,
          y : 0
        };
      }
      var box = applyText(text, style).getBBox();
      return {
        width : box.width,
        height : box.height,
        x : box.x,
        y : box.y
      };
    },

    /**
     * Measure text in a canvas
     * 
     * @param {String}
     *          the text to be measured
     * @param {String}
     *          fontSize
     * @param {String}
     *          fontWeight
     * @param {String}
     *          fontFamily
     * @returns {Object}
     */
    measureInCanvas : function( text,  tFontSize, tFontWeight, tFontFamily ) {
        if(!tFontFamily || !tFontSize || !tFontWeight)
        {
            //the function cannot get right value 
            return;
        }

        var strWidth = 0;
        if (!canvasNode)
        {
            canvasNode = document.createElement("canvas");
            canvasNode.style.cssText = "position:absolute;top:-1000px;z-index:-9000;width:0px;height:0px;visibility:hidden";
            document.body.appendChild(canvasNode);
        }

        if (canvasNode.getContext)
        {
            var ctx = canvasNode.getContext("2d");
            var fontString = tFontWeight + " " + tFontSize + " " + tFontFamily;
            ctx.font = fontString;
            strWidth = ctx.measureText(text).width;
        }

        var fontSizeFloat = parseFloat(tFontSize) * 1.2;
    
        return {
            width : strWidth,
            height : fontSizeFloat
        };
    },

    /**
     * Fast measure the dimension of the text in given fontSize, fontWeight and fontFamily
     * 
     * @param {String}
     *          text the text to be measured
     * @param {String}
     *          fontSize
     * @param {String}
     *          fontWeight
     * @param {String}
     *          fontFamily
     * @returns {Object}
     */
    fastMeasure : function( text, tFontSize, tFontWeight, tFontFamily ) {
      var index = text + tFontSize + tFontWeight + tFontFamily;
      var cachedSize = textSizeCache[index];
      if ( !cachedSize ) {
        textSizeCache[index] = this.measure(text, "font-size:" + tFontSize + "; font-weight:" + tFontWeight +
            "; font-family:" + tFontFamily);

        cachedSize = textSizeCache[index];
      }
      return cachedSize;
    },
    
    //find the fastest measure function for the browser.
    //measureInCanvas may be faster in Chrome, but not in Firefox.
    bestMeasureFun : function(tFontSize, tFontWeight, tFontFamily)
    {
        if(!fasterFun)
        {
            var i;
            var testTimes = 100;
            var testText = "Test";
            //test measureInCanvas
            var startC = new Date().getTime();
            for(i = 0; i < testTimes; i++)
            {
                this.measureInCanvas(testText, tFontSize, tFontWeight, tFontFamily);
            }
            var endC = new Date().getTime();
            var timeC = endC - startC;

            //test measure
            var startM = new Date().getTime();
            for(i = 0; i < testTimes; i++)
            {
                this.measure(testText, "font-size:" + tFontSize + "; font-weight:" + tFontWeight +
                             "; font-family:" + tFontFamily);
            }
            var endM = new Date().getTime();
            var timeM = endM - startM;

            if(timeC < timeM)
            {
                fasterFun = "C";
            }
            else
            {
                fasterFun = "M";
            }
        }

        return fasterFun;
    },
    /**
     * Super fast measure the dimension of the text in given fontSize, fontWeight and fontFamily
     * 
     * @param {String}
     *          text the text to be measured
     * @param {String}
     *          fontSize
     * @param {String}
     *          fontWeight
     * @param {String}
     *          fontFamily
     * @returns {Object}
     */
    superFastMeasure : function( text, FontSize, FontWeight, FontFamily ) {
      var index, tFontSize, tFontWeight, tFontFamily, tStyle;
      if (arguments.length === 2) {
        tStyle = this.parseStyle(FontSize);
        tFontSize = tStyle.FontSize;
        tFontWeight = tStyle.FontWeight;
        tFontFamily = tStyle.FontFamily;
      } else if (arguments.length === 4){
        tFontSize = FontSize;
        tFontWeight = FontWeight;
        tFontFamily = FontFamily;
      }
      index = text + tFontSize + tFontWeight + tFontFamily;
      var cachedSize = textSizeCacheForSuper[index];
      if ( !cachedSize ) {
        if(this.bestMeasureFun(tFontSize, tFontWeight, tFontFamily) === "C")
        {
            textSizeCacheForSuper[index] = this.measureInCanvas(text, tFontSize, tFontWeight, tFontFamily);
        }
        else
        {
            textSizeCacheForSuper[index] = this.measure(text, "font-size:" + tFontSize + "; font-weight:" + tFontWeight +
            "; font-family:" + tFontFamily);
        }
        cachedSize = textSizeCacheForSuper[index];
      }
      return cachedSize;
    },
    canvasMeasure : function( text, FontSize, FontWeight, FontFamily ) {
      var index, tFontSize, tFontWeight, tFontFamily, tStyle;
      if (arguments.length === 2) {
        tStyle = this.parseStyle(FontSize);
        tFontSize = tStyle.FontSize;
        tFontWeight = tStyle.FontWeight;
        tFontFamily = tStyle.FontFamily;
      } else if (arguments.length === 4){
        tFontSize = FontSize;
        tFontWeight = FontWeight;
        tFontFamily = FontFamily;
      }
      index = text + tFontSize + tFontWeight + tFontFamily;
      var cachedSize = textSizeCacheForCanvas[index];
      if ( !cachedSize ) {
        cachedSize = (textSizeCacheForCanvas[index] = this.measureInCanvas(text, tFontSize, tFontWeight, tFontFamily));
      }
      return cachedSize;
    },

    /**
     * Ellipsis long text.
     * 
     * @param {String}
     *          text the text to be processed
     * @param {Node}
     *          textNode the svg:text which will be display text
     * @param {Number}
     *          maxLength the max text length
     */
    ellipsis : function( text, textNode, maxLength, cssStyle, noSubstring) {
      return ellipsis(text, textNode, maxLength, cssStyle, false);
    },

    /**
     * Ellipsis long text in a circle area.
     * 
     * @param {String}
     *          text the text to be processed
     * @param {Node}
     *          textNode the svg:text which will be display text
     * @param {Number}
     *          r the radius of circle
     * @param {Number}
     *          h the offset from center of circle
     * @param {Object}
     *          cssStyle the style object
     */
    ellipsisInCircle : function( text, textNode, r, h, cssStyle ) {
      var node = applyText(text, textNode);

      var maxLength = Math.sqrt(Math.pow(r, 2) - Math.pow(h + node.getBBox().height / 2, 2)) * 2;
      ellipsis(text, textNode, maxLength, cssStyle, true);
    },

    verticalCentralOffset : function( text, textNode ) {
      var tmpNode = applyText(text, textNode);
      var box = tmpNode.getBBox();
      var actualHeight = -box.y;
      var fontSize = parseInt(tmpNode.ownerSVGElement.getComputedStyle(tmpNode)["fontSize"], 0);
      return (actualHeight - (box.height - fontSize)) / 2;
    },

    parseStyle : function(style) {
      var tStyle = {};
      var temp = style.toLowerCase();
      tStyle.FontSize = this.getStyleValue(temp, "font-size");
      tStyle.FontWeight = this.getStyleValue(temp, "font-weight");
      tStyle.FontFamily = this.getStyleValue(temp, "font-family");
      return tStyle;
    },

    getStyleValue: function(style, key) {
      var result, index1, index2;
      index1 = style.indexOf(key);
      if (index1 >=0) {
        index1 = style.indexOf(":", index1) + 1;
        index2 = style.indexOf(";", index1);
        if (index2 <0) {
          index2 = style.length;
        }
        result = style.substring(index1, index2);
      }
      return result;
    },
    getTextBaselineOffset: function (styles){
        var measureBox = this.fastMeasure("Tag",styles['font-size'],styles['font-weight'],styles['font-family']);
        return measureBox.height + measureBox.y;
    },
    destroy : function(){
      if(node){
        //svg
        var svg = node.parentNode;
        if(svg){
          svg.parentNode.removeChild(svg);
        }
      }
      node = null;
      textSizeCache = [];
      textSizeCacheForSuper = [];
      textSizeCacheForCanvas = [];
      myTextSizeCache = [];
      if(canvasNode){
        canvasNode.parentNode.removeChild(canvasNode);
      }
      canvasNode = null;
    }
  };
});

define('sap/viz/base/utils/oo',[], function() {
  var oo = {};

  oo.extend = function(subClz, superClz) {
    var subClzPrototype = subClz.prototype;

    // add the superclass prototype to the subclass definition
    subClz.superclass = superClz.prototype;

    // copy prototype
    var F = function() {};
    F.prototype = superClz.prototype;

    subClz.prototype = new F();
    for (var prop in subClzPrototype) {
      if (subClzPrototype.hasOwnProperty(prop)) {
        subClz.prototype[prop] = subClzPrototype[prop];
      }
    }
    subClz.prototype.constructor = subClz;
    if (superClz.prototype.constructor === Object.prototype.constructor) {
      superClz.prototype.constructor = superClz;
    }
    return subClz;
  };

  return oo;
});

define('sap/viz/modules/Base',[], function(){
  var base = function(){
  };
  
  //a temp flag used to distinguish new and old module style in manifest
  base.prototype.__new_style__ = true;
  
  return base;
  
});

define('sap/viz/modules/dispatch',[],
function Setup() {
  return d3.dispatch;
});
define('sap/viz/behaviors/MouseMonitor',['jquery','sap/viz/modules/dispatch', 'sap/viz/base/UADetector'],
function Setup($, dispatch, UADetector) {

        var MIN_LASSO_DISTANCE = 3;
        
        var mm = function(){
            this._mm_g = null;
            this._mm_d = dispatch('click', 'hover', 'lassostart', 'lassomove', 'lassoend', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mouseleave', 'contextmenu');
            this._mm_mousedownpoint = null;
            this._mm_status = 'hover';
            this._mm_props = {
                'enableClick' : true,
                'enableHover' : true,
                'enableMouseDown' : true,
                'enableMouseUp' : true,
                'enableMouseOver' : true,
                'enableMouseOut' : true,
                'enableMouseLeave' : true,
                'enableLassoStart' : true,
                'enableLassoMove' : true,
                'enableLassoEnd' : true,
                'enableContextMenu' : true
                //the special trigger for GEO regarding lasso should
                //add a new extend event here, like 'drag'
            }; 
        };
        
        mm.prototype.setProperties = function(_){
            Objects.extend(true, this._mm_props, _);
            return mm;
        };
        
        mm.prototype.getProperties = function(){
            return this._mm_props;
        };
        
        mm.prototype.registerEvent = function(eventLayer){
            this._mm_g = eventLayer;
            this._mm_g.on('mousedown.monitor', this._mm_mousedown.bind(this), true)
             .on('mouseup.monitor', this._mm_mouseup.bind(this))
             .on('mousemove.monitor', this._mm_mousemove.bind(this))
             .on('mouseover.monitor', this._mm_mouseover.bind(this))
             .on('mouseout.monitor', this._mm_mouseout.bind(this))
             .on('dragstart.monitor', this._mm_preventEvent.bind(this))
             .on('selectstart.monitor', this._mm_preventEvent.bind(this))
             .on('contextmenu.monitor', this._mm_contextmenu.bind(this));
            
            if( UADetector.isIE() ){
                this._mm_g.on("mouseleave.monitor", function(){
                    this._mm_mouseleave.call(this, d3.event);
              }.bind(this));
            } else{
              $(this._mm_g.node()).mouseleave(this._mm_mouseleave.bind(this));
            }
            
        };
        
        mm.prototype.destroy = function(){
            var g = this._mm_g;
            if(g){
                g.on('mousedown.monitor', null)
                 .on('mouseup.monitor', null)
                 .on('mousemove.monitor', null)
                 .on('mouseover.monitor', null)
                 .on('mouseout.monitor', null)
                 .on('contextmenu.monitor', null);
                
                if( UADetector.isIE() ){
                  g.on("mouseleave.monitor", null);
                } else {
                  $(g.node()).unbind("mouseleave");
                }
                this._mm_g = null;    
            }
            this._mm_d = null;
            this._mm_mousedownpoint = null;
            this._mm_status = null;
            this._mm_props = null;
        };
        
        mm.prototype.getDispatch = function(){
            return this._mm_d;
        };
              
        mm.prototype._mm_mousedown = function(){
           var originalEvent = getCurrentEvent();
           if(originalEvent.which!==1){
               //return if current event not focus to left button
               return;
            }
            this._mm_mousedownpoint = {
               x : originalEvent.clientX,
               y : originalEvent.clientY
            };
            this._mm_status = 'unknown';
            this._mm_fireEvent('mousedown');
            //As in geo chart, the drag feature is implemented by d3. we should stop propagation if starting lasso
            if( this._mm_isEnableLasso()){
                stopEvent();
            }
         };
        
        mm.prototype._mm_preventEvent = function(){
            var originalEvent = getCurrentEvent();
            originalEvent.preventDefault();
            return false;
        };
        
        mm.prototype._mm_mousemove = function(){
            if (this._mm_mousedownpoint && this._mm_mousedownpoint.x === getCurrentEvent().clientX && this._mm_mousedownpoint.y === getCurrentEvent().clientY) {
                return;
            }

            if (this._mm_status === 'lasso') {
                this._mm_fireEvent('lassomove');
            } else if (this._mm_status === 'hover') {
                this._mm_fireEvent('hover');
            } else {
                this._mm_fireEvent('lassostart', this._mm_mousedownpoint);
                this._mm_status = 'lasso';
                this._mm_fireEvent('lassomove');
            }
        };
               
        mm.prototype._mm_mouseup = function(){
            this._mm_fireEvent('mouseup');
            if (this._mm_status === 'lasso') {
                this._mm_fireEvent('lassoend');
		        // to fix BITVIZ1-362: when lasso end, if mouse over on datapoint, 
		        //pie chart should show tooltip pointed the dadapoint no matter how many datapoints are selected
                if(isDatapointArea(getCurrentEvent())){
                    this._mm_fireEvent('mouseover');
                }
              } else {
                if (!this._mm_checkMouseDownUpDistance()){
                    this._mm_fireEvent('click');
                }
            }
            this._mm_mousedownpoint = null;
            this._mm_status = 'hover';
        };
        
        mm.prototype._mm_contextmenu = function(){
          this._mm_fireEvent('contextmenu');
        };
        
        mm.prototype._mm_mouseout = function(){
            if( this._mm_status !== 'lasso'){
                this._mm_fireEvent('mouseout');
            }
        };
        
        mm.prototype._mm_mouseover = function(){
            if( this._mm_status !== 'lasso'){
                this._mm_fireEvent('mouseover');
            }
        };

        mm.prototype._mm_mouseleave = function(evt){
            var point = {
                x : evt.clientX,
                y : evt.clientY
            };
            var target = evt.target;

            if (this._mm_status === 'lasso'){
                this._mm_fireEvent('lassoend', point, target);
                this._mm_status = 'hover';
            }
            
            this._mm_fireEvent('mouseleave', point, target, evt);
        };
        
        function isDatapointArea(event){
            var target = event.target, classname = target.getAttribute('class');
            var isDatapointArea = false;
            if (classname && classname.indexOf('v-datapoint') >= 0)// find it
            {
                isDatapointArea = true;
            }
            return isDatapointArea;
        }
        
        mm.prototype._mm_isEnableLasso = function() {
            var result = false;
            var props = this._mm_props;
            if (props.supportLassoEvent && (props.selectability.mode !== 'none' && props.selectability.mode !== 'single')) {    //illegal selectionModes would be treated as default value("multiple")
                result = true;
                if (props.selectability.lassoWithCtrlKey) {
                    var originalEvent = getCurrentEvent();
                    if (!originalEvent.ctrlKey) {
                        result = false;
                    }
                }
            }
            return result;
        };
        
        function distance(p1, p2) {
            return Math.sqrt((p1.x-p2.x)*(p1.x-p2.x) + (p1.y-p2.y)*(p1.y-p2.y));
        }

        function getCurrentEvent() {
            if (d3.event) {
                return d3.event;
            } else {
                return window.event;
            }
        }
        
        mm.prototype._mm_checkMouseDownUpDistance = function() {
            var originalEvent = getCurrentEvent();
            var tmp = {
                x : originalEvent.clientX,
                y : originalEvent.clientY
            };
            if ((this._mm_mousedownpoint !== null) && 
                (distance(this._mm_mousedownpoint, tmp) < MIN_LASSO_DISTANCE)) {
                return false;
            } else {
                return true;
            }
        };

        mm.prototype._mm_fireEvent = function(type, point, target, evt) {
            var originalEvent = getCurrentEvent();
			if (!originalEvent && evt) {
				originalEvent = evt;
			}
            var temppoint, temptarget;
            if (point) {
                temppoint = point;
            } else {
                temppoint = {
                   x : originalEvent.clientX,
                   y : originalEvent.clientY
                };
            }
            if (target) {
                temptarget = target;
            } else {
                temptarget = originalEvent.target;
            }
            var tempEvent = {
                name: type,
                data : {
                    point : temppoint,
                    target : temptarget,
                    ctrlKey: UADetector.os() === 'Mac' ? originalEvent.metaKey : originalEvent.ctrlKey
                }
            };
            var props = this._mm_props;
            var d = this._mm_d;
            switch (type) {
            case 'mousedown':
                if (props.enableMouseDown) {
                    d.mousedown(tempEvent);
                }
                break;
            case 'mouseup':
                if (props.enableMouseUp) {
                    tempEvent.data.button = originalEvent.button;
                    d.mouseup(tempEvent);
                }
                break;
            case 'mousemove':
                if (props.enableMouseMove) {
                    d.mousemove(tempEvent);
                }
                break;
            case 'mouseover':
                if (props.enableMouseOver) {
                    d.mouseover(tempEvent);
                }
                break;
            case 'mouseout':
                if (props.enableMouseOut) {
                    d.mouseout(tempEvent);
                }
                break;
            case 'hover':
                if (props.enableHover) {
                    d.hover(tempEvent);
                }
                break;
            case 'lassostart':
                d.lassostart(tempEvent); break;
            case 'lassomove':
                d.lassomove(tempEvent); break;
            case 'lassoend':
                d.lassoend(tempEvent); 
                break;
            case 'click':
                if (props.enableClick) {
                    d.click(tempEvent);
                }
                break;
            case 'mouseleave' :
                d.mouseleave(tempEvent);
                break;
            case 'contextmenu' : 
                tempEvent.data.button = originalEvent.button;
                tempEvent.data.point.x = originalEvent.pageX;
                tempEvent.data.point.y = originalEvent.pageY;
                d.contextmenu(tempEvent);
                break;
            default:
                break;
            }
        };
        
        function stopEvent(){
            if ( d3.event ) {
                d3.event.stopPropagation();
                d3.event.preventDefault();
            }
        }
        
        return mm;
});
define('sap/viz/mvc/TapGestureDetector',['sap/viz/mvc/GestureDetector','sap/viz/base/Math'],
function Setup(GestureDetector, Math) {
	var ts = GestureDetector.TransitionState;
	var _distance = function(xy1, xy2) {
		var dx = xy1.x - xy2.x;
		var dy = xy1.y - xy2.y;
		return Math.sqrt(dx * dx + dy * dy);
	};

	var _startNewTapSequence = function(tapDetector, event) {
		tapDetector._sequenceStarted = true;
		tapDetector._currentNumberOfTaps = 0;
		tapDetector._firstStartXY = tapDetector.globalLocOfTouchPoints();
	};

	// Defines the maximum distance from current tap to where
	// the first tap
	// starts
	var _maxDistance = 50;
	// Defines the maximum and minimum time for each tap
	var _maxTapTime = 150;
	var _minTapTime = 20;
	// Defines the maximum time gap
	// between the time the previous tap ends and the time the
	// next one starts
	var _maxTapGap = 150;

	/**
	 * This class defines detector for detecting Tapping gesture. Tapping
	 * gesture is detected when required number of fingers tap the screen for
	 * required number of times.
	 * 
	 * @name sap.viz.mvc.TapGestureDetector
	 * @class
	 * @augments sap.viz.mvc.GestureDetector
	 */

	var TapGestureDetector = GestureDetector.extend({
		constructor : function(touchesRequired, tapsRequired) {
			touchesRequired = +touchesRequired;
			tapsRequired = +tapsRequired;
			this._touchesRequired = (touchesRequired > 0 && touchesRequired < 6) ? touchesRequired : 1;
			this._tapsRequired = (tapsRequired > 0) ? tapsRequired : 1;

			this._currentNumberOfTaps = 0;
			this._firstStartXY = undefined;
			this._sequenceStarted = false;
			this._currentStartWhen = 0;
		},

		/**
		 * The number of touches required for tap to be detected.
		 * 
		 * @function
		 * @param {Number}
		 *            numOfTouches
		 * @returns {Number|this}
		 */
		touchesRequired : function(numOfTouches) {
			if (arguments.length) {
				this._touchesRequired = +numOfTouches;
				return this;
			}
			return this._touchesRequired;
		},

		/**
		 * The number of taps required for tap to be detected.
		 * 
		 * @function
		 * @param {Number}
		 *            numOfTaps
		 * @returns {Number|this}
		 */
		tapsRequired : function(numOfTaps) {
			if (arguments.length) {
				this._tapsRequired = +numOfTaps;
				return this;
			}
			return this._tapsRequired;
		},

		doTouchBegin : function(touchStartEvent) {
			if (this.state === ts.Possible) {
				var currentNumOfTouches = this.totalTouches();
				if (currentNumOfTouches === this._touchesRequired) {
					var currentTimeStamp = touchStartEvent.timeStamp;

					// Beginning of the first
					// tap in a tap
					// sequence
					if (this._currentNumberOfTaps == 0) {
						// Record the
						// information of first
						// tap
						// for later comparison
						_startNewTapSequence(this, touchStartEvent);
					}
					// Beginning of a tap (other
					// than the first
					// one) in a tap sequence
					else {
						if (this._currentNumberOfTaps < this._tapsRequired) {
							var distance = _distance(this._firstStartXY, this.globalLocOfTouchPoints());
							var preStartWhen = this._currentStartWhen;

							// If the tap breaks
							// a tap sequence,
							// start a new
							// sequence with it
							if (distance > _maxDistance
									|| (currentTimeStamp - preStartWhen) > (_maxTapTime + _maxTapGap)) {
								_startNewTapSequence(this, touchStartEvent);
							}
						}
					}

					this._currentStartWhen = currentTimeStamp;
				} else { // Fails if touch
					// number doesn't
					// match
					this.state = ts.Failed;
				}
			}
		},

		doTouchEnd : function(touchEndEvent) {
			if (this.state === ts.Possible && this._sequenceStarted) {
				// Fails if the touch ends too
				// far away from
				// where it starts
				if (_distance(this._firstStartXY, this.globalLocOfTouchPoints()) > _maxDistance) {
					this.state = ts.Failed;
					return;
				}
				// Fails if the tap is too short
				// or too long
				var tapTime = touchEndEvent.timeStamp - this._currentStartWhen;
				if (tapTime > _maxTapTime || tapTime < _minTapTime) {
					this.state = ts.Failed;
					return;
				}
				if (++this._currentNumberOfTaps === this._tapsRequired) {
					this.state = ts.Recognized;
				}
			}
		},

		doTouchCancel : function(touchCancelEvent) {
			if (this.state === ts.Possible) {
				this.state = ts.Failed;
			}
		},

		reset : function() {
			this._super();
			this._currentNumberOfTaps = 0;
			this._sequenceStarted = false;
			this._firstStartXY = undefined;
			this._firstStartWhen = 0;
			this._currentStartWhen = 0;
		}
	});
	return TapGestureDetector;
});
define('sap/viz/mvc/PanGestureDetector',['sap/viz/mvc/GestureDetector', 'sap/viz/base/Math'], function Setup(GestureDetector, Math) {

    var ts = GestureDetector.TransitionState;
    var CONST_PAN_MIN_DISTANCE = 10;
    var CONST_PAN_MAX_TIME = 500;
    var _distance = function(xy1, xy2) {
        var dx = xy1.x - xy2.x;
        var dy = xy1.y - xy2.y;
        return Math.sqrt(dx * dx + dy * dy);
    };
    var _time = function(lastTime, currentTime) {
        return currentTime - lastTime;
    };

    var _refreshStatus = function(event) {
        this._startWhen = this._stopWhen;
        this._stopWhen = event.timeStamp;
        this._lastXY = this._currentXY;
        this._currentXY = this.globalLocOfTouchPoints();
    };

    /**
     * This class defines detector for detecting Panning gesture. Panning
     * gesture is detected when required number of fingers touch the screen and
     * move a reasonable distance.
     *
     * @name sap.viz.mvc.PanGestureDetector
     * @class
     * @augments sap.viz.mvc.GestureDetector
     */
    var PanGestureDetector = GestureDetector.extend({
        constructor : function(touchesRequired) {
            this._touchesRequired = (touchesRequired > 0 && touchesRequired < 6) ? touchesRequired : 1;
            this._startXY = undefined;
            this._lastXY = undefined;
            this._currentXY = undefined;
            this._startWhen = 0;
            this._stopWhen = 0;
            this._isLasso = false;
            this._isPan = false;
        },

        /**
         * The number of touches required for tap to be detected.
         *
         * @function
         * @param {Number}
         *            numOfTouches
         * @returns {Number|this}
         */
        touchesRequired : function(numOfTouches) {
            if (arguments.length) {
                this._touchesRequired = +numOfTouches;
                return this;
            }
            return this._touchesRequired;
        },

        doTouchBegin : function(touchStartEvent) {
            var currentNumOfTouches = this.totalTouches();
            if (currentNumOfTouches === this._touchesRequired && this.state === ts.Possible) {
                this._startWhen = this._stopWhen = touchStartEvent.timeStamp;
                this._startXY = this._lastXY = this._currentXY = this.globalLocOfTouchPoints();
                this.state = ts.Began;
            } else if (currentNumOfTouches > this._touchesRequired) {
                if (this.state === ts.Began || this.state === ts.Changed) {
                    this._stopWhen = touchStartEvent.timeStamp;
                    this._lastXY = this._currentXY;
                    this._currentXY = this.globalLocOfTouchPoints();
                    this.state = ts.Canceled;
                } else {
                    this.state = ts.Failed;
                }
            }
        },
        doTouchMove : function(touchMoveEvent) {
            switch (this.state) {
                case ts.Began:
                    if ((_distance(this._currentXY, this.globalLocOfTouchPoints()) >= CONST_PAN_MIN_DISTANCE) && (_time(this._stopWhen, touchMoveEvent.timeStamp) < CONST_PAN_MAX_TIME)) {
                        _refreshStatus.call(this, touchMoveEvent);
                        this._isPan = true;
                        this._isLasso = false;
                        this.state = ts.Changed;

                    } else {
                        if (_time(this._stopWhen, touchMoveEvent.timeStamp) > CONST_PAN_MAX_TIME) {
                            _refreshStatus.call(this, touchMoveEvent);
                            this._isLasso = true;
                            this._isPan = false;
                            this.state = ts.Changed;

                        }
                    }
                    break;
                case ts.Changed:
                    _refreshStatus.call(this, touchMoveEvent);
                    this.state = ts.Changed;
                    break;
            }
        },
        doTouchEnd : function(touchEndEvent) {
            if ((this.state === ts.Began || this.state === ts.Changed)) {
                _refreshStatus.call(this, touchEndEvent);
                this.state = ts.Ended;
            }
        },

        doTouchCancel : function(touchCancelEvent) {
            if (this.state === ts.Began || this.state === ts.Changed) {
                _refreshStatus.call(this, touchCancelEvent);
                this.state = ts.Canceled;
            }
        },

        /**
         * The current moving range in X,Y direction of the gesture
         *
         * <pre>
         * {
         * 		x : ###,
         * 		y : ###
         * }
         * </pre>
         *
         * @name sap.viz.mvc.PanGestureDetector#rangeInXY
         * @function
         * @return {POINT}
         */
        rangeInXY : function() {
            return {
                x : this._currentXY.x - this._startXY.x,
                y : this._currentXY.y - this._startXY.y
            };
        },

        /**
         * The current moving velocity in X,Y direction of the gesture
         *
         * <pre>
         * {
         * 		x : ###,
         * 		y : ###
         * }
         * </pre>
         *
         * @name sap.viz.mvc.PanGestureDetector#velocityInXY
         * @function
         * @return {POINT}
         */
        velocityInXY : function() {
            var duration = this._stopWhen - this._startWhen;
            if (duration) {
                return {
                    x : (this._currentXY.x - this._lastXY.x) / duration,
                    y : (this._currentXY.y - this._lastXY.y) / duration
                };
            } else {
                return 0;
            }
        },
        reset : function() {
            this._super();
            this._startXY = undefined;
            this._lastXY = undefined;
            this._currentXY = undefined;
            this._startWhen = 0;
            this._stopWhen = 0;
        }
    });
    return PanGestureDetector;
});

define('sap/viz/mvc/PinchGestureDetector',['sap/viz/mvc/GestureDetector','sap/viz/base/Math'],
function Setup(GestureDetector, Math) {
	var ts = GestureDetector.TransitionState;
	/**
	 * This class defines detector for detecting Pinching gesture.
	 * 
	 * @name sap.viz.mvc.PinchGestureDetector
	 * @class
	 * @augments sap.viz.mvc.GestureDetector
	 */
	var PinchGestureDetector = GestureDetector.extend({
		constructor : function() {
			this._origDistance = 1;
			this._currDistance = 1;
			this._startWhen = 0;
			this._stopWhen = 0;
		},

		_distance : function() {
			var points = [];
			for (var tId in this._grTouchTracker) {
				points.push(this._grTouchTracker[tId].globalXY);
			}
            if (points.length > 1) {
                var dx = points[1].x - points[0].x;
                var dy = points[1].y - points[0].y;
                return Math.sqrt(dx * dx + dy * dy);
            } else {
                return 0;
            }
		},

		doTouchBegin : function(touchStartEvent) {
			var currentNumOfTouches = this.totalTouches();
			if (this.state === ts.Possible) {
				if (currentNumOfTouches === 2) {
					var twoTouchDistance = this._distance();
					if (twoTouchDistance > 35) {
						this._origDistance = this._currDistance = twoTouchDistance;
						this._startWhen = this._stopWhen = touchStartEvent.timeStamp;
                        this._touchStartPoints = [];
                        var ttracker = this._grTouchTracker;
                        for (var tId in ttracker) {
                            if (ttracker[tId].globalXY !== undefined) {
                                this._touchStartPoints.push(ttracker[tId].globalXY);
                            }

                        }
					} else {
						this.state = ts.Failed;
						return;
					}
				}
				// If more than 2 touches began, regard it as a failure
				else if (currentNumOfTouches > 2) {
					this.state = ts.Failed;
					return;
				}
				// If only one touch began, we can wait for another one to come.
			} else if ((this.state === ts.Began || this.state === ts.Changed)) {
				this._stopWhen = touchStartEvent.timeStamp;
				this._currDistance = this._distance();

				this.state = ts.Canceled;
				return;
			}
		},

		doTouchMove : function(touchMoveEvent) {
			switch (this.state) {
			case ts.Possible:
				if (this.totalTouches() === 2) {
					this._stopWhen = touchMoveEvent.timeStamp;
					this._currDistance = this._distance();

					var scale = this.scale();
					if (scale > 1.1 || scale < 0.9) {
						this.state = ts.Began;
					}
				}
				break;
			case ts.Began:
				if (Math.abs(this._origDistance - this._distance()) > 10) {
					this._stopWhen = touchMoveEvent.timeStamp;
					this._currDistance = this._distance();
					this.state = ts.Changed;
				}
				break;
			case ts.Changed:
				this._currDistance = this._distance();
				this._stopWhen = touchMoveEvent.timeStamp;
				this.state = ts.Changed;
				break;
			}
		},

		doTouchEnd : function(touchEndEvent) {
			if (this.state === ts.Began || this.state === ts.Changed) {
				if (this.totalTouches() === 0) {
					this._stopWhen = touchEndEvent.timeStamp;
					this._currDistance = this._distance();
					this.state = ts.Ended;
				} else {
					this._stopWhen = touchEndEvent.timeStamp;
					this._currDistance = this._distance();
					this.state = ts.Canceled;
				}

			} else if (this.state === ts.Possible) {
				this.state = ts.Failed;
			}
		},

		doTouchCancel : function(touchCancelEvent) {
			if (this.state === ts.Began || this.state === ts.Changed) {
				this._stopWhen = touchCancelEvent.timeStamp;
				this._currDistance = this._distance();
				this.state = ts.Canceled;
			} else if (this.state === ts.Possible) {
				this.state = ts.Failed;
			}
		},
		/**
		 * The current scale of the pinching gesture
		 * 
		 * 
		 * @name sap.viz.mvc.PinchGestureDetector#scale
		 * @function
		 * @return {Number}
		 */
		scale : function() {
			return this._currDistance / this._origDistance;
		},
		/**
		 * The current velocity of the pinching gesture
		 * 
		 * 
		 * @name sap.viz.mvc.PinchGestureDetector#velocity
		 * @function
		 * @return {Number}
		 */
		velocity : function() {
			var duration = this._startWhen - this._stopWhen;
			if (duration) {
				return Math.abs((this._currDistance - this._origDistance)) * 1000 / duration;
			} else {
				return 0;
			}
		},
		reset : function() {
			this._super();
			this._origDistance = 1;
			this._currDistance = 1;
			this._startWhen = 0;
			this._stopWhen = 0;
		}
	});
	return PinchGestureDetector;
});
define('sap/viz/behaviors/TouchMonitor',['sap/viz/modules/dispatch','sap/viz/mvc/TapGestureDetector','sap/viz/mvc/PanGestureDetector',
'sap/viz/mvc/GestureDetector', 'sap/viz/base/utils/ObjectUtils', 'sap/viz/base/UADetector','sap/viz/mvc/PinchGestureDetector'],
function Setup(dispatch, TapGestureDetector, PanGestureDetector, GestureDetector, ObjectUtils, UADetector,PinchGestureDetector) {
    var tm = function() {
        this._tm_g = null;
        this._tm_d = dispatch('click', 'hover', 'lassostart', 'lassomove',
                'lassoend', 'panstart', 'panmove',
                'panend', 'mousedown', 'mouseup', 'mouseover', 'mouseout',
                'mouseleave', 'pinchstart', 'pinchmove', 'pinchend');
        this._tm_touchstartpoint = null;
        this._tm_tapdetector = null;
        this._tm_pandetector = null;
        this._tm_pinchdetector = null;
        this._tm_status = 'hover';
        this._tm_props = {
            'enableClick' : true,
            'enableHover' : true,
            'enableMouseDown' : true,
            'enableMouseUp' : true,
            'enableMouseOver' : true,
            'enableMouseOut' : true,
            'enableMouseLeave' : true,
            'enableLassoStart' : true,
            'enableLassoMove' : true,
            'enableLassoEnd' : true,
            //the special trigger for GEO regarding lasso should
            'enablePanStart' : true,
            'enablePanMove' : true,
            'enablePanEnd' : true,
            'enablePinchStart' :true,
            'enablePinchMove' : true,
            'enablePinchEnd' :true
            //add a new extend event here, like 'drag'
        }; 
    };
    
    tm.prototype.setProperties = function(_){
        ObjectUtils.extend(true, this._tm_props, _);
        return tm;
    };

    tm.prototype.getProperties = function(){
        return this._tm_props;
    };

    tm.prototype.registerEvent = function(eventLayer, eventManager){
        this._tm_g = eventLayer;
        //TODO: use gestures here

        if (!this._tm_tapdetector) {
            this._tm_tapdetector = new TapGestureDetector();
            this._tm_tapdetector.addGestureAction(this._tm_taphandler.bind(this));
            this._tm_tapdetector.enable(true);
            eventManager.addGestureDetector(this._tm_tapdetector);
        }

        if (!this._tm_pandetector) {
            this._tm_pandetector = new PanGestureDetector();
            this._tm_pandetector.addGestureAction(this._tm_panhandler.bind(this));
            this._tm_pandetector.enable(true);
            eventManager.addGestureDetector(this._tm_pandetector);
        }
        
        if(!this._tm_pinchdetector){
          this._tm_pinchdetector = new PinchGestureDetector();
          this._tm_pinchdetector.addGestureAction(this._tm_pinchhandler.bind(this));
          this._tm_pinchdetector.enable(true);
          eventManager.addGestureDetector(this._tm_pinchdetector);
        }

        if (UADetector.isWindowsSurface()) {
            this._tm_g.on('pointerdown.monitor', this._tm_touchstart.bind(this), true)
                .on('pointermove.monitor', this._tm_touchmove.bind(this), true)
                .on('pointerup.monitor', this._tm_touchend.bind(this))
               .on('pointerleave.monitor', this._tm_touchend.bind(this));
        } else {
            this._tm_g.on('touchstart.monitor', this._tm_touchstart.bind(this), true)
                .on('touchmove.monitor', this._tm_touchmove.bind(this), true)
                .on('touchend.monitor', this._tm_touchend.bind(this));
        }
    };    
    
    tm.prototype.destroy = function(){
        var g = this._tm_g;
        if(g){
            if (UADetector.isWindowsSurface()) {
            g.on('pointerdown.monitor', null)
             .on('pointerup.monitor', null);
            } else {
            g.on('touchstart.monitor', null)
             .on('touchend.monitor', null);
            }
            this._tm_g = null;    
        }
        this._tm_d = null;
        this._tm_touchstartpoint = null;
        this._tm_status = null;
        this._tm_props = null;
    };

    tm.prototype.getDispatch = function(){
        return this._tm_d;
    };   
    
    function pointFromTouch(touch) {
        return {
            x: touch.clientX,
            y: touch.clientY
        };
    }
    
    function targetFromTouch(touch) {
        return document.elementFromPoint(touch.clientX, touch.clientY); //NOTICE: could NOT work with IFRAME
    }
    
    function pointEvent2TouchEvent (event) {
        if (event.type === 'pointerdown' || event.type === 'pointermove' || event.type === 'pointerup' || event.type === 'pointercancel'|| event.type==='pointerleave') {
            event.touches = []; event.changedTouches=[]; event.targetTouches=[];
            var touch = {};
            touch.clientX = event.clientX;
            touch.clientY = event.clientY;
            touch.pageX = event.pageX;
            touch.pageY = event.pageY;
            touch.screenX = event.screenX;
            touch.screenY = event.screenY;
            touch.identifier = event.pointerId;
            touch.target=event.target;
            event.touches.push(touch);
            event.changedTouches.push(touch);
            event.targetTouches.push(touch);
        }
    }

    tm.prototype._tm_touchstart = function() {
        var originalEvent = getCurrentEvent();
        pointEvent2TouchEvent(originalEvent);
        var touch = originalEvent.touches[0];
        this._tm_touchstartpoint = pointFromTouch(touch);
        //console.log("touch start   ");
        
        if (this._tm_status !== 'unknown') {
            var name = this._tm_status + "end";
            this._tm_fireEvent(name);
        }
        this._tm_status = 'unknown';
        this._tm_fireEvent('hover');
        this._tm_fireEvent('mouseover');  
        this._tm_fireEvent('mousedown');
        
        //[Christy] prevent event or not, depends on enablePan
        if(originalEvent.touches.length > 1 || this._tm_props.enablePan){
          this._tm_preventEvent();
        }
        //TODO: add lasso check for geo
        return true;
    };

    tm.prototype._tm_touchmove = function() {
        // function to check whether touchmove is on chart area
        var onChartArea = function (target) {
            if (!target || !target.getAttribute) {
                return false;
            }
            if (target.getAttribute('class') === 'v-m-root') {
                return true;
            } else if (target.parentNode) {
                return onChartArea(target.parentNode);
            }
            return false;
        };
        if (this._tm_status !== 'unknown') {
            var name = this._tm_status + "move";
            var originalEvent = getCurrentEvent();
            pointEvent2TouchEvent(originalEvent);
            var touch = originalEvent.touches[0],
                point = pointFromTouch(touch),
                target = targetFromTouch(touch);
            var eventLayer = this._tm_g.select('.v-eventLayer').node();// $('.v-eventLayer')[0];
            if (this._tm_status === 'lasso' && !onChartArea(target)) {
                this._tm_fireEvent('lassoend', point, eventLayer);
                return;
            }
            this._tm_fireEvent(name, point, target);
            
            //[Christy] prevent event or not, depends on enablePan
            if(getCurrentEvent().touches.length > 1 || (this._tm_status === 'pan' && this._tm_props.enablePan) || this._tm_status === 'lasso'){
              this._tm_preventEvent();
            }
        }    
    };

    tm.prototype._tm_touchend = function() {
        var originalEvent = getCurrentEvent();
        //console.log("status    " + this._tm_status);
        
        pointEvent2TouchEvent(originalEvent);        

        var touch = originalEvent.changedTouches[0],
            point = pointFromTouch(touch),
            target = targetFromTouch(touch);
        if(originalEvent.type === "pointerleave"){
          target =  this._tm_g.node();
          this._tm_pandetector.reset();
          this._tm_pinchdetector.reset();
          this._tm_tapdetector.reset();
        }
        if (this._tm_status === 'unknown') {
            if(touch.clientX !== this._tm_touchstartpoint.x || touch.clientY !== this._tm_touchstartpoint.y)
                return;
            this._tm_fireEvent('mouseup', point, target);
        } else {
            var name = this._tm_status + "end";

            this._tm_fireEvent(name, point, target);
        }
        this._tm_status = "unknown";
        if(getCurrentEvent().touches.length > 1 || this._tm_props.enablePan){
          this._tm_preventEvent();
        }
    };
    
    tm.prototype._tm_taphandler = function(go) {
        var containerBox = go.watchedComponent.container.getBoundingClientRect();
        var touch = go.involvedTouchePoints()[0];
        var point = {
            x: touch.x + containerBox.left,
            y: touch.y + containerBox.top
        };
        var target = getCurrentEvent().target;
        var evtLayer = this._tm_g.node();
        var node = target;
        while ( (node !== evtLayer) && (node = node.parentNode) );
        if (node !== evtLayer) {
            return;
        }    
        this._tm_fireEvent('click', point, target);
        this._tm_status = "unknown";
    };    
    

    tm.prototype._tm_panhandler = function(go) {
        var i = 0;
        if (go.state !== GestureDetector.TransitionState.Changed 
            && go.state !== GestureDetector.TransitionState.Ended) {
            return;
        }
        var eventType = (!UADetector.isWindowsPhone() && go._isLasso) ? "lasso" : "pan";

        if (UADetector.isWindowsSurface() && eventType === 'pan' && getCurrentEvent().pointerType === 'mouse') {
            return;
        }
        var containerBox = go.watchedComponent.container.getBoundingClientRect();
        var touch = go.involvedTouchePoints()[0];
        var point = {
            x: touch.x + containerBox.left,
            y: touch.y + containerBox.top
        };
        if (go.state === GestureDetector.TransitionState.Changed) {
            if (this._tm_status === "unknown") {
                this._tm_fireEvent(eventType + "start", this._tm_touchstartpoint);
                this._tm_status = eventType;
            }
//            this._tm_fireEvent(eventType + "move", point);
        } else {
//            if (this._tm_status === eventType) {
//                console.log(go._isLasso + ", " + go._isPan);
//                this._tm_fireEvent(eventType + "end", point);
//            }
//            this._tm_status = 'unknown';
        }
    };
    

    
    tm.prototype._tm_pinchhandler = function(gesture){  
      var centerPoint = gesture.globalLocOfGesture();
      var target = getCurrentEvent().target;
      var currentScale = Math.round(gesture.scale() * 100)/100;
      if(gesture.state === GestureDetector.TransitionState.Began) {
        this._tm_fireEvent("pinchstart", centerPoint,target, currentScale);
      } else if (gesture.state === GestureDetector.TransitionState.Changed) {
       this._tm_fireEvent("pinchmove", null,target,currentScale);
      }else{
        this._tm_fireEvent("pinchend",null , target);
      }
    };

   
    tm.prototype._tm_preventEvent = function(){
        var originalEvent = getCurrentEvent();
        originalEvent.preventDefault();
        return false;
    };
    
    function getCurrentEvent() {
        if (d3.event) {
            return d3.event;
        } else {
            return window.event;
        }
    }    
    

    
    tm.prototype._tm_fireEvent = function(type, point, target, scale) {
        var originalEvent = getCurrentEvent();
        var touch = originalEvent.touches && originalEvent.touches[0] ? originalEvent.touches[0] : {};
        var temppoint, temptarget;
        if (point) {
            temppoint = point;
        } else {
            temppoint = {
               x : touch.clientX,
               y : touch.clientY
            };
        }
        if (target) {
            temptarget = target;
        } else {
            temptarget = originalEvent.target;
        }
        var tempEvent = {
            name: type,
            data : {
                point : temppoint,
                target : temptarget
            }
        };
        if(scale){
          tempEvent.data.scale = scale;
        }
        var props = this._tm_props;
        var d = this._tm_d;
        //console.log(type);
        switch (type) {
            case 'mousedown':
                if (props.enableMouseDown) {
                    d.mousedown(tempEvent);
                }
                break;
            case 'mouseup':
                if (props.enableMouseUp) {
                    d.mouseup(tempEvent);
                }
                break;
            case 'mousemove':
                if (props.enableMouseMove) {
                    d.mousemove(tempEvent);
                }
                break;
            case 'mouseover':
                if (props.enableMouseOver) {
                    d.mouseover(tempEvent);
                }
                break;
            case 'mouseout':
                if (props.enableMouseOut) {
                    d.mouseout(tempEvent);
                }
                break;
            case 'hover':
                if (props.enableHover) {
                    d.hover(tempEvent);
                }
                break;
            case 'lassostart':
                if (props.enableLassoStart) {
                    d.lassostart(tempEvent); 
                }
                break;
            case 'lassomove':
                if (props.enableLassoMove) {
                    d.lassomove(tempEvent);
                }
                break;
            case 'lassoend':
                if (props.enableLassoEnd) {
                    d.lassoend(tempEvent);
                }
                break;
            case 'panstart':
                if (props.enablePanStart) {
                    d.panstart(tempEvent);
                }
                break;
            case 'panmove':
                if (props.enablePanMove) {
                    d.panmove(tempEvent);
                }
                break;
            case 'panend':
                if (props.enablePanEnd) {
                    d.panend(tempEvent);
                }
                break;
                
            case 'pinchstart': 
               if(props.enablePinchStart){
                 d.pinchstart(tempEvent);
               } 
               break;
            case 'pinchmove':
               if(props.enablePinchMove){
                 d.pinchmove(tempEvent);
               }
               break;
            case 'pinchend':
               if(props.enablePinchEnd){
                 d.pinchend(tempEvent);
               }
               break;
            
            case 'click':
                if (props.enableClick) {
                    d.click(tempEvent);
                }
                break;
            case 'mouseleave' :
                d.mouseleave(tempEvent);
                break;
             
            default:
                break;
        }
    };

    function stopEvent(){
        if ( d3.event ) {
            d3.event.stopPropagation();
            d3.event.preventDefault();
        }
    }    
    
    return tm;
    
    //////////////////////////////////////
    
//    return function(eventManager) {
//        var gnode, props, originaltouchstartpoint;
//        var d = dispatch('click', 'hover', 'lassostart', 'lassomove',
//                'lassoend', 'mousedown', 'mouseup', 'mouseover', 'mouseout',
//                'mouseleave');
//        var oTapGestureDetector;
//        var oPanGestureDetector;
//        var status = 'hover';
//        // mouse trigger
//        var tm = function() {
//            return tm;
//        };
//
//        tm.properties = function(_) {
//            if (!arguments.length) {
//                return props;
//            }
//            props = _;
//            return tm;
//        };
//
//        tm.registerEvent = function(g) {
//            if (oTapGestureDetector === undefined) {
//                oTapGestureDetector = new TapGestureDetector();
//                oTapGestureDetector.addGestureAction(tapHandler);
//                oTapGestureDetector.enable(true);
//                eventManager.addGestureDetector(oTapGestureDetector);
//            }
//
//            if (oPanGestureDetector === undefined) {
//                oPanGestureDetector = new PanGestureDetector();
//                oPanGestureDetector.addGestureAction(panHandler);
//                oPanGestureDetector.enable(true);
//                eventManager.addGestureDetector(oPanGestureDetector);
//            }
//
//            gnode = g.node();
//            g.on('touchstart.monitor', touchstart).on('touchend.monitor',
//                    touchend);
//        };
//
//        tm.dispatch = function(_) {
//            if (!arguments.length) {
//                return d;
//            }
//            d = _;
//            return tm;
//        };
//
//        tm.destroy = function() {
//          
//        };
//
//                
//        function isInTheArea(temptarget,classname){
//            var result = false;
//            
//            if(temptarget){
//                if (temptarget.tagName === 'svg'){
//                    return false;
//                }
//                if(temptarget.getAttribute('class')){
//                    if(temptarget.getAttribute('class').indexOf(" ")){
//                      var class_array = temptarget.getAttribute('class').split(" ");
//                      for(var i = 0;i < class_array.length;i++){
//                        if(class_array[i] === classname){
//                          result = true;
//                          break;
//                        }
//                      }
//                    }else if(temptarget.getAttribute('class') === classname){
//                        result = true;
//                    }
//                } else {
//                    result = isInTheArea(temptarget.parentNode,classname);
//                }
//                return result;
//            }
//        }
//        
//         function isEnableLasso(event) {
//                var result = false;
//                if (props.supportLassoEvent && (props.selectability.mode !== 'none' && props.selectability.mode !== 'single')) {    //illegal selectionModes would be treated as default value("multiple")
//                    result = true;
//                    if (props.selectability.lassoWithCtrlKey) {
//                        var originalEvent = getCurrentEvent();
//                        if (!originalEvent.ctrlKey) {
//                            result = false;
//                        }
//                    }
//                }
//                return result;
//            }
//        
//        var last_target=null;
//        function tapHandler(go) {
//            
//            if (!isValid(getCurrentEvent())) {
//                return;
//            }
//            
//            if (!isAxisLabelArea(getCurrentEvent())) {
//                var target = getCurrentEvent().target;
//                if (target.tagName === 'text') {     
//                    if (isInTheArea(target,'v-datalabel')) {
//                        target = target.__data__.dataShape;
//                    }
//                }
//              fireEvent('hover');
//
//              fireEvent('mouseover', undefined, target);
//                   
//              if(isInTheArea(target,'v-m-plot') || isInTheArea(target,'v-datashapesgroup') || isInTheArea(target,'v-m-main')){
//                  if(!isInTheArea(target,'v-datashape')){
//                     if(last_target){
//                      fireEvent('mouseout',undefined,last_target);
//                     }
//                  }
//              }
//          
//            last_target=target;
//            }
//            
//            fireEvent('click');
//                                    
//        }
//
//        var islassoend = false, islassostart = false;
//        function panHandler(go) {
//            var target, containerBox, pointOnGesture, globalpointx, globalpointy;
//            if (go.state === GestureDetector.TransitionState.Began) {
//                target = document.elementFromPoint(
//                        getCurrentEvent().changedTouches[0].clientX,
//                        getCurrentEvent().changedTouches[0].clientY);
//                if (isInMain(target) && isEnableLasso()) {
//                    fireEvent('lassostart', originaltouchstartpoint);
//                    status = 'lasso';
//                    
//                }
//
//            } else if (go.state === GestureDetector.TransitionState.Changed) {
//                containerBox = go.watchedComponent.container
//                        .getBoundingClientRect(), pointOnGesture = go
//                        .globalLocOfGesture();
//                var gnodeBox = gnode
//                        .getBoundingClientRect();
//                globalpointx = pointOnGesture.x + containerBox.left, globalpointy = pointOnGesture.y + containerBox.top;
//
//                target = document.elementFromPoint(globalpointx,
//                        globalpointy);
//                // If the gesture happened in the area of module, we fire lasso
//                // move event, else fire lasso end event.
//                if (isInMain(target) && status === 'lasso') {
//                  islassostart = true;
//                  fireEvent('lassomove', {
//                        x : globalpointx,
//                        y : globalpointy
//                    });
//                  
//                } else {
//                    if (!islassoend && status === 'lasso') {
//                        fireEvent('lassoend');
//                        // set lasso end to true, so that we can do not fire
//                        // lasso end event.
//                        islassoend = true;
//                        status='hover';
//                    }
//                }
//
//            } else {
//              if( islassostart === true ){
//                islassostart = false;
//            if (islassoend) {
//              islassoend = false;
//            } else {
//              target = document.elementFromPoint(
//                  getCurrentEvent().changedTouches[0].clientX,
//                  getCurrentEvent().changedTouches[0].clientY);
//              if (!isInMain(target)) {
//                  return;
//              } else if (isTargetOnAxisLabel(target) && status === 'lasso') {  
//                fireEvent('lassoend');
//                status='hover';
//                return;
//              }
//              containerBox = go.watchedComponent.container
//                  .getBoundingClientRect(), pointOnGesture = go
//                  .globalLocOfGesture();
//              globalpointx = pointOnGesture.x + containerBox.left, globalpointy = pointOnGesture.y + containerBox.top;
//
//              // fire lasso end event
//              if (status === 'lasso') {
//                  fireEvent('lassoend');
//                  status='hover';
//              }
//             
//              // fire hover event
//              fireEvent('hover', {
//                x : globalpointx,
//                y : globalpointy
//              });
//              // fire mouse over event,we should figure out the target and
//              // mouse point
//              fireEvent('mouseover', {
//                x : globalpointx,
//                y : globalpointy
//              }, target);
//
//            }
//              }
//            }
//        }
//
//        function touchstart() {
//            var originalEvent = getCurrentEvent();
//            var touch = originalEvent.touches[0];
//            originaltouchstartpoint = {
//                x : touch.clientX,
//                y : touch.clientY
//            };
//
//            if (isAxisLabelArea(originalEvent) && (props.selectability.mode !== 'none')) {
//                fireEvent('mousedown');
//            }
//            return true;
//        }
//
//        function touchend() {
//            if (isAxisLabelArea(getCurrentEvent()) && (props.selectability.mode !== 'none')) {
//                        fireEvent('mouseup');
//                        fireEvent('mouseout');
//            }
//        
//        }
//
//        //check the event end point whether locate in axis area
//        function isTargetOnAxisLabel(target){
//            var classname=target.getAttribute('class');
//            var isInAxisLabelArea = false;
//            if (classname && classname.indexOf('v-labelarea') >= 0)// find it
//            {
//                if (props.selectability.mode !== 'single') {
//                    // do not have label selection in 'single'
//                    isInAxisLabelArea = true;
//                }
//            }
//            return isInAxisLabelArea;
//        }
//        
//        function isAxisLabelArea(event) {
//            var target = event.target, classname = target.getAttribute('class');
//            var isInAxisLabelArea = false;
//            if (classname && classname.indexOf('v-labelarea') >= 0)// find it
//            {
//                if (props.selectability.mode !== 'single') {
//                    // do not have label selection in 'single'
//                    isInAxisLabelArea = true;
//                }
//            }
//            return isInAxisLabelArea;
//        }
//
//        function isInMain(node) {
//            if(!node){
//                if(status === 'lasso'){
//                    fireEvent('lassoend');
//                    status = 'hover';
//                }
//               return false;
//            }
//            var result = false;
//            if (node.tagName === 'svg') {
//                return false;
//            } else {
//                if (node === gnode) {
//                    return true;
//                }
//                result = isInMain(node.parentNode);
//            }
//            return result;
//        }
//
//        function isValid(event) {
//            return isInMain(event.target);
//        }
//
//        function getCurrentEvent() {
//            if (d3.event) {
//                return d3.event;
//            } else {
//                return window.event;
//            }
//        }
//
//        function fireEvent(type, point, target) {
//            var temppoint, temptarget;
//            if (point) {
//                temppoint = point;
//            } else {
//                temppoint = originaltouchstartpoint;
//            }
//            if (target) {
//                temptarget = target;
//            } else {
//                temptarget = getCurrentEvent().target;
//            }
//            var tempEvent = {
//                name : type,
//                data : {
//                    point : temppoint,
//                    target : temptarget
//                }
//            };
//            
//
//            switch (type) {
//            case 'mousedown':
//                if (props.enableMouseDown) {
//                    d.mousedown(tempEvent);
//                }
//                break;
//            case 'mouseup':
//                if (props.enableMouseUp) {
//                    d.mouseup(tempEvent);
//                }
//                break;
//            case 'mousemove':
//                if (props.enableMouseMove) {
//                    d.mousemove(tempEvent);
//                }
//                break;
//            case 'mouseover':
//                if (props.enableMouseOver) {
//                    
//                    d.mouseover(tempEvent);
//                }
//                break;
//            case 'mouseout':
//                if (props.enableMouseOut) {
//                    d.mouseout(tempEvent);
//                }
//                break;
//            case 'hover':
//                if (props.enableHover) {
//                    d.hover(tempEvent);
//                }
//                break;
//            case 'lassostart':
//                d.lassostart(tempEvent);
//                break;
//            case 'lassomove':
//                d.lassomove(tempEvent);
//                break;
//            case 'lassoend':
//                
//                d.lassoend(tempEvent);
//                break;
//            case 'click':
//                if (props.enableClick) {
//                    d.click(tempEvent);
//                }
//                break;
//            default:
//                break;
//            }
//        }
//
//        return tm;
//    };
});

define('sap/viz/behaviors/BehaviorManager',['sap/viz/base/utils/oo','sap/viz/modules/Base','sap/viz/base/UADetector',
'sap/viz/behaviors/MouseMonitor','sap/viz/behaviors/TouchMonitor',
'sap/viz/modules/GlobalConstants', 'sap/viz/base/utils/ObjectUtils'],
function(oo, Base, UADetector,MouseMonitor, TouchMonitor, Constants, ObjectUtils){
    var BehaviorManager = function(){
        this._bem_monitor = null;
        //Jimmy/2013/9/12 a single behavior may have 
        //several items in this object, depends on how
        //many triggers it has.
        this._bem_behaviors = {};
        this._bem_backgroundRect = null;
        this._bem_behaviorTarget = null;   
        this._bem_props = {};
    };
    
    //trigger types
    BehaviorManager.DOM_TRIGGER = 'Behavior_DOM_Trigger';
    BehaviorManager.API_TRIGGER = 'Behavior_API_Trigger';
    var DOM_TRIGGER_PREFIX = 'DOM.';
    var API_TRIGGER_PREFIX = 'API.';
    
    oo.extend(BehaviorManager, Base);
    
    //this method will be called after root initialized
    BehaviorManager.prototype.initialize = function(behaviorTarget, eventManager){
        this._bem_behaviorTarget = behaviorTarget;
        this._bem_updateBackgroundRect(behaviorTarget);
        this._bem_monitor = this._bem_monitor || this._bem_getMonitor();
        //currently eventlayer is the plot area, we can extend it to the whole chart area
        this._bem_monitor.registerEvent(behaviorTarget, eventManager);
        var handler = this._bem_triggerHandler.bind(this);
        this._bem_monitor.getDispatch()
            .on('click', handler)
            .on('hover', handler)
            .on('lassostart', handler)
            .on('lassomove', handler)
            .on('lassoend', handler)
            .on('mousedown', handler)
            .on('mouseup', handler)
            .on('mouseover', handler)
            .on('mouseout', handler)
            .on('mouseleave', handler);
        if (this.gestureEnabled()){
            this._bem_monitor.getDispatch()
            .on('panstart', handler)
            .on('panmove', handler)
            .on('panend', handler)
            .on("pinchstart", handler)
            .on("pinchmove", handler)
            .on("pinchend", handler);
            this._bem_monitor.setProperties(this._bem_props);
        }else{
            this._bem_monitor.getDispatch().on('contextmenu', handler);
        }
    };
    
    BehaviorManager.prototype.getBehaviorTarget = function(){
        return this._bem_behaviorTarget;
    };
    
    BehaviorManager.prototype._bem_updateBackgroundRect = function(behaviorTarget){
        //add a background rectangle to receive events on blank area
//        if(behaviorTarget.node().nodeName === "DIV"){ // Temporarily fix for render trellis chart
//            return;
//        }
        if(!this._bem_backgroundRect){
            if(behaviorTarget.node().nodeName === "DIV") {
                this._bem_backgroundRect = behaviorTarget.insert("svg").classed('v-eventLayer', true).attr("x", 0).attr("y", 0).attr("fill-opacity", 0);
                this._bem_backgroundRect.attr("width", behaviorTarget.style('width')).attr("height", behaviorTarget.style('height'));
            } else {
                this._bem_backgroundRect = behaviorTarget.insert("rect", "g").classed('v-eventLayer', true).attr("x", 0).attr("y", 0).attr("fill-opacity", 0);
                this._bem_backgroundRect.attr("width", behaviorTarget.attr('width')).attr("height", behaviorTarget.attr('height')); 
            }
        } 
    };
    
    BehaviorManager.prototype.removeBehavior = function(bname){
        var behaviors = this._bem_behaviors;
        for(var behaviorKey in behaviors){
            if(behaviors.hasOwnProperty(behaviorKey)){
                var len = behaviors[behaviorKey].length;
                while (len--) {
                    if(behaviors[behaviorKey][len].name === bname){
                        //delete this 
                        behaviors[behaviorKey].splice(len, 1);
                    }
                }
            }
        }
    };
    
    //for complete behavior spec, please check wiki page: /wiki/display/BISHGVisualization/Behavior
    //'.' is reserved, don't use it in event or API name 
    BehaviorManager.prototype.registerNewBehavior = function(behavior){
        var behaviors = this._bem_behaviors;
        for(var triggerKey in behavior.triggers){
            if(behavior.triggers.hasOwnProperty(triggerKey)){
                var trigger = behavior.triggers[triggerKey];
                var behaviorKey;
                if(!trigger.type || trigger.type === BehaviorManager.DOM_TRIGGER){//default to DOM_TRIGGER
                    behaviorKey = DOM_TRIGGER_PREFIX + trigger.event;
                    trigger.type = BehaviorManager.DOM_TRIGGER;//default to DOM_TRIGGER
                }else if(trigger.type === BehaviorManager.API_TRIGGER){
                    behaviorKey = API_TRIGGER_PREFIX + trigger.api;
                }
                if(!behaviors[behaviorKey]){
                    behaviors[behaviorKey] = [];
                }
                behaviors[behaviorKey].push({
                    'name' : behavior.name,
                    'trigger' : trigger,
                    'logic' : behavior.logic,
                    'rootNode' : behavior.rootNode
                });    
            }
        }            
    };
    
    BehaviorManager.prototype.setProperties = function(props){
      ObjectUtils.extend(true, this._bem_props, props);
    };
    
    BehaviorManager.prototype.apiTrigger = function(/*triggerKey, handlerPara1, ...*/){
        var apiArguments = arguments;
        var triggerKey = apiArguments[0];
        
        var behaviorKey = API_TRIGGER_PREFIX + triggerKey;
        //do we have behaviors under this key?
        //Jimmy/10/31/2013 if different behaviors register triggers
        //with the same API trigger key, we only return the logic
        //output of the last behavior
        var findbs = this._bem_behaviors[behaviorKey];
        var ret;
        if(findbs){
            findbs.forEach(function(behavior, index){
                ret = behavior.logic([].slice.call(apiArguments, 1), behavior.trigger);
            }.bind(this));    
        }
        return ret;
    };
    
    BehaviorManager.prototype._bem_triggerHandler = function(event){
        var eventName = event.name;
        var target = event.data.target;
        var point = event.data.point;
        var behaviorKey = DOM_TRIGGER_PREFIX + eventName;
        //do we have behaviors under this event?
        var findbs = this._bem_behaviors[behaviorKey];
        if(findbs){
            findbs.forEach(function(behavior, index){
                if(this._bem_canTriggerBeActivated(behavior, event)){
                    behavior.logic(event, behavior.trigger);
                }        
            }.bind(this));    
        }
    };
    
    BehaviorManager.prototype._bem_canTriggerBeActivated = function(behavior, event){
        var trigger = behavior.trigger;
        //we need support more conditions
        if(trigger.event !== event.name){
            return false;
        }
        if(!trigger.target){
            //no definition, return false
            return false;
        }else{
            var found = this._bem_tryToFindNode(trigger.target, event.data.target, behavior.rootNode);
            if((!trigger.matchMode || trigger.matchMode === Constants.TRIGGER.CSS.MATCHMODE.POSITIVE) && found){
                //set event currentTarget, handlers should get data from currentTarget
                //which meets the criteria of the target definition
                event.data.currentTarget = found;
                return true;
            }else if(trigger.matchMode === Constants.TRIGGER.CSS.MATCHMODE.NEGATIVE && !found){
                event.data.currentTarget = event.data.target;
                return true;
            }else{
                return false;
            }
        }
    };
    
    BehaviorManager.prototype._bem_tryToFindNode = function(regexp, node, rootNode){
        if (!node || !node.getAttribute) {
            return;
        }
        var classname = node.getAttribute('class');
        var re = new RegExp(regexp, 'gi');
        var matchInThisLevel = re.test(classname);
        if(!matchInThisLevel && node !== rootNode.node()){
            //search to parent level until we reach the behavior target node
            return this._bem_tryToFindNode(regexp, node.parentNode, rootNode);
        }
        if(matchInThisLevel){
            return node;
        }
    };
    
    BehaviorManager.prototype._bem_getMonitor = function(){
        var ret;
        if (this.gestureEnabled()) {
          //TODO
          ret = new TouchMonitor();
        }else{
          ret = new MouseMonitor();
        }
        return ret;
    };
    
    BehaviorManager.prototype.destroy = function(){
        if(this._bem_monitor){
            this._bem_monitor.getDispatch()
            .on('click', null)
            .on('hover', null)
            .on('lassostart', null)
            .on('lassomove', null)
            .on('lassoend', null)
            .on('mousedown', null)
            .on('mouseup', null)
            .on('mouseover', null)
            .on('mouseout', null)
            .on('mouseleave', null);
            if (this.gestureEnabled()){
                this._bem_monitor.getDispatch()
                .on('panstart', null)
                .on('panmove', null)
                .on('panend', null);
            }else{
              this._bem_monitor.getDispatch().on('contextmenu', null);
            }
            
            this._bem_monitor.destroy();
            this._bem_monitor = null;
        }
        this._bem_behaviors = {}; 
        this._bem_backgroundRect = null;
        this._bem_behaviorTarget = null;
    };

    BehaviorManager.prototype.gestureEnabled = function() {
        return UADetector.isMobile() && (!UADetector.isIE() || UADetector.isPointerEnabled());
    };
    
    return BehaviorManager;
});

define('sap/viz/mvc/ChartComponent',['sap/viz/base/utils/TypeUtils','sap/viz/base/utils/ObjectUtils','sap/viz/base/utils/Objects','sap/viz/base/utils/FunctionUtils',
'sap/viz/mvc/UIComponent','sap/viz/manifest','sap/viz/modules/manifests/Module','sap/viz/modules/GlobalConstants','sap/viz/util/ignite',
'sap/viz/lang/langManager','sap/viz/config','sap/viz/style/Manager','sap/viz/style/Sheet','sap/viz/util/fn/dombuilder',
'sap/viz/util/fn/domposition','sap/viz/base/utils/log/Analyzer','sap/viz/modules/event/Manager', 'sap/viz/util/UtilsRegister', 
'sap/viz/util/TextUtils','sap/viz/config', 'sap/viz/behaviors/BehaviorManager', 'sap/viz/base/Logger', 'sap/viz/base/UADetector', 'sap/viz/format/FormatManager'],
function(TypeUtils, ObjectUtils, Objects, Functions,
  UIComponent, manifest, Modules, Constants, ignite, 
  langManager, canvgConf, StyleManager, StyleSheet, dombuilder,
  domposition, Analyzer , EventManager, UtilsRegister,
  TextUtils, config, BehaviorManager, Logger, UADetector, FormatManager){
  var DOT = '.';
  var CANVGSTATUS = 'canvg';
  var SOURCEMODULE ='sourceModule';
  var TARGETMODULE= 'targetModule';
  var INITIALIZED_EVENT_NAME = 'initialized.rootComponent'; 
  var EMPTY_SVG = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\"/>";

  function buildPropertiesTree ( obj ) {
    var returnObj = {};
    for ( var i in obj ) {
      if ( obj.hasOwnProperty(i) ) {
        if ( obj[i].supportedValueType === "Object" ) {
          returnObj[i] = buildPropertiesTree(obj[i].supportedValues);
        } else {
          returnObj[i] = obj[i].defaultValue;
        }
      }
    }
    return returnObj;
  }
  
  function mergeProperties ( defaultVal, all , defaultProperties) {
    var defaults = defaultVal, ret = {};    
    
    // FIXME This function is inadequate for handling container
    // property merge. This code snippet is just as a rescue to
    // pass the unit testing and should not be treated as correct.
    // Please correct it later.
    if (all && defaults && all.general && defaults.layout ) {
      defaults.general = {};
      defaults.general.layout = Objects.extend(true, {}, defaults.layout);
      delete defaults.layout;
    }
    
    ret = Objects.extend(true, {}, defaults);
    if(defaultProperties && defaultProperties.uncheck) {
      ret = all;
      return ret;
    }
    for ( var key in defaults ) {
      if ( defaults.hasOwnProperty(key) ) {
        if ( typeof all === 'object' && all.hasOwnProperty(key) ) {
          if ( defaults[key] !== null &&
               typeof defaults[key] === 'object' && 
               !( TypeUtils.isArray(defaults[key]) ) ) {
            ret[key] = mergeProperties(defaults[key], all[key], 
                    defaultProperties ? (defaultProperties[key] ? defaultProperties[key] : 
                      ((defaultProperties.supportedValues && defaultProperties.supportedValues[key]) ? defaultProperties.supportedValues[key] : null)) : null);
          } else {
            //typeof null is "object". Please refer to 
            //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof
            if ( (all[key] !== undefined && TypeUtils.isArray(all[key]) && 
                  TypeUtils.isArray(defaults[key]) ) ||
                 (all[key] !== undefined && typeof all[key] !== 'object') || 
                 all[key] === null ) {
              ret[key] = all[key];
            }
          }
        }
      }
    }
    
    // FIXME hard-coding
    if ( ret.general ) {
      ret.layout = ObjectUtils.extend(true, {}, ret.general.layout);
      delete ret.general;
    }
    return ret;
  }

    function extractProperties(modules, chartId) {
      var defaultProperties = manifest.viz.get(chartId).allProperties();
      var mergedProperties = {};
      var tempKey;
      var tempProp = {};
      var i, j;
      for (i in modules) {
        if (modules.hasOwnProperty(i)) {
          if ((modules[i].getProperties && !TypeUtils.isEmptyObject(modules[i].getProperties())) ||
            (modules[i].properties && !TypeUtils.isEmptyObject(modules[i].properties()))) {
            if (i.indexOf('[') > -1) {
              if (parseInt(i[i.indexOf('[') + 1], 10) > 0) {
                continue;
              } else {
                tempKey = i.substring(0, i.indexOf('[')) + i.substring(i.indexOf(']') + 1);
              }
            } else {
              tempKey = i;
            }
            for (j in defaultProperties) {
              if (defaultProperties.hasOwnProperty(j)) {
                if (defaultProperties[j].moduleRefPath === tempKey) {
                  tempProp = buildPropertiesTree(defaultProperties[j]);
                  if (modules[i].getProperties) {
                    mergedProperties[j] = mergeProperties(tempProp, modules[i].getProperties(), defaultProperties[j]);
                  } else if (modules[i].properties) {
                    mergedProperties[j] = mergeProperties(tempProp, modules[i].properties(), defaultProperties[j]);
                  }
              }
            }
          }
        }
      }
    }
    return mergedProperties;
  }
    
  /* Represents the root component. */
  var ChartComponent = UIComponent.extend({

      initialize: function(options) {
        this._config = options.config;
        this._isInfoChart = this._config.id.indexOf("info/") === 0;
        
        this._data = options.data;
        this._modules = {}; //store all modules from all levels
        this._rootModules = {}; //store modules in the root level
        this._selections = {};
        this._properties = options.options;
        this._dispatch = d3.dispatch('dataTruncation', 'initialized', 'renderComplete');
        this._attachedByFramework = false;
        this._initializedEventDispatched = false;
        this._initialized = false;
        this._behaviorManager = new BehaviorManager();
        this._rawData = options.rawData;
        this._isInitializing = true;
        this._isUpdatingData = false;
        this._isUpdatingSize = false;
        this._updatedStatus = {};
        this._i18nListener = {
          fn: this._localeChanged,
          scope: this
        };
        this._formatChangedListener = {
          fn: this._formatChanged,
          scope: this
        };

      FormatManager.addListener(this._formatChangedListener);
      langManager.addListener(this._i18nListener);
      
      if (this._data.emptyDataset && this._data.emptyDataset()) { return; } //TODO support empty data set in module level 
      
      this._canvas = d3.select(document.createElement('canvas'))
        .style('width', 0).style('height', 0);
      
      this.container.insertBefore(this._canvas.node(),this.container.firstChild);
      var m_canvg_config = canvgConf.get(this._config.id) || {} ;
      this._max_svg =  canvgConf.enableCanvg() && m_canvg_config.max_svg ? 
        m_canvg_config.max_svg : Number.POSITIVE_INFINITY ;
      this._max_canvas = canvgConf.enableCanvg() && m_canvg_config.max_canvas ?
        m_canvg_config.max_canvas : Number.POSITIVE_INFINITY ;
      
      this._root = d3.select(this.container);      // D3 selection
      this._component_status = 'svg';
      
      var id = ObjectUtils.guid("sap-viz");
      var chartClass = this.container.id + "-" + id;
      this._id = chartClass;
      
      var chartId = options.config.id.split('/');
      for ( var i = 0; i < chartId.length; i++ ) {chartClass= chartClass + ' v-'+chartId[i];}
      this._root.attr("class", chartClass).style('-webkit-user-select', 'none').style('-moz-user-select', 'none').style('-ms-user-select', 'none');
      
      this._properties = this._mergeProperties({}, this._properties);
      
      this._styleSheets = [];
      this._styleManager = new StyleManager(this._styleSheets);
      this._eventManager = EventManager().UIComponent(this);

        var helpers = {
          styleManager: this._styleManager.child(undefined, undefined, "div"),
          eventManager: this._eventManager,
          behaviorManager: this._behaviorManager, //it's not necessary if behavior is composite
          rawData: this._rawData,
          statusMonitor: this._updatedStatus
        };

        var that = this;

      Analyzer.pnrProfiling("Engine:dom_builder_for_root_level");
      // start the initialization process, currently there is only root in _selections.
      this._selections = dombuilder(this._root, this._config.modules);
      Analyzer.pnrProfiling("Engine:dom_builder_for_root_level");
      
      //fix the bug: BITVIZ-1111 [reg][PI][all chart][JavaFx] when resize chart to small, chart is cut 
//      this._selections.root.style('position', 'absolute');
      //[Christy | 2013/5/2] BITVIZ-1276 [regression] Chart draw in wrong position when set 'text-align: center' in div
      this._selections.root.style('left', 0).style('top', 0).style('direction','ltr');

      if (UADetector.isWindowsSurface()) {
        this._selections.root.style('overflow', 'hidden');
        this._selections.root.node().parentNode.style['-ms-touch-action'] ='none';
        this._selections.root.node().parentNode.style['touch-action'] ='none';
      }
      if (this._data.dataPointCount && this._data.dataPointCount() > this._max_svg ) {
          this._component_status = CANVGSTATUS;
          this._selections.root.attr('visibility', 'hidden').style('left', 0).style('top', 0);
       }
      
      
      this._rootModules = (function (scope) {
        var modules = {};
        
        //FIXME remove hard code here. and the performance is OK for now as for most of the chart we only have one module in root level
        // initialize top level modules
        var modulesArray = [];
        for (var i in scope._config.modules) {
          if (scope._config.modules.hasOwnProperty(i)) {
            //The following is hard code, it is just for letting data transform module be the first in initialized chain of modules.
            if(i === 'dataTransform'){
              modulesArray.splice(0, 0, {'key' : i, 'module' : scope._config.modules[i] });
            }else{
              modulesArray.push({'key' : i, 'module' : scope._config.modules[i] });  
            }
          }
        }
        
        //root component wants to listen on 'initialized' event for each module (if they have) in root level
        scope._toBeInitializedModulesCount = 0;
        
        function internalListener(){
          scope._intializedListener.apply(scope);
        }
        
        modulesArray.forEach(function ( itr ,index ) {
          var key = itr.key;
          var value = itr.module;
          Analyzer.pnrProfiling("Engine:create_module");
          var target = ignite(value.id, helpers, "v-m-"+key, scope._selections[key] ? scope._selections[key].node().nodeName : undefined);
          modules[key] = target;
          Analyzer.pnrProfiling("Engine:create_module");
          
          Analyzer.pnrProfiling("Engine:prepare_data");
          var data = value.data ? scope._data.createDataAdapterForModule(value.data) : scope._data;
          Analyzer.pnrProfiling("Engine:prepare_data");
          
          Analyzer.pnrProfiling("Engine:set_data");
          
          if(target.chartType){
              target.chartType(options.config.id);
          }
          
          if(target.data){
            target.data(data);
          }
          
          Analyzer.pnrProfiling("Engine:set_data");
          
          //root component wants to listen on 'initialized' event for each module (if they have) in root level
          if(target.dispatch && target.dispatch()['initialized']){
            scope._toBeInitializedModulesCount++;
            target.dispatch().on(INITIALIZED_EVENT_NAME, internalListener);
          }
          
          modules[key].alias = key;
          
          // TODO add support for non-containers
          var props = {};
          if ( value.modules ) { // container indicator
            
            Analyzer.pnrProfiling("Engine:initialize_children_set_properties");
            if ( value.configure ) {
              props[value.configure.propertyCategory] = value.configure.properties;
            }
            
            if ( modules[key].container ) {
              modules[key].container(scope._root.node()); 
            }
            
            if ( modules[key].parent ) {
              modules[key].parent(scope._selections[key]);
            }
            
            modules[key].config(value)
              .properties(Objects.extend( true, {}, props, scope._properties ))
                .chartType(options.config.id)
                .recharge({
                  func: scope._wire,
                  scope: scope
                });
            Analyzer.pnrProfiling("Engine:initialize_children_set_properties");
            
          } else {
            Analyzer.pnrProfiling("Engine:set_properties");
            var propertyCategory;
            if ( value.configure ) {
              propertyCategory = value.configure.propertyCategory;
              props[propertyCategory] = value.configure.properties;
            }
            modules[key].properties(Objects.extend( 
              true, 
              {}, 
              props, 
              scope._properties[propertyCategory] ));
            Analyzer.pnrProfiling("Engine:set_properties");
          }
        });

        return modules;
      })(this);
      
      Analyzer.pnrProfiling("Engine:flattern_modules");
      // flatten and extract sub module names
      var allModules = {};
      for ( var key in this._rootModules ) {
        if ( this._rootModules.hasOwnProperty(key)) {
          allModules = Objects.extend(true, {}, allModules, this._flatten(key, this._rootModules[key]));
        }
      }
      this._modules = allModules;
      Analyzer.pnrProfiling("Engine:flattern_modules");
      
      this._domposition(this.size());
    
     
      Analyzer.pnrProfiling("CSS:parse_css");
      this.css(options.css);
      Analyzer.pnrProfiling("CSS:parse_css");
      
      this._dispatch.on('initialized.exportToCanvas', function () {
        that._exportToCanvas.apply(that);
      });
      
      this._attachEvents(options);
    },
    
    // Raw data is used in context
    // Since context is cloned while passed down, then this workround is used to update rawdata
    updateRawData : function (rawData) {
        this._rawData.data(rawData.data());
        this._rawData.info(rawData.info());
    },
    
    doAfterShow : function(){
      this.render();
    },

    _intializedListener : function(){
      var targetCount = this._toBeInitializedModulesCount;
      targetCount--;
      if(targetCount === 0 /*&& this._attachedByFramework && !this._initializedEventDispatched*/){
        //Jimmy,3/25/2013, JS will run initialized callback immediately, however, we haven't
        //finished all work when code executing here. we will redispatch initialized event only
        //when framework is ready
        
        //Jimmy, see comments above, currently it's a workaround to use setTimeout
        if (!this._isInfoChart) {
        //when info charts, interaction module itself is behavior manager. So we don't need to initialize behavior manager any more.
          this._behaviorManager.initialize(this._selections[this._getRootKey()], this._eventManager);
        } //[2013/10/31]John Wen: ported from feat
        var that = this;
        setTimeout(function() {
            that._initialized = true;
            that._dispatch.initialized();
            
            // When info charts, we need to use renderComplete event instead of initialized event.
            // Because of avoiding backward compatibility, we throw both initialized and renderComplete event now.
            if (that._isInfoChart) {
              that._dispatch.renderComplete();
            }
            
            // notify the external handler if any
            // currently, some charts (e.g. box plot) with specific creation/update workflow may cause the image exporting tool to generate a blank image.
            // add setTimeout to workaround such cases.
            setTimeout(function() {
                if (window._sap_viz_notify_load_complete) {
                    window._sap_viz_notify_load_complete();
                }
            }, 0);
        }, 0);  
        //this._initializedEventDispatched = true;
      }
    },
    
    _getRootLevelModules : function ( keys, modules ) {
      var allModules = {};
      for (var i = 0; i < keys.length; i++) {
        if (this._modules.hasOwnProperty(keys[i])) {
          allModules = Objects.extend(true, {}, allModules, this._flatten(keys[i], this._modules[keys[i]]));
        }
      }
      return allModules;
    },
    
    // flatten keys of the modules tree
    _flatten : function ( rootKey, rootNode, joiner ) {
      var token = joiner || '.', 
          ret = {},
          hierarchy = [ { key : rootKey, value : rootNode } ];
      
      // depth-first and exhaustively walk the tree
      (function walk ( parentKey, node ) {
        if (node.hasOwnProperty('modules')) {
          var children = node.modules(), 
              layer, 
              currentKey = parentKey;
          
          for ( var k in children ) {
            if ( children.hasOwnProperty(k) ) {
              layer = {
                key : parentKey + token + k,
                value : children[k]
              }; 
              hierarchy.push(layer);
              
              if ( children[k].modules ) {
                walk(currentKey + token + k, children[k]);
              }
            }
          }
        }
      })(rootKey, rootNode);
      
      for ( var i = 0; i < hierarchy.length; i++ ) {
        ret[hierarchy[i].key] = hierarchy[i].value;
      }
      
      return ret;
    },
    
    _attachEvents : function ( options ) {
      var events = options.events;
      
      for ( var obj in events ) {
        if ( events.hasOwnProperty(obj) ) {
          this.attachEvent(obj, events[obj].fn, events[obj].scope);
        }
      }
    },
    
    //event register strategy
    //0. first check the event on chart component,if find, only listen on controller
    //1. when modules A, B, C in the same level has this event type dispatch, register this event type on all modules.
    //2. If the module A contain other modules B, C and A, B, C all has this event type dispatch, only register event on this module.
    //3. Also there are event on chart controller, and the event name in chart controller should be unique.
    attachEvent : function ( evtType, callback, scope ) {
      var modules = this.modules(), hittedModules = {};
      var dispatch = this._dispatch;
      
      //we support optional namespace in evtType
      var i = evtType.indexOf(".");
      var typeToCheck = i > 0 ? evtType.substring(0, i) : evtType;
      
      //first check the event on chart controller
      //if find, only listen on component
      if ( dispatch[typeToCheck] ) {
        dispatch.on(evtType, function () {
          callback.apply(scope, arguments);
        });
        return;
      }
      
      for ( var m in modules ) {
        if ( modules.hasOwnProperty(m) ) {
          var slist = m.split('.'),  index = slist.length - 1;
          if ( modules[m].dispatch && modules[m].dispatch()[typeToCheck] ) {
            
            for ( var t = 0; t <= index; t++ ) {
              if ( hittedModules[t] && hittedModules[t][slist.slice(0, t).toString()] ) {
                break;
              }
            }
            //if t is larger than index, it means do not exist the parent modules has this event type dispatch.
            if ( t > index ) {
              if ( !hittedModules[slist.length] ) {
                hittedModules[slist.length] = {};
              }
              hittedModules[slist.length][slist.toString()] = modules[m];
              modules[m].dispatch().on(evtType, function(){
                callback.apply(scope, arguments);
              });
            }
          }
        }
      }
    },
    
    _getRootLevelKeys : function () {
      if ( this._rootKeys ) { return this._rootKeys; }
      this._rootKeys = [];
      for ( var key in this._modules ) {
        if ( this._modules.hasOwnProperty(key) && key.indexOf(DOT) < 0 ) {
          this._rootKeys.push(key);
        }
      }
      return this._rootKeys;
    },
    
    _getRootKey : function () {
      if ( this._rootKey ) { return this._rootKey; }
      var type;
      for ( var key in this._modules ) {
        if ( this._modules.hasOwnProperty(key)){
          type = Modules.get(this._config.modules[key].id).type;
          if(type !== Constants.Type.Controller && type !== Constants.Type.Behavior && key.indexOf('.') < 0) {
            return ( this._rootKey = key );
          }
        }  
      }
    },
    
    _getRootContainer : function () {
      if ( this._rootContainer ) { return this._rootContainer; } 
      if (!this._config) { return null; } 
        for (var key in this._config.modules) {
          if (this._config.modules.hasOwnProperty(key) &&
            Modules.get(this._config.modules[key].id).type === Constants.Type.Container) {
            return (this._rootContainer = this._modules[key]);
          }
        }
      },
    
      _domposition: function(newSize) {
        //Jimmy/1/28/2013 layout root container, in the core level, we only allow one drawing element (does it have to be a container?)
        //so we give all size to it, we will resize when the actual size being changed from framework
        var rootKey = this._getRootKey();
        var allSizeLayout = {};
        //do we need an extra layout module for this to accept padding/margin properties?
        allSizeLayout[rootKey] = {
          'x': 0,
          'y': 0,
          'width': newSize.width,
          'height': newSize.height
        };
        domposition(allSizeLayout, this._selections);
      },

    _doLayout : function ( newSize ) {
      this._domposition(newSize);
      var rc = this._getRootContainer();
      if (rc) {
          rc.size(newSize);
      }
    },
    
    _updateProperties : function () {
      this._properties = this._mergeProperties(this._properties);
      
      var conf = this._config.modules;
      for ( var key in conf ) {
        if ( conf.hasOwnProperty(key) ) {
          if ( Modules.get(conf[key].id).type === Constants.Type.Container ) {
            this._modules[key].properties(this._properties);
            continue;
          }
          if ( conf[key].configure && conf[key].configure.propertyCategory ) {
            this._modules[key].properties(
              this._properties[conf[key].configure.propertyCategory]);
          }
        }
      }
    },
    
    _mergeProperties : function ( xs, xs1 ) {

      //some properties are "undefined", but we should not merge it, 
      //because these "undefined" properties have specific meanings.
      
      //we will "extend" old property in property setting. 
      //To keep these "undefined" properties, we set them to "null".

      if(xs1 &&
         xs1.plotArea && 
         xs1.plotArea.dataPointStyle &&
         xs1.plotArea.dataPointStyle.others === undefined) {
        xs1.plotArea.dataPointStyle.others = null;
      }

      var ret = {};
      ret = Objects.extend(true, {}, xs, xs1);
      return this._mergeCanvgProperties(ret) || ret;
    },
    
    _mergeCanvgProperties : function (xs) {
      if ( canvgConf.enableCanvg() && this._data.dataPointCount && this._data.dataPointCount() >= this._max_svg ) {
        var ret = {};
        // FIXME 
        // Currently, property category is missing from GEO charts 
        // by invoking this._config.getChartPropCate(). So plotArea is used to
        // mark CanVG properties instead. 
        ret['plotArea'] = {
          animation: { dataLoading: false, dataUpdating: false }
        };
        return Objects.extend( true, {}, xs, ret );
      }
    },
    
    render : function () {
      if (this._data && this._data.emptyDataset && this._data.emptyDataset() ) { return; } // TODO support empty data set in module level
      if(this._updatedStatus === undefined){
        return;
      }
      this._updatedStatus.initializing = this._isInitializing;
      this._updatedStatus.updating = this._isUpdatingData;
      this._updatedStatus.resizing = this._isUpdatingSize;
      this._isInitializing = false;
      this._isUpdatingData = false;
      this._isUpdatingSize = false;

      Analyzer.pnrProfiling("Render:layout");
      this._doLayout(this.size());
      Analyzer.pnrProfiling("Render:layout");
      
      Analyzer.pnrProfiling("Render:drawing");
      this._paint();
      Analyzer.pnrProfiling("Render:drawing");
    },
    
    _localeChanged : function () {
      // update the data of modules to let the module have change to make up locale string again.
      var rc = this._getRootContainer();
      if (rc) {
          rc.data(this._data);
      }
      this._updateProperties();
      this.render();
    },

    _formatChanged : function () {
      this.render();
    },

    properties : function (xs) {
      if ( !arguments.length ) { 
        return extractProperties(this._modules, this._config.id);
      }
      this._properties = this._mergeProperties(this._properties, xs);

      var conf = this._config.modules;
      for ( var key in conf ) {
        if ( conf.hasOwnProperty(key) ) {
          if ( Modules.get(conf[key].id).type === Constants.Type.Container ) {
            this._modules[key].properties(this._properties);
          } else {
            if ( !conf[key].configure ) { continue; }
            this._modules[key].properties(
              this._properties[conf[key].configure.propertyCategory]);
          }
        }
      }
      //Alex Su: we may also need to update sub module path when numberOfDimsInColumn is changed
//      this._modules = this._flatten(this._getRootKey(), this._getRootContainer());
      this._modules = this._getRootLevelModules(this._getRootLevelKeys(), this._modules);
    },
       
    css : function() {
      if (!this._styleManager) {
        return '';
      }
      
      if (arguments.length === 0) {
        return this._styleManager.getCurrentCSS();
      }
      
      if (arguments.length === 1 && typeof(arguments[0]) === 'object') {
        return this._styleManager.getCurrentCSS(arguments[0]['withDefaults']);
      }

      var cssText = arguments[0];
      var sheet = new StyleSheet(arguments[0], this._id, this._isInfoChart);
      this._styleManager.applyCSS(sheet);
      this._styleSheets.push(sheet);
      
      //for UVB 1.16 backward compatibility
      if (this._isInfoChart) {
        var ret = new RegExp(
            ".*\\.v-m-root \\.v-backgroundutil \\.v-background-body.*{fill:(.*);.*}")
            .exec(cssText);
        if (ret) {
          this.properties({
            general : {
              background : {
                  color : ret[1]
              }
            }
          });
        }
      }
    },
    
    cssProperty : function() {
      if (!this._styleManager) {
        return;
      }
      
      var cssText, sheet;
      if (arguments.length === 1) {
        // update
        var obj = arguments[0];
        cssText = obj.selector + "{" + obj.style + ":" + obj.value + ";}";
        sheet = new StyleSheet(cssText, this._id);
        this._styleManager.applyCSS(sheet);
        this._styleSheets.push(sheet);
      }
      if (arguments.length === 2) {
        // return specific style according to selector
        cssText = arguments[0] + "{}";
        sheet = new StyleSheet(cssText, this._id);
        return this._styleManager.getCSS(sheet, arguments[1]);
      }
    },

    getSelectedObjects: function(options) {
      // to support old interaction(pie chart) and new geo charts
      var key;
      var modules = this._modules;
      for (key in modules) {
        if (modules.hasOwnProperty(key)) {
          var module = modules[key];
          if (module.getSelectedObjects) {
            return module.getSelectedObjects(this._data, options);
          } else if (module.getSelection) {
            return module.getSelection(options);
          }
        }
      }
      var withDataCtx, withInfo;
      if (TypeUtils.isPlainObject(options)) {
        withDataCtx = options.withDataCtx;
        withInfo = options.withInfo;
      }
      // most charts are supported by new method of selection interaction
      return this._behaviorManager.apiTrigger('getSelection', withDataCtx, withInfo);
    },
    
    setSelectedObjects: function(items, options) {
      // to support old interaction(pie chart) and new geo charts
      var key;
      var modules = this._modules;
      for (key in modules) {
        if (modules.hasOwnProperty(key)) {
          var module = modules[key];
          if (module.setSelectedObjects) {
            return module.setSelectedObjects(this._data, items, options);
          } else if (module.setSelection) {
            return module.setSelection(items, options);
          }
        }
      }
      // most charts are supported by new method of selection interaction
      return this._behaviorManager.apiTrigger('setSelection', items, options);
    },
        
    selectedPropertyZone: function(sel) {
        var ret, module;
        for (var key in this._modules) {
            if (this._modules.hasOwnProperty(key)) {
                module = this._modules[key];
                if (module.selectedPropertyZone) {
                    ret = module.selectedPropertyZone.apply(module, arguments);
                    break;
                }
            }
        }
//        var args = Array.prototype.concat.apply(['selectedPropertyZone'], arguments);
//        var ret = this._behaviorManager.apiTrigger.apply(this._behaviorManager, args);
        return arguments.length ? this : ret;
    },  
    
    getAllFeedingZone : function() {
        return UtilsRegister.get('FeedingZoneUtil').parse(this._config.id, this._selections['root']);
    },
    
    getPropertyZone: function() {
      return UtilsRegister.get('PropertyZoneUtil').getPropertyZone(this._config.id, this._modules, this._selections['root']);
    },

    data : function (_) {
      if ( !arguments.length ) { return this._data; }
      this._isUpdatingData = true;
      this._data = _;
     
      // Hard cord: data transform module needs to refresh data
      if (this._modules.hasOwnProperty('dataTransform')) {
        this._modules['dataTransform'].data(this._data);
      }
      
      //currenty, we should update properties when reset dataset. As when change the component mode from svg to canvg, we should disable all animation
      this._updateProperties();
      
     
    //switch canvg mode to svg mode when change the size of dataset
      var isCanvgMode = this._data.dataPointCount && (this._data.dataPointCount() >= this._max_svg ) && canvgConf.enableCanvg();

      if( ! ( this._component_status === 'svg' && !isCanvgMode ) ){
        this._canvas.node().getContext('2d').clearRect(0, 0, this._canvas.node().width, this._canvas.node().height);
        this._canvas.style('width', 0), this._canvas.style('height', 0);
        this._canvas.attr('width', 0), this._canvas.attr('height', 0);

        if ( isCanvgMode ) {
          this._component_status = 'canvg';
          this._selections[this._getRootKey()].attr('visibility', 'hidden').style('left', 0).style('top', 0);
        } else {
          this._component_status = 'svg';
          this._selections[this._getRootKey()].attr('visibility', 'visible');
        }
      }
      
      // refresh data
      var rc = this._getRootContainer();
      if (rc && TypeUtils.isFunction(rc.data) && TypeUtils.isFunction(rc.refresh)) {
          rc.data(this._data);
          rc.refresh();
      }
      
      // after we reset data, we need update submodules as they may
      // have changed during data update
      // TODO a potential optimization here: if we split data update and schema data updata
      // we can skip module update when only data has been updated
      //this._modules = this._flatten(this._getRootKey(), this._getRootContainer());
      this._modules = this._getRootLevelModules(this._getRootLevelKeys(), this._modules);
    },
    
    modules : function () { return this._modules; },
    
    // Callback invoked by platform upon the occurrence of a resizing event.
    doContentResize : function ( oldSize, newSize ) {
      if (oldSize.width !== newSize.width || oldSize.height !== newSize.height){
        this._isUpdatingSize = true;
      }
      this._super('doContentResize', oldSize, newSize);
      // workaround svg.getBBox() error in Firefox when containing div is display:none
      this._root.style("display", "block"); 
      this.render();
    },
    
    _expandDependencyDefs : function ( item ) {
      var defs = [];
      var sourceModule = item[SOURCEMODULE];
      var targetModule = item[TARGETMODULE];
      var expandedSourceModules = this._expandModulePath(sourceModule);
      var expandedTargetModules = this._expandModulePath(targetModule);
      if ( expandedSourceModules.length > 1 && expandedTargetModules.length > 1 ) {
        if ( expandedSourceModules.length !== expandedTargetModules.length ) {
          Functions.error('Error on resolving dependency:' + sourceModule + ',' + targetModule);
        } else {
          for ( var i = 0, len = expandedSourceModules.length; i < len; i++ ) {
            defs.push({
              'sourceModule' : expandedSourceModules[i],
              'targetModule' : expandedTargetModules[i],
              'source' : item['source'],
              'target' : item['target'],
              'type' : item['type'],
              'listener' : item['listener']
            });
          }
        }
      } else {
        //we are sure that one of the loop will execute only once, and we don't care which one
        for ( var n = 0, nlen = expandedSourceModules.length; n < nlen; n++ ) {
          for ( var j = 0, jlen = expandedTargetModules.length; j < jlen; j++ ) {
            defs.push({
              'sourceModule' : expandedSourceModules[n],
              'targetModule' : expandedTargetModules[j],
              'source' : item['source'],
              'target' : item['target'],
              'type' : item['type'],
              'listener' : item['listener']
            });
          }
        }
      }
      
      //FIXME jimmy/8/8/2012 if both sourceModule and targetModule have
      //been expanded, and they have different number of items, what should
      //we do? do cartesian product? currently we simply throw exception
      return defs;
    },
    
    //nodeN.nodeN-1.nodeN-2...node1, for each nodeN,
    //if we have several entities for it, we should expand it
    _expandModulePath : function ( path ) {
      var pathArray = path.split('.');
      var currentPrefix = [];
      var currentExpand = [];
      for ( var i = 0, len = pathArray.length; i < len; i++ ) {
        var j = 0, jlen = currentPrefix.length;
        do {
          var pathI = jlen > 0 ? [currentPrefix[j], pathArray[i]].join('.') : pathArray[i];
          if ( TypeUtils.isArray(this._modules[pathI]) ) {
            //we have to expand this, and we may have undefined items in the array
            for ( var k = 0, klen = this._modules[pathI].length; k < klen; k++ ) {
              if ( this._modules[pathI][k] ) {
                var newPrefix = jlen > 0 ? [currentPrefix[j], pathArray[i] + '[' + k + ']'].join('.') : pathArray[i] + '[' + k + ']';
                currentExpand.push(newPrefix);
              }
            }
          } else {
            // put it in directly
            currentExpand.push(pathI);
          }
          j++;
        } while ( j < jlen );
        
        var refTemp = currentPrefix;
        currentPrefix = [].concat(currentExpand);
        currentExpand.length = 0;
        refTemp.length = 0;
      }
      return currentPrefix;  
    },

    _expandModules : function () {
      var modules = this._modules;
      var result = [];
      for ( var p in modules ) {
        if ( modules.hasOwnProperty(p) ) { 
          var m = modules[p];
          if ( TypeUtils.isArray(m) ) {
            for ( var i = 0; i < m.length; i++ ) {
              result[p + '[' + i + ']'] = m[i];
            }
          } else {
            result[p] = m; 
          }
        }
      }
        
      return result;
    },
    
    _unwireEvents : function() {
      var dependencies = this._config.dependencies, item, i;
      var events = dependencies ? (dependencies.events || []) : [];
      var expandedDefs, expandedDef;
      var modules = this._expandModules();
      
      // Resolve events.
      for ( i = 0; i < events.length; i++ ) {
        item = events[i];
        expandedDefs = this._expandDependencyDefs(item);
        for(var n = 0, nlen = expandedDefs.length; n < nlen; n++) {
          expandedDef = expandedDefs[n];
          if ( modules[ expandedDef[TARGETMODULE] ] && modules[ expandedDef[SOURCEMODULE] ] ) {
            if ( typeof modules[ expandedDef[TARGETMODULE] ][ expandedDef['listener'] ] === 'function' &&
                 typeof modules[ expandedDef[SOURCEMODULE] ] === 'function' ) {
                   if(typeof modules[ expandedDef[SOURCEMODULE] ].dispatch === 'function'){
                      modules[ expandedDef[SOURCEMODULE] ].dispatch().on(expandedDef['type'] + '.' + expandedDef[TARGETMODULE] + '.' + n, null);
                   }
            }
          }
        }
      }
    },
    
    // Configures various kinds of module dependencies.
    _wire : function () {
      var dependencies = this._config.dependencies, item, i;
      var attrs = dependencies ? (dependencies.attributes || [] ) : [],
          events = dependencies ? (dependencies.events || []) : [];
      
      var expandedDefs, expandedDef;
      
      // Resolve attributes.
      /*
     * [jimmy/8/8/2012]each node in the path may have several entities
     * like main.plot, we may create several main.plots
     * (here the xycontainer), by using 'main.plot.xAxis'
     * here we actually means for xAxis in each main.plot
     * 
     * in the future, we may need support more complicated dependency resolving
     * like 'the 3rd xycontainer's xAxis', can be described
     * as main.plot[2].xAxis
     */
      var modules = this._expandModules();
      
      for ( i = 0; i < attrs.length; i++ ) {
        item = attrs[i];
        if( item === null ){
          continue;
        }
        expandedDefs = this._expandDependencyDefs(item);
        for(var j = 0, jlen = expandedDefs.length; j < jlen; j++) {
          expandedDef = expandedDefs[j];
          if ( modules[ expandedDef[SOURCEMODULE] ] && modules[ expandedDef[TARGETMODULE] ] ) {
            if ( typeof modules[ expandedDef[SOURCEMODULE] ][ expandedDef['source'] ] === 'function' &&
                 typeof modules[ expandedDef[TARGETMODULE] ][ expandedDef['target'] ] === 'function' ) {
              modules[ expandedDef[TARGETMODULE] ][ expandedDef['target'] ]( 
                modules[ expandedDef[SOURCEMODULE]][ expandedDef['source']]() );
            } else {
              Functions.error('dependency configuration error');
            }
          } else {
            Functions.error('dependency configuration error');
          }
        }
      }
      
      // Resolve events.
      for ( i = 0; i < events.length; i++ ) {
        item = events[i];
        expandedDefs = this._expandDependencyDefs(item);
        for(var n = 0, nlen = expandedDefs.length; n < nlen; n++) {
          expandedDef = expandedDefs[n];
          if ( modules[ expandedDef[TARGETMODULE] ] && modules[ expandedDef[SOURCEMODULE] ] ) {
            if ( typeof modules[ expandedDef[TARGETMODULE] ][ expandedDef['listener'] ] === 'function' &&
                 typeof modules[ expandedDef[SOURCEMODULE] ] === 'function' ) {
                   if(typeof modules[ expandedDef[SOURCEMODULE] ].dispatch === 'function'){
                      modules[ expandedDef[SOURCEMODULE] ].dispatch().on(expandedDef['type'] + '.' + expandedDef[TARGETMODULE] + '.' + n, 
                        modules[ expandedDef[TARGETMODULE] ][ expandedDef['listener'] ]);
                   } else {
                     Functions.error('dependency configuration error:' + expandedDef[SOURCEMODULE] + ' does not support event!');
                   }
            } else {
              Functions.error('dependency configuration error');
            }
          } else {
            Functions.error('dependency configuration error: source or target does not exist!');
          }
        }
      }
    },
    
    // starting point of invoking the chain of painting logic
    _paint : function () {
      if (this._selections) {
      this._selections[this._getRootKey()].call(this._getRootContainer());
      //FIXME Jimmy, 3/25/2013 currently we don't call modules in the root level, such as datatransform
      //we may need do it in the future.
      }
    },
    
    // Merge Ian Li's fix to make canvg waiting for chart modules' initialized event
    _exportToCanvas: function(){
      if ( canvgConf.enableCanvg() && this._component_status === CANVGSTATUS ) {
          d3.select(this.container).selectAll('title').remove();
          if ( canvg ) {
              var node = this._selections[this._getRootKey()].node().cloneNode(true);
              node.setAttribute('visibility', 'visible');
              var canvasDocument = document.createElement('div');
              canvasDocument.appendChild(node);
              canvg(this._canvas.node(), canvasDocument.innerHTML, { ignoreMouse: true, ignoreAnimation: true });
              
              if (this._data.dataPointCount && this._data.dataPointCount() > this._max_canvas ) {
                this._dispatch.dataTruncation();
              }
          }
        }
    },

    exportToSVGString : function(option) {
        if (!this._initialized || !this._selections) {
            // return empty svg element if not ready
            Logger.warn("cannot export to svg, the viz has not been initialized..");
            return EMPTY_SVG;
        }
        
        if((this._config.id==="viz/pie" || this._config.id==="viz/donut")){
            //Determine whether aspect ratio user speicifies in option is same with the original one.
            var aspectRatioChange = function(option){
                if(option && option.width && option.height){
                    var svg = this._selections[this._getRootKey()].node();
                    var svgWidth = d3.select(svg).attr("width");
                    var svgHeight = d3.select(svg).attr("height");
                    if((svgHeight/svgWidth)===(option.height/option.width)){
                        return false;
                    }else{
                        return true;
                    }  
                }        
                return false;
            };
            if(!aspectRatioChange.call(this, option)){
                return this._getSvgFromDom(option);
            }else{
                var svgString = this._getCustomSvg(option);
                var svgCss = this._getSvgCss();
                svgString =  svgString.replace("*^^ToBeReplaced:svg'sClassAttribute%%*", this._id + " " + this._selections[this._getRootKey()].attr("class"));
                if(svgCss){//Find the flag and replace with css
                    svgString = svgString.replace("^@@ToBeReplaced:svg'sCSS##$$^", svgCss);    
                }else{//Remove the flag.
                  svgString = svgString.replace("<style>^@@ToBeReplaced:svg'sCSS##$$^</style>", "");
                }
                return svgString;
            }
        }
        
        if (this._supportCustomSVG()) {            
            return this._getCustomSvg(option);            
        }            
        
        return this._getSvgFromDom(option);
    },  
    
    
    supportExportToSVG : function() {
        var ret = false;
        // by now we can make sure to support all built in chart types
        if (this._config.id && this._selections) {
            ret = this._supportCustomSVG() || manifest.viz.get(this._config.id).isBuiltIn || 
                       (this._selections[this._getRootKey()].node().tagName === 'svg') || ret;
        }
        return ret;
    },

    /**
     * determine if current viz support custom SVG by providing exportContent() and supportExportToContentType function
     * @private
     */
    _supportCustomSVG : function() {
        return this._modules && this._modules["root.main.plot"] &&
                    TypeUtils.isFunction(this._modules["root.main.plot"].supportExportToContentType) &&
                    this._modules["root.main.plot"].supportExportToContentType("svg");
    },
    
    /**
     * get custom SVG from current viz using exportContent(config) function.
     * @private
     */
    _getCustomSvg : function(options) {
        return this._modules && this._modules["root.main.plot"] &&
                    TypeUtils.isFunction(this._modules["root.main.plot"].exportContent) &&
                        this._modules["root.main.plot"].exportContent(ObjectUtils.extend(true, {type:"svg"}, options)) || EMPTY_SVG;
    },
    
    _getSvgCss : function() {
        var cssStr = this.css(), result = [];
        // copied from Sheet.js to add chart id as class selector prefix and avoid conflict.
        var idSelector = "." + this._id;
        var ruleTexts = cssStr.split("}");
        
        for ( var i = 0, len = ruleTexts.length - 1; i < len; i++) {
          if(ruleTexts[i].indexOf(",") < 0 || ruleTexts[i].indexOf(',') > ruleTexts[i].indexOf('{')){
                ruleTexts[i] = ruleTexts[i].trim();
                result.push(idSelector + ruleTexts[i] + "}");
          }else{
             var tempTexts = ruleTexts[i].split(",");
             var tempText = "";
             for(var k=0;k<tempTexts.length-1;k++){
                tempText = tempText + idSelector + tempTexts[k] + ",";
             }
             tempText += (idSelector + tempTexts[tempTexts.length-1]);
             result.push(tempText + "}");
          }
        }
        
        return result.join("");
    },
    
    _getSvgFromDom : function(option) {
        var svg = this._selections[this._getRootKey()].node().cloneNode(true), svgStr = EMPTY_SVG;

        // add svg namespace
        d3.select(svg).attr("xmlns", "http://www.w3.org/2000/svg");

        // add chart class to the svg
        d3.select(svg).attr("class", this._id + " " + this._selections[this._getRootKey()].attr("class"));

        // wrokaround for chromium min font size rendering
        d3.select(svg).attr("text-rendering", "geometricPrecision");

        // remove tooltip if any
        d3.select(svg).selectAll(".v-m-tooltip").remove();

        // remove zoom and reset button when exporting to svg
        d3.select(svg).selectAll(".v-geo-zoom-btn").remove();
        d3.select(svg).selectAll(".v-geo-reset-control").remove();

        // remove event layer
        d3.select(svg).selectAll(".v-eventLayer").remove();

        // remove rectangle highlight
        d3.select(svg).selectAll("rect.v-select-indicator").remove();

        // remove axis if necessray
        if (option && option.hideAxis) {
            d3.select(svg).select(".v-m-main .v-m-yAxis").remove();
            d3.select(svg).select(".v-m-main .v-m-yAxis2").remove();
            d3.select(svg).select(".v-m-main .v-m-xAxis").remove();
            d3.select(svg).select(".v-m-main .v-m-xAxis2").remove();
            d3.select(svg).select(".v-m-main .v-m-zAxis").remove();
        }

        // remove legend and title if necessary
        // [workaround] resize the width/height of the svg and plot
        var svgWidth = d3.select(svg).attr("width"), svgHeight = d3.select(svg).attr("height");
        if (option && option.hideTitleLegend) {
            if (!d3.select(svg).select(".v-m-legends .v-bound").empty()) {
                svgWidth = svgWidth - d3.select(svg).select(".v-m-legends .v-bound").attr("width");
                d3.select(svg).select(".v-m-legends").remove();
            }

            if (!d3.select(svg).select(".v-m-title .v-bound").empty()) {
                svgHeight = svgHeight - d3.select(svg).select(".v-m-title .v-bound").attr("height");
                d3.select(svg).select(".v-m-title").remove();
            }
            d3.select(svg).attr("width", svgWidth).attr("height", svgHeight);
            // hard-code the plot at the position when there is no title and
            // legend
            d3.select(svg).select(".v-m-main").attr("transform", "translate(24, 24)");
            d3.select(svg).select(".v-backgroundutil .v-background-body").attr("width", svgWidth);
            d3.select(svg).select(".v-backgroundutil .v-background-body").attr("height", svgHeight);
        }

        // scale if necessary
        if (option && option.width && option.height) {
            d3.select(svg).attr("width", option.width);
            d3.select(svg).attr("height", option.height);
            d3.select(svg).attr("viewBox", "0 0 " + svgWidth + " " + svgHeight);
            d3.select(svg).attr("preserveAspectRatio", "none");
        }

        // add css string in the instance stylesheet back to the dom
        var svgCss = this._getSvgCss();
        if (svgCss) {
            d3.select(svg).append("style").text(svgCss);
        }
        // add external css as inline css
        var externalCss = "";
        if (sap && sap.bi && sap.bi.framework && sap.bi.framework.getService(this._config.id, "*sap.viz.impls")) {
            var services = sap.bi.framework.getService(this._config.id, "*sap.viz.impls"), i = 0, cssDeclarations;
            for (; i < services.length; i++) {
                if (services[i] && services[i].viz && services[i].viz[0] && services[i].viz[0].id === this._config.id && services[i].cssString) {
                    externalCss = services[i].cssString;
                    break;
                }
            }
        }
        if (externalCss) {
            d3.select(svg).append("style").text(externalCss);
        }

        //Inline the image for flag bar
        var images = svg.querySelectorAll('svg image');
        var imageNodes = Array.prototype.slice.call(images);
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');
        var img = new Image();
    
        imageNodes.map(function(image) {                                          
          var href = image.getAttributeNS("http://www.w3.org/1999/xlink", "href");
          if (!href || (/^http/.test(href) && !(new RegExp('^' + window.location.host).test(href)))) {
            return;
          }else{                    
            try {
              img.src = href;                         
              ctx.clearRect(0, 0, canvas.width, canvas.height);         
              canvas.width = img.width;
              canvas.height = img.height;
              ctx.drawImage(img, 0, 0);
              image.setAttributeNS("http://www.w3.org/1999/xlink", "href", canvas.toDataURL('image/png'));                                              
            }catch(e){
              Logger.error("error on drawing image to canvas : ", e.message);
            }
          }             
        });
      
        try {
            svgStr = new XMLSerializer().serializeToString(svg);
        } catch (e) {
            Logger.error("error on exporting the svg document : ", e.message);
        }

        var postProcessSvgStr = function(svgStr){
          var reg = /NS\d+:href/g;
          svgStr = svgStr.replace(reg, "href");

          var clippath = d3.select(svg)[0][0].getElementsByTagName('clipPath');
          for ( var num = 0; num < clippath.length; num++) {
              reg = new RegExp(clippath[num].id, "g");
              svgStr = svgStr.replace(reg, 'clipPath-' + ObjectUtils.guid());
          }
          // fix the bug in IE
          var subSvgLength = svgStr.search('>') + 1;
          var subSvgStr = svgStr.substr(0, subSvgLength);
          // Transform 'NS1:xmlns:xlink' to 'xmlns:xlink' in IE
          reg = /\w+:\w+:\w+/g;
          subSvgStr = subSvgStr.replace(reg, function(item) {
              var word = item.split(':');
              return word[1] + ':' + word[2];
          });
          // Clear empty URI of Non-default namespace declarations in IE
          reg = /\s\S*:NS\S*/g;
          subSvgStr = subSvgStr.replace(reg, '');

          svgStr = subSvgStr + svgStr.substr(subSvgLength);

          // add xlink namespace to workaround custom SVG issue
          // [TODO]: remove it when custom SVG includes complete namespace info BITSDC4-2454
          if (svgStr.indexOf("xmlns:xlink") < 0) {
              reg = /svg/i;
              svgStr = svgStr.replace(reg, function(str){
                return str + " xmlns:xlink=\"http://www.w3.org/1999/xlink\"";
              });
          }

          //Remove filter element, <feGaussianBlur> in it makes thumbnail in lumira failed in IE11, 
          // while missing <feGaussianBlur> makes datapoints missing when previewing in vizroom.
          if(UADetector.isIE() 
              && [ "viz/network", "viz/geobubble", "viz/geopie",
                   "viz/choropleth", "viz/multi_choropleth", "viz/multi_geobubble" ]
                    .indexOf(this._config.id) !== -1){
            reg = /<filter.*<\/filter>/g
            svgStr = svgStr.replace(reg,'');
          }

          //Remove xmlns:NS9="" and NS9:xmlns:xml="http://www.w3.org/XML/1998/namespace"
          reg = /xmlns:NS\d+\S*\s/g;
          svgStr = svgStr.replace(reg, '');
          reg = /NS\d+:xmlns:xml\S*\s/g;
          svgStr = svgStr.replace(reg, '');

          //Change viewbox to viewBox;
          reg = /viewbox/g;
          svgStr = svgStr.replace(reg, "viewBox");
          reg = /preserveaspectratio/g;
          svgStr = svgStr.replace(reg, "preserveAspectRatio");

          return svgStr;
        }

        svgStr = postProcessSvgStr.call(this, svgStr);

        return svgStr;
    },
    
    /**
     * Loops over events configuration of each module
     * and return the events TypeUtils.
     * 
     * @function
     * @returns {Array} Array of supported event TypeUtils
     */
    getSupportedEvents : function () {
      var events = [];
      var modules = this._config.modules;
      
      function getEventDefs( modules ) {
        for ( var m in modules ) {
          if ( modules.hasOwnProperty(m) ) {
            if(!modules[m]) {
                continue;
            }
              
            var module = manifest.module.get(modules[m].id);
            if ( module && module.events ) {
              events.push({
                sourceId : modules[m].id,
                source : {},
                evtTypes : module.events
              });
            }
            // Continue searching for composite module like a container
            if ( modules[m].modules ) {
                getEventDefs(modules[m].modules);
            } 
          }
        }
      }
      getEventDefs(modules);
      return events;
    },
    
    doDestroy : function(){
      //self destroy
      this._root = null;
      this._canvas = null;
      this._selections = null;
      //unwire events
      this._unwireEvents();
      if (this._eventManager) {
        this._eventManager.destroy();
      }
      //this event listener holds a reference to this
      //we have to remove the listener
      this._dispatch.on('initialized.exportToCanvas', null);
      //unregister events listener on root modules
      var rootModules = this._rootModules;
      var key;
      for(key in rootModules){
        if(rootModules.hasOwnProperty(key)){
           var target = rootModules[key];
           if(target.dispatch && target.dispatch()['initialized']){
             target.dispatch().on(INITIALIZED_EVENT_NAME, null);
           }
        }
      }
      
      //global single instance destroy
      TextUtils.destroy();
        if (this._behaviorManager) {
          this._behaviorManager.destroy();
        }
      
      var modules = this._modules;
      for(key in modules){
        if(modules.hasOwnProperty(key)){
          var destroyFn = modules[key].destroy;
          if(destroyFn){
            destroyFn();
          }          
        }
      }
      
      langManager.removeListener(this._i18nListener);
      FormatManager.removeListener(this._formatChangedListener);

      this._i18nListener = null;
      this.detach();
      if (TypeUtils.isArray(this._styleSheets)) {
        this._styleSheets.forEach(function(sheet){
            sheet.destroy();
        });
      }
      
    }
  });

  return ChartComponent;
});

define('sap/viz/mvc/ChartController',['sap/viz/base/utils/FunctionUtils','sap/viz/mvc/UIController',
'sap/viz/manifest', 'sap/viz/mvc/ChartComponent', 'sap/viz/data/CrosstableDataset','sap/viz/base/utils/ObjectUtils'], 
function(Functions, UIController, manifest, ChartComponent, CrosstableDataset, ObjectUtils){
    // function to clone rawdata
    var cloneDataset = function (rawData) {
      if (!(rawData instanceof CrosstableDataset)) {
        return rawData;
      }
      var tempData = ObjectUtils.clone(rawData.data());
      var tempInfo = ObjectUtils.clone(rawData.info());
      var newRawData = new CrosstableDataset();
      newRawData.data(tempData);
      newRawData.info(tempInfo);
      return newRawData;
    };
  /* Represents the chart controller. */
  var ChartController = UIController.extend({
    RootComponentClass : ChartComponent,
    
    _parseOptions : function ( options ) {
      if ( !manifest.viz.get(options.vizType) ) {
        Functions.error('Invalid vizType');  
      } 
      this._dataset = options.dataset ? options.dataset : {};
      this._options = options.option;
      this._vizType = options.vizType;
      this._dataFeeding = options.feeding;
      this._css = options.css;
      this._events = options.events;
      this._rawData = cloneDataset(options.rawData);
    },
    
    initUIComponent : function ( options ) {
        this._parseOptions(options);
        var config = manifest.viz.get(this._vizType);
        this.rootUIComponent.initialize({
          data : this._dataset,
          dataFeeding : this._dataFeeding,
          config : config,
          options : this._options,
          clipToBound : true,
          css : this._css,
          events : this._events,
          rawData : this._rawData
        });
      },

    getSelectedObjects : function (options) {
        return this.rootUIComponent.getSelectedObjects (options);
    },

    setSelectedObjects : function (items, options) {
        return this.rootUIComponent.setSelectedObjects (items, options);
    },
        
    selectedPropertyZone: function(sel) {
        var ret = this.rootUIComponent.selectedPropertyZone.apply(this.rootUIComponent, arguments);
        return arguments.length ? this : ret;
    },  
    
    getAllFeedingZone : function() {
        return this.rootUIComponent.getAllFeedingZone();
    },

    getPropertyZone : function() {
        return this.rootUIComponent.getPropertyZone();
    },

    getSupportedEvents : function () {
        return this.rootUIComponent.getSupportedEvents();
    },
    
    setDataset : function ( dataset ) {
        this.rootUIComponent.data(dataset);
    },
    
    doThemeChanged : function(){
        this.rootUIComponent.themeChanged();
    },
    
    updateProperties : function (props) {
        this.rootUIComponent.properties(props);
    },
    
    // update raw data for new interaction
    // Since context is cloned while passed down, then this workround is used to update rawdata
    updateRawData : function (rawData) {
        this._rawData.data(rawData.data());
        this._rawData.info(rawData.info());
        this.rootUIComponent.updateRawData(rawData);
    },
    
    getProperties : function() {
        return this.rootUIComponent.properties();
    },
    
    css : function () {
        return this.rootUIComponent.css.apply(this.rootUIComponent, arguments);
    },
    
    cssProperty : function() {
        return this.rootUIComponent.cssProperty.apply(this.rootUIComponent, arguments);
    },
    
    render : function(){
        this.rootUIComponent.render();
    },
    
    exportToSVGString : function(option) {
        return this.rootUIComponent.exportToSVGString(option);
    },
    
    supportExportToSVG : function() {
        return this.rootUIComponent.supportExportToSVG();
    },  

    destroy : function() {
      this._dataset = null;
      this._rawData = null;
      this.rootUIComponent.destroy();
      this.rootUIComponent = null;
    }
  });
  return ChartController;
});

define('sap/viz/load-core',[], function Setup() {return;});
define('sap/viz/data/handler/BaseDataHandler',['sap/viz/base/utils/FunctionUtils','sap/viz/base/utils/TypeUtils','sap/viz/lang/langManager'],
 function Setup(FunctionUtils, TypeUtils, langManager){
 
   
   /**
    * determine which feed should be appended with MeasureNamesDimension 
    * @param feeds feeds Array
    * @returns feedId  to auto feed mnd
    */
   function determineMNDFeed(feeds){
     
     var dimensionFeed = [];
     var allFeeded = true;
     //first to see if MND is manually feeded
     var i = 0;
     for(; i < feeds.length; i++){
       var feed = feeds[i];
       if(feed.type() === "Dimension" && feed.acceptMND() >= 0){
         if(feed.hasMNDFeeded()){
            return feed.feedId();
         }else if(feed.getDataCount() < feed.max()){
           dimensionFeed[feed.acceptMND()] = feed;
           if(allFeeded){
              allFeeded = feed.hasFeeded();
           }
         }
           
       } 
     }
     
     if(dimensionFeed.length === 0){
        return "";
     }
     
     //Second, see which feed should be auto feeded MND
     //case 1: all feeds has been feeded, decide by mndPriority
     
     if(allFeeded){
        return dimensionFeed[dimensionFeed.length - 1].feedId();
     }
      
     //case 2: not all feeds has been feeded, feed MND to non-feeded feed with highest priority
     for(i = dimensionFeed.length - 1; i >= 0; i--){
       if(dimensionFeed[i] && !dimensionFeed[i].hasFeeded()){
          return dimensionFeed[i].feedId();
       }
     }
     
     return "";
   }
   
   /**
    * return a validate value according to val passed by user
    * 1 if val is string, just return
    * 2 if val is number, convert to string , return
    * 3 if val is other type, return null
    * 
    */
   function validateStringValue(val){
     if(TypeUtils.isString(val)){
        return val;
     }else if(TypeUtils.isNumber(val)){
        return val.toString();
     }else{
        return null;
     }
   }

   function validateValue(val){
    if(TypeUtils.isString(val) || TypeUtils.isNumber(val)){
      return val;
    } else {
      return null;
    }
   }

   /**
    * return a validate value according to val passed by user
    * 1 if val is number, just return
    * 2 if val is string, convert to number , return
    * 3 if val is other type, return null
    * 
    */
   function validateNumberValue(val){
     if(TypeUtils.isNumber(val)){
        return parseFloat(val);
     }else{
        return null;
     }
   }
   
   function initDataPointUpperLimit(rawData, upperLimit){
       var limit = [ Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];
       
       var rawDataCount = rawData.getDataPointCount();
       if(upperLimit === Number.POSITIVE_INFINITY || !TypeUtils.isNumber(upperLimit) || upperLimit >= rawDataCount){
          return limit;
       }
       
       //get total measure values count
       var mvCount = 0;
       var mvgCount = rawData.getMeasureValuesGroupCount();
       for(var i = 0; i < mvgCount; i++){
         mvCount += rawData.getMeasureValuesGroupByIdx(i).getMeasureValues().length;
       }
       
       //limit of one measure value
       var mvLimit = Math.floor(upperLimit / mvCount);
       
       var aaCount = rawData.getAnalysisAxisCount();
       if(aaCount === 0 || aaCount === 1){
          limit[0] = mvLimit; 
       }else if(aaCount === 2){
         var mv = rawData.getMeasureValuesGroupByIdx(0).getMeasureValues()[0];
         //var aa2Point = mv.getValues().length;
         var aa1Point = mv.getValues()[0].length;
         if(mvLimit/aa1Point < 1){
           limit[0] = mvLimit;
           limit[1] = 1;
         }else{
           limit[1] = Math.floor(mvLimit/aa1Point);
         }
       }
       
       return limit;
   }
   
   function BaseDataHandler(feeder, rawData, upperLimit){
          this._feeder  = feeder;
          this._feeds   = feeder.getFeeds();
          this._mndFeed = determineMNDFeed(this._feeds);
          this._limit = initDataPointUpperLimit(rawData, upperLimit);
   }
   
   
   BaseDataHandler.prototype.getFeedValues = function(feedId){
      var feed = this._feeder.findFeed(feedId);
      if(!feed){
         FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_NOT_FIND_FEED_DEFINITION', feedId)  );
      }
      
      if(feed.type() === "Dimension"){
         return this.getDimensionFeedValues(feed);
      }else if(feed.type() === "Measure"){
         return this.getMeasureFeedValues(feed);
      }
     
   };
   
   
   BaseDataHandler.prototype.getDimensionFeedValues = function(feed){
     
      var feedValues = [];
      var hasManualMND = false;
      
      var datas = feed.data();
      
      var obj;
      
      var mndDefaultString = langManager.get('IDS_DEFAULTMND');
      if(datas.length > 0){
        
        for(var i = 0; i < datas.length; i++ ){
          var data = datas[i];
       
          if(data){
            if(data.getType() === "measureNamesDimension"){ 
                obj = {};
                
                //col
                obj['col'] = {'val': mndDefaultString};
                obj['type'] = 'MND';
                
                obj['rows'] = this.getMeasureNamesValues(); 
                feedValues.push(obj);
                hasManualMND = true;
                
            }else if(data.getType() === "analysisAxis"){
              
              var dimensionLabels = data.getDimensionLabels();
              var aaIndex = this._feeder.getAnalysisAxisIndex(feed);
              
              for(var j = 0 ; j < dimensionLabels.length; j++){
                  obj = {};
                  
                  //col
                  obj['col'] = {'val': validateValue(dimensionLabels[j].getId())};
                  //rows
                  var rows = [];
                  var values =  dimensionLabels[j].getValues();
                  var infos =  dimensionLabels[j].infos();
                  var limit = values.length;
                  if(this._limit[aaIndex] !== Number.POSITIVE_INFINITY){
                     limit = this._limit[aaIndex];
                  }
                  
                  for(var k = 0; k < limit; k++){
                        var value = { 'val':validateValue(values[k]), 
                                      'ctx': {
                                                          'type' : 'Dimension',
                                                          'path': {
                                                                     'aa': aaIndex,
                                                                     'di':  j,
                                                                     'dii': k  }
                                                         }
                                                };
                        
                        if(TypeUtils.isExist(infos)){
                           value.info = infos[k];
                        }
                        
                    rows.push(value);
     
                  }
                  
                  obj['rows'] = rows;
                    
                  feedValues.push(obj);
               }                
            }else{
              FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_TYPE'));
            } 
          }
          
        }
      }
     
      if(feed.feedId() === this._mndFeed && hasManualMND === false){
          //col
          obj = {};
          obj['col'] = {'val': mndDefaultString};
          obj['type'] = 'MND';
          
          obj['rows'] = this.getMeasureNamesValues();
          
          feedValues.unshift(obj);
      }
      
      return feedValues.length > 0 ? feedValues : null;
   };
   
     BaseDataHandler.prototype.getMeasureFeedValues = function(feed){
       var feedValues = [];
       var measureValues = feed.getMeasureValues();

         var mgIndex = this._feeder.getMeasureValuesGroupIndex(feed);
         for(var i = 0; i < measureValues.length; i++){
                 var obj = {};
                 
                 //col
                 obj['col'] =  validateValue(measureValues[i].getId());
                 
                 //rows
                 var rows = [];
                 var values =  measureValues[i].getValues(); //values is an aa2 * aa1 array;
                 var infos = measureValues[i].infos();
                 //aa2
                 var aa2Limit = values.length;
                 if(this._limit[1] !== Number.POSITIVE_INFINITY){
                    aa2Limit = this._limit[1];
                 }
                 
                 for(var j = 0; j < aa2Limit; j++){
                   var value = values[j];
                   var row = [], rowValue = {};
                   //aa1
                   var aa1Limit = value.length;
                   if(this._limit[0] !== Number.POSITIVE_INFINITY){
                      aa1Limit = this._limit[0];
                   }
                   
                   for(var k = 0; k < aa1Limit; k++){
                     rowValue = {
                        'val' : validateNumberValue(value[k]),
                        'ctx' : {
                          'type' : 'Measure',
                          'path' : {
                            'mg' : mgIndex,
                            'mi' : i,
                            'dii_a1' : k,
                            'dii_a2' : j
                          }
                        }
                      };
                     if(TypeUtils.isExist(infos)){
                        if (infos[j]) {
                            rowValue.info = infos[j][k];
                        }
                   }
                     row.push(rowValue);
                   }
                   
                   rows.push(row);
                 }
                 
                 obj['rows'] = rows;
                 
                 feedValues.push(obj);
         }
         
          return feedValues.length > 0 ? feedValues : null;
   };
   
   
     BaseDataHandler.prototype.getMeasureNamesValues = function(){
       var values = [];
     var mgFeeds = this._feeder.getMeasureValuesGroupFeeds();
     for(var i = 0; i < mgFeeds.length; i++){
       if(mgFeeds[i].hasFeeded()){   
           var mvs = mgFeeds[i].getMeasureValues();
           for(var j = 0; j < mvs.length; j++){
             values.push({'val':validateValue(mvs[j].getId()),'ctx': { 'path' : {'mg': i, 'mi': j}}});
           }   
         }    
       }  
     
     return values;
   };
   
   return BaseDataHandler;
 });
define('sap/viz/api/data/FlatTableDataset',['sap/viz/data/FlatTableDataset', 'sap/viz/base/utils/TypeUtils','sap/viz/base/Logger', 'sap/viz/lang/langManager', 'sap/viz/base/utils/ObjectUtils', 'exports'], function Setup(FlatTableDataset, TypeUtil, Logger, langManager, ObjectUtil) {

    /**
     * sap.viz.api.data.FlatTableDataset
     * @class sap.viz.api.data.FlatTableDataset
     * @param {Object} data JSON object
     * @param {Object} [dataSettings] The settings of FlatTableDataset in a JSON object.
     *  The current supported setting is {skipCloneData: boolean}. Default setting is {skipCloneData: false}
     *  Enabling skipCloneData greatly improves the general charting performance when viewing a large amount of dataset.
     *  It will also apply any change to dataset right away without calling api of FlatTableDataset.data().
     * <pre>
     * Example:
     *     {
     *         metadata:{
     *             fields:[{
     *                 id: 'Year',
     *                 semanticType: 'Dimension'
     *             },{
     *                 id: 'Profit',
     *                 semanticType: 'Measure'
     *             }],
     *             summary:{}
     *         },
     *         data:[
     *             [2001,100000],
     *             [2002,200000]
     *         ],
     *             info:[    // (Optional)
     *            {}
     *         ]
     *     }
     * 
     * Parameters:
     * 0 param: default constructor, Example:
     *          var ft = new sap.viz.api.data.FlatTableDataset()
     * 1 param: data or dataSettings, Example:
     *          var ft = new sap.viz.api.data.FlatTableDataset(data); 
     *          var ft = new sap.viz.api.data.FlatTableDataset(dataSettings);
     * 2 params: data and dataSettings, Example:
     *          var ft = new sap.viz.api.data.FlatTableDataset(data, dataSettings);
     * </pre>
     */
    var FlatTableD = function() {
        if(arguments.length == 1 && arguments[0] && arguments[0].skipCloneData !== undefined && !arguments[0].data){
            this._FlatTableD = new FlatTableDataset(undefined, arguments[0]);
        }else{
            this._FlatTableD = new FlatTableDataset(arguments[0], arguments[1]);
        }
        this.type = "sap.viz.api.data.FlatTableDataset";
    };
    /**
     * Get/set data and metadata in the FlatTableDataset 
     * @method sap.viz.api.data.FlatTableDataset.prototype.data
     * @param {Object} value JSON Object
     *
     * <pre>
     * Example:
     *     {
     *         metadata:{
     *             fields:[{
     *                 id: 'Year',
     *                 semanticType: 'Dimension'
     *             },{
     *                 id: 'Profit',
     *                 semanticType: 'Measure'
     *             }],
     *             summary:{}
     *         },
     *         data:[
     *             [2001,100000],
     *             [2002,200000]
     *         ]
     *     }
     * </pre>
     */
    FlatTableD.prototype.data = function(value) {
        return this._FlatTableD.data(value);
    };
    
    /**
     * Get the data of the specified column ID
     * @name sap.viz.api.data.FlatTableDataset#metadata
     * @method sap.viz.api.data.FlatTableDataset.prototype.metadata
     * @param {String} id ID of the column
     * @returns {Object[]}
     */
    FlatTableD.prototype.metadata = function(id) {
        if(id != null) {
            return this._FlatTableD.getMetadata(id);
        }else{
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    };
    
    /**
     * Get the measures' column IDs
     * @name sap.viz.api.data.FlatTableDataset#measures
     * @method sap.viz.api.data.FlatTableDataset.prototype.measures
     * @returns {Object[]}
     */
    FlatTableD.prototype.measures = function() {
        return this._FlatTableD.getMeasures();
    };
    /**
     * Get the column IDs of the dimensions
     * @name sap.viz.api.data.FlatTableDataset#dimensions
     * @method sap.viz.api.data.FlatTableDataset.prototype.dimensions
     * @returns {Object[]}
     */
    FlatTableD.prototype.dimensions = function() {
        return this._FlatTableD.getDimensions();
    };

    /**
     * Transform the data into an object table
     * @name sap.viz.api.data.FlatTableDataset#table
     * @method sap.viz.api.data.FlatTableDataset.prototype.table
     * @returns {Object[]} The data in the object table format
     */
    FlatTableD.prototype.table = function() {
        return this._FlatTableD.getTable();
    };
    
    /**
     * Get/set the specified row item of some specified type
     * @name sap.viz.api.data.FlatTableDataset#row
     * @method sap.viz.api.data.FlatTableDataset.prototype.row
     * @param  {Number}  rowIndex The index of the row you want to get
     * @param {Undefined|Array} Param To get the data in raw format or to set the row
     * 
     * <pre>
     * Example: 
     *     FlatTableDataset.row(index) is the get method to get the row.
     *     FlatTableDataset.row(index,[2001, 'Q2', 'CAN', 300, 200]) is the set method to set the row.
     * </pre>
     * @returns {Array|Object|undefied} Return the raw value if this is a get function and do not return the value if this is a set function.
     */
    FlatTableD.prototype.row = function(rowIndex, param) {
        if(TypeUtil.isNumber(rowIndex)) {
            if(TypeUtil.isPlainObject(param)||TypeUtil.isArray(param)){
                this._FlatTableD.setRow(rowIndex, param);
            }else{
                return this._FlatTableD.getRow(rowIndex);
            }
        }
    };

    /**
     * Select the data of the specified fields
     * @name sap.viz.api.data.FlatTableDataset#dataInFields
     * @method sap.viz.api.data.FlatTableDataset.prototype.dataInFields
     * @param {Array|Undefined} selectedColumns ['fieldId1','fieldId2']
     * @return {Object[]} clone of the ._table or its subset
     */
    FlatTableD.prototype.dataInFields = function(selectedFields) {        
        return this._FlatTableD.dataInFields(selectedFields);
    };
    
    /**
     * Get/set info of the dataset
     * By now, only the 'additionalData' info type is supported.
     * @deprecated
     * @name sap.viz.api.data.FlatTableDataset#info
     * @method sap.viz.api.data.FlatTableDataset.prototype.info
     * @param {Undefined|String|Array}infoData
     * @return {Object[]}
     * <pre>
     * Example:
     *     1. dataset.info(); return the info of 'additionalData' type.
     *     2. dataset.info('additionalData'); return the info of the specified data. In the current example, the type is 'additionalData'.
     *     3. dataset.info([{
     *                 type:'additionalData'
     *                 info:[[1,2,3,4]]
     *             }]);                    set the new info with its type and data info.
     *</pre>
     */
    // TODO: NOT finished code.
    FlatTableD.prototype.info = function (infoData) {
        return this._FlatTableD.info(infoData);
    };
    

    /**
     * Serialize the FlatTableDataset
     * @deprecated 
     * @name sap.viz.api.data.FlatTableDataset#toJSON
     * @method sap.viz.api.data.FlatTableDataset.prototype.toJSON
     * @return {Object}
     *
     * <pre>
     * Example:
     *     {
     *            id: 'sap.viz.data.FlatTableDataset',
     *            data: dataObject, // Data object for the FlatTableDataset
     *            info: infoArray, // Array for the FlatTableDataset
     *     }
     * </pre>
     */

    FlatTableD.prototype.toJSON = function (options) {
        return this._FlatTableD.toJSON(options);
    };
    
    /**
     * Deserialize the FlatTableDataset
     * @deprecated
     * @name sap.viz.api.data.FlatTableDataset#fromJSON
     * @method sap.viz.api.data.FlatTableDataset.fromJSON
     * @param {Object} ftJSON An object returned by the method toJSON
     * @param {Object} [dataSettings] The settings of FlatTableDataset in a JSON object
     *  The current supported setting is {skipCloneData: boolean}. Default setting is {skipCloneData: false}
     *  Enabling skipCloneData greatly improves the general charting performance when viewing a large amount of dataset.
     *  It will also apply any change to dataset right away without calling api of FlatTableDataset.data().
     * @return {Object} an instance of FlatTableDataset same with which called method toJSON
     */
    FlatTableD.fromJSON = function(ftJSON, dataSettings) {
        var ftD = new FlatTableD(null, dataSettings);
        ftD._FlatTableD = FlatTableDataset.fromJSON(ftJSON, dataSettings);
        return ftD;
    };
    // Used for VizControls
    FlatTableD.prototype.hasFakeData = function() {
        return this._FlatTableD.hasFakeData();
    };
    // Used for VizControls
    FlatTableD.prototype.getContext = function() {
        return this._FlatTableD.getContext();
    };
    return FlatTableD;
});

define('sap/viz/feeds/Manifest',['sap/viz/manifest','sap/viz/base/utils/ObjectUtils','sap/viz/lang/langManager'],
function Setup(manifest, ObjectUtils, langManager) {
  /**
   * This is a instantce , which already have been registered into {@link sap.viz.manifest.feeds}.</br>
   * </br>
   * Now, once an item is loaded from {@link sap.viz.manifest.feeds}, it will automatically provide some APIs .</br>
   * </br>
   * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
   * @see sap.viz.manifest.feeds#get
   * @class Built-in_Manifest_Objects.feedsManifest
   * @example <caption>Sample Code:</caption>
   * var pieFeed = manifest.feeds.get(pieId);
   */
  return manifest.registerCategory("feeds", function(obj) {

    var feeds = {};
    obj.feeds.forEach(function(o) {
      feeds[o.id] = o;
      var na = o.name;
      delete o.name;
      Object.defineProperty(o, 'name', {
        get : function() {
          var res = langManager.get(na);
          if (res) {
            return res;
          }
          return na;
        },
        enumerable : true
      });
    });
    /**
     * This is a instantce , which already have been registered into {@link sap.viz.manifest.feeds}.</br>
     * </br>
     * Now, once an item is loaded from {@link sap.viz.manifest.feeds}, it will automatically provide some APIs .</br>
     * </br>
     * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
     * @see sap.viz.manifest.feeds#get
     * @class Built-in_Manifest_Objects.feedsManifest
     * @example <caption>Sample Code:</caption>
     * var pieFeed = manifest.feeds.get(pieId);
     * @ignore
     */
    Object.defineProperty(obj, "feedsMap", {
      value : feeds,
      writable : false,
      enumerable : false,
      configurable : false
    });

    return obj;
  });
});
define('sap/viz/data/feed/Constants',[],
function Setup() {
  var feed = {
    Type : {
      Dimension : "Dimension",
      Measure : "Measure"
    },
    Constraints : {
      INF : Number.POSITIVE_INFINITY
    }
  };
  return feed;
});
define('sap/viz/manifests/Viz',['sap/viz/manifest','sap/viz/feeds/Manifest','sap/viz/base/utils/ObjectUtils','sap/viz/base/utils/TypeUtils',
'sap/viz/base/utils/Objects','sap/viz/data/feed/Constants','sap/viz/modules/manifests/Module',
'sap/viz/lang/langManager','sap/viz/config'],
function Setup(manifest, feedsManifest, ObjectUtils, TypeUtils, Objects, constants, module,
    langManager, globalSettings) {
  function getModuleByType(modules, type) {
    for ( var i = 0; i < modules.length; ++i) {
      if (modules[i].module.type === type) {
        return modules[i];
      }
      if (modules[i].subModules) {
        var r = getModuleByType(modules[i].subModules, type);
        if (r) {
            return r;    
        }
          
      }
    }
    return null;
  }
  function overrideProperties (target, overProps){
    if(!overProps){
      return;
    }
    var tempPropName, tempPropObj;
    for(tempPropName in target){
      if(target.hasOwnProperty(tempPropName) && overProps.hasOwnProperty(tempPropName)){
        tempPropObj = target[tempPropName];
        if(tempPropObj.supportedValueType === 'Object'){
          overrideProperties(tempPropObj.supportedValues, overProps[tempPropName]);
        }else{
          tempPropObj.defaultValue = overProps[tempPropName];
        }
      }
    }
  }
  function filterProperties (target, filterInfo){
    var tempPropName, tempPropObj;
    for(tempPropName in target){
      if(target.hasOwnProperty(tempPropName)){
        if (target[tempPropName] === null){
          delete target[tempPropName];
          continue;
        }
        tempPropObj = target[tempPropName];
        /*[Jimmy/11/15/2012]what if we override supportedValueType in the propertyOverride?
         currently we don't know how to deal with it.
         * */
        if(filterInfo){
          Objects.extend(true, tempPropObj, filterInfo[tempPropName]);
        }
        if(tempPropObj.isExported === false && !tempPropObj.uncheck){
          delete target[tempPropName];
        }else{
          if(tempPropObj.supportedValueType === 'Object'){
            filterProperties(tempPropObj.supportedValues, filterInfo ? filterInfo[tempPropName] : null);
            //if its type is object and with no children, we just delete it
            if(TypeUtils.isEmptyObject(tempPropObj.supportedValues)){
              delete target[tempPropName];
            } 
          } 
        }
      }
    }
  }
  function loadProperties(allProperties, modules) {
    if(modules){
      //3 properties we need take care of
      //propertyCategory, properties and propertiesOverride
      var mProps/*original module properties*/, 
          mcProps/*properties defined in chart manifest, aka module reference*/,
          moProps/*properties definition override in chart manifest, aka propertiesOverride*/,
          propCate/*property category*/,
          mRef/*module reference name in chart config*/;
      modules.forEach(function(o){//@Alex Su: configure module if module has one.
        if (o.config.configure && o.config.configure.propertyCategory){
          mRef = o.moduleRef;
          mProps = o.module.properties;
          mcProps = o.config.configure.properties;
          propCate = o.config.configure.propertyCategory;
          moProps = o.config.configure.propertiesOverride;
          allProperties[propCate] = Objects.extend(true, null, mProps);
          //we add a new meta data info here to indicate the reference path in chart configure of each property category        
          Object.defineProperties(allProperties[propCate], { 
            'moduleRefPath':{            
              get : (function(_refName) {
                return function() {
                  return _refName;
                };
              }(mRef)),
              enumerable : false
            }  
          });
          //filter out isExported=false, it can come from moProps or mProps
          filterProperties(allProperties[propCate], moProps);
          //override default values which come from mcProps
          overrideProperties(allProperties[propCate], mcProps);
        }
        loadProperties(allProperties, o.subModules);
      });
    }
  }

  function loadFeeds(allFeeds, modules, aaIndexOffset, mndProOffset, isFlat) {
    if (modules) {
      modules.forEach(function(o) {
        var feeds = o.module.feeds;
        var newAAIndexOffset = aaIndexOffset;
        var newMNDProOffset = mndProOffset;
        if (feeds) {
          var moduleFeeds;
          var feedsId = feeds.id;
          if (feedsId !== undefined) {
            var feedsConfigure = feeds.configure;
            moduleFeeds = feedsManifest.get(feedsId).feedsMap;
            if (feedsConfigure) { 
              moduleFeeds = ObjectUtils.extend(true, null, moduleFeeds,
                  feedsConfigure);
              }
          } else {
            moduleFeeds = {};
            feeds.forEach(function(feed) {
              moduleFeeds[feed.id] = feed;
            });
          }
     
          var i;
          for (i in moduleFeeds) {
            if(moduleFeeds.hasOwnProperty(i)){
              var feed = moduleFeeds[i];
              if (feed) {
                feed = ObjectUtils.extend(true, null, feed);
                allFeeds[i] = feed;
                if (feed.type === constants.Type.Dimension) {
                  var aaIndex = feed.aaIndex;
                  aaIndex += aaIndexOffset;
                  if (newAAIndexOffset < aaIndex) {
                      newAAIndexOffset = aaIndex;
                  }
                  if (aaIndex) {
                      feed.aaIndex = aaIndex;
                  } 
  
                  var mndPro = feed.acceptMND;
                  if (mndPro >= 0) {
                    if (mndProOffset > 0) {
                      mndPro += mndProOffset;  
                    }
                      
  
                    if (newMNDProOffset < mndPro) {
                      newMNDProOffset = mndPro;
                      }
  
                    feed.acceptMND = mndPro;
                  }
                }
              }
            }
          }
          if (newMNDProOffset >= 0) {
              newMNDProOffset += 1;
          }
            

        }
        loadFeeds(allFeeds, o.subModules, newAAIndexOffset, newMNDProOffset, isFlat);
      });
    }
  }
  /**
     * This is a instantce , which already have been registered into {@link sap.viz.manifest.viz}.</br>
     * </br>
     * Now, once an item is loaded from {@link sap.viz.manifest.viz}, it will automatically provide some APIs .</br>
     * </br>
     * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.manifest.Viz instead.
     * @example <caption>Sample Code:</caption>
     * var allFeedOfBar = manifest.viz.get(barType).allFeeds();
     * @see sap.viz.manifest.viz#get
     * @class Built-in_Manifest_Objects.vizManifest
     */
  return manifest
      .registerCategory(
          "viz",
          function(obj) {
            var modules =[];
            var configModules = obj.modules;
            for ( var moduleRefName in configModules) {
              if(configModules.hasOwnProperty(moduleRefName)){
                var moduleRef = configModules[moduleRefName];
                if (moduleRef !== null) {
                  manifest.module.loadModule(modules, moduleRef, moduleRefName);
                }
              }
            }
            var chartPropCategory = "";
            var moduleType = getModuleByType(modules, 'CHART');
            if (moduleType && moduleType.config.configure){
              chartPropCategory = moduleType.config.configure.propertyCategory;
            }
            var feedsConfigure = obj.feeds;
            var allFeeds, allRequiredFeeds, vizname = obj.name;
            var allProperties;
            delete obj.name;
            Object
                .defineProperties(
                    obj,
                    {
                      /**
                         * get the feeds definition of an item in {@link sap.viz.manifest.viz}
                         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
                         * @method Built-in_Manifest_Objects.vizManifest#allFeeds
                         * @return {[Object] allFeeds} all feeds definition of an item
                         * @example <caption>Sample Code:</caption>
                         * var allFeedOfBar = sap.viz.manifest.viz.get('viz/bar').allFeeds();
                         */
                      allFeeds : {
                        value : function(isFlat) {
                          if (!allFeeds) {
                            allFeeds = {};
                            loadFeeds(allFeeds, modules, 0, -1, isFlat);
                            ObjectUtils.extend(true, allFeeds, feedsConfigure);
                            allFeeds = d3.values(allFeeds).filter(function(o) {
                              return o;
                            });
                          }

                          //Data Handler needs to know full feed definition including useless feed for data dispatching
                          var includeUselessFeed = !arguments.length || arguments[0] === false ? false : true;
                          if (includeUselessFeed === false){
                              if (!allRequiredFeeds){
                                  allRequiredFeeds = d3.values(allFeeds).filter(function(o) {
                                  if (o.min === 0 && o.max === 0){
                                      return false;
                                  }else {
                                      return true;
                                  }
                                  
                                  });
                              }
                              return allRequiredFeeds;
                          }else{
                              return allFeeds;
                          }
       
                        },
                        enumerable : true
                      },
                      /**
                         * get all properties definition of an item in {@link sap.viz.manifest.viz}
                         * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
                         * @method Built-in_Manifest_Objects.vizManifest#allProperties
                         * @return {[Object] allProperties} all properties definition of an item
                         * @example <caption>Sample Code:</caption>
                         * var allPropertiesOfBarChart = sap.viz.manifest.viz.get('viz/bar').allProperties();
                         */
                      allProperties : {
                        /*we will go through all modules and merge their property definitions with properties override in chart manifest,
                         and return. note all the properties with isExport=false will be filtered out*/
                        value : function() {
                          if(!allProperties) {
                            allProperties = {};
                            loadProperties(allProperties, modules);
                          }
                          return allProperties;
                        },
                        enumerable : true  
                      },
                      getChartPropCate : {
                        value : function() {
                          return chartPropCategory;
                        },
                        enumerable : true
                      },
                      /**
                       * get the name of the visualization
                       * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead.
                       * @property {String}  Built-in_Manifest_Objects.vizManifest#name
                       * @example <caption>Sample Code:</caption>
                       * var name = sap.viz.manifest.viz.get('viz/bar').name
                       */
                      name : {
                        get : function() {
                          var res = langManager.get(vizname);
                          if (res) {
                              return res;
                          }
                           
                          return vizname;
                        },
                        enumerable : true
                      }
                    });
            return obj;
          });
});
define( 'sap/viz/manifests/util/ManifestRegister',[ 'sap/viz/manifests/Viz', 'sap/viz/modules/manifests/Module', 'sap/viz/feeds/Manifest', 'sap/viz/base/utils/TypeUtils', 'require', 'exports'], function(Viz,
        Module, Feed, TypeUtils, req) {
    var DEFAULT_CATEGORIES = [ "viz", "module", "feeds" ];
    var vizDepo = {}, moduleDepo = {}, feedDepo = {}, vizNameDepo = {}, manifestDepo = [];

    function registerViz(vizs) {
        var id;
        if (vizs) {
            Array.prototype.forEach.call(vizs, function(viz, i, arr) {
                if (viz && viz.id !== undefined) {
                    id = viz.id;
                    if (vizDepo[id] !== true) {
                        if (viz && (typeof viz.init) === 'function') {
                            // workaround for Flow registration
                            viz.init();
                        } else {
                            Viz.register(viz);
                        }
                        vizDepo[id] = true;
                    }
                }
            });
        }
    }

    function registerModule(modules) {
        var id;
        if (modules) {
            Array.prototype.forEach.call(modules, function(module, i, arr) {
                if (module && module.id !== undefined) {
                    id = module.id;
                    if (moduleDepo[id] !== true) {
                        Module.register(module);
                        moduleDepo[id] = true;
                    }
                }
            });
        }
    }

    function registerFeed(feeds) {
        var id;
        if (feeds) {
            Array.prototype.forEach.call(feeds, function(feed, i, arr) {
                if (feed && feed.id !== undefined) {
                    id = feed.id;
                    if (feedDepo[id] !== true) {
                        Feed.register(feed);
                        feedDepo[id] = true;
                    }
                }
            });
        }
    }

    function compareArray (aArr, bArr) {
        if (aArr.length !== bArr.length) {
            return false;
        }
        for (var i = 0; i < aArr.length; i++) {
            if (aArr[i] !== bArr[i]) {
                return false;
            }
        }
        return true;
    };
    
    function sortManifests (a, b) {
        if (typeof a === 'string') {
            if (typeof b === 'string') {
                return 0;
            } else {
                return -1;
            }
        } else if (typeof b === 'string') {
            return 1;
        } else {
            return 0;
        }
    };
    
    function registerAllManifests() {
        //console.log("-------------------------------registerAllManifests");
        var allManifests = sap.bi.framework.getService("sap.viz.aio", "*sap.viz.impls");
        // [Workaround] put all the flow registration to the end of the whole registration
        // to avoid flow from registering viz/modules/feeds before the core charts and override the internal behavior.
        // this should be fixed in the FlowManager side.
        allManifests = Array.prototype.sort.call(allManifests, sortManifests);
        if (manifestDepo.length < 1) {
            manifestDepo = allManifests;
        } else {
            if (compareArray(manifestDepo, allManifests)) {
                return;
            }
            manifestDepo = allManifests;
        }
        
        if (allManifests) {
            registerManifestsByComponents(allManifests);
        }
    }
    
    function registerManifestsByComponents(components) {
        function doRegister(component) {
            for (var id in component) {
                if (component.hasOwnProperty(id) && DEFAULT_CATEGORIES.indexOf(id) !== -1) {
                    switch (id) {
                    case "viz":
                        registerViz(component[id]);
                        break;
                    case "module":
                        registerModule(component[id]);
                        break;
                    case "feeds":
                        registerFeed(component[id]);
                    }
                }
            }
        };
        if(!TypeUtils.isArray(components) || components.length == 0) {
            return;
        }
        
        // hack - make sure all the require during manifest register is sync 
        var supportHostBundle = window.sap && window.sap.bi && window.sap.bi.framework && 
                            window.sap.bi.framework.capabilities &&
                            window.sap.bi.framework.capabilities.bundleLoading &&
                            window.sap.bi.framework.capabilities.bundleLoading.hostBundle;
        
        req = supportHostBundle && req ? req : require;
        var boundleContexts, nextTickBak, boundleNextTickBak;
        
        if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
            nextTickBak = requirejs.s.contexts._.nextTick;
            requirejs.s.contexts._.nextTick = function(fn) {fn();};
            
            if(supportHostBundle){
                for(var key in requirejs.s.contexts) {
                    // hardcode to get boundle context. It may be broken when we seperate to several boundles.
                    if(key.indexOf("sap.viz.aio") !== -1 || key.indexOf("sap.viz.core") !== -1) { 
                        boundleContexts = requirejs.s.contexts[key];
                        break;
                    }
                }
                if(boundleContexts) {
                    boundleNextTickBak = boundleContexts.nextTick;
                    boundleContexts.nextTick = function(fn) {fn();};
                }
            }
        }
        
        Array.prototype.forEach.call(components, function(component) {
            var manifestsLoaded = false, id;
            if(TypeUtils.isString(component)) {
                if(vizNameDepo[component] === undefined) {
                    req([component], function(c){
                        vizNameDepo[component] = c; 
                        doRegister(c);
                    });
                    return;
                } else {
                    manifestsLoaded = true;
                }
            } else if (typeof component === 'object' && component.viz 
                            && typeof component.viz[0] === 'object' && component.viz[0].id) {
                // extensions including both extensions with flow api and legacy extensions like table, pa, pc
                id = component.viz[0].id;
                vizNameDepo[id] === undefined ? vizNameDepo[id] = component : (manifestsLoaded = true);
            }
            
            // do not bother to load the manifests for the specific component several times
            // because currently the framework does not support modify the definition of the components/services
            if (!manifestsLoaded) {
                doRegister(component);
            }
        });
        
        // hack end - make sure all the require during manifest register is sync 
        if (nextTickBak !== undefined) {
            if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
                requirejs.s.contexts._.nextTick = nextTickBak;
            }
            
            if(supportHostBundle && boundleContexts){
                boundleContexts.nextTick = boundleNextTickBak;
            }
        }
    }

    return {
        /**
         * Register all "viz", "module" and "feeds" manifests from extension
         * provide "sap.viz.impls"
         */
        registerAll : function() {
            registerAllManifests();
        },
        /**
         * Register the "viz", "module" and "feeds" manifests for a specific viz type.
         *
         */
        registerViz : function(vizType) {
            //console.log("-------------------------------registerViz:", vizType);
            var i, meta, services = sap.bi.framework.getService("sap.viz.aio", "*sap.viz.impls"), 
                servicesMetaData = sap.bi.framework.getServiceMetadata("*sap.viz.impls");
            
            // [TODO] Replace such logic because it depends on the internal implementation of the DIkernal, which will retrieve 
            // service and service meta data from the same array so that their index will be consistent. Otherwise, we have to 
            // config the static mapping between the viz type and the impls file name which is a duplication of the aio-bundle.
            // We need the framework to support retrieving component/service by its id first and change the implementation here.
            for (i=0;i<servicesMetaData.length;i++) {
                meta = servicesMetaData[i];
                if (meta && meta.id === vizType) {
                    break;
                }
            }
            
            if (i !== servicesMetaData.length && TypeUtils.isString(services[i])
                    && services[i].indexOf("sap/viz/impls/geo") == -1) {
                // build-in charts except geo whose dependency on core charts manifests are uncertain
                registerManifestsByComponents([services[i]]);
            } else {
                // extensions or unknown type
                registerAllManifests();
            }
        }
    };
});
define('sap/viz/api/manifest/Viz',['sap/viz/manifests/Viz', 'sap/viz/base/utils/TypeUtils', 'sap/viz/manifests/util/ManifestRegister', 'exports'], function Setup(Viz, TypeUtils, ManifestRegister) {
    
    var manifest = 
  /**
   * sap.viz.api.manifest.Viz<br>
   * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€
   * You should load sap.viz.js library before using the API.]
   * @deprecated 
   * @namespace sap.viz.api.manifest.Viz
   */
    {
   
        
        /**         
         * @function get
         * @memberof sap.viz.api.manifest.Viz
         * @static         
         * @param {String} [id]
         *                        Returns the viz manifest that is associated with the ID. If the ID is not defined, it returns all the viz manifests.
         * @param {Boolean} [throwErrorIfNull]
         *                       Only works when an ID argument exists
         * @return {sap.viz.api.manifest.VizManifest[]} viz manifests, this is a read only object
         *                         A viz manifest registered by {@link sap.viz.extapi.manifest.Viz.register}.</br>
         * 
         * @example <caption>Sample Code:</caption>
         * var viz = sap.viz.api.manifest.Viz.get(barType); // Get specified viz by ID; returns an array which contains one viz object.
         * var allFeedOfBar = sap.viz.api.manifest.Viz.get(barType)[0].allFeeds(); // Get all feeds for barType
         * var allViz =  sap.viz.api.manifest.Viz.get(); // Get all viz; returns an array which contains all viz objects.
         * 
         * This function replaces API manifest.viz.each which was in the previous API version. Use this function instead.
         * 
         * If you used sap.viz.manifest.viz.each(function(obj, id){....}) in previous versions,
         * you can now use the following: var VizSet =  sap.viz.api.manifest.Viz.get(); VizSet.forEach(function(obj, id){....});
         * 
         * viz manifest returned:
         * {
         *     "id": String,
         *     "name": String,
         *     "modules": Object, // Modules in the viz, such as: title, legend, etc.
         *     "dependencies": Object, // Dependencies between modules
         *     "allFeeds": Function, // Get all feed manifests of the viz
         *     "allProperties": Function, // Get all properties of the viz
         * }
         *       
         */
        get : function() {
            // Register module manifests to repo
            if (arguments && arguments[0]) {
                ManifestRegister.registerViz(arguments[0]);
            } else {
                ManifestRegister.registerAll();
            }
            return Viz.getManifest.apply(this, arguments);
        }
    };

    /**     
     * Add API to let clients know whether the feeding is acceptable for one specific feeding area.     
     * Take feed ID and the feed metadata as the input, decide whether the feeding is acceptable according to min/max feeding number and current feeding status.
     * 
     * @method sap.viz.api.manifest.Viz.feedAcceptable
     * @deprecated
     * @param {String} chartType
     *                         The feeding chart type
     * @param {Array} feeding
     *                         Feeding object array
     * @return {boolean}     True means the feed is acceptable
     * 
     * 
     */
    manifest.feedAcceptable = function(chartType, feeding) {
        // Register manifests to repo for chartType
        if (chartType) {
            ManifestRegister.registerViz(chartType);
        }
        
        var viztype = Viz.get(chartType);
        if(viztype != undefined) {
            var manifestDescription = viztype.allFeeds(true);
            var returnValue = true;
            if(!(TypeUtils.isArray(manifestDescription) && TypeUtils.isArray(feeding))) {
                // Chart type does not exist
                returnValue = false;
            } else {
                var len = feeding.length;
                var feedLogic = {};
                var i = 0;
                for( i = 0; i < len; i++) {
                    var feedobj = feeding[i];
                    if(TypeUtils.isArray(feedobj.binding)) {
                        feedLogic[feedobj.feedId] = feedobj.binding.length;
                    } else {
                        returnValue = false;
                        break;
                    }
                }
                if(manifestDescription.length != len) {
                    // When the length of feeding description is not equal to the feeding object, we cannot feed correctly.
                    returnValue = false;
                } else if(returnValue == true) {
                    for( i = 0; i < len; i++) {
                        var feedDesObj = manifestDescription[i];
                        if(feedLogic[feedDesObj.id] == null || (feedLogic[feedDesObj.id] < feedDesObj.min || feedLogic[feedDesObj.id] > feedDesObj.max )) {
                            // When the max or min value of feed description is not satisfied or the feed ID does not exist in the feed object, return false;
                            returnValue = false;
                            break;
                        }
                    }
                }
            }

            return returnValue;
        }
        return false;
    }
    return manifest;
});

define('sap/viz/api/data/CrosstableDataset',['sap/viz/data/CrosstableDataset', 'sap/viz/base/utils/ObjectUtils', 'sap/viz/base/utils/TypeUtils', 'exports'],function Setup(CrosstableDataset, ObjectUtils, TypeUtils){

    /**
     * sap.viz.api.data.CrosstableDataset
     * @class sap.viz.api.data.CrosstableDataset
     */
    var crosstableD = function(){
        this._crosstableDataset = new CrosstableDataset();
        this.type = "sap.viz.api.data.CrosstableDataset";
    }
    /**
     * Get/Set the data in CrosstableDataset
     * @method sap.viz.api.data.CrosstableDataset.prototype.data
     * @param {Object|undefined} value
     *                      (Optional) Pass the data object consisting of "analysisAxis" and "measureValuesGroup"
     * 
     *<pre>
     * Example: 
     * {
     *      "analysisAxis" : [{
     *          "index" : 1,
     *          "data" : [{
     *              "type" : "Dimension",
     *              "name" : "Product",
     *              "values" : ["Car", "Truck", "Motorcycle", "Bicycle"]
     *          }]
     *      }, {
     *          "index" : 2,
     *          "data" : [{
     *              "type" : "Dimension",
     *              "name" : "Country",
     *              "values" : ["China", "USA"]
     *          }, {
     *              "type" : "Dimension",
     *              "name" : "Year",
     *              "values" : ["2001", "2001"]
     *          }]
     *      }],
     *      "measureValuesGroup" : [{
     *          "index" : 1,
     *          "data" : [{
     *              "type" : "Measure",
     *              "name" : "Profit",
     *              "values" : [[25, 136, 23, 116], [58, 128, 43, 73]]
     *          }, {
     *              "type" : "Measure",
     *              "name" : "Revenue",
     *              "values" : [[50, 236, 43, 126], [158, 228, 143, 183]]
     *          }]
     *      }]
     *  }
     * </pre>
     */
    crosstableD.prototype.data = function(value) {
        if (value !== undefined) {
            this._crosstableDataset.data(value);
        } else {
            return this._crosstableDataset.data();
        }
    }

    /**
     * Get/Set additional info for the CrossTable dataset.
     * By now, only the "additionalData" info type is supported.
     * @deprecated
     * @name sap.viz.api.data.CrosstableDataset#info
     * @method sap.viz.api.data.CrosstableDataset.prototype.info
     * @param {Array|String} [arguments]
     *                               The array of Objects is for setting info and passing different types of info objects.
     * <pre>
     * Schema:
     * [{
     *     "type": "additionalData",
     *     "info": [{
     *        "name": "<dimension_name>",
     *        // Match the dimension member's 1D array structure
     *        "infoValues": []
     *     }, {
     *     "name": "<measure_name>",
     *        // Match the measure value's 2D array structure
     *        "infoValues": [[]]
     *     }]
     * }]
     * </pre>
     * <pre>
     * Example:
     * [{
     *    "type" : "additionalData",
     *    "info" : [{
     *        "name" : "Country",
     *        "infoValues" : [{
     *            "CountryID": "1"
     *        }, {
     *            "CountryID": "2"
     *        }]
     *    }, {
     *        "name" : "Profit",
     *        "infoValues" : [[{
     *            "ID" : "11"
     *        }, {
     *            "ID" : "12"
     *        }, {
     *            "ID" : "13"
     *        }, {
     *            "ID" : "14"
     *        }], [{
     *            "ID" : "21"
     *        }, {
     *            "ID" : "22"
     *        }, {
     *            "ID" : "23"
     *        }, {
     *            "ID" : "24"
     *        }]]
     *    }]
     * }]
     * </pre>
     *                               The string is for getting info and passing the name of the specific type of info.
     * <pre>
     * Example:
     * "additionalData"
     * </pre>
     * @returns {Array}
     *                 Return a copy of the info type passed in
     *                        or a copy of all the types of info sets if no param is provided.
     */
    crosstableD.prototype.info = function(value) {
        if (value !== undefined && !TypeUtils.isString(value)) {
            this._crosstableDataset.info(ObjectUtils.clone(value));
        } else if (TypeUtils.isString(value)) {
            return ObjectUtils.clone(this._crosstableDataset.info(value));
        } else {
            return ObjectUtils.clone(this._crosstableDataset.info());
        }
    }
    /**
     * Serialize the CrossTableDataset
     * @ignore
     * @name sap.viz.api.data.CrosstableDataset#toJSON
     * @method sap.viz.api.data.CrosstableDataset.prototype.toJSON
     * @param {Object} options (Optional)
     * Example:
     *      {
     *          emptyDataset: Boolean // If true, returns a JSON with none-value dataset
     *      }
     * @return {Object}
     *
     * <pre>
     * Example:
     *     {
     *            id: 'sap.viz.data.CrosstableDataset',
     *            data: dataObject, // Data object for CrossTableDataset
     *            info: infoArray, // Array for CrossTableDataset
     *     }
     * </pre>
     */
    crosstableD.prototype.toJSON = function (options) {
        return this._crosstableDataset.toJSON(options);
    };
    
    /**
     * Deserialize the CrossTableDataset
     * @ignore
     * @param {Object} ctJSON
     * @return {Object} CrossTableDataset
     */
    crosstableD.fromJSON = function (ctJSON) {
        if (!TypeUtils.isPlainObject(ctJSON) || ctJSON.id !== 'sap.viz.data.CrosstableDataset' || !ctJSON.hasOwnProperty('data')) {
            return;
        }
        var data = ObjectUtils.clone(ctJSON.data);
        var info = ObjectUtils.clone(ctJSON.info);
        var ctDataset = new crosstableD();
        ctDataset.data(data);
        ctDataset.info(info);
        return ctDataset;
    };
    // Used for VizControls
    crosstableD.prototype.hasFakeData = function() {
        return this._crosstableDataset.hasFakeData();
    }
   
   
    return crosstableD;
});

define('sap/viz/data/utils/DatasetUtils',['sap/viz/api/data/CrosstableDataset', 'sap/viz/api/data/FlatTableDataset', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/FunctionUtils', 'sap/viz/lang/langManager'],
    function(CrosstableDataset, FlatTableDataset, TypeUtils, FunctionUtils, LangManager) {

        var DatasetUtils = {

        };

        var CONSTNAME = {
            MNDNAME: "MeasureNamesDimension",
            MNDCOMPATIBILITY: "MNDCompatibility",
            DIMENSIONNAME: "Dimension",
            MEASURENAME: "Measure",
            EXCLUSIVE: "exclusive",
            ACCEPTMND: "acceptMND",
            MAXDEFINITIONTYPE: {
                'Dimension': "maxNumOfDimensions",
                'Measure': "maxNumOfMeasures"
            },
            MINDEFINITIONTYPE: {
                'Dimension': "minNumOfDimensions",
                'Measure': "minNumOfMeasures"
            }
        };

        DatasetUtils.isFlatTable = function(data) {
            return (data instanceof Object) && (data.dataset instanceof FlatTableDataset);
        };
        DatasetUtils.isCrosstable = function(data) {
            return (data instanceof Object) && (data.dataset instanceof CrosstableDataset);
        };

        var allDimensionsBindingCheck = function(flatTable, allBindingDimensions) {
            var inputDimensions = flatTable.dimensions();
            var dimensionsBindingTimes = [];
            for (var i = 0; i < inputDimensions.length; i++) {
                dimensionsBindingTimes[i] = 0;
            }
            for (var j = 0; j < allBindingDimensions.length; j++) {
                for (var k = 0; k < inputDimensions.length; k++) {
                    if (inputDimensions[k] === allBindingDimensions[j]) {
                        dimensionsBindingTimes[k]++;
                    }
                }
            }
            //check incomplete binding
            for (var index = 0; index < dimensionsBindingTimes.length; index++) {
                if (dimensionsBindingTimes[index] === 0) {
                    throw LangManager.getLogMessage('IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING');
                }
            }
        };

        var duplicatedDimensionsAndMeasuresInSameFeedCheck = function(oneFeedDimensionsOrMeasures) {
            var removeDuplicate = [];
            for (var i = 0; i < oneFeedDimensionsOrMeasures.length; i++) {
                if (removeDuplicate.indexOf(oneFeedDimensionsOrMeasures[i]) === -1) {
                    removeDuplicate.push(oneFeedDimensionsOrMeasures[i]);
                } else {
                    throw LangManager.getLogMessage('IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING');
                }
            }
        };

        var maxMinCheck = function(flatTableBinding, definition) {
            var maxString = CONSTNAME.MAXDEFINITIONTYPE[definition.type];
            var minString = CONSTNAME.MINDEFINITIONTYPE[definition.type];
            if (flatTableBinding.hasOwnProperty(definition.id)) {
                var bind = flatTableBinding[definition.id];
                var bindLength = bind.length;
                if (bindLength > definition[maxString] || bindLength < definition[minString]) {
                    throw LangManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', definition.id);
                }
            } else {
                if (definition[minString] > 0) {
                    throw LangManager.getLogMessage('IDS_ERROR_NOT_MEET_NUMBER_OF_FEED', definition.id);
                }
            }
        };

        var MNDCheck = function(bind, definition) {
            var mndIndex = bind.indexOf(CONSTNAME.MNDNAME);
            if (mndIndex >= 0) {
                if (definition.type === CONSTNAME.MEASURENAME || !definition.hasOwnProperty(CONSTNAME.ACCEPTMND) || definition[CONSTNAME.ACCEPTMND] === -1) {
                    throw LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING', definition.id);
                }
                if (definition[CONSTNAME.MNDCOMPATIBILITY] === CONSTNAME.EXCLUSIVE && bind.length > 1) {
                    throw LangManager.getLogMessage('IDS_ERROR_INVALID_BINDING', definition.id);
                }
            }
        };

        var metaCheck = function(flatTable, bind, definition) {
            var bindLength = bind.length;
            for (var j = 0; j < bindLength; j++) {
                if (bind[j] === CONSTNAME.MNDNAME) {
                    continue;
                }
                var metaData = flatTable.metadata(bind[j]);
                if (metaData && metaData.length > 0 && definition.type === flatTable.metadata(bind[j])[0].semanticType) {
                    continue;
                } else {
                    throw LangManager.getLogMessage('IDS_ERROR_FEED_NOT_ACCEPT_DATA', bind[j]);
                }
            }
        };

        DatasetUtils.checkNeedAutoMNDFeed = function(flatTableFeedingDefinition, flatTableBinding) {
            var needAutoMND = true;
            for (var i = 0; i < flatTableFeedingDefinition.length; i++) {
                var id = flatTableFeedingDefinition[i].id;
                if (flatTableFeedingDefinition[i].type === CONSTNAME.DIMENSIONNAME && flatTableBinding.hasOwnProperty(id)) {
                    if (flatTableBinding[id].indexOf(CONSTNAME .MNDNAME) !== -1) {
                        needAutoMND = false;
                        break;
                    }
                }
            }
            return needAutoMND;
        };

        DatasetUtils.autoMNDFeed = function(flatTableBinding, flatTableFeedingDefinition) {
            var bindMNDFeedingDefinition = [];
            var addMNDDimensionDefinition = null;
            //sort the feeds definition which can bind MND by acceptMND number
            for (var i = 0; i < flatTableFeedingDefinition.length; i++) {
                var definition = flatTableFeedingDefinition[i];
                if (definition.type === CONSTNAME.DIMENSIONNAME && definition.hasOwnProperty(CONSTNAME.ACCEPTMND) && definition[CONSTNAME.ACCEPTMND] >= 0) {
                    bindMNDFeedingDefinition[definition[CONSTNAME.ACCEPTMND]] = definition;
                }
            }
            //iterate new feeds definition for MND from the higest priority to the lowest,
            //check if feed with higher priority in definition also exists in binding table, if not, add it to binding table
            //if yes, check if MND could be bound to it
            for (var j = bindMNDFeedingDefinition.length - 1; j >= 0; j--) {
                var MNDFeedingDefinition = bindMNDFeedingDefinition[j];
                var id = MNDFeedingDefinition.id;
                if (!flatTableBinding.hasOwnProperty(id)) {
                    flatTableBinding[id] = [];
                    addMNDDimensionDefinition = MNDFeedingDefinition;
                    break;
                } else {
                    var maxString = CONSTNAME.MAXDEFINITIONTYPE[CONSTNAME.DIMENSIONNAME];
                    var bind = flatTableBinding[MNDFeedingDefinition.id];
                    if (MNDFeedingDefinition[CONSTNAME.MNDCOMPATIBILITY] === CONSTNAME.EXCLUSIVE && bind.length > 0) {
                        continue;
                    } else if (bind.length >= MNDFeedingDefinition[maxString]) {
                        continue;
                    } else {
                        if (!addMNDDimensionDefinition) {
                            addMNDDimensionDefinition = MNDFeedingDefinition;
                        }
                    }
                }
            }
            //add MND to the first place in feeds
            if (addMNDDimensionDefinition) {
                flatTableBinding[addMNDDimensionDefinition.id].splice(0, 0, CONSTNAME.MNDNAME);
            }
            return flatTableBinding;
        };

        //This will throw an error when the feeding is not acceptable.
        //TODO: Separate check and error handlering.
        DatasetUtils.checkFlatTableFeedingAcceptable = function(flatTable, flatTableBinding, flatTableFeedingDefinition, manifestGetType) {
            var length = flatTableFeedingDefinition.length;
            var allBindingDimensions = [];
            for (var i = 0; i < length; i++) {
                var definition = flatTableFeedingDefinition[i];
                var id = definition.id;
                var type = definition.type;
                var bind = flatTableBinding[id];
                var oneFeedDimensionsOrMeasures = [];
                maxMinCheck(flatTableBinding, definition);
                if (flatTableBinding.hasOwnProperty(id)) {
                    for (var j = 0; j < flatTableBinding[id].length; j++) {
                        if (type === CONSTNAME.DIMENSIONNAME) {
                            allBindingDimensions.push(bind[j]);
                        }
                        oneFeedDimensionsOrMeasures.push(bind[j]);
                    }
                    duplicatedDimensionsAndMeasuresInSameFeedCheck(oneFeedDimensionsOrMeasures);
                    MNDCheck(bind, definition);
                    metaCheck(flatTable, bind, definition);
                }
            }
            if (manifestGetType.acceptPartialValidation !== true) {
                allDimensionsBindingCheck(flatTable, allBindingDimensions);
            }

            return true;
        };
        return DatasetUtils;
    });
define('sap/viz/mvc/ChartApplication',['sap/viz/base/utils/Objects', 'sap/viz/mvc/VizApplication', 'sap/viz/TemplateManager', 'sap/viz/mvc/ChartController', 'sap/viz/manifest', 'sap/viz/load-core', 
'sap/viz/data/feed/feeder','sap/viz/data/handler/BaseDataHandler',
'sap/viz/data/MultiAxesDataAdapter','sap/viz/config', 'sap/viz/base/utils/log/Analyzer','sap/viz/base/utils/FunctionUtils','sap/viz/lang/langManager', 'sap/viz/data/CrosstableDataset',
    'sap/viz/api/data/FlatTableDataset', 'sap/viz/api/manifest/Viz','sap/viz/base/utils/TypeUtils','sap/viz/data/utils/DatasetUtils'], 
function(Objects, VizApplication, TemplateManager, ChartController, manifest, load, Feeder, BaseDataHandler, MultiAxesDataAdapter, globalSettings, Analyzer,FunctionUtils,LangManager,CrosstableDataset, FlatTableDataset, Viz,TypeUtils, DatasetUtils){
  /* Represents the application class. */
  var ChartApplication = VizApplication.extend({
    RootControllerClass : ChartController,
    appDidFinishLaunching : function ( options ) {
      // Format data set from data feeds.
      var launchOptions = options.launchOptions;
      this.vizFrame.suppressMouseOnMobile(false);//[2013/10/9] Disable mouse event on mobile
      
      Analyzer.pnrProfiling("Property:merge_with_template");
      var template = TemplateManager.current();
      var type = launchOptions.vizType;
      var mergeWithTemplate = Objects.extend(true, null, template.props(type), launchOptions.options);
      Analyzer.pnrProfiling("Property:merge_with_template"); 
      
      this._vc_vizType = launchOptions.vizType;
      this._vc_dataset = launchOptions.data.rawData;
      this._vc_feeding = launchOptions.feeding;
      this._vc_properties = mergeWithTemplate;
      this._vc_css = (template.css || "") + (launchOptions.css || "");

      var vc_config = globalSettings.get(this._vc_vizType) ?globalSettings.get(this._vc_vizType) : {} ;
      this.max_canvas = globalSettings.enableCanvg() && vc_config.max_canvas ? vc_config.max_canvas : Number.POSITIVE_INFINITY;
      Analyzer.pnrProfiling("Data:turn_to_adapter");
      var dataAdapter, rawData = this._vc_dataset;
      if (this._vc_dataset instanceof CrosstableDataset && Viz.get(this._vc_vizType)[0].legacyDataAdapter) {
        dataAdapter = this._vc_createAdapter(this._vc_vizType, this._vc_dataset, this._vc_feeding, this.max_canvas);
      } else if (this._vc_dataset instanceof FlatTableDataset) {

        var flatTableFeedingDefinition = manifest.viz.get(this._vc_vizType).allFeeds();

        //check if auto MND Feed is needed, if yes then apply auto MND Feed and return a new feeding
        if(DatasetUtils.checkNeedAutoMNDFeed(flatTableFeedingDefinition, this._vc_feeding)){
          this._vc_feeding = DatasetUtils.autoMNDFeed(this._vc_feeding, flatTableFeedingDefinition);
        }
        
        //This will throw an error when the feeding is not acceptable. 
        //The fourth argument aims to get specific property to check whether the chart is accept full binding check or not.
        DatasetUtils.checkFlatTableFeedingAcceptable(this._vc_dataset, this._vc_feeding, manifest.viz.get(this._vc_vizType).allFeeds(), manifest.viz.get(this._vc_vizType));

        dataAdapter = {
          dataset: this._vc_dataset,
          feeding: this._vc_feeding,
          vizType: this._vc_vizType
        };        

        rawData = this._vc_dataset._FlatTableD;
      } else if (this._vc_dataset instanceof CrosstableDataset && !Viz.get(this._vc_vizType)[0].legacyDataAdapter) {
        //Currently FlatTableDataset will direct set to each modules along with feeding information.
        dataAdapter = {
          dataset: this._vc_dataset,
          feeding: this._vc_feeding,
          vizType: this._vc_vizType
        };
      } else {
        dataAdapter = this._vc_dataset;
      }

      Analyzer.pnrProfiling("Data:turn_to_adapter");
      //try{
      this.controller.initUIComponent({
         vizType : this._vc_vizType,
         dataset : dataAdapter,
         option : this._vc_properties,// Chart properties,
         css : this._vc_css,
         events : launchOptions.events,
         rawData : rawData
      });
      //}catch(error){
      //      //We catch all the exceptions here and set it to a wrong data type error.
      //      //TODO: Handler the different kinds of exceptions.
      //      FunctionUtils.error(LangManager.getLogMessage('IDS_ERROR_WRONG_TYPE'));
      //}
    },
    
    _vc_createAdapter : function(vizType, rawData, feeding, upperLimit) {
      var feeder = Feeder(manifest.viz.get(vizType).allFeeds(true), rawData, feeding);
      var dataHandler = new BaseDataHandler(feeder, rawData, upperLimit);
      var feeds = feeder.getFeeds();
      var dataAdapter = new MultiAxesDataAdapter(feeder.getBindingInfo());
      dataAdapter.fakeData(rawData.hasFakeData());
      dataAdapter.emptyDataset(rawData.isEmptyDataset());
      dataAdapter.dataPointCount(rawData.getDataPointCount());
      var id, dataItems;
      for ( var i = 0, len = feeds.length; i < len; i++ ) {
      id = feeds[i].feedId();
        dataItems = dataHandler.getFeedValues(id);
        if(dataItems !== null){
          if(feeds[i].type() === "Dimension"){
            dataAdapter.addAnalysisAxis({values:dataItems, index: feeds[i].getIndex() - 1});
          }else{
            dataAdapter.addMeasureValuesGroup({values:dataItems, index: feeds[i].getIndex() - 1});
          }
        }     
      }
      return dataAdapter;
    },
    
    css : function() {
        return this.controller.css.apply(this.controller, arguments);
    },
    
    cssProperty : function() {
        return this.controller.cssProperty.apply(this.controller, arguments);
    },
    
    size : function(size) {
        if (size !== undefined) {
            if(size.width && size.height && !size.auto) {
                this.vizFrame.size(size);
            }
            if (typeof size.auto === "boolean") {
                this.vizFrame.autoResize(size.auto);
            } 
            return this;
        } else {
            return this.vizFrame.size();
        }
    },
    
    getSelectedObjects : function(options) {
        return this.controller.getSelectedObjects(options);
    },
    
    setSelectedObjects : function(items, options) {
        return this.controller.setSelectedObjects(items, options);
    },
        
    selectedPropertyZone: function(sel) {
        var ret = this.controller.selectedPropertyZone.apply(this.controller, arguments);
        return arguments.length ? this : ret;
    },        
    
    getAllFeedingZone : function() {
        return this.controller.getAllFeedingZone();
    },

    getPropertyZone : function() {
        return this.controller.getPropertyZone();
    },

    update : function(updates) {
      if(updates){
        var needRender = false;
        //TODO Jimmy/9/19/2012 finish update property workflow
        //especially properties like 'numberOfDimensionsInColumn' which will
        //affect the structure, and ideally, we need merge all updates into one
        //function in each module, currently we still call them separately  
        if(updates.properties) {
          if(this.controller){
            this._vc_properties = updates.properties;
            this.controller.updateProperties(this._vc_properties);
            needRender = true;
          }
        }
        
        if(updates.css) {
            this.controller.css(updates.css);
            needRender = true;
        }
        
        if(updates.cssProperty) {
            this.controller.cssProperty(updates.cssProperty);
            needRender = true;
        }
        
        if(updates.data || updates.feeding) {
          if(updates.data) {
              this._vc_dataset = updates.data;
          }
          if(updates.feeding || updates.feeding === null) {
              this._vc_feeding = updates.feeding;
          }
          
          var newAdapter;
          if (this._vc_dataset instanceof CrosstableDataset && Viz.get(this._vc_vizType)[0].legacyDataAdapter) {
              newAdapter = this._vc_createAdapter(this._vc_vizType, this._vc_dataset, this._vc_feeding, this.max_canvas);
          } else if ((this._vc_dataset instanceof FlatTableDataset) || (this._vc_dataset instanceof CrosstableDataset && !Viz.get(this._vc_vizType)[0].legacyDataAdapter)){
            //Currently FlatTableDataset will direct set to each modules along with feeding information.
            if(this._vc_dataset instanceof FlatTableDataset){
              if(DatasetUtils.checkNeedAutoMNDFeed(manifest.viz.get(this._vc_vizType).allFeeds(), this._vc_feeding)){
                this._vc_feeding = DatasetUtils.autoMNDFeed(this._vc_feeding, manifest.viz.get(this._vc_vizType).allFeeds());
              }
              DatasetUtils.checkFlatTableFeedingAcceptable(this._vc_dataset, this._vc_feeding, manifest.viz.get(this._vc_vizType).allFeeds(), manifest.viz.get(this._vc_vizType));
            }
              newAdapter = {
              dataset: this._vc_dataset,
              feeding: this._vc_feeding,
              vizType: this._vc_vizType
            };
          } else {
              newAdapter = this._vc_dataset;
          }
          
          this.controller.setDataset(newAdapter);
          if (updates.data instanceof CrosstableDataset) {
            this.controller.updateRawData(updates.data);
          }
          needRender = true;
        }
        if(needRender)
        {
       this.controller.render();
        }
      }
    },  
    getSupportedEvents : function () {
        return this.controller.getSupportedEvents();
    },
    
    setDataset : function ( dataset ) {
      this._vc_dataset = dataset;
      var newAdapter = this._vc_createAdapter(this._vc_vizType, this._vc_dataset, this._vc_feeding);
      this.controller.setDataset(newAdapter);
    },
    
    getDataset : function (){
      return this._vc_dataset;
    },
    
    updateProperties : function (props) {
      if(this._controller){
        this._vc_properties = props;
        this.controller.updateProperties(this._vc_properties);
      }
    },
    
    getProperties : function() {
        return this.controller.getProperties();
    },
    
    exportToSVGString : function(option) {
        return this.controller.exportToSVGString(option);
    },

    supportExportToSVG : function() {
        return this.controller.supportExportToSVG();
    }
    
  });
  return ChartApplication;
});

define('sap/viz/core',['jquery', 'sap/viz/data/CrosstableDataset', 'sap/viz/base/utils/TypeUtils', 'sap/viz/util/Objects',
    'sap/viz/base/utils/log/Analyzer', 'sap/viz/mvc/ChartApplication', 'sap/viz/manifest', 'sap/viz/config',
    'sap/viz/base/utils/FunctionUtils', 'sap/viz/lang/langManager', 
    'sap/viz/manifests/util/ManifestRegister', 'sap/viz/data/FlatTableDataset', 'exports'
  ], function Setup($, CrosstableDataset, TypeUtils, Objects, PnRAnalyzer, ChartApplication, manifest, config,
          FunctionUtils, langManager, ManifestRegister, FlatTableDataset) {

    var riv =
    /**
     * @lends sap.viz.core
     * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.core.createViz instead.
     */
    {
      /**
       * @constructs
       */
      constructor: function() {

      },

      /**
       * @ignore
       */
      instances: [], // Stores references to chart applications for easy processing of global events.

      /**
       * The main entry point of creating a chart.
       * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.core.createViz instead.
       * @param {Object} usrOptions
       * <pre>
       * {
       *   type: 'viz/bar', //refer to  <a href="../chartproperty/chartproperty.html">chartproperty.html</a>  for all supported viz chart TypeUtils
       *   properties: {}, //refer to  <a href="../chartproperty/chartproperty.html">chartproperty.html</a>  for all supported options for each viz type
       *   css: String, //refer to  <a href="../chartproperty/chartproperty.html">chartproperty.html</a>  for all supported css items for each viz type
       *   container: HTMLDivElement, // HTMLDivElement is the container of viz chart in html
       *   data: {@link sap.viz.data.CrosstableDataset},
       *   feeding: {@link sap.viz.VizInstance#feeding},
       *   events: {}, //Events is an object with key and value pair. Key is the event name, and the value is an object containing function and scope. For example, {'initialized':{ fn: function(){return;}, scope: this}}.
       * }
       * </pre>
       * @returns {Object} vizApplication instance {@link sap.viz.VizInstance}
       *
       */
      createViz: function(usrOptions) {
    	// register the required manifests for the viz type
        if (usrOptions && usrOptions.type) {
            ManifestRegister.registerViz(usrOptions.type);
        }
    	
        var _eventsListeners = {},
          _feeding = usrOptions.feeding,
          _riv = this;
        // if user did not give data, we will add a null data to show chart
        if (!usrOptions.data) {
          usrOptions.data = new CrosstableDataset();
          // new a valid null data according to the chart's type
          var allfeeds = manifest.viz.get(usrOptions.type).allFeeds(true);
          var analysisAxis = [];
          var measureValuesGroup = [];
          var i = 0;
          var j = 0;
          if (allfeeds !== undefined && allfeeds !== null && allfeeds.length > 0) {
            for (; i < allfeeds.length; i++) {
              var type = allfeeds[i].type;
              if (type === "Dimension") {
                j = 0;
                for (; j < allfeeds[i].min; j++) {
                  analysisAxis.push({
                    'index': analysisAxis.length + 1,
                    'data': [{
                      'values': [''],
                      'infos': [{}]
                    }]
                  });
                }
              }
              if (type === "Measure") {
                j = 0;
                for (; j < allfeeds[i].min; j++) {
                  measureValuesGroup.push({
                    'index': measureValuesGroup.length + 1,
                    'data': [{
                      'values': [
                        ['']
                      ]
                    }]
                  });
                }
              }
            }
          } else {
            analysisAxis.push({
              'index': 1,
              'data': [{
                'values': [''],
                'infos': [{}]
              }]
            });
            measureValuesGroup.push({
              'index': 1,
              'data': [{
                'values': [
                  ['']
                ]
              }]
            });
          }
          usrOptions.data.setData({
            'analysisAxis': analysisAxis,
            'measureValuesGroup': measureValuesGroup
          });
        }
        if (usrOptions.options !== undefined && usrOptions.properties === undefined) {
          usrOptions.properties = usrOptions.options;
        }

        PnRAnalyzer.pnrContext(':creation:' + Objects.size(usrOptions.properties)  + ':' + Objects.size(usrOptions.css));

        var viz =
        /**
         * @lends sap.viz.VizInstance.prototype
         */
        {
          /**
           * it can only be created by {@link sap.viz.core}
           * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.core.VizInstance instead.
           * @constructs
           */
          constructor: function() {},

          /**
           * add event listener. one eventType can only have one listener, to register multiple listeners to a certain eventType you
           * have to add additional namespace after the eventType, such as 'selectData.foo' or 'selectData.bar'
           * @param {String} evtType refer to  <a href="../chartproperty/chartproperty.html">chartproperty.html</a>  for supported events for each kind of chart
           * @param {Function} callback listener function
           * @returns {Object} {@link sap.viz.VizInstance}
           */
          on: function(evtType, callback, scope) {
            _eventsListeners[evtType] = {
              callback: callback,
              scope: scope
            };
            this.app.controller.rootUIComponent.attachEvent(evtType, callback, scope);

            return this;
          },
          /**
           * Get/set chart size.
           * If set auto = true, the width and height are optional and would be ignored, the chart size will be adjusted
           * automatically according to container size.
           * @param {Object} size {width:xx, height:xx, [auto: Boolean]} | {auto: Boolean}
           * @returns {Object} {@link sap.viz.VizInstance}
           */
          size: function(size) {
            if (!arguments.length) {
              return this.app.size();
            }
            this.app.size(size);

            return this;
          },

          /**
           * Get/Set selected data points.
           * To get selection, please use selection() or selection({Object}).
           * To set selection, please use selection([{Object}, {Object}, ...]),
           * or selection([{Object}, {Object}, ...], {Object})
           *
           *
           * @param {Array}  [selectionPoint] Array of Objects with either data or ctx should be set Points. Each point is
           * <pre style="font-size: 13px;font-family: Verdana;line-height:120%">
           * {
           *     data: {key: 'value', ...},//optional
           *     ctx:  [{mi: 0, ...}, {...}, ...], // optional. Higher priority than data.
           * }
           * </pre>
           * @param {Object} [options] seleciton options.
           * <pre style="font-size: 13px;font-family: Verdana;line-height:120%">
           *{
           *     clearSelection: Boolean,// optional . Default value is false. Useful only in setting selection.
           *     withDataCtx: Boolean, // optional. Default value is false. Useful only in getting selection.
           *}
           * </pre>
           * @returns {Array|Boolean}
           *                          Array of Points(for getting selection). Each point is
           * <pre style="font-size: 13px;font-family: Verdana;line-height:120%">
           *{
           *     data: {key: 'value', ...},
           *     ctx:  [{mi: 0, ...}, {...}, ...], // optional. Depends on "withDataCtx".
           *}
           * </pre>
           *or Boolean (for setting selection)
           * <pre style="font-size: 13px;font-family: Verdana;line-height:120%">
           *     True means setting selection sucessful.
           *     False means setting selection unsuccessful.
           * </pre>
           * @example <caption>Sample Code:</caption>
           * <pre style="font-size: 13px;font-family: Verdana;line-height:120%">
           * VizInstance.selection([{
           * 	  data:{'Country' : 'China','Year' : '2001','Product' : 'Motorcycle','Profit' : 129},
           * 	  ctx :{'dii_a1': 0,'dii_a2': 0,mg: 0,mi: 0}
           * }],{clearSelection: true});
           * <br/>
           * </pre>
           */
          selection: function() {
            var items = null;
            var selOptions = null;

            var isGet = false;
            if (arguments.length <= 0) {
              isGet = true;
            } else if (arguments.length <= 1) {
              if (arguments[0] instanceof Array) {
                isGet = false;
                items = arguments[0];
              } else {
                isGet = true;
                selOptions = arguments[0];
              }
            } else {
              isGet = false;
              items = arguments[0];
              selOptions = arguments[1];
            }

            var reValue;
            if (isGet) {
              reValue = this.app.getSelectedObjects(selOptions);
            } else {
              reValue = this.app.setSelectedObjects(items, selOptions);
            }
            return reValue;
          },

          /**
           * Get/set chart data.
           * @param {Object} data {@link sap.viz.data.CrosstableDataset}
           * @returns {Object} {@link sap.viz.VizInstance}
           */
          data: function(data) {
            if (!arguments.length) {
              return this.app.getDataset();
            }
            this.update({
              'data': data
            });

            // re-bind event listener as upon data update, sub plots may be recreated
            for (var evt in _eventsListeners) {
              if (_eventsListeners.hasOwnProperty(evt)) {
                this.on(evt, _eventsListeners[evt].callback, _eventsListeners[evt].scope);
              }
            }

            return this;
          },

          /**
           * Get/set chart properties.
           * @param {Object} props refer to  <a href="../chartproperty/chartproperty.html">chartproperty.html</a>
           * @returns {Object} {@link sap.viz.VizInstance}
           * @example <caption>Sample Code:</caption>
           * chartInstance.properties({title: { visible : true,text : 'Sample Bar Chart Title'}});
           */
          properties: function(props) {
            if (!arguments.length) {
              return this.app.getProperties();
            }

            PnRAnalyzer.pnrContext(':updateProperty:' + Objects.size(props));

            this.update({
              properties: props
            });
            return this;
          },

          /**
           * Append a new internal css.
           * @param {Object} cssText the css text
           * @returns {Object} {@link sap.viz.VizInstance}
           * @example <caption>Sample Code:</caption>
           * chartInstance.css('.v-m-title .v-title:{fill : #333333}');
           */
          css: function(css) {
            if (!arguments.length) {
              return this.app.css();
            }
            this.update({
              css: css
            });
            return this;
          },

          /**
           * Get/set data feeding info
           * @param {Array} feedingObj every element in the array is in the following structure:
           * <pre>
           * {
           *   'feedId':feedId  // feed id for example 'regionColor', refer to  <a href="../chartproperty/chartproperty.html">chartproperty.html</a>
           *   'binding': [{
           *     'type' : 'analysisAxis' | 'measureValuesGroup' | 'measureNamesDimension',
           *     'index':  Number
           *   }]
           * }
           * </pre>
           *@returns {Object} {@link sap.viz.VizInstance}
           */
          feeding: function(feedingObj) {
            if (!arguments.length) {
              return _feeding;
            }
            _feeding = feedingObj;
            this.update({
              feeding: feedingObj
            });
            return this;
          },

          /**
           * Get current feeding zone information
           * @returns {Array} feeding information group by visualization element
           * <pre>
           * [
           *     {
           *         'name': 'plot' | 'legend' | 'sizeLegend' | 'xAxis' | 'yAxis' | 'xAxis2' | 'yAxis2' | 'zAxis' | 'multiplier'
           *         'feedDef' : [{}],
           *         'bound' : [[[]]]
           *     }
           * ]
           * </pre>
           */
          feedingZone: function() {
            return this.app.getAllFeedingZone();
          },

          /**
           * Update various items in one go.
           * @param {Object} updates {data: {@link sap.viz.data.CrosstableDataset}, feeding: feedingObj, css: cssString, properties: propertiesObj }
           * @returns {Object} {@link sap.viz.VizInstance}
           */
          update: function(updates) {
            if (updates) {
              //we actually support use a null value to clear current feeding and switch to use
              //auto feed
              if (TypeUtils.isDefined(updates.feeding)) {
                _feeding = updates.feeding;
              }
              this.app.update(updates);
            }
            return this;
          },


          /**
           * Destroy this chart instance. This will remove all dom
           * nodes of chart and its listeners.
           */
          destroy: function() {
            _riv.instances.splice(_riv.instances.indexOf(this), 1);
            this.app.destroy();
            this.app = null;
          },

          /**
           * export chart instance into a JSON object which contains
           * all information of the chart including type, data, properties,
           * css, feeding and size
           */
          toJSON: function() {
            var doc = {};
            doc.type = usrOptions.type;
            doc.data = {
              type: "crosstable",
              val: this.app.getDataset().data()
            };
            doc.properties = this.properties();
            doc.css = this.css();
            doc.feeding = _feeding;
            doc.size = this.app.size();
            return doc;
          }
        };
        
        var isFlatTable = usrOptions.data instanceof FlatTableDataset;
        config.register({
            id: 'isFlatTable',
            value: isFlatTable
        });
        var isCrossTable = usrOptions.data instanceof CrosstableDataset;
        config.register({
            id: 'isCrossTable',
            value: isCrossTable
        });
        
        viz.app = new ChartApplication({
          holder: usrOptions.container,
          launchOptions: {
            vizType: usrOptions.type,
            options: usrOptions.properties,
            css: usrOptions.css,
            data: {
              rawData: usrOptions.data
            },
            feeding: usrOptions.feeding || usrOptions.dataFeeding,
            /* dataFeeding for backward compatibility*/
            events: usrOptions.events
          }
        });

        Object.defineProperty(viz, "type", {
          value: usrOptions.type,
          enumerable: true
        });

        _riv.instances.push(viz);
        return viz;
      },

      /**
       * Destroy chart.
       * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.core.destroyViz instead.
       * @param {Object...} viz instances to be destroyed
       */
      destroyViz: function() {
        for (var i = -1, j = arguments.length; ++i < j;) {
          arguments[i].destroy();
        }
      },

      /**
       * export chart instance into a JSON object which contains
       * all information of the chart including type, data, properties,
       * css, feeding and size
       * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.core.exportViz instead.
       * @param {Object} chartInstance {@link sap.viz.VizInstance}
       */
      exportViz: function(chart) {
        return chart.toJSON();
      }
    };

    
    return riv;
  });
define('sap/viz/ccl',['sap/viz/core','sap/viz/data/CrosstableDataset'],
function Setup(Core, CrosstableDataset) {

	var ccl =
	/** @lends sap.viz.ccl */
	{
		/**
		 * @constructs
		 */
		constructor : function() {
			return;
		},

		/**
		 * load chart from JSON into a div
		 * @param {Object...} viz json document
		 * @param {Object...} div object to contain the visualization
		 * @deprecated This function is working in CVOM 4.0, but will not be supported since CVOM 5.0 in the future, please consider to use new version of this API instead. You can use sap.viz.api.core.loadViz instead.
		 */
		loadViz : function(doc, container) {
			var option = {};
			option.container = container;
			option.type = doc.type;
			option.options = doc.properties;
			option.data = new CrosstableDataset();
			option.data.setData(doc.data.val);
			option.css = doc.css;
			option.feeding = doc.feeding;

			return Core.createViz(option);
		}
	};

	return ccl;

});
define('sap/viz/base/utils/log/LogUtil',['sap/viz/base/Logger', 'exports'],
function Setup(LOG){
  var ret = {
    'profiling' : function(msg){
      //chrome supports window.performance.memory, we include it in profile message
      if(window && window.performance && window.performance.memory){
        var m = window.performance.memory;
        msg = '[' + m.usedJSHeapSize + '][' + m.totalJSHeapSize + '][' + m.jsHeapSizeLimit + ']' + msg;
      }
      LOG.debug(msg, 'PROFILING');
    },
    
    'context' : function(msg){
      //try to get as many env contexts as possible
      if(window && window.navigator){
        msg = "[" + window.navigator.userAgent + "]" + msg;
      }
      LOG.debug(msg, 'CONTEXT');
    }
  };
  return ret;
});
define('sap/viz/extapi/core',['sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'sap/viz/lang/langManager', 'exports'], function Setup(TypeUtils, Logger, langManager) {
    
    /**
     * sap.viz.extapi.core
     * @namespace sap.viz.extapi.core
     */
    var coreExtAPi = {};
    /**
     * @ignore
     */
    coreExtAPi._actionMap = {};
    
    /**
     * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€
     * You should load sap.viz.js library before using the API.]<br>
     * Register sap.viz.api.core.VizInstance's action; the action handler is registered for each VizInstance.
     * @function registerVizAction
     * @memberof sap.viz.extapi.core
     * @static
     * @param {String} name
     *                      One action name can only have one handler function.
     * @param {String} handlerPath
     *              This path is a function path for module 'root.main'.<br>
     *      Functions which are supported by module 'root.main' can be successfully called by the action api.
     */
    coreExtAPi.registerVizAction = function(keyName, handlerPath) {
        if (TypeUtils.isString(keyName) && TypeUtils.isString(handlerPath)) {
            coreExtAPi._actionMap[keyName] = handlerPath;
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    };
    
    /**
     * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€
     * You should load sap.viz.js library before using the API.]<br>
     * Unregister the function by the keyname
     * @function unregisterVizAction
     * @memberof sap.viz.extapi.core
     * @static
     * @param {String} key The registered name of the action
     */
    coreExtAPi.unregisterVizAction = function(keyName) {
        if (TypeUtils.isString(keyName)) {
            if (coreExtAPi._actionMap[keyName]) {
                coreExtAPi._actionMap[keyName] = undefined;
                delete coreExtAPi._actionMap[keyName];
            }
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    };

    /**
     * Register the extension's bundle
     * @function registerBundle
     * @memberof sap.viz.extapi.core
     * @static
     * @param {Object} bundle The bundle description is defined in the extension's bundle.js sample.
     * Sample:
     * <pre>
     * (function() {
     *      var viz   = {...};
     *      var chart = {...};
     *
     *      var vizExtImpl = {
     *          "viz": [viz],
     *          "module": [chart],
     *          "feeds": []
     *      };
     *
     *      var vizExtBundle = {
     *          id : "com.company.vizext",
     *          loadAfter : ["sap.viz.aio"],
     *          components : [{
     *              id : "comp.company.vizext"
     *              provide : "sap.viz.impls",
     *              instance : vizExtImpl
     *          }]
     *      };
     *
     *      if (sap.bi.framework.getService("sap.viz.aio", "sap.viz.extapi")) {
     *          sap.bi.framework.getService("sap.viz.aio", "sap.viz.extapi").registerBundle(vizExtBundle);
     *      } else {
     *          define(function() {
     *              return vizExtBundle;
     *          });
     *      }
     *  })();
     * </pre>
     */
    coreExtAPi.registerBundle = function(bundle) {
        var def = define;
        var names = bundle.id.split(".");
        var moduleName = names[names.length - 1] + "-bundle";
        def(moduleName, function () {
            return bundle;
        });
        return bundle;
    };


    return coreExtAPi;
    
    /**
     * sap.viz.extapi.VERSION
     * @namespace sap.viz.extapi.VERSION
     *  
     */

    
    
    /**
     * Constant; the current version of sap.viz.extapi.
     * @member VERSION
     * @memberof sap.viz.extapi.VERSION
     * @static
     * @example
     * var verion = sap.viz.extapi.VERSION;
     */
    
});

define('sap/viz/data/utils/TF2CTFConvertUtil',['sap/viz/base/utils/ObjectUtils', 'sap/viz/base/utils/FunctionUtils'], function (ObjectUtils, FunctionUtils) {
	
	var buildCTGroup = function (type, fieldsId, analysisAxis, measureValuesGroup) {
		if (type === 'analysisAxis') {
			analysisAxis.push(fieldsId);
			return analysisAxis.length;
		} else if (type === 'measureValuesGroup') {
			measureValuesGroup.push(fieldsId);
			return measureValuesGroup.length;
		}
	};
	var getSemanticType = function (fieldId, ftFields) {
		for (var i = 0; i < ftFields.length; i++) {
			if (ftFields[i].id === fieldId) {
				if (ftFields[i].semanticType !== 'Dimension' && ftFields[i].semanticType !== 'Measure') {
					// TODO no such semantic type
					FunctionUtils.error('no such semantic type');
					return;
				}
				return ftFields[i].semanticType;
			}else if (i === (ftFields.length - 1)) {
				//TODO throw error for no such field
				FunctionUtils.error('no such field');
				return;
			}
		}
	};
	/**
	 * check fields with same semantic type
	 * @ignore
	 */
	var checkSemanticType = function (fieldsId, ftFields) {
		var semanticType;
		for (var i = 0; i < fieldsId.length; i++) {
			if (i > 0 && semanticType !== getSemanticType(fieldsId[i], ftFields)) {
				// TODO throw error for dimensions and measures shouldn't be built in one group
				FunctionUtils.error('dimensions and measures should not be built in one group');
				return;
			}
			semanticType = getSemanticType(fieldsId[i], ftFields);
		}
		return semanticType;
	};
	var checkFeedValid = function (defId, fieldsId, ftFields, feedDefs) {
		var semanticType = checkSemanticType(fieldsId, ftFields);
		for (var i = 0; i < feedDefs.length; i++) {
			if (feedDefs[i].id === defId) {
				if (semanticType !== feedDefs[i].type) {
					// TODO throw error for semantic type not matching feedDef id
					FunctionUtils.error('semantic type not matching feedDef id');
					return;
				}
				if (fieldsId.length < feedDefs[i].minStackedDimension || fieldsId.length > feedDefs[i].maxStackedDimension) {
					// TODO throw error for not matching binding dims quantity
					FunctionUtils.error('not matching binding dims quantity');
					return;
				}
				break;
			} else if ( i === (feedDefs.length - 1)) {
				//TODO throw error for not matching any def
				FunctionUtils.error('not matching any def');
				return;
			}
		}
		return semanticType;
	};
	/**
	 * Check whether there is MND in this binding first
	 * @ignore
	 */
	var checkMND = function (sourceFieldsId, fieldsId) {
		for (var i = 0; i < sourceFieldsId.length; i++) {
			if (sourceFieldsId[i] !== 'measureNamesDimension') {
				fieldsId.push(sourceFieldsId[i]);
			}
		}
		return sourceFieldsId.length > fieldsId.length;
	};
	/**
	 * Supply a function to check and convert flat table binding to crosstable binding
	 * @ignore
	 * @param ftFields {Array} An array of flat table's fields info
	 * Schema: [{
	 *				"id": <dimensionId>,
	 *				"semanticType": "Dimension"
	 *			}, {
	 *				"id": <measureId>,
	 *				"semanticType": "Measure"
	 *			}]
	 * @param feedDefs {Array} An array of objects which includes crosstable feed definition
	 * Example: [{
	 * 				"id":"regionColor",
	 * 				"name":"name1",
	 * 				"type":"Dimension",
	 * 				"minStackedDimension": 0,
	 * 				"maxStackedDimension": Infinity,
	 * 				"acceptMND": 0
	 * 			},{
	 * 				"id":"axisLabels",
	 * 				"name":"name2",
	 * 				"type":"Dimension",
	 * 				"minStackedDimension": 0,
	 * 				"maxStackedDimension": Infinity,
	 * 				"acceptMND": 0
	 * 			},{
	 * 				"id":"primaryValues",
	 * 				"name":"name3",
	 * 				"type":"Measure",
	 * 				"minStackedDimension": 0,
	 * 				"maxStackedDimension": Infinity,
	 * 				"acceptMND": 0
	 * 			}]
	 * @param ftBinding {Object} An object includes flat table binding info
	 * Example: {
	 *				primaryValues:['SumProfit'],
	 *				regionColor:['Country'],
	 *				axisLabels:['Year', 'Quarter']
	 *			}
	 * @return {Object} An object includes crosstable binding info
	 * Schema: {
	 *				"ctBinding": <binding of crosstable>,
	 *				"analysisAxis": <AA definition according to "ctBinding">,
	 *				"measureValuesGroup": <MG definition according to "ctBinding">
	 *			}
	 */
	var TableBinding2CrosstableBindingConvertUtil = function (ftFields, feedDefs, ftBinding) {
		var analysisAxis = [];
		var measureValuesGroup = [];
		var ctBinding = [];
		var ctInfo = {};
		
		var iCount = 0;
		for (var key in ftBinding) {
			var fieldsId = [];
			// while a fieldsId responds no Dimensions or Measures
			if (ftBinding[key].length === 0) {
				continue;
			}
			var hasMND = checkMND(ftBinding[key], fieldsId);
			var semanticType = checkFeedValid(key, fieldsId, ftFields, feedDefs);
			if (semanticType === undefined) {
				return;
			} 
			ctBinding[iCount] = {feedId: key};
			var index;
			var binding = [];
			var bindingObj = {};
			if (semanticType === 'Dimension') {
				index = buildCTGroup('analysisAxis', fieldsId, analysisAxis, measureValuesGroup);
				bindingObj.type = 'analysisAxis';
			} else if (semanticType === 'Measure') {
				index = buildCTGroup('measureValuesGroup', fieldsId, analysisAxis, measureValuesGroup);
				bindingObj.type = 'measureValuesGroup';
			}
			bindingObj.index = index;
			binding.push(bindingObj);
			if (hasMND) {
				binding.push({type: 'measureNamesDimension'});
			}
			ctBinding[iCount].binding = binding;
			iCount++;
		}
		ctInfo.ctBinding = ctBinding;
		ctInfo.analysisAxis = analysisAxis;
		ctInfo.measureValuesGroup = measureValuesGroup;
		return ctInfo;
	};
	return TableBinding2CrosstableBindingConvertUtil;
});

define('sap/viz/data/utils/TB2CTBConvertUtil',["sap/viz/data/utils/TF2CTFConvertUtil"],function(TF2CTFConvertUtil){
    
    var insertDataValue = function (valueArray, dataValue, index) {
        valueArray.splice(index, 0, dataValue);
    };
    var fillAA = function (rowData, AA, records) {
        var indexInAA = 0;
        var current = '';
        var previous = '';
        var front = 0;
        var length = AA.length > 0 ? AA[0].values.length : 0;
        var update;
        for (var i = 0; i < AA.length; i++) {
            update = getIndex(AA[i].values, rowData[records[i]], front, length);
            front = update.front;
            length = update.length;
            indexInAA =  update.index;
            previous += '\0' + AA[i].values[indexInAA-1];
            current += '\0' + rowData[records[i]];
            insertDataValue(AA[i].values, rowData[records[i]], indexInAA);
        }
        var duplicateAA = checkDuplicate(previous, current, AA, indexInAA);
        
        var ret = {};
        ret.duplicateAA = duplicateAA;
        ret.indexInAA = indexInAA;
        return ret;
    };
    var alignMGs = function (valueArray, indexInAA1, indexInAA2) {
        for (var i = 0; i < valueArray.values.length; i++) {
            if (i !== indexInAA2){
                insertDataValue(valueArray.values[i], null, indexInAA1);
            }
        }
    };
    var fillMG = function (indexInAA1, indexInAA2, MGs, rowData, duplicateAA1, duplicateAA2, records) {
        for (var i = 0; i < MGs.length; i++) {
            for (var j = 0; j < MGs[i].length; j++) {
                if (!duplicateAA2 && !duplicateAA1) {
                    var temp = [];
                    if (indexInAA2 > 0) {
                        for (var k = 0; k < MGs[i][j].values[indexInAA2-1].length; k++) {
                            temp.push(null);
                        }
                    }
                    insertDataValue(MGs[i][j].values, temp, indexInAA2);
                    insertDataValue(MGs[i][j].values[indexInAA2], rowData[records[i][j]], indexInAA1);
                    
                    alignMGs(MGs[i][j], indexInAA1, indexInAA2);
                } else if (duplicateAA2 && !duplicateAA1) {
                    // when !duplicateAA1, it's going to add a new AA1 element, it should be inserted
                    if (indexInAA2 > 0) {
                        insertDataValue(MGs[i][j].values[indexInAA2-1], rowData[records[i][j]], indexInAA1);
                        alignMGs(MGs[i][j], indexInAA1, indexInAA2-1);
                    }else {
                        insertDataValue(MGs[i][j].values[indexInAA2], rowData[records[i][j]], indexInAA1);
                    }
                } else if (!duplicateAA2 && duplicateAA1) {
                    // when duplicateAA1, just change the coresponding element from null to its value
                    var temp = [];
                    if (indexInAA2 > 0) {
                        for (var k = 0; k < MGs[i][j].values[indexInAA2-1].length; k++) {
                            temp.push(null);
                        }
                    }
                    insertDataValue(MGs[i][j].values, temp, indexInAA2);
                    MGs[i][j].values[indexInAA2][indexInAA1-1] = rowData[records[i][j]];
                } else {
                    if (typeof MGs[i][j].values[indexInAA2-1][indexInAA1-1] === 'number') {
                        MGs[i][j].values[indexInAA2-1][indexInAA1-1] += rowData[records[i][j]];
                    } else {
                        MGs[i][j].values[indexInAA2-1][indexInAA1-1] = rowData[records[i][j]];
                    }
                }
            }
        }
    };
    var checkDuplicate = function (previous, current, arrays, index) {
        if (previous === current && previous !== '') {
            for (var i = 0; i < arrays.length; i++) {
                arrays[i].values.splice(index, 1);
            }
            return true;
        } else if (arrays.length === 0) {
            return true;
        }
    };
    var getIndex = function (valueArray, dataValue, front, length) {
        var ret = {};
        if (valueArray.indexOf(dataValue, front) > -1 && valueArray.indexOf(dataValue, front) < front + length) {
            ret.index = valueArray.lastIndexOf(dataValue, front+length-1) + 1;
            ret.front = valueArray.indexOf(dataValue, front);
            ret.length = ret.index - ret.front;
        } else {
            ret.front = front + length;
            ret.index = ret.front;
            ret.length = ret.index - ret.front;
        }
        return ret;
    };
    var fillCT = function (rowData, AA1, AA2, MGs, records, first) {
        
        var infoAA1 = fillAA(rowData, AA1, records.AA1);
        var duplicateAA1 = infoAA1.duplicateAA;
        var indexInAA1 = infoAA1.indexInAA;

        if (first === true && AA2.length === 0) {
            var duplicateAA2 = false;
            var indexInAA2 = 0;
        } else if (AA2.length === 0) {
            var duplicateAA2 = true;
            var indexInAA2 = 1;
        } else {
            var infoAA2 = fillAA(rowData, AA2, records.AA2);
            var duplicateAA2 = infoAA2.duplicateAA;
            var indexInAA2 = infoAA2.indexInAA;
        }
        
        
        fillMG(indexInAA1, indexInAA2, MGs, rowData, duplicateAA1, duplicateAA2, records.MGs);
    };

    var sortDimensions = function (array) {
        var distinct = [];
        distinct = array.filter(function (value, index, self) { 
            return self.indexOf(value) === index;
        });
        for (var i = 0; i < distinct.length; i++) {
            var obj = {};
            obj.index = array.indexOf(distinct[i]);
            obj.value = distinct[i];
            obj.length = (array.lastIndexOf(distinct[i]) + 1);
            distinct[i] = obj;
        }
        array.sort(function (a, b) {
            if (a > b) {
                return 1;
            } else if (a < b) {
                return -1;
            } else {
                return 0;
            }
        });
        distinct.sort(function (a, b) {
            if (a.name > b.name) {
                return 1;
            } else if (a.name < b.name) {
                return -1;
            } else {
                return 0;
            }
        });
        return distinct;
    };
    var sortDimensionValues = function (AA) {
        
        var distinct = [{index: 0, length: AA[0].values.length}];
        for (var i = 0; i < AA.length; i++) {
            var newOrder = [];
            for (var j = 0; j < distinct.length; j++) {
                var temp = AA[i].values.slice(distinct[i].index, distinct[i].length);
                temp.sort();
                newOrder = newOrder.concat(temp);
            }
            AA[i].values = newOrder;
            if (i + 1 < AA.length) {
                distinct = sortDimensions(AA[i].values);
            }
        }
    };
    var recordMathColums = function (columns, axis1, axis2, mgs) {
        var ret = {};
        var AA1 = [];
        var AA2 = [];
        var MGs = [];
        for (var i = 0; i < columns.length; i++) {
            if (axis1.indexOf(columns[i]) > -1) {
                AA1[axis1.indexOf(columns[i])] = i;
                continue;
            } else if (axis2.indexOf(columns[i]) > -1) {
                AA2[axis2.indexOf(columns[i])] = i;
                continue;
            } else {
                for (var j = 0; j < mgs.length; j++) {
                    if (mgs[j].indexOf(columns[i]) > -1) {
                        if (MGs[j] === undefined) {
                            MGs[j] = [];
                        }
                        MGs[j][mgs[j].indexOf(columns[i])] = i;
                        continue;
                    }
                }
            }
        }
        ret.AA1 = AA1;
        ret.AA2 = AA2;
        ret.MGs = MGs;

        return ret;
    };
    var convert2CT = function (origin, index, type) {
        var ret = {};
        ret.index = index;
        ret.data = [];
        for (var i = 0; i < origin.length; i++) {
            var dim = {};
            dim.type = type;
            dim.name = origin[i].metaData;
            dim.values = origin[i].values;
            ret.data.push(dim);
        }
        return ret;
    };
    /**
     * TODO: to support array of array format of flattenDataSet
     * @ignore
     * @param flattenDataSet {FlattenTableDataset} the orignal data, instance of FlattenTableDataset
     * @param axis1 {Array} array of column id, these column will be put on analysis axis 1;
     * @param axis2 {Array} array of column id, these column will be put on analysis axis 2;
     * @param mgs {Array} array of array, specified the mesure values group.
     */
    var Table2CrosstableConvertUtil = function (flattenDataSet, axis1, axis2, mgs, autoSorting) {
        var dataLength = flattenDataSet._data.length;
        // var allColumnIds = flattenDataSet._getAllColumnIds();
        var AA1 = [];
        for (var i = 0; i < axis1.length; i++) {
            AA1[i] = {};
            AA1[i].metaData = axis1[i];
            AA1[i].values = [];
        }
        var AA2 = [];
        for (i = 0; i < axis2.length; i++) {
            AA2[i] = {};
            AA2[i].metaData = axis2[i];
            AA2[i].values = [];
        }
        var MGs = [];
        for (i = 0; i < mgs.length; i++) {
            MGs[i] = [];
            for (var j = 0; j < mgs[i].length; j++) {
                MGs[i][j] = {};
                MGs[i][j].metaData = mgs[i][j];
                MGs[i][j].values = [];
            }
        }
        
        var records = recordMathColums(flattenDataSet._getAllColumnIds(), axis1, axis2, mgs);
        for (i = 0; i < flattenDataSet._data.length; i++) {
            var rowData = flattenDataSet._data[i];
            var first = false; // to flag whether it's the first row, this would matter while axis2 is empty
            if (i === 0) {
                first = true;
            }
            fillCT(rowData, AA1, AA2, MGs, records, first);
        }
        if (autoSorting) {
            sortDimensionValues(AA1);
            sortDimensionValues(AA2);
        }
        var crosstable = {};
        var analysisAxis = [];
        var measureValuesGroup = [];
        
        analysisAxis.push(convert2CT(AA1, 1, 'Dimension'));
        if (AA2.length > 0) {
            analysisAxis.push(convert2CT(AA2, 2, 'Dimension'));
        }
        
        for (i = 0; i < MGs.length; i++) {
            measureValuesGroup.push(convert2CT(MGs[i], i+1, 'Measure'));
        }
        crosstable.analysisAxis = analysisAxis;
        crosstable.measureValuesGroup = measureValuesGroup;
        
        return crosstable;
    };
    var convertWithoutAxis = function (flatTable, mg) {
        var measureValuesGroup = [];
        for (var i = 0; i < mg.length; i++) {
            var colData = flatTable.dataInFields(mg[i]);
            var count = colData[0].data.length;
            // var values = [];
            var data = [];
            for (var j = 0; j < count; j++) {
                var values = [];
                for (var k = 0; k < colData.length; k++) {
                    values[k] = colData[k].data[j];
                }
                var tempObj = {
                    type: 'measure',
                    name: mg[i][j],
                    values: [values]
                };
                data.push(tempObj);
            }
            var mv = {
                index: i+1,
                data: data
            };
            measureValuesGroup.push(mv);
        }
        return measureValuesGroup;
    };
    /**
     * Supply a function to convert a flat table to a crosstable depending on passed binding and feed definition
     * @ignore
     * @param flatTable {Object} An object of FlatTableDataset
     * @param ctFeedDefs {Array} An array of objects which includes crosstable feed definition
     * @param ftBinding {Object} optional(by now is required)
     *                                    If supplied, it should be an object of flat table binding
     *                                    If not supplied, an auto binding schema will be used
     * @return ctData {Object} An object of crosstable data, including CrosstableDataset and corresponding binding
     * Schema: {
     *                "crosstableDataset": <Object of CrosstableDataset>,
     *                "binding": <Array of objects including crosstable binding>
     *            }
     */
    var Table2CrosstableWithBindingConvertUtil = function (flatTable, ctFeedDefs, ftBinding) {
        var ftFields = flatTable._dataset.metadata.fields;
        var ctInfo = TF2CTFConvertUtil(ftFields, ctFeedDefs, ftBinding);
        if (ctInfo === undefined) {
            return;
        }
        var aa = ctInfo.analysisAxis;
        var mg = ctInfo.measureValuesGroup;
        // return undefined while both aa and mg is null
        if (aa.length === 0 && mg.length === 0) {
            return;
        }
        // keep two aa
        if (aa.length === 1) {
            aa.push([]);
        }
        var crosstableDataset;
        if (aa.length === 0 && mg.length !== 0) {
            crosstableDataset = {};
            crosstableDataset.measureValuesGroup = convertWithoutAxis(flatTable, mg);
        } else {
            crosstableDataset = Table2CrosstableConvertUtil(flatTable, aa[0], aa[1], mg);
        }
        var binding = ctInfo.ctBinding;
        var ctData = {};
        ctData.binding = binding;
        ctData.crosstableDataset = crosstableDataset;
        return ctData;
    };

    return Table2CrosstableWithBindingConvertUtil;
});
define('sap/viz/api/core/VizInstance',['jquery', 'sap/viz/base/utils/TypeUtils', 'sap/viz/util/Objects',
        'sap/viz/base/utils/log/LogUtil', 'sap/viz/mvc/ChartApplication',
        'sap/viz/base/utils/FunctionUtils', 'sap/viz/api/data/CrosstableDataset',
        'sap/viz/api/data/FlatTableDataset', 'sap/viz/extapi/core', 
        'sap/viz/base/utils/ObjectUtils', 'sap/viz/config', 'sap/viz/data/utils/TB2CTBConvertUtil', 'sap/viz/manifest', 'sap/viz/base/Logger',
        'exports'
    ],
    function Setup($, TypeUtils, Objects, LOG, ChartApplication, FunctionUtils, CrosstableDataset, FlatTableDataset, ExtCore, ObjectUtils, config, TB2CTBConvertUtil, manifest, Logger) {
        
        var CROSSTABLEDATASET = 'CrosstableDataset';
        var FLATTABLEDATASET = 'FlatTableDataset';
        var RAWDATASET = 'RawDataset';
        /**
         * sap.viz.api.core.VizInstance
         * @namespace sap.viz.api.core.VizInstance
         */
        var vizInstance = function(_eventsListeners, _feeding, _riv) {
            this.__className = "sap.viz.api.core.VizInstance";
            this.app = null;
            this._eventsListeners = _eventsListeners;
            this._feeding = _feeding;
            this._riv = _riv;
            this._description = null;
            this._dataType;
            this._data;
            this._usrOptions = {};
        };
        
        vizInstance.prototype =
        {
            /**
             * Add event listener. <br>
             * An eventType can have only one listener; to register multiple listeners to a certain eventType,
             * you have to add additional name spaces after the eventType such as 'selectData.foo' or 'selectData.bar'.
             * @function on
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {String} evtType Refer to Chart Property for supported events for each kind of chart.
             * @param {Function} Callback Listener function
             * @returns {Object} {@link sap.viz.api.core.VizInstance}
             * @example <caption>Sample Code:</caption>
             * instance.on('initialized', function() {
             *     // Do something after the event 'initialized' is fired.
             * });
             */
            on: function(evtType, callback, scope) {
                this._eventsListeners[evtType] = {
                    callback: callback,
                    scope: scope
                };
                this.app.controller.rootUIComponent.attachEvent(evtType, callback, scope);

                return this;
            },
            /**
             * Get/Set chart size. <br>
             * If set auto = true, the width and height are optional and will be ignored. The chart size will be adjusted
             * automatically according to the container size.
             * @function size
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} size  {"width" : Number, "height" : Number, ["auto" : Boolean]} | {"auto" : Boolean}
             * @returns {Object} {@link sap.viz.api.core.VizInstance}
            */
            size: function(size) {
                if (!arguments.length) {
                    return this.app.size();
                }
                this.app.size(size);

                return this;
            },
            /**
             * Get/Set selected data points. <br>
             * To get selection, please use selection() or selection(Options). <br>
             * To set selection, please use selection(selectionPoint),
             * or selection(selectionPoint, Options).
             *
             * @function selection
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Array}  [selectionPoint] Array of Objects with either data or ctx should be set to points. 
             * Each point should be the following:
             * <pre>
             * {
             *     "data": {key: 'value', ...}, // (Optional) For the FlatTableDataset, the key is ID.
             *     "ctx":  [{mi: 0, ...}, {...}, ...], // (Optional) It takes higher priority when both parameters 
             *                                         // of 'data' and 'ctx' are used.
             * }
             * </pre>
             * @param {Object} [options] Selection options
             * <pre>
             *
             * Parameters used in getting data points from selection:
             * {
             *     "withDataCtx": Boolean, // (Optional) This parameter is only applicable to all viz charts, in which the ID starts with "viz/". The default value is false.
             *     "withInfo": Boolean, // (Optional) this parameter is deprecated. 
             * }
             *
             * Parameters used to set data points to be selected:   
             * {
             *     "selectionMode": "inclusive" or "exclusive" // (Optional) The default value remains the same as the 
             *                                                 // selection mode set by chart property 
             *                                                 // of "interaction -> selectablity -> mode". It takes
             *                                                 // higher priority when both parameters of 
             *                                                 // 'clearSelection' and 'selectionMode' are used. 
             *     "clearSelection": Boolean // (Optional) This parameter is deprecated.
             *                               // parameter. Use 'clearSelection' for backward-compatibility only.
             * }
             * </pre>
             * @returns {Array|Boolean}
             *                          Array of Points(for getting selection). Each point is
             * <pre>
             *{
             *     "data": {key: 'value', ...},
             *     "ctx":  [{mi: 0, ...}, {...}, ...], // (Optional) Depends on "withDataCtx".
             *     "info":  [{type: 'additionalData', ...}, {...}, ...], // (Optional) Depends on "withInfo".
             *}
             * </pre>
             *or Boolean (for setting selection)
             * <pre>
             *     True means setting selection is successful.
             *     False means setting selection is unsuccessful.
             * </pre>
             * @example <caption>Sample Code:</caption>
             * Get sample:
             *  VizInstance.selection(); this will get the selected data points.
             *  VizInstance.selection({withDataCtx: false}); this will get the selected data points without the data context.
             *  VizInstance.selection({withInfo: false}); this will get the selected data points without additional info.
             * </br>
             * Set sample:
             * VizInstance.selection([{
             *       "data":{"Country" : "China","Year" : "2001","Product" : "Motorcycle","Profit" : 129},
             *       "ctx" :{"dii_a1": 0,"dii_a2": 0,"mg": 0,"mi": 0}
             * }],{"clearSelection": true});
             *
             * VizInstance.selection([{
             *       "data":{"Country" : "China","Year" : "2001","Product" : "Motorcycle","Profit" : 129},
             *       "ctx" :{"dii_a1": 0,"dii_a2": 0,"mg": 0,"mi": 0}
             * }],{"selectionMode": "exclusive"});
             *
             * If you want to clear all the selections, you need to set the input selection data to empty:
             *     VizInstance.selection([],{"clearSelection": true})  or
             *     VizInstance.selection([],{"selectionMode": "exclusive"});
             */
            selection: function() {
                var items = null;
                var selOptions = null;

                var isGet = false;
                if (arguments.length <= 0) {
                    isGet = true;
                } else if (arguments.length <= 1) {
                    if (arguments[0] instanceof Array) {
                        isGet = false;
                        items = arguments[0];
                    } else {
                        isGet = true;
                        selOptions = arguments[0];
                    }
                } else {
                    isGet = false;
                    items = arguments[0];
                    selOptions = arguments[1];
                }

                var reValue;
                if (isGet) {
                    reValue = this.app.getSelectedObjects(selOptions);
                } else {
                    reValue = this.app.setSelectedObjects(items, selOptions);
                }
                return reValue;
            },
            selectedPropertyZone: function(sel) {
                var ret = this.app.selectedPropertyZone.apply(this.app, arguments);
                return arguments.length ? this : ret;
            },
            /**
             * Get/Set chart data.
             * To get data, use data()
             * To set data, use data(dataset)
             * @function data
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} data The object is either a type of CrosstableDataset or FlatTableDataset. {@link sap.viz.api.data.CrosstableDataset} | {@link sap.viz.api.data.FlatTableDataset}
             * @returns {Object} 
             * When getting data, it returns the object of the dataset of the chart.
             * When setting the data, it returns the object of VizInstance {@link sap.viz.api.core.VizInstance}.
             * Use this api will only pass dataset into chart, but associated data binding information is still kept the same as before. Any invalid dataset will be ignored. 
             * To update both dataset and binding information at the same time, call {@link sap.viz.api.core.VizInstance.update} instead.
             */
            data: function(data) {
                if (!arguments.length) {
                    var dataset;
                    if (this._dataType === CROSSTABLEDATASET) {
                        dataset = new CrosstableDataset();
                        dataset.data(this._data.data());
                        dataset.info(this._data.info());
                    } else if (this._dataType === FLATTABLEDATASET) {
                        dataset = new FlatTableDataset();
                        dataset.data(this._data.data());
                        dataset.info(this._data.info());
                    } else {
                        dataset = ObjectUtils.clone(this._data);
                    }
                    return dataset;
                }
                if (!this._checkDataType(data)) {
                    FunctionUtils.error('Wrong Data Type');
                }
                this.update({
                    'data': data
                });

                // Rebinds the event listener upon the data update; subplots may be recreated.
                for (var evt in this._eventsListeners) {
                    if (this._eventsListeners.hasOwnProperty(evt)) {
                        this.on(evt, this._eventsListeners[evt].callback, this._eventsListeners[evt].scope);
                    }
                }

                return this;
            },
            /**
             * Get/Set chart properties
             * @function properties
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} props Refers to Chart Property
             * @returns {Object} {@link sap.viz.api.core.VizInstance}
             * @example <caption>Sample Code:</caption>
             * VizInstance.properties({title: { visible : true,text :'Sample Bar Chart Title'}});
             */
            properties: function(props) {
                if (!arguments.length) {
                    return ObjectUtils.clone(this.app.getProperties());
                }

                LOG.context(':updateProperty:' + Objects.size(props));

                this.update({
                    properties: ObjectUtils.clone(props)
                });
                return this;
            },
            /**
             * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€]<br>
             * Append or get an internal css. 
             * @deprecated
             * @function css
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {String} [cssText]  The css text
             * @returns {Object|String} {@link sap.viz.api.core.VizInstance} | css string
             * @example <caption>Sample Code:</caption>
             * Set method: VizInstance.css('.v-m-title .v-title{ fill : #333333}');
             * Get method: VizInstance.css();
             */
            css: function(css) {
                if (!arguments.length || (arguments.length === 1 && typeof(arguments[0]) === 'object')) {
                    return ObjectUtils.clone(this.app.css.apply(this.app, arguments));
                }
                this.update({
                    css: ObjectUtils.clone(css)
                });
                return this;
            },
            /**
             * Update or get an internal css based on the selector.
             * @function css
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {String} Css selector
             * @param {String} Css style property
             * @param {String} Css value
             * @ignore
             */
            cssProperty: function(selector, style, value) {
                if (arguments.length === 2) {
                    return ObjectUtils.clone(this.app.cssProperty(selector, style));
                }
                if (arguments.length === 3) {
                    this.update({
                        cssProperty: ObjectUtils.clone({
                            selector : selector,
                            style : style,
                            value : value
                        })
                    });
                }
                return this;
            },
            /**
             * Get/Set data feeding information.
             * To get feeding, use feeding() <br>
             * To set feeding, use feeding(feeding)
             * @function feeding
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Array|Object|null} [feeding] 
             * If passing in CrossTable dataset {@link sap.viz.api.data.CrosstableDataset}, the parameter should be an array of feeding items.
             * <pre>
             * [{
             *   "feedId":feedId  // Feed ID for example: "regionColor"; refer to chartproperty
             *   "binding": [{
             *     "type" : "analysisAxis" | "measureValuesGroup" | "measureNamesDimension",
             *     "index":  Number
             *   }]
             * }]
             * 
             * For example: 
             * [{
             *   "feedId" : "primaryValues",
             *     "binding" : [{
             *        "type" : "measureValuesGroup",
             *        "index" : 1
             *     }]
             *  }, {
             *   "feedId" : "regionColor",
             *      "binding" : [{
             *        "type" : "analysisAxis",
             *        "index" : 2
             *      }, {
             *        "type" : "measureNamesDimension"
             *      }]
             *  }, {
             *   "feedId" : "axisLabels",
             *     "binding" : [{
             *        "type" : "analysisAxis",
             *        "index" : 1
             *     }]
             * }]
             * </pre>
             * 
             * If passing in the FlatTable dataset {@link sap.viz.api.data.FlatTableDataset}, the parameter should be an object.
             * <pre>
             * {
             *   "feedId": [metadata|"measureNamesDimension"]
             * }
             * 
             * For example:
             * {
             *   axisLabels: ["measureNamesDimension", "Year"],
             *   regionColor: ["Country"],
             *   primaryValues: ["Profit", "Revenue"]
             * }
             * </pre>
             * 
             * By passing a null feeding value in the CrossTable dataset, the chart will clean the feeding and use autofeed to create the chart.
             *
         * @returns {Array|Object} 
             * When it receives feeding, it returns the array of the CrossTable dataset {@link sap.viz.api.data.CrosstableDataset} or object of the FlatTable dataset {@link sap.viz.api.data.FlatTableDataset} feed items. 
             * When setting feeding, it returns the VizInstance {@link sap.viz.api.core.VizInstance}
             */
            feeding: function(feeding) {
                if (!arguments.length) {
                    return ObjectUtils.clone(this._feeding);
                }
                if (!this._checkFeedingType(feeding)) {
                    FunctionUtils.error('Wrong Feeding Type');
                }
                this.update({
                    feeding: feeding
                });
                return this;
            },
            /**
             * Get current feeding zone information. <br>
             * [NOTE: This API is deprecated. Refer to the Chart Properties feedingZone]
             * @function feedingZone
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @returns {Array} Feeding information group by the visualization element
             * @deprecated
             * <pre>
             * [
             *     {
             *         "name": "plot" | "legend" | "sizeLegend" | "xAxis" | "yAxis" | "xAxis2" | "yAxis2" | "zAxis" | "multiplier"|"mainPlot"|"valueaxis"
             *         "feedDef" : [{}],
             *         "bound" : [[[]]]
             *     }
             * ]
             * </pre>
             */
            feedingZone: function() {
                return this.app.getAllFeedingZone();
            },
            /**
             * Get current property zone information <br>
             * [NOTE: This API is deprecated. Refer to the chart properties propertyZone]
             * @function propertyZone
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @returns {Array} Property information group by visualization element
             * @deprecated
             * <pre>
             * [
             *     {
             *         "name": "title"|"plot"|
             *                 "legend"|"legend title"|"sizeLegend"|"sizeLegend title"|
             *                 "xAxis"|"xAxis title"|"xAxis2"|"xAxis2 title"|
             *                 "yAxis"|"yAxis title"|"yAxis2"|"yAxis2 title"|
             *                 "zAxis"|"zAxis title|
             *                 "rowAxis"|"rowAxis title "|
             *                 "columnAxis"|"columnAxis title "|
             *                 "mainPlot"|"subtitle"
             *         "bound" : [[[]]]
             *     }
             * ]
             * </pre>
             */
            propertyZone: function () {
                return this.app.getPropertyZone();
            },
            /**
             * Update various items in one go
             * @function update
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @param {Object} updates
             * <pre> 
             * {
             *     data: {@link sap.viz.api.data.CrosstableDataset}|{@link sap.viz.api.data.FlatTableDataset}, 
             *     "feeding": {@link sap.viz.api.core.VizInstance.feeding},
             *     "bindings": {@link sap.viz.api.core.VizInstance.bindings},
             *     "css": cssString, // (Optional) This parameter is deprecated. Use chart properties to set style instead.
             *     "properties": propertiesObj
             * }
             * </pre>
             * @returns {Object} {@link sap.viz.api.core.VizInstance}
             */
            update: function(updates) {
                if (updates) {
                    // We support: using a null value to clear current feeding, and switching to use
                    // Auto feed
                    // var updateValue = JSON.parse(JSON.stringify(updates)); // This line discards the function type property, so it must be fixed with the following line: 
                    var updateValue = ObjectUtils.extend(true, updates, {});
                    if (this._checkDataType(updates.data)) {
                        if (this._dataType === CROSSTABLEDATASET || this._dataType === FLATTABLEDATASET) {
                            var dataset = this._getInsideDataset(updateValue.data);
                            this._data.data(dataset.data());
                            this._data.info(dataset.info());
                            updateValue.data = this._getInsideDataset(this._data);
                        }
                    } else {
                        updateValue.data = undefined;
                    }
                    if(updates.feeding === null ) {
                        updateValue.feeding = null;
                    }else if (this._checkFeedingType(updates.feeding)) {
                        this._feeding = updates.feeding;
                    } else {
                        updateValue.feeding = undefined;
                    }

                    if (this._withFakeFlatTable) {
                        var ftFeedDefs = manifest.viz.get(this.type).allFeeds(true);
                        var ctObj = TB2CTBConvertUtil(this._data._FlatTableD, ftFeedDefs, this._feeding);
                        updateValue.data = new CrosstableDataset();
                        updateValue.data.data(ctObj.crosstableDataset);
                        updateValue.data = this._getInsideDataset(updateValue.data);
                        updateValue.feeding = ctObj.binding;
                    }
                    this.app.update(updateValue);
                }
                return this;
            },
            /**
             * Destroy this chart instance. This will remove all dom
             * nodes of the chart and the chart's listeners.
             * @function destroy
             * @memberof sap.viz.api.core.VizInstance
             * @static
             */
            destroy: function() {
                this._riv.instances.splice(this._riv.instances.indexOf(this), 1);
                this.app.destroy();
            },
            /**
             * Export the chart instance into a JSON object which contains
             * all information of the chart: type, data, properties,
             * css, feeding, and size.
             * @function toJSON
             * @memberof sap.viz.api.core.VizInstance
             * @static
             * @deprecated
             * @returns {Object}  VizDoc object that contains all the information of VizInstance.
             * <pre>
             * {
             *   "type": String, // Refer to the Chart Property for all supported viz chart TypeUtils.
             *   "properties": {}, // Refer to the Chart Property for all supported options for each viz type.
             *   "css": String, // Refer to the Chart Property or all supported css items for each viz type.
             *                  // (Optional) This parameter is deprecated. Use chart properties to set style instead.
             *   "size": {
             *         "auto": Boolean, // When "auto" is true, the chart will use the parent container size.
             *                          // When "auto" is false, the setting of "width" and "height" takes precedence.
             *         "width": Number, // Width of chart; only works when 'auto' is true
             *         "height": Number // Height of chart; only works when 'auto' is true
             *      },
             *   "data": {
             *         "type":"Crosstable"|"FlatTable",
             *         "val":dataset
             *         },
             *   "feeding": {@link sap.viz.api.core.VizInstance.feeding}
             * }
             * </pre>
             */
            toJSON: function(options, allCssDef) {
                var doc = {};
                doc.type = this._usrOptions.type;
                
                var servicesMetaData = sap.bi.framework.getServiceMetadata("*sap.viz.impls");
                // [TODO] Replace such logic because it depends on the internal implementation of the DIkernal, which will retrieve 
                // service and service meta data from the same array so that their index will be consistent. Otherwise, we have to 
                // config the static mapping between the viz type and the impls file name which is a duplication of the aio-bundle.
                // We need the framework to support retrieving component/service by its id first and change the implementation here.
                for (var i = 0, len = servicesMetaData.length; i < len; i++) {
                    if (servicesMetaData[i] && servicesMetaData[i].id === this._usrOptions.type) {
                        if (servicesMetaData[i].framework && servicesMetaData[i].framework.bundleVersion) {
                            doc.bundleVersion = servicesMetaData[i].framework.bundleVersion;
                        }
                        break;
                    }
                }
                
                // TODO: Temp workaround for Table and Crosstab serialization
                // Parameter options {emptyDataset: Boolean} doesn't support table and crosstab by now
                if (this._usrOptions.type === "viz/ext/table" || this._usrOptions.type === "viz/ext/crosstab") {
                    doc.data = {
                        type: "JSON",
                        val: options && (options.emptyDataset === true) ? {} : ObjectUtils.clone(this.app.getDataset())
                    };
                }
                // end TODO
                else {
                    var dsJSON = this.app.getDataset().toJSON(options);
                    var type;
                    if (dsJSON.id === 'sap.viz.data.CrosstableDataset') {
                        type = 'Crosstable';
                    } else if (dsJSON.id === 'sap.viz.data.FlatTableDataset') {
                        type = 'FlatTable';
                    }
                    doc.data = {
                        type: type,
                        val: dsJSON.data,
                        info: dsJSON.info
                    };
                }
                doc.properties = this.properties();
                if (allCssDef === true) {
                    doc.css = this.css(true);
                } else {
                    doc.css = this.css();
                }
                doc.feeding = this.feeding();
                doc.size = this.app.size();
                if (sap.viz.api.hasOwnProperty('VERSION')) {
                    doc.version = sap.viz.api.VERSION;
                }
                return doc;
            }
        };
        
        /**
         * Create dataset depending on type of dataset passed in
         * @function _initializeViz
         * @memberof sap.viz.api.core.VizInstance
         * @param {Object} Dataset
         * @param {String} Chart type
         * @ignore
         */
        vizInstance.prototype._initializeViz = function (_data, _type) {
            if (TypeUtils.isString(_type)) {
                var isInfoChart = _type.substring(0, 5) === 'info/';
            }
            if (_data instanceof CrosstableDataset) {
                this._data = new CrosstableDataset();
                this._data.data(_data.data());
                this._data.info(_data.info());
                this._dataType = CROSSTABLEDATASET;
            } else if (_data instanceof FlatTableDataset) {
                this._data = new FlatTableDataset(_data.data());
                this._data.info(_data.info());
                this._dataType = FLATTABLEDATASET;
                if (!isInfoChart) {
                    this._withFakeFlatTable = true;
                }
            } else if (_data) {
                this._data = ObjectUtils.clone(_data);
                this._dataType = RAWDATASET;
            }
        };
        /**
         * Get/Set inside dataset for VizInstance
         * @function _getInsideDataset
         * @memberof sap.viz.api.core.VizInstance
         * @param {Object} Dataset, CrosstableDataset, or FlatTableDataset
         * @return {Object} Inside dataset of API 1.0
         * @ignore
         */
        vizInstance.prototype._getInsideDataset = function (data) {
            var ret;
            if (data instanceof CrosstableDataset) {
                ret = data._crosstableDataset;
            } else if (data instanceof FlatTableDataset) {
                ret = data;
            }
            return ret;
        };
        /**
         * Check whether the data type of passed dataset matches this._dataType
         * @function _checkDataType
         * @memberof sap.viz.api.core.VizInstance
         * @param {Object} Dataset, CrossTableDataset, or FlatTableDataset
         * @return {Boolean} Whether dataset matches instance's data type
         * @ignore
         */
        vizInstance.prototype._checkDataType = function (data) {
            var ret;
            if (data) {
                if (this._dataType === CROSSTABLEDATASET) {
                    ret = data instanceof CrosstableDataset;
                } else if (this._dataType === FLATTABLEDATASET) {
                    ret = data instanceof FlatTableDataset;
                } else if (this._dataType === RAWDATASET) {
                    ret = !(data instanceof CrosstableDataset || data instanceof FlatTableDataset);
                }
            }
            return ret;
        };
        /**
         * Check whether the feeding type of passed feeding matches:_dataType
         * @function _checkFeedingType
         * @memberof sap.viz.api.core.VizInstance
         * @param {Object|Array} Feeding
         * @return {Boolean} Whether feeding matches instance's feeding type
         * @ignore
         */
        vizInstance.prototype._checkFeedingType = function (feeding) {
            var dataType;
            if (TypeUtils.isArray(feeding)) {
                dataType = CROSSTABLEDATASET;
            } else if (TypeUtils.isPlainObject(feeding)) {
                dataType = FLATTABLEDATASET;
            }
            return dataType === this._dataType;
        };
        /**
         * Remove event listener.
         * @function off
         * @memberof sap.viz.api.core.VizInstance
         * @static
         * @param {String} eventType EventType name
         *
         * @return {sap.viz.api.core.VizInstance} self
         */
        vizInstance.prototype.off = function(eventType) {
            if (eventType != null) {
                if (this._eventsListeners[eventType] !== undefined) {
                    this._eventsListeners[eventType] = undefined;
                    this.app.controller.rootUIComponent.attachEvent(eventType, FunctionUtils.noop);
                    delete this._eventsListeners[eventType];

                }
            }

            return this;
        };

        vizInstance.prototype.setApp = function(usrOptions) {
            this._usrOptions = ObjectUtils.extend(true, usrOptions, {});
            var isFlatTable = usrOptions.data instanceof FlatTableDataset;
            config.register({
                id: 'isFlatTable',
                value: isFlatTable
            });
            var isCrossTable = usrOptions.data instanceof CrosstableDataset;
            config.register({
                id: 'isCrossTable',
                value: isCrossTable
            });
            this._initializeViz(this._usrOptions.data, this._usrOptions.type);
            // If create viz chart with FlatTable, the dataset needs to be converted to CrossTable.
            if (manifest.viz.get(this._usrOptions.type).legacyDataAdapter && this._usrOptions.data instanceof FlatTableDataset) {
                // Check whether the FlatTable binding (necessary) is supplied.
                if (!TypeUtils.isPlainObject(this._usrOptions.feeding)) {
                    FunctionUtils.error('Binding Not Match');
                }
                var ftFeedDefs = manifest.viz.get(this._usrOptions.type).allFeeds(true);
                var ftBinding = this._usrOptions.feeding;
                var ctObj = TB2CTBConvertUtil(this._usrOptions.data._FlatTableD, ftFeedDefs, ftBinding);
                this._usrOptions.data = new CrosstableDataset();
                this._usrOptions.data.data(ctObj.crosstableDataset);
                this._usrOptions.feeding = ctObj.binding;
            }
            // CrossTable shouldn't use FlatTable binding. 
            if (manifest.viz.get(this._usrOptions.type).legacyDataAdapter 
                && this._usrOptions.data instanceof CrosstableDataset 
                && this._usrOptions.feeding 
                && !TypeUtils.isArray(this._usrOptions.feeding)) {
                FunctionUtils.error('Binding Not Match');
            }
            var rawData = this._getInsideDataset(this._usrOptions.data) || this._usrOptions.data;
            this.app = new ChartApplication({
                holder: this._usrOptions.container,
                launchOptions: {
                    vizType: this._usrOptions.type,
                    options: this._usrOptions.properties,
                    css: this._usrOptions.css,
                    // Zimo, 12/2/2014, To support createViz with the customized chart size,
                    // pass in the customized size object.
                    size: this._usrOptions.size,
                    data: {
                        rawData: rawData
                    },
                    feeding: this._usrOptions.feeding || this._usrOptions.dataFeeding,
                    /* dataFeeding for backward compatibility*/
                    events: this._usrOptions.events
                }
            });
        };
        /**
         * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€]<br>
         * Trigger viz action         
         * @deprecated
         * @function action
         * @memberof sap.viz.api.core.VizInstance
         * @static
         * @param {String} name The action's key name
         *
         * @param {Object} [args] The action's arguments in JSON format
         *
         * @return {Object} The action return value
         */

        vizInstance.prototype.action = function(keyName, args) {
            if (ExtCore._actionMap) {
                var functionName = ExtCore._actionMap[keyName];
                if (functionName != null) {
                    // Parse the function name. Ensures the following type is correct for parsing.
                    // Example: "controller.rootUIComponent._modules['root.main'].getMap"
                    var func = this.app.controller.rootUIComponent._modules['root.main'];
                    var scopeExists = true;
                    var namespaces = functionName.split('.');
                    var scope = func;
                    var typeExists = true;
                    for (var j = 0; j < namespaces.length; ++j) {
                        if (func[namespaces[j]] !== undefined) {
                            scope = func;
                            func = func[namespaces[j]];
                        } else {
                            typeExists = false;
                            break;
                        }
                    }
                    if (typeExists) {
                        var returnValue = null;
                        if (args !== undefined) {
                            returnValue = func.call(scope, args);
                        } else {
                            returnValue = func.call(scope);
                        }
                        // Clone the return object, then return it back.    
                        if (TypeUtils.isPlainObject(returnValue) || TypeUtils.isArray(returnValue)) {
                            returnValue = JSON.parse(JSON.stringify(returnValue));
                        }
                        return returnValue;
                    }
                }
            }

        };
        /**
         * Get viz description
         * @function description
         * @memberof sap.viz.api.core.VizInstance
         * @static
         * @returns {Object} Chart description 
         * <pre>
         * {
         *     "type": String // Read-only; viz type
         *     "classId": String // The viz DIV's class uid
         * }
         * </pre>
         */
        vizInstance.prototype.description = function(value) {
            // This is now a get method;
            if (arguments.length <= 0) {
                if (this._description === null) {
                    this._description = {};
                    if (this.app && this.app.controller) {
                        this._description.type = this.app.controller._vizType;
                        if (this.app.controller.rootUIComponent) {
                            this._description.classId = this.app.controller.rootUIComponent.id;
                        }
                    }

                }

            } else {
                // This is a get function, and the type/classID is read-only value.
            }
            return this._description;
        };
        
        /**
         * Export the current viz as an SVG String.
         * The viz is ready to be exported to svg ONLY after the "initialized" event is dispatched.
         * Any attempt to export to svg before that will result in an empty svg string.
         * @param {Object} [option] {width: Number, height: Number}
         * @return {String} The SVG string of the current viz or empty svg if an error occurs.
         * @ignore
         */
        vizInstance.prototype.exportToSVGString = function(option) {
            return this.app.exportToSVGString(option);
        };

        vizInstance.prototype.supportExportToSVG = function() {
            return this.app.supportExportToSVG();
        };

        return vizInstance;
        
        /**
         * [NOTE: This API is only applicable to all info charts, in which the ID starts with "info/"]<br>
         * Get/Set data binding information to charts. 
         * @function bindings
         * @memberof sap.viz.api.core.VizInstance
         * @static
         * @param {Array|Object|null} [binding]
         * 
         * To get the data binding information, call VizInstance.bindings() <br>
         * To set the data binding information, pass Object in below format into VizInstance
         * Use this api will only pass data binding information into chart, but associated dataset value is still kept the same as before. Any invalid data binding information will be ignored. 
         * To update both dataset and binding information at the same time, call {@link sap.viz.api.core.VizInstance.update} instead.
         * <pre>
         * bindings : [{
         *     feed : String, predefined id which indicates the target binding area of chart 
         *     source : Object, the array consist of dimension name or measure name
         * }, ...]
         * 
         * For example:
         * bindings : 
         * [{
         *     "feed" : "valueAxis",
         *     "source" : ["Profit", "Revenue"]
         *  }, {
         *     "feed" : "color",
         *     "source" : ["Product", {"measureNames" : ["valueAxis"]} ]
         *  }, {
         *     "feed" : "categoryAxis",
         *     "source" : ["Country"]
         * }]
         * </pre>
         *
         * @returns {Array|Object}  
         * If getting the binding, it returns bindings array;
         * if setting the binding, it returns VizInstance {@link sap.viz.api.core.VizInstance}
         */

        /**
         * [NOTE: This API is only applicable to all info charts, in which the ID starts with "info/"]<br>
         * Setting/getting scales
         * @function scales
         * @memberof sap.viz.api.core.VizInstance
         * @param {Array} [scales] Scale settings.
         * <pre>
         * [
         *  {
         *    "feed": "valueAxis", // Feed named "valueAxis"
         *    "type": "linear", // Currently not working
         *    "min": 0, // Min value of the scale
         *    "max": 300 // Max value of the scale
         *  }, {
         *    "feed": "color", // Feed named "color"
         *    "type": "color", // Currently not working
         *    "palette": ["#00ffff", "#ff00ff", "#ff1122", "#ffff00", "#f99f99", "#99ff99"] // Color palette
         *  }
         * ]
         * When setting the scales in multiple times, the last one will always override the former one if "feed" name is the same. 
         * </pre>
         * @returns {Array} Scale settings of current vizInstance.
         */
    });
define('sap/viz/migrate/BaseMigrator',['sap/viz/base/utils/Objects'], function(Objects) {

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function isEmpty(obj) {
		if (!obj) {
			return true;
		}
		for (var key in obj) {
			if (hasOwnProperty.call(obj, key)) return false;
		}
		if ($.isFunction (obj)) {
			return false ;
		}
		return true;
	}

	function getProperty(properties, path) {
		var paths = path.split('.'),
			current = properties,
			i;

		for (i = 0; i < paths.length; i++) {
			if (current[paths[i]] === undefined) {
				return undefined;
			} else {
				current = current[paths[i]];
			}
		}
		return current;
	}

	function setProperty(properties, path, value) {
		var paths = path.split('.'),
			current = properties,
			i;

		for(i = 0; i < paths.length - 1; i++) {
			if(current[paths[i]] === undefined) {
				current[paths[i]] = {};
			}
			current = current[paths[i]];
		}
		current[paths[paths.length-1]] = value;
	}

	function removeProperty(properties, path) {
		var paths = path.split('.'),
			current = properties,
			i;

		for(i = 0; i < paths.length - 1; i++) {
			if(current[paths[i]] === undefined) {
				return;
			}
			current = current[paths[i]];
		}
		delete current[paths[paths.length-1]];	
	}

	function clearEmptyProperties(properties) {
		for (var key in properties) {
			if (hasOwnProperty.call(properties, key)) {
				if (!(properties[key] instanceof Object)) {
					continue;
				}
				clearEmptyProperties(properties[key]);
				if (isEmpty(properties[key])) {
					delete properties[key];
				}
			}
		}
	}

	return {
		factory: function(migrationModel) {
			var migrator = {
				_model: migrationModel,
				_propertyMigrateActions: {
					rename: function(properties, srcPath, srcProperty, action) {
						setProperty(properties, action.to, srcProperty);
						this.remove(properties, srcPath);
					},

					remove: function(properties, srcPath) {
						removeProperty(properties, srcPath);
					}
				},

				fromVersion: function() {
					return this._model.fromVersion;
				},

				migrate: function(json) {
					var result = Objects.extend({}, json),
						fromVersion = result.version,
						allModel = this._getTypeModel('all'),
						chartModel = this._getTypeModel(result.type);
					this._doMigrate(result, chartModel);
					this._doMigrate(result, allModel);
					result.version = this._model.toVersion;
					return result;
				},

				_doMigrate: function(chart, model) {
					if (!model) {
						return;
					}
					this._migrateProperties(chart.properties, model.properties);
					// other migration goes here
				},

				_migrateProperties: function(properties, propModel) {
					var property, path, action;

					if (!propModel) {
						return properties;
					}
					for (path in propModel) {
						property = getProperty(properties, path);
						if (property) {
							action = propModel[path];
							this._propertyMigrateActions[action.action](properties, path, property, action);
						}
					}
					clearEmptyProperties(properties);
					return properties;
				},

				_getTypeModel: function(chartType) {
					return this._model.charts[chartType];
				}
			};

			return migrator;
		}
	};
});
define('sap/viz/migrate/migrator/Migrator10to12',[],function () {
	var migrator = {
		fromVersion: "4.0.10",
		toVersion: "4.0.12",
		charts: {
			"all": {
				properties: {
					"title.layout.width": {
						action: "rename",
						to: "title.layout.maxWidth",
					},
					"title.layout.height": {
						action: "rename",
						to: "title.layout.maxHeight",
					},
					"background.direction": {
						action: "rename",
						to: "background.gradientDirection"
					},
					"background.body.color": {
						action: "rename",
						to: "background.color"
					},
					"legend.layout.width": {
						action: "rename",
						to: "legend.layout.maxWidth"
					},
					"legend.layout.height": {
						action: "rename",
						to: "legend.layout.maxHeight"
					},
					"valueAxis.hideTitleFirst": {
						action: "remove"
					},
					"valueAxis.axisline": {
						action: "rename",
						to: "valueAxis.axisLine"
					},
					"valueAxis.lineSize": {
						action: "rename",
						to: "valueAxis.axisLine.size"
					},
					"valueAxis.unitFormatType": {
						action: "remove"
					},
					"valueAxis.layout.width": {
						action: "rename",
						to: "valueAxis.layout.maxWidth"
					},
					"valueAxis.layout.height": {
						action: "rename",
						to: "valueAxis.layout.maxHeigth"
					},
					"categoryAxis.hideTitleFirst": {
						action: "remove"
					},
					"categoryAxis.axisline": {
						action: "rename",
						to: "categoryAxis.axisLine"
					},
					"categoryAxis.lineSize": {
						action: "rename",
						to: "categoryAxis.axisLine.size"
					},
					"categoryAxis.layout.width": {
						action: "rename",
						to: "categoryAxis.layout.maxWidth"
					},
					"categoryAxis.layout.height": {
						action: "rename",
						to: "categoryAxis.layout.maxHeigth"
					},
					"plotArea.dataLabel.hiddenWhenOverlap" : {
						action : "rename",
						to : "plotArea.dataLabel.hideWhenOverlap"
					},
					"plotArea.fixedDatapointSize" : {
						action : "rename",
						to : "plotArea.isFixedDataPointSize"
					},
					"plotArea.dataLabel.position" : {
						action : "remove"
					},
					"plotArea.primaryScale.autoMinValue" : {
						action : "remove"
					},
					"plotArea.primaryScale.autoMaxValue" : {
						action : "remove"
					},
					"background" : {
						action : "rename",
						to : "plotArea.background"
					},
				}
			},
			"info/100_stacked_bar": {
				properties: {
					"xAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"yAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/100_dual_stacked_bar": {
				properties: {
					"xAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"yAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"xAxis2" : {
						action : "rename",
						to : "valueAxis2"
					},
					"plotArea.colorPalette" : {
						action : "remove"
					}
				}
			},
			"info/100_stacked_column" : {
				properties: {
					"yAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"xAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/100_dual_stacked_column" : {
				properties: {
					"yAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"xAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"yAxis2" : {
						action : "rename",
						to : "valueAxis2"
					},
					"plotArea.colorPalette" : {
						action : "remove"
					}
				}
			},
			"info/bubble": {
				properties: {
					"scale" : {
						action : "remove"
					},
					"xAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"yAxis" : {
						action : "rename",
						to : "valueAxis2"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/bullet": {
				properties: {
					"xAxis2" : {
						action : "rename",
						to : "valueAxis"
					},
					"yAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"yAxis2" : {
						action : "rename",
						to : "categoryAxis2"
					},
					"plotArea.barSize.desktop" : {
						action : "remove"
					},
					"plotArea.barSize.mobile" : {
						action : "remove"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/combination": {
				properties: {
					"yAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"xAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"plotArea.bar.barSize" : {
						action : "remove"
					},
					"plotArea.bar.barSize.desktop" : {
						action : "remove"
					},
					"plotArea.bar.barSize.mobile" : {
						action : "remove"
					},
					"plotArea.line.categorySize.desktop" : {
						action : "remove"
					},
					"plotArea.line.categorySize.mobile" : {
						action : "remove"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.dataShape.secondaryAxis" : {
						action : "remove"
					}
				}
			},
			"info/donut": {
				properties: {
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/horizontal_line": {
				properties: {
					"xAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"yAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/dual_horizontal_line": {
				properties: {
					"xAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"yAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"xAxis2" : {
						action : "rename",
						to : "valueAxis2"
					},
					"plotArea.colorPalette" : {
						action : "remove"
					}
				}
			},
			"info/line": {
				properties: {
					"yAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"xAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"plotArea.primaryValuesColorPalette" : {
						action : "remove"
					},
					"plotArea.secondaryValuesColorPalette" : {
						action : "remove"
					}
				}
			},
			"info/dual_line": {
				properties: {
					"yAxis" : {
						action : "rename",
						to : "valueAxis"
					},
					"xAxis" : {
						action : "rename",
						to : "categoryAxis"
					},
					"yAxis2" : {
						action : "rename",
						to : "valueAxis2"
					},
					"plotArea.colorPalette" : {
						action : "remove"
					},
				}
			},
			/**
			*   sample model
			"chartType": {
				properties: {
					"propertyPath" : {
						action : "rename/remove",
						to : "toPath"
					}
				}
			},
			*/
		}
	};
	migrator.charts["info/bar"] = migrator.charts["info/100_stacked_bar"];
	migrator.charts["info/dual_bar"] = migrator.charts["info/100_dual_stacked_bar"];
	migrator.charts["info/dual_column"] = migrator.charts["info/100_dual_stacked_column"];
	migrator.charts["info/pie"] = migrator.charts["info/donut"];
	migrator.charts["info/scatter"] = migrator.charts["info/bubble"];
	migrator.charts["info/stacked_bar"] = migrator.charts["info/100_stacked_bar"];
	migrator.charts["info/dual_stacked_bar"] = migrator.charts["info/100_dual_stacked_bar"];
	migrator.charts["info/stacked_column"] = migrator.charts["info/100_stacked_column"];
	migrator.charts["info/dual_stacked_column"] = migrator.charts["info/100_dual_stacked_column"];
	migrator.charts["info/column"] = migrator.charts["info/100_stacked_column"];

	return migrator;
});
define('sap/viz/migrate/migrator/Migrator12to13',[],function () {
	var migrator = {
    	fromVersion : "4.0.12" ,
    	toVersion : "4.0.13",
    	charts : {
    		"info/donut": {
				properties: {
					"plotArea.highlightIndex" : {
						action : "rename" ,
						to : "plotArea.highlight.highlightIndex"
					},
					"plotArea.unhighlightSliceColor" :{
						action :"rename",
						to : "plotArea.highlight.unhighlightSliceColor"
					},
					"plotArea.contextInfos" : {
						action : "rename",
						to : "plotArea.highlight.contextInfos"
					},
					"plotArea.highlightContext" : {
						action : "rename",
						to : "plotArea.highlight.highlightContext"
					},
					"plotArea.centerRenderer" : {
						action : "rename",
						to : "plotArea.highlight.centerRenderer"
					},
					"plotArea.centerName" : {
						action : "rename" ,
						to : "plotArea.highlight.centerName"
					},

					"plotArea.centerValue" : {
						action : "rename",
					    to : "plotArea.highlight.centerValue"
					}					
				}
			},
    	}
    };
    return migrator;
});
define('sap/viz/migrate/MigrationTool',['sap/viz/migrate/BaseMigrator','sap/viz/migrate/migrator/Migrator10to12','sap/viz/migrate/migrator/Migrator12to13'], function(BaseMigrator,Migrator1,Migrator2) {
	// TODO: move the migrator model outside this tool
	var models = [Migrator1 , Migrator2]; 
	return {
		_migrators : (function init() {
			var migrators = {};
			models.forEach(function(model) {
				var migrator = BaseMigrator.factory(model);
				migrators[migrator.fromVersion()] = migrator;
			});
			return migrators;
		}()),

		_getVersion : function(json) {
			if(!json) {
				return json;
			}
			var version = json.version, versionArray;
			// Migration Tool only checks first 3 version numbers without build number (e.g. 4.0.10) to perform the migration.
			if(version && version.split) {
				versionArray = version.split('.');
				if(versionArray.length === 4) {
					return versionArray[0] + '.' + versionArray[1] + '.' + versionArray[2];
				}
			}
			return version;
		},

		_getMigrator : function(fromVersion) {
			return this._migrators[fromVersion];
		},

		migrate: function(json) {
			var version = this._getVersion(json), migrator;
			while(version && (migrator = this._getMigrator(version))) {
				json = migrator.migrate(json);
				version = this._getVersion(json);
			}
			return json;
		}
	};
});
define('sap/viz/api/core',['jquery', 'sap/viz/base/utils/TypeUtils', 'sap/viz/util/Objects', 'sap/viz/base/utils/log/Analyzer', 'sap/viz/mvc/ChartApplication', 'sap/viz/manifest', 'sap/viz/api/core/VizInstance','sap/viz/api/data/CrosstableDataset','sap/viz/base/Logger', 'sap/viz/lang/langManager', 'sap/viz/data/utils/TB2CTBConvertUtil', 'sap/viz/base/utils/FunctionUtils', 'sap/viz/data/CrosstableDataset', 'sap/viz/api/data/FlatTableDataset', 'sap/viz/api/manifest/Viz', 'sap/viz/manifests/util/ManifestRegister', 'sap/viz/migrate/MigrationTool', 'exports'], function Setup($, TypeUtils, Objects, PnRAnalyzer, ChartApplication, manifest, vizInstance,CrosstableDataset, Logger, langManager, TB2CTBConvertUtil, FunctionUtils, _CrosstableDataset, FlatTableDataset, Viz, ManifestRegister, MigrationTool ) {

    var ANALYSISAXIS = "analysisAxis";
    var MEASUREVALUESGROUP = "measureValuesGroup";

    var fillEmptyValues = function (data, isMG) {
        for (var i = 0; i < data.length; i++) {
            if (data[i].values && TypeUtils.isArray(data[i].values)) {
                data[i].values = isMG ? [['']] : [''];
            }
            if (data[i].infos && TypeUtils.isArray(data[i].infos)) {
                delete data[i].infos;
            }
        }
    };
    
    var fillEmptyDataset = function (dataset) {
        var data = dataset._crosstableDataset.data();
        if (data[ANALYSISAXIS]) {
            var aa = data[ANALYSISAXIS];
            for (var i = 0; i < aa.length; i++) {
                fillEmptyValues(aa[i].data);
            }
        }
        if (data[MEASUREVALUESGROUP]) {
            var mg = data[MEASUREVALUESGROUP];
            for (var i = 0; i < mg.length; i++) {
                fillEmptyValues(mg[i].data, true);
            }
        }
        dataset._crosstableDataset.data(data);
    };
    
    var riv =

    /**
     * sap.viz.api.core
     * @namespace sap.viz.api.core
     */
    {
        /**
         * @ignore
         */
        instances : [], // Stores references to chart applications for easy processing of global events.

        /**
         * The main entry point of creating a chart.
         * 
         * @function createViz
         * @memberof sap.viz.api.core
         * @static
         * @param {Object} usrOptions
         * <pre>
         * {
         *   "type": String, // Refer to the Chart Property documentation for all supported chart types.
         *   "properties": Object, // (Optional) Refer to the Chart Property documentation for all supported options for each chart type.
         *   "css": String, // (Optional) This parameter is deprecated. Use chart properties to set style instead.
         *   "size": Object, // (Optional) Sets the width and height of the chart. For example, {width: 100, height: 200}. If the size is not supplied, the size of the rendered chart uses the size of the HTML element referred to in 'container'.
         *   "container": HTMLDivElement, // A reference to the containing HTML element in the HTML page
         *   "data": {@link sap.viz.api.data.CrosstableDataset} | {@link sap.viz.api.data.FlatTableDataset}, // Types of data models supported: CrossTable data model and FlatTable data model.
         *   "feeding": Array | Object, // (Optional) This parameter is deprecated. Use parameter of "bindings" to assign the data binding information instead.
         *   "bindings": Array, // (Optional) {@link sap.viz.api.core.VizInstance.bindings} Assigns data binding information.
         *   "events": Object, // (Optional) Sets the customized function when a specified event is called. The schema of the Object is {'<event name>': {fn: function(){}, scope: this}}. Refer to the Chart Property documentation for all supported events for each chart. For example: {'initialized':{ fn: function(){return;}, scope: this}}.
         * }
         * </pre>
         * @returns {Object} vizApplication instance {@link sap.viz.api.core.VizInstance}
         * 
         */
        createViz : function(usrOptions) {
            // Register the required manifests for the vizType
            if (usrOptions && usrOptions.type) {
                ManifestRegister.registerViz(usrOptions.type);
            }

            var _eventsListeners = {}, _feeding = usrOptions.feeding, _riv = this;
            // If the user did not give data, we will add null data to show the chart.
            if (!Viz.get(usrOptions.type)[0]) {
                // Wrong chart type
                FunctionUtils.error(langManager.getLogMessage('IDS_ERROR_WRONG_TYPE'));
            }
            if(Viz.get(usrOptions.type)[0].legacyDataAdapter && !usrOptions.data) {
                usrOptions.data = new CrosstableDataset();
                // New valid null data according to the chart's type
                var allfeeds = manifest.viz.get(usrOptions.type).allFeeds(true);
                var analysisAxis = [];
                var measureValuesGroup = [];
                var i = 0;
                var j = 0;
                if(allfeeds !== undefined && allfeeds !== null && allfeeds.length > 0) {
                    for(; i < allfeeds.length; i++) {
                        var type = allfeeds[i].type;
                        if(type === "Dimension") {
                            j = 0;
                            for(; j < allfeeds[i].min; j++) {
                                analysisAxis.push({
                                    'index' : analysisAxis.length + 1,
                                    'data' : [{
                                        'values' : [''],
                                        'infos' : [{}]
                                    }]
                                });
                            }
                        }
                        if(type === "Measure") {
                            j = 0;
                            for(; j < allfeeds[i].min; j++) {
                                measureValuesGroup.push({
                                    'index' : measureValuesGroup.length + 1,
                                    'data' : [{
                                        'values' : [['']]
                                    }]
                                });
                            }
                        }
                    }
                } else {
                    analysisAxis.push({
                        'index' : 1,
                        'data' : [{
                            'values' : [''],
                            'infos' : [{}]
                        }]
                    });
                    measureValuesGroup.push({
                        'index' : 1,
                        'data' : [{
                            'values' : [['']]
                        }]
                    });
                }
                usrOptions.data.data({
                    'analysisAxis' : analysisAxis,
                    'measureValuesGroup' : measureValuesGroup
                });
            } else if (Viz.get(usrOptions.type)[0].legacyDataAdapter && usrOptions.data._crosstableDataset && usrOptions.data._crosstableDataset.isEmptyDataset()) {
                // Insert blank string as data into the empty dataset so that chart modules can run with proper data.
                // Although it seems meaningless, it prevents errors from occurring when updating data. 
                fillEmptyDataset(usrOptions.data);
            }
            if(usrOptions.options !== undefined && usrOptions.properties === undefined) {
                usrOptions.properties = usrOptions.options;
            }

            PnRAnalyzer.pnrContext(':creation:' + Objects.size(usrOptions.properties)  + ':' + Objects.size(usrOptions.css));

            var viz = new vizInstance(_eventsListeners,_feeding,_riv);
            viz.setApp(usrOptions);

            Object.defineProperty(viz, "type", {
                value : usrOptions.type,
                enumerable : true
            });

            _riv.instances.push(viz);
            return viz;
        },
        /**
         * Destroy chart
         * @function destroyViz
         * @memberof sap.viz.api.core
         * @static
         * @param {Array} chartInstances Array of vizInstances to be destroyed
         */
        destroyViz : function() {
            for(var i = -1, j = arguments.length; ++i < j; ) {
                arguments[i].destroy();
            }
        },
        /**
         * Export the chart instance into a JSON object which contains
         * all chart information including type, data, properties,
         * css, feeding, and size.
         * @function exportViz
         * @memberof sap.viz.api.core
         * @static
         * @param {Object} chartInstance VizInstance({@link sap.viz.api.core.VizInstance}) which needs to be exported
         * @return  {Object} JSONObject
         * <pre>
         * {
         *   "type": String, // Refer to the Chart Property for all supported chart TypeUtils.
         *   "properties": {}, // Refer to the Chart Property for all supported options for each chart type.
         *   "css": String, // {@link sap.viz.api.core.VizInstance.css} CSS only exists in exported JSON of viz charts.
         *   "size": {
         *         "auto": Boolean,// When "auto" is true, auto size will work instead of "width" and "height".
         *                     // When "auto" is false, "width" and "height" are required and will work.
         *         "width": Number,
         *         "height": Number
         *      },
         *   "data": {
         *         "type":"Crosstable"|"FlatTable",
         *         "val":dataset
         *         },
         *   "feeding": Array | Object, // {@link sap.viz.api.core.VizInstance.feeding} Feeding only exists in the exported JSON of viz charts.
         *   "bindings": Array, // {@link sap.viz.api.core.VizInstance.bindings}  Bindings only exist in exported the JSON of info charts.
         * }
         * </pre>
         */
        exportViz : function(chart, options) {
            return chart.toJSON(options);
        },
        
        /**
         * @function loadViz
         * @memberof sap.viz.api.core
         * @static
         * @param {JSON} vizJSON          
         * <pre>
         * {
         *   "type": String, // Refer to Chart Property for all supported chart types.
         *   "properties": {}, // Refer to Chart Property for all supported options for each viz type.
         *   "css": cssString, // (Optional) This parameter is deprecated. Use chart properties to set style instead.
         *   "size": {
         *         "auto": Boolean,// When "auto" is true, auto size will work instead of "width" and "height".
         *                     // When "auto" is false, "width" and "height" are required and will work.
         *         "width": Number,
         *         "height": Number
         *      },
         *   "data": {
         *         "type":"Crosstable"|"FlatTable",
         *         "val":dataset
         *         },
         *   "feeding": Array | Object, // {@link sap.viz.api.core.VizInstance.feeding} Feeding is only used in viz charts, and it always associates with Crosstable data model.
         *   "bindings": Array, // {@link sap.viz.api.core.VizInstance.bindings} Bindings is only used in info charts.
         * }
         * </pre>
         * @param {HTMLDivElement} container JQuery html element. For example, $('body')
         * @returns {sap.viz.api.core.VizInstance} 
         */
        loadViz: function(vizJSON, container){
            if(arguments.length === 2){
                var chartJSON = JSON.parse(JSON.stringify(vizJSON));
                chartJSON = MigrationTool.migrate(chartJSON);
                chartJSON.container = container;
                var data = null;
                // TODO: Temp workaround for Table and Crosstab deserialization
                if (chartJSON.data.type === "JSON" 
                    && (chartJSON.type === "viz/ext/table" || chartJSON.type === "viz/ext/crosstab")) {
                    data = chartJSON.data.val;
                }
                // end TODO
                else {
                    data = chartJSON.data;
                    data.data = data.val;
                    if (chartJSON.data.type === "Crosstable") {
                        data.id = "sap.viz.data.CrosstableDataset";
                        data = CrosstableDataset.fromJSON(data);
                    } else if (chartJSON.data.type === "FlatTable") {
                        data.id = "sap.viz.data.FlatTableDataset";
                        data = FlatTableDataset.fromJSON(data);
                    }
                }
                
                chartJSON.data = data;
                return this.createViz(chartJSON);
            }else{
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }

        }
    };

    return riv;
    
    
    /**
     * sap.viz.api.VERSION
     * @namespace sap.viz.api.VERSION
     *    
     */
    
    /**
     * Constant; the current version of sap.viz.api.
     * @member VERSION
     * @memberof sap.viz.api.VERSION
     * @static
     * @example
     * var version = sap.viz.api.VERSION;
     */


    /**
     * sap.viz.api.metadata.Viz
     * @namespace sap.viz.api.metadata.Viz
     */
    
    /**
     * [NOTE: This API is only applicable to all info charts, in which the ID starts with â€œinfo/â€ ]
     * @function get
     * @memberof sap.viz.api.metadata.Viz
     * @static
     * @param {String} [id] Chart ID or empty params.
     *                        
     * @returns {sap.viz.api.metadata.VizMetadata} The chart metadata that is associated with the ID; if the ID is not set, it returns all the chart metadata. This is a read-only object.
     *
     * @example <caption>Sample Code:</caption>
     * var viz = sap.viz.api.metadata.Viz.get('info/column'); // Get the specified viz by ID; returns an array which
      contains one viz object
     * viz manifest returned:
     * {
     *     "type": String, chart type, for info/column is info/column.
     *     "vender": String, dependencies between modules.
     *     "bindings": Array, get all binding defintion for the chart.
     *     "scales": Array, get all scale defintion with default scale properties for the chart.
     *     "properties": Object, get all properties of the viz including default and customer setting.
     * }
     *
     */
    
});




define('sap/viz/api/serialization',['sap/viz/migrate/MigrationTool', 'exports'], function(MigrationTool) {
	
	var serialization = 
	
	/**
     * sap.viz.api.serialization
     * @ignore
     * @namespace sap.viz.api.serialization
     */
	{
		/**
         * Migrate the serialized chart to the latest version.
         * @ignore
         * @function migrate
         * @memberof sap.viz.api.serialization
         * @static
         * @param {Object} json
         * <pre>
         * serialized chart in json format
         * </pre>
         * @returns {Object} the migrated chart in json format
		 **/
		migrate: function(json) {
			return MigrationTool.migrate(json);
		}
	};

	return serialization;
});
define('sap/viz/base/utils/NamedColorUtils',['sap/viz/base/utils/ObjectUtils'],
  function Setup(ObjectUtils) {

    var configs = {};
    var colorRegex = /^ *(#[a-f0-9]{6}|#[a-f0-9]{3}|(rgb|rgba|hsl|hsla) *\([^)]*\)|AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGray|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGray|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGray|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gray|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGray|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGray|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGray|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen|DarkGrey|DarkSlateGrey|DimGrey|Grey|LightGrey|LightSlateGrey|SlateGrey) *$/i;
    var namedColorUtils = {

      constructor: function() {
        return;
      },

      register: function(obj) {
        configs = ObjectUtils.extend(true, configs, obj);
        return namedColorUtils;
      },
      convertColor:function(namedColor){
        var colorValue = null;
        if(configs.hasOwnProperty(namedColor)){
          colorValue = configs[namedColor];
        }

        var  retValue = null;
        if(colorValue){
          retValue = colorValue;
        }else if(colorRegex.test(namedColor)){
          retValue = namedColor;
        }else{
          retValue = "#000000";
        }
        return retValue;
      }

    };

    return namedColorUtils;
  });
define('sap/viz/api/env',['sap/viz/env', 'sap/viz/config', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/ObjectUtils','sap/viz/base/Logger', 'sap/viz/lang/langManager', 'sap/viz/base/utils/NamedColorUtils', 'exports'], function Setup(environment, config, TypeUtils, ObjectUtils ,Logger, langManager, NamedColorUtils) {
    var env =
    /**
     * sap.viz.api.env
     * @namespace sap.viz.api.env
     */
    {
        /**
         * Experimental
         * @function globalSettings
         * @memberof sap.viz.api.env
         * @static         
         * @param {Object|undefined} globalSettings
         * If there is no input parameter, this is a get globalSettings function; otherwise, this is a set globalSettings function.
         * <pre>
         * Example:
         *      // Set globalSettings
         *      sap.viz.api.env.globalSettings({
         *      "enableCanvg": true, // Only works for viz chart
         *      "enableCanvgConfig": {"viz/bar": {"max_svg": 2100, "max_canvas": 4000}},  // Only works for viz chart
         *      "colorMapping":{'RGB_COLOR_RED':'rgb(255,0,0)', 'RGB_COLOR_GREEN':'rgb(0,128,0)'}}); 
         *      var globalSettings = sap.viz.api.env.globalSettings(); // Get globalSettings; returns a cloned object which contains globalSettings. 
         * </pre>        
         * @returns {Object}
         *                  Return a copy of global settings
         */
        globalSettings : function(values) {
            if (arguments.length === 1 && TypeUtils.isPlainObject(values)) {
                var values = ObjectUtils.clone(values);
                if (values.enableCanvg) {
                    environment.initialize(values);
                }
                if (values.enableCanvgConfig && TypeUtils.isPlainObject(values.enableCanvgConfig)) {
                    for (var i in values.enableCanvgConfig) {
                        config.register({
                            id : i,
                            value : values.enableCanvgConfig[i]
                        });
                    }
                }

                if(values.colorMapping && TypeUtils.isPlainObject(values.colorMapping)){
                    NamedColorUtils.register(values.colorMapping);
                }
            } else if (arguments.length === 0) {
                var values = {};
                if (environment.getEnvSetting() && environment.getEnvSetting().enableCanvg) {
                    values = {
                        enableCanvg : environment.getEnvSetting().enableCanvg
                    };
                }
                if (config.getConfigs()) {
                    var configs = {
                        enableCanvgConfig : config.getConfigs()
                    };
                    values = ObjectUtils.extend(true, {}, values, configs);
                }
                return values;
            }
            else{
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }
        }
    };
    return env;
});

define('sap/viz/api/env/Language',['sap/viz/lang/langManager', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'exports'], function Setup(langManager, TypeUtils, Logger) {
	var language = 
	/**
	 * sap.viz.api.env.Language
	 * @namespace sap.viz.api.env.Language
	 */	
	{

			
		/**
		 * Set current language
		 * @function set
                 * @memberof sap.viz.api.env.Language
                 * @static
		 * @param {String} language
		 *                      Language value such as: en, de, fr, zh_CN, ja, ru, pt
		 * @param {Function} completeCallback
		 *                      (Optional) function(language){...}
		 * @param {Function} failedCallback
		 *                      (Optional) function(language, errorMsg){...}
		 * @return {sap.viz.api.env.Language} Self
		 *
		 */
		set : function(language, completeCallback, failedCallback) {
			if (TypeUtils.isString(language) && 
				(arguments.length === 1 ||
				(arguments.length === 2 && TypeUtils.isFunction(completeCallback)) || 
				(arguments.length === 3 && TypeUtils.isFunction(completeCallback) && TypeUtils.isFunction(failedCallback)))) {
				langManager.apply(language, completeCallback, failedCallback);
				return language;
			} else {
				Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
				return;
			}
		},

	/**
	 * Get current language
	 * @function get
         * @memberof sap.viz.api.env.Language
         * @static
	 * @return {String} Language value such as: en, de, fr, es, zh_CN, ja, ru, pt
	 */
	get : function() {
	return langManager.current();
	},
	
	/**
	 * Get the error message in its current language by error code
	 * @function getErrorMessage
	 * @memberof sap.viz.api.env.Language
	 * @static
	 * @param {Number} code
	 * Error code
	 *
	 * @return {String} Error message
	 * 
	 * @example sap.viz.api.env.Language.getErrorMessage(50000) = "Length of dimension cannot be zero."(locale == en);
	 */
	getErrorMessage : function(code){
	if(TypeUtils.isNumber(code)){
			return langManager.getLogMessageByID(code);
	}else{
			Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
	}
	}

};
return language;
});

define('sap/viz/api/env/Locale',['sap/viz/Locale', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'sap/viz/lang/langManager', 'exports'], function Setup(Locale, TypeUtils, Logger, langManager) {
    var locale =
    /**
     * sap.viz.api.env.Locale
     * @namespace sap.viz.api.env.Locale
     */
    {

        /**
         * Set current locale
         * @function set
         * @memberof sap.viz.api.env.Locale
         * @static
         * @param {String}
         *             Locale value such as: en, de, fr, es, zh_CN, ja, ru, pt
         * @param {Function} callback
         *                      (Optional) function(){...}
         * @return {sap.viz.api.env.Locale} Self
         */
        set : function(l, callback) {
            if (TypeUtils.isString(l) &&
                (arguments.length === 1 ||
                (arguments.length === 2 && TypeUtils.isFunction(callback)))) {
                Locale.locale(l, callback);
                return locale;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_LOCALE_NOT_CORRECT'));
                return;
            }
        },

        /**
         * Get current locale
         * @function get
         * @memberof sap.viz.api.env.Locale
         * @static
         * @return {String} Locale value such as: en, de, fr, zh_CN, ja, ru, pt
         */
        get : function() {
            return Locale.locale();
        }
    };
    return locale;
});

define('sap/viz/api/env/Resource',[
    'sap/viz/TemplateManager',
    'sap/viz/lang/langManager',
    'sap/viz/base/utils/TypeUtils',
    'sap/viz/base/Logger',
    'exports'
], function(TemplateManager, langManager, TypeUtils, Logger) {

    function toArray(p){
        return TypeUtils.isArray(p) ? p.slice() : [p];
    }

    function toItem(p){
        return TypeUtils.isArray(p) ? p[0] : p;
    }

    var handlers = {
        'sap.viz.GeoManager.resourcePath': {
            path: "../../resources",
            setPath: function(path){
                var GeoManager = window.sap && sap.viz && sap.viz.GeoManager;
                if(GeoManager){
                    GeoManager.resourcePath(toItem(path));
                }
            }
        },
        'sap.viz.api.env.Template.loadPaths': {
            path: TemplateManager.loadPath,
            setPath: function(path){
                TemplateManager.loadPath = toArray(path);
            }
        },
        'sap.viz.api.env.Language.loadPaths': {
            path: langManager.loadPath,
            setPath: function(path){
                langManager.loadPath = toArray(path);
            }
        },
        // If the package ONLY includes sap.viz.sdk, it only needs to set the SDK language loadpath.
        'sap.viz.env.Language.loadPaths.sdk': {
            path: ["../../../resources/framework/langs/"],
            setPath: function(path){
                langManager.loadPath = toArray(path);
            }
        },
        'sap.viz.map.Resources': {
            path: ["../../resources"]
        }
    };
    // Temporary: Set sap.viz.extapi.* to sap.viz.api.*
    handlers['sap.viz.extapi.env.Template.loadPaths'] = handlers['sap.viz.api.env.Template.loadPaths'];
    handlers['sap.viz.extapi.env.Language.loadPaths'] = handlers['sap.viz.api.env.Language.loadPaths'];

    function setPath(key, path) {
        var handler = handlers[key] = handlers[key] || {};
        handler.path = path;
        if(handler.setPath){
            handler.setPath(path);
        }
    }


    var defaultPath = ['sap.viz.api.env.Language.loadPaths',
        'sap.viz.api.env.Template.loadPaths',
        'sap.viz.extapi.env.Language.loadPaths',
        'sap.viz.extapi.env.Template.loadPaths'
    ];

    function getPath(key) {
        if(!key){//If key is not defined, then return all the paths.
            var allPath = {};
            for(var i in handlers){
                if(handlers.hasOwnProperty(i)){
                    var value = handlers[i] && handlers[i].path;
                    allPath[i] = TypeUtils.isArray(value) ? value.slice() : value;
                }
            }
            return allPath;
        }
        if (!handlers.hasOwnProperty(key)) {
            // explicitly null to keep backwards
            return null;
        }        
        var handler = handlers[key];
        var path = handler && handler.path;
        return TypeUtils.isArray(path) ? path.slice() : path;
    }

    /**
     * sap.viz.api.env.Resource
     * @namespace sap.viz.api.env.Resource
     */
    var resource = {
        /**
         * Get/set the resource path
         * @function path
         * @memberof sap.viz.api.env.Resource
         * @static
         * @name  sap.viz.api.env.Resource.path
         * @param {String} key
         * @param {undefined|String|Array} [path]
         * 	If the path is undefined, it is a get path by key function; otherwise, it is a set path by key function. <br>
         * Example:
         *  	Resource.path('baseURL') is to get the path by key.
         *  	Resource.path('baseURL', 'testurl') is to set the path by key. <br>
         * If the path is an array, keep a cloned array in the internal map. <br>
         * Predefined Resource Paths:
         * <pre>
         *     "sap.viz.api.env.Template.loadPaths":                       ["../../../resources/chart/templates"]
         *     "sap.viz.api.env.Language.loadPaths":                       ["../../../resources/chart/langs/"]
         *     "sap.viz.map.Resources" :                                   "../../resources"
         *
         * Example:
         *
         * Set path:
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths", ["../../../resources/chart/templates"]);
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths", ["../../../resources/framewrok/langs/"]);
         * sap.viz.api.env.Resource.path("sap.viz.map.Resources", "../../resources");
         *
         * Get path:
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Template.loadPaths") =  ["../../../resources/chart/templates"];
         * sap.viz.api.env.Resource.path("sap.viz.api.env.Language.loadPaths") =  ["../../../resources/framewrok/langs/"];
         * sap.viz.api.env.Resource.path("sap.viz.map.Resources") = "../../resources";
         *
         * </pre>
         * An alternative is to use customized paths:
         * 		sap.viz.api.env.Resource.path("baseURL", "testurl"), <br>
		 You can set any key-value pair which should be a valid path.
         * @return {sap.viz.api.env.Resource|String|Array} Return self when it is a set function and return string or array if it is a get function.
         */
        path : function() {
            if (arguments.length === 1 && TypeUtils.isString(arguments[0])) {
                return getPath(arguments[0]);
            } else if (arguments.length === 2 && TypeUtils.isString(arguments[0])) {
                setPath(arguments[0], arguments[1]);
            } else if(arguments.length ===0){
                return getPath();
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
            }
            return resource;
        }
    };

    return resource;
});

define('sap/viz/util/Constants',[],
  function Setup() {
    var moduleConstants = {
      Type: {
        Chart: 'CHART',
        Container: 'CONTAINER',
        Supplementary: 'SUPPLEMENTARY',
        Behavior: 'BEHAVIOR',
        Controller: 'CONTROLLER',

        Scientific: {
          Layout: 'Represents a layout algorithm'
        },

        Presentation: {
          Tooltip: 'Represents a tooltip'
        },

        ThirdParty: 'THIRDPARTY'
      },
      RenderTo: {
        SVG: 'SVG',
        DIV: 'DIV',
        NONE: 'NONE'
      },
      CSS: {
        CLASS: {
          MODULEPREFIX: "v-m-",
        }
      },
      BEHAVIOR: {
        DEFAULT_BEHAVIOR_ID:"default",
        DEFAULT_CHART_TYPE_KEY:"*",
        TRIGGER: {
          KEY: {
            API: {
              GET_SELECTION: 'Trigger_key_api_get_selection',
              SET_SELECTION: 'Trigger_key_api_set_selection',
            },
            CLICK_ON_DATAPOINT:'click_on_datapoint',
            CLICK_ON_NON_DATAPOINT:'click_on_non_datapoint',
            HOVER_ON_DATAPOINT:'hover_on_datapoint',
            HOVER_ON_NON_DATAPOINT:'hover_on_non_datapoint',
            HOVER_ON_LEGEND:'hover_on_legend',
            HOVER_ON_NON_LEGEND:'hover_on_non_legend',
            CLICK_ON_LEGEND:'click_on_legend',
            MOUSEUP_ON_LEGEND:'mouseup_on_legend',
            HOVER_ON_AXIS_LABEL:'hover_on_axis_label',
            HOVER_ON_NON_AXIS_LABEL:'hover_on_non_axis_label',
            CLICK_ON_AXIS_LABEL:'click_on_axis_label',
            MOUSEUP_ON_AXIS_LABEL:'mouseup_on_axis_label',
            LASSO_START_ON_EVENTLAYER:'lasso_start_on_eventLayer',
            LASSO_MOVE_ON_EVENTLAYER:'lasso_move_on_eventLayer',
            LASSO_END_ON_EVENTLAYER:'lasso_end_on_eventLayer',
            PAN_START_ON_EVENTLAYER:'pan_start_on_eventLayer',
            PINCH_START_ON_EVENTLAYER:'pinch_start_on_eventLayer',
            PINCH_MOVE_ON_EVENTLAYER:'pinch_move_on_eventLayer',
            PINCH_END_ON_EVENTLAYER:'pinch_end_on_eventLayer'
          },
          CSS: {
            MATCHMODE: {
              NEGATIVE: 'negative',
              POSITIVE: 'positive'
            }
          }
        }
      },
      UNITFORMATTYPE : {
        METRICUNITS : 'MetricUnits',
        FINANCIALUNITS : 'FinancialUnits'
      }
    };

    return moduleConstants;
  });

define('sap/viz/format/UnitFormat',['sap/viz/format/FormatManager', 'sap/viz/util/Constants'], function(FormatManager, Constants) {
    var PRE_MARKER = '[CVOM#PFIX]',
        SUF_MARKER = '[CVOM#SFIX]',
        CVOMNUMBERUNITPREFIX = '[CVOM#UNIT]',
        MARKER_LEGNTH = PRE_MARKER.length; // all markers shall be of the same length

    function escapeRE(str) {
        return str.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
    }

    var REGEX = {
            EXPO_EXTRACTOR: new RegExp("(?=e)"),
            KMBT: new RegExp("(.*)" + escapeRE(CVOMNUMBERUNITPREFIX) + "(.)$"),
            UNIT: new RegExp("(.*)[0-9]([a-zA-Z])$")
        },
        KMBT = {
            K: 1e3,
            M: 1e6,
            B: 1e9,
            T: 1e12
        };

    /**
     * Parse a pattern string into three parts, if all exists
     *
     * A pattern string can contain a prefix, a real pattern, and a suffix.
     * Prefix and suffix are enclosed between a special pair of marker: '[CVOM#PFIX]' and '[CVOM#SFIX]' respectively.
     *
     * @example
     *    input - "[CVOM#PFIX]$ [CVOM#PFIX]0.0000[CVOM#SFIX]Thousand[CVOM#SFIX]"
     *    output - ["$ ", "0.0000", "Thousand"]
     *
     * @param pattern pattern string with prefix and suffix marked by markers
     * @return a 3-tuple containing the [prefix, real_pattern, suffix]
     */
    function parsePattern(pattern) {
        var prefix = null,
            suffix = null;

        if (pattern) {
            var sIdx, eIdx;
            // parse prefix
            sIdx = pattern.indexOf(PRE_MARKER);
            eIdx = pattern.lastIndexOf(PRE_MARKER);
            if (sIdx >= 0 && eIdx >= 0 && sIdx !== eIdx) {
                prefix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                pattern = pattern.substring(eIdx + MARKER_LEGNTH);
            }
            // parse suffix
            sIdx = pattern.indexOf(SUF_MARKER);
            eIdx = pattern.lastIndexOf(SUF_MARKER);
            if (sIdx >= 0 && eIdx >= 0 && sIdx !== eIdx) {
                suffix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                pattern = pattern.substring(0, sIdx);
            }
        }
        return [prefix, pattern, suffix];
    }

    function unitFormat(value, pattern, unitFomratType) {
        if(value === null || value === undefined ){
            return null;
        }

        // Parse prefix and suffix
        var prefix, suffix;
        var PRE_MARKER = '[CVOM#PFIX]', SUF_MARKER = '[CVOM#SFIX]';
        // MARKER_LEGNTH = PRE_MARKER.length and MARKER_LEGNTH = SUF_MARKER.length
        var MARKER_LEGNTH = 11;
        if (pattern) {
            // parse out the prefix
            var sIdx = pattern.indexOf(PRE_MARKER);
            var eIdx = pattern.lastIndexOf(PRE_MARKER);
            if (sIdx >= 0 && eIdx >=0 && sIdx !== eIdx) {
                prefix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                pattern = pattern.substring(eIdx + MARKER_LEGNTH);
            }

            // parse out the suffix
            sIdx = pattern.indexOf(SUF_MARKER);
            eIdx = pattern.lastIndexOf(SUF_MARKER);
            if (sIdx >= 0 && eIdx >=0 && sIdx !== eIdx) {
                suffix = pattern.substring(sIdx + MARKER_LEGNTH, eIdx);
                pattern = pattern.substring(0, sIdx);
            }
        }

        var CVOMNUMBERUNITPREFIX = '[CVOM#UNIT]';
        var tempValueLeft, tempValueRight, numLeft, result, formatFun, index, str, temp;
        if ((typeof pattern === 'string') &&
          (pattern.charAt(pattern.length - 1) === 'u')) {
          if ((typeof value === 'number')) {
            // currently, the difference between financial units and metrics units is that we only change the G to B
            numLeft = value;
            tempValueRight = '';
            formatFun = d3.format('s');
            while (pattern.charAt(pattern.length - 1) === 'u') {
              tempValueLeft = formatFun(numLeft);
              if (isNaN(tempValueLeft.charAt(tempValueLeft.length - 1))) {
                tempValueRight = tempValueLeft.substr(tempValueLeft.length - 1, 1) + tempValueRight;
                if (unitFomratType !== Constants.UNITFORMATTYPE.METRICUNITS && tempValueRight === 'G') {
                  tempValueRight = 'B';
                }
                tempValueLeft = tempValueLeft.substr(0, tempValueLeft.length - 1);
              }
              numLeft = parseFloat(tempValueLeft);
              pattern = pattern.substring(0, pattern.length - 1);
            }

            numLeft = parseFloat(numLeft.toPrecision(8));
            if ((Math.abs(numLeft) >= 1e12) ||
              (Math.abs(numLeft) < 1e-3 && Math.abs(numLeft) > 0)) {
              tempValueLeft = numLeft.toExponential();
              index = tempValueLeft.indexOf('e');
              tempValueRight = tempValueLeft.substring(index) + tempValueRight;
              numLeft = parseFloat(tempValueLeft.substring(0, index));
            }

            tempValueLeft = unitFormat(numLeft, pattern);
            result = tempValueLeft + tempValueRight;

          } else {
            result = value;
          }
        } else if ((typeof pattern === 'string') &&
          (pattern.substring(pattern.length - CVOMNUMBERUNITPREFIX.length - 1, pattern.length - 1) === CVOMNUMBERUNITPREFIX)) {
            // Example:
            //  call unitFormat(1.234567890123, "0.##########[CVOM#UNIT]k")
            //  returns "0.0012345679K"
            if (typeof value !== 'number') {
                result = value;
            } else {
                var unit = pattern.charAt(pattern.length - 1).toUpperCase();
                var validatedUnit = true;
                switch (unit) {
                    case 'K':
                        value /= 1000;
                        break;
                    case 'M':
                        value /= 1000000;
                        break;
                    case 'B':
                        value /= 1000000000;
                        break;
                    case 'T':
                        value /= 1000000000000;
                        break;
                    default:
                        result = value;
                        validatedUnit = false;
                        break;
                }
                if (validatedUnit) {
                    temp = unitFormat(value, pattern.substring(0, pattern.length - CVOMNUMBERUNITPREFIX.length - 1));
                    result = temp + unit;
                }
            }
        } else {
          str = value.toString();
          index = str.indexOf('e');
          if ((typeof value === 'number') && (index >= 0)) {
            result = str.substring(index);
            temp = FormatManager.format(parseFloat(str.substring(0, index)), pattern);
            result = temp + result;
          } else {
            result = FormatManager.format(value, pattern); // we always try to convert number to string
          }
        }

        result = prefix ? prefix + result : result;
        result = suffix ? result + suffix : result;

        return result;
    }

    /**
     * Format a given value n times using SI-prefix format. n is given by the number of 'u'
     * at the end of pattern.
     *
     * SI-prefix format will format extremly big/small numbers into coefficient followed
     * by a unit of measure character. See http://en.wikipedia.org/wiki/Metric_prefix for
     * details on SI-prefix.
     *
     * Sometimes the coefficient part of the formatted number is still too big/small, it
     * makes sense to format that part again using the same format algorithm. This can
     * be specified by putting more than one 'u' at the end of the pattern.
     *
     * For instance, 1e32 is 100 Mega Septillion. It can be formatted to "100MY" with the
     * pattern "#,###uu", or just "100,000,000Y" using the pattern "#,###u".
     * Note the non-u pattern still applies.
     *
     * The algorithm will always take the largest possible unit of measure,
     * so 1,000,000 is "1M" instead of "1,000K"
     *
     * @param value value to be formatted
     * @param pattern pattern to used to format the value, it has to end with one or more
     *                'u' for the d3 SI format to be executed
     * @param unitFormatType a flag to indicate whether to convert the unit 'G' to 'B'
     */

    function siFormat(value, pattern, unitFormatType) {
        if (typeof value !== "number") {
            return value;
        }
        var formatFn = d3.format('s'),
            num = value,
            suffix = '',
            numStr, numAbs, numParts, end;
        while (pattern.charAt(pattern.length - 1) === 'u') {
            numStr = formatFn(num);
            end = numStr.charAt(numStr.length - 1);
            if (isNaN(end)) {
                suffix = end + suffix;
                if (suffix === 'G' && unitFormatType !== Constants.UNITFORMATTYPE.METRICUNITS) {
                    suffix = 'B';
                }
                numStr = numStr.substr(0, numStr.length - 1);
            }
            num = parseFloat(numStr);
            pattern = pattern.substr(0, pattern.length - 1);
        }
        num = parseFloat(num.toPrecision(8));
        numAbs = Math.abs(num);

        if (numAbs >= 1e12 || (numAbs < 1e-3 && numAbs !== 0)) {
            numParts = num.toExponential().split(REGEX.EXPO_EXTRACTOR);
            suffix = numParts[1] + suffix;
            num = parseFloat(numParts[0]);
        }

        return unitFormat(num, pattern) + suffix;
    }

    /**
     * Format a value with a pattern having [CVOM#UNIT] unit in it.
     *
     * @example
     *     kmbtFormat(10000, "#.##[CVOM#UNIT]k")  ==>  "10.00K"
     */
    function kmbtFormat(value, pattern) {
        var parts = REGEX.KMBT.exec(pattern),
            patt = parts[1],
            unit = parts[2].toUpperCase();
        if (typeof value === "number" && KMBT[unit] !== undefined) {
            return unitFormat(value / KMBT[unit], patt) + unit;
        } else {
            return value;
        }
    }

    /**
     * Format a numeric value using FormatManager.
     *
     * If the value has an exponent part after being converted to string,
     * only the coefficient part of the value is used in formatting,
     * the exponent part is appended to the formatted string
     *
     * @example
     *     numFormat(1.2345e21, "<0.00>")   ==>   "<1.23>e21"
     */
    function numFormat(value, pattern) {
        var str = value.toString(),
            parts;
        if (typeof value === 'number') {
            parts = str.split(REGEX.EXPO_EXTRACTOR);
            return FormatManager.format(parseFloat(parts[0]), pattern) + (parts[1] || "");
        } else {
            return FormatManager.format(value, pattern);
        }
    }


    var UnitFormat = {
        format: unitFormat
    };
    return UnitFormat;
});

define('sap/viz/api/env/Format',['sap/viz/format/FormatManager', 'sap/viz/base/utils/TypeUtils', 'sap/viz/format/UnitFormat', 'exports'], function Setup(FormatManager, TypeUtils, UnitFormat) {
	
	var format =
    /**
     * sap.viz.api.env.Format
     * @namespace sap.viz.api.env.Format
     */
	{
		/**
		 * Customize the global numeric formatter <br>
		 * If you set a formatter, it will replace the existing formatter.
		 * @function numericFormatter
		 * @memberof sap.viz.api.env.Format
		 * @static
		 * @param {Object} formatter
		 * {format: function(value, pattern) {...}}
		 *
		 *
		 * <pre>
		 * Example:
		 * 		var customerFormatter = {
		 *			format : function(value, pattern) {
		 *				// Add your code here to convert the number value to a formatted string (according to the pattern string). 
		 *				return formattedString;
		 *			}
		 *		};
		 *		sap.viz.api.env.Format.numericFormatter(customerFormatter);
		 * </pre>
		 */
		numericFormatter : function(formatter) {
			return	FormatManager.formatFunc(formatter);
			
		},


		/**
		 * [NOTE: This API is only applicable to all info charts, in which the ID starts with "info/"]<br>
		 * Set use default numeric formatter when usingDefaultFormatter is set to 'true'. 
		 * @function useDefaultFormatter
		 * @memberof sap.viz.api.env.Format
		 * @static
		 * @param {Boolean}  usingDefaultFormatter When the value is true, the formatted number displays as the default setting based on locale.
		 */
		useDefaultFormatter : function(usingDefaultFormatter){
			if (usingDefaultFormatter === true || usingDefaultFormatter === false) {
				FormatManager.useDefaultFormatter(usingDefaultFormatter);
			}
			return FormatManager.useDefaultFormatter();
			
		},

		/**
		 * The format function used in a chart formats a value with a CVOM pattern.
		 *
		 * The CVOM pattern can carry special CVOM tags in it, such as: [CVOM#PFIX], [CVOM#SFIX], and [CVOM#UNIT], etc.
		 * The most important feature is that the formatted result can contain a unit in it. 
		 * 
		 * @example
		 *	format(1250000, "u")  === "1.25M"		   // Use the largest unit possible
		 *	format(1250000, "#,###[CVOM#UNIT]k") === "1,250K"  // Use an explicit unit
		 *	format(1.25e+6, '[CVOM#PFIX]$[CVOM#PFIX]#,###[CVOM#UNIT]K[CVOM#SFIX]/year[CVOM#SFIX]') === "$1,250K/year" // A more complex example
		 * @function format
		 * @memberof sap.viz.api.env.Format
		 * @static
		 * @param {Number} value Value to be formatted
		 * @param {String} pattern Pattern to be used to format the value
		 * @param {String} unitFormatType Either constants will indicate unit type: UNITFORMATTYPE.METRICUNITS or UNITFORMATTYPE.FINANCIALUNITS
		 */
		format: UnitFormat.format,
		
		/**
		 * The formatted value which tells the format manager to use its default formatter.
		 */
		DEFAULT_FORMATTED_VALUE : FormatManager.DEFAULT_FORMATTED_VALUE
	};
	return format;
});

define('sap/viz/api/log/Appender',['sap/viz/base/Logger', 'exports'], function Setup(LOG) {
    
    /**
     * The appender classes of SAP loggers:
     * @namespace sap.viz.api.log.Appender
     */
    var appender = {};

    /**
     * The Console appender class; the log will be displayed on a browser console.
     * @member ConsoleAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.ConsoleAppender = LOG.ConsoleAppender;
    
    /**
     * The Div appender class; the log will be displayed on a web page. 
     * @member DivAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.DivAppender = LOG.DivAppender;
    
    /**
     * The Ajax appender class; the log will be displayed on a remote file. 
     * @member AjaxAppender
     * @memberof sap.viz.api.log.Appender
     * @static
     */
    appender.AjaxAppender = LOG.AjaxAppender;

    return appender;
});

define('sap/viz/api/log/Layout',['sap/viz/base/Logger', 'exports'], function Setup(LOG) {

    /**
         * Appender layout classes for the SAP logger:
         * @namespace sap.viz.api.log.Layout
         */
        var layout = {};
        
        /**
         * Default appender layout class
         * @memberof sap.viz.api.log.Layout
         * @member DefaultLayout
         * @static
         */
        layout.DefaultLayout = LOG.DefaultLayout;
        
        /**
         * HTML appender layout class
         * @memberof sap.viz.api.log.Layout
         * @member HTMLLayout
         * @static
         */
        layout.HTMLLayout = LOG.HTMLLayout;
        
        /**
         * XML appender layout class
         * @memberof sap.viz.api.log.Layout
         * @member XMLLayout
         * @static
         */
        layout.XMLLayout = LOG.XMLLayout;
        
        /**
         * JSON appender layout class
         * @memberof sap.viz.api.log.Layout
         * @member JSONLayout
         * @static
         */
        layout.JSONLayout = LOG.JSONLayout;
        

});

define('sap/viz/api/log/Logger',['sap/viz/base/Logger', 'exports'], function Setup(LOG) {
    /**
     * sap.viz.api.log.Logger<br>
     * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€]
     * @namespace sap.viz.api.log.Logger
     * @deprecated
     * 
     */
    var logger = {};
    /**
     * @ignore
     */
    logger.LEVEL = {};
    
    /**
     * Log level constant; OFF
     * @constant LEVEL.OFF
     * @memberof sap.viz.api.log.Logger     
     */
    logger.LEVEL.OFF= LOG.LEVEL.NO;
    
    /**
     * Log level constant; TRACE
     * @constant LEVEL.TRACE
     * @memberof sap.viz.api.log.Logger     
     */
    logger.LEVEL.TRACE = LOG.LEVEL.TRACE;
    
    /**
     * Log level constant; DEBUG
     * @constant LEVEL.DEBUG
     * @memberof sap.viz.api.log.Logger     
     */
    logger.LEVEL.DEBUG = LOG.LEVEL.DEBUG;
    
    /**
     * Log level constant; INFO
     * @constant LEVEL.INFO
     * @memberof sap.viz.api.log.Logger     
     */
    logger.LEVEL.INFO = LOG.LEVEL.INFO;
    
    /**
     * Log level constant; WARN
     * @constant LEVEL.WARN
     * @memberof sap.viz.api.log.Logger     
     */
    logger.LEVEL.WARN = LOG.LEVEL.WARN;
    
    /**
     * Log level constant; ERROR
     * @constant LEVEL.ERROR
     * @memberof sap.viz.api.log.Logger     
     */
    logger.LEVEL.ERROR = LOG.LEVEL.ERROR;

    /** 
     * 
     * Get or set log appenders       
     * @function appenders
     * @memberof sap.viz.api.log.Logger
     * @static     
     * @param {Array} value - Array of the instances of sap.viz.api.log.Appender.#Appender
     * <pre>
     * {
     *   The instances can be 
     *   sap.viz.api.log.Appender.ConsoleAppender
     *   sap.viz.api.log.Appender.DivAppender
     *   sap.viz.api.log.Appender.AjaxAppender
     * }
     * </pre>
     * @returns {Array}  [sap.viz.api.log.ConsoleAppender, sap.viz.api.log.DivAppender]. 
     */
    logger.appenders = function(value){
        if(arguments.length>0){ // set appenders
            for(var i=0;i<value.length; i++){
                LOG.addAppender(value[i]);
            }
            return this;
        }
        return LOG.getAppenders();
    };
    
    /**
     * 
     * Get or set log level     
     * @function level
     * @memberof sap.viz.api.log.Logger
     * @static     
     * @param {String} value - sap.viz.log.LEVEL constant.
     * <pre>
     * {
     *   The value can be 
     *   sap.viz.log.LEVEL.NO
     *   sap.viz.log.LEVEL.TRACE
     *   sap.viz.log.LEVEL.DEBUG
     *   sap.viz.log.LEVEL.INFO
     *   sap.viz.log.LEVEL.WARN
     *   sap.viz.log.LEVEL.ERROR
     * }
     * </pre>
     * @returns {String} sap.viz.log.LEVEL constant.
     */
    
    logger.level = function(value){
        if(arguments.length>0){
            LOG.level = value;
        }else{
            return LOG.level;
        }
    };
    
    return logger;
});

define('sap/viz/api/env/Template',[
    'sap/viz/TemplateManager', 
    'sap/viz/base/utils/ObjectUtils', 
    'sap/viz/base/utils/TypeUtils', 
    'sap/viz/base/Logger', 
    'sap/viz/lang/langManager', 
    'exports'], 
function Setup(TemplateManager, ObjectUtils, TypeUtils, Logger, langManager) {
    var _listeners = {};
    var template =
        /**
         * sap.viz.api.env.Template
         * @namespace sap.viz.api.env.Template
         */
        {

            /**
             * Set the current template's unique ID
             * @function set
             * @memberof sap.viz.api.env.Template
             * @static
             * @param {String} id
             *                          Template's unique ID
             * @param {Function} [completeCallback]
             *                           function(id){...} // The parameter ID is optional
             * @param {Function} [failedCallback]
             *                           function(id, errorMsg){...} // The parameter ID and errorMsg are optional
             * @return {sap.viz.api.env.Template} Self
             *
             */
            set: function (id, completeCallback, failedCallback) {
                if (TypeUtils.isString(id) &&
                    (arguments.length === 1 ||
                        (arguments.length === 2 && TypeUtils.isFunction(completeCallback)) ||
                        (arguments.length === 3 && TypeUtils.isFunction(completeCallback) && TypeUtils.isFunction(failedCallback)))) {
                    TemplateManager.apply(id, completeCallback, this, failedCallback);
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * Get the current template's unique ID
             * @function get
             * @memberof sap.viz.api.env.Template
             * @static
             * @return {String} Template's unique ID
             *
             * Example:
             *      sap.viz.api.env.Template.set('flashy', completeCallback, failedCallback);// Set template by the ID
             *      sap.viz.api.env.Template.get() = 'flashy';// Get the set template ID
             */
            get: function () {
                return TemplateManager.current().id;
            },

            /**
             * @ignore
             */
            addListener: function (func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    var listener = {
                        fn : func
                    };
                    TemplateManager.addListener(listener);
                    _listeners[func] = _listeners[func] || [];
                    _listeners[func].push(listener);
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            },

            /**
             * @ignore
             */
            removeListener: function (func) {
                if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                    if (_listeners[func]) {
                        for (var i = 0; i < _listeners[func].length; i++) {
                            if (_listeners[func][i].fn === func) {
                                TemplateManager.removeListener(_listeners[func][i]);
                                _listeners[func].splice(i, 1);
                                break;
                            }
                        }
                    }
                    return template;
                } else {
                    Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                    return;
                }
            }
        };
    return template;
});
define('sap/viz/base/EventDispatch',[], function() {
    var EventDispatch = function() {
        this._edp_dispatch = d3.dispatch.apply(d3, arguments);
        this._copyEventTypes(this._edp_dispatch, false);
    };

    EventDispatch.prototype._copyEventTypes = function(d3Dispatch, copyToLocalDispatch) {
        for (var newType in d3Dispatch) {
            if (d3Dispatch.hasOwnProperty(newType)) {
                this[newType] = d3Dispatch[newType];
                if (copyToLocalDispatch) {
                    this._edp_dispatch[newType] = d3Dispatch[newType];
                }
            }
        }
    };

    EventDispatch.prototype.addEventTypes = function() {
        var tempDispatch = d3.dispatch.apply(d3, arguments);
        this._copyEventTypes(tempDispatch, true);
        return this;
    };

    EventDispatch.prototype.on = function(type, listenFn) {
        return this._edp_dispatch.on(type, listenFn);
    };

    EventDispatch.prototype.destroy = function() {
        var dis = this._edp_dispatch;
        if (dis) {
            for (var i in dis) {
                if (dis.hasOwnProperty(i)) {
                    dis.on(i, null);
                }
            }
        }
        this._edp_dispatch = null;
    };

    return EventDispatch;
});

define('sap/viz/behaviors/plugin/ActionItem',[
  "sap/viz/util/Constants",
  "sap/viz/base/utils/TypeUtils",
  "sap/viz/base/utils/ObjectUtils"
], function(Constants, TypeUtils, ObjectUtils) {
  var DEFAULT_CHART_TYPE_KEY = Constants.BEHAVIOR.DEFAULT_CHART_TYPE_KEY;

  var ActionItem = function(option) {
    this._trigger = null;
    this._handlers = null;
    if (option) {
      if (option.trigger) {
        trigger = option.trigger;
      } else if (option.triggerEvent) {
        trigger = option.triggerEvent;
      } else {
        trigger = {};
      }
      if (option.declaredEvents && (TypeUtils.isString(option.declaredEvents) || TypeUtils.isArray(option.declaredEvents))) {
        trigger.onAfterRegistered = function() {
          this.exposeMoreEvents(option.declaredEvents);
        };
      }
      if (option.destroy && TypeUtils.isFunction(option.destroy)) {
        trigger.onBeforeUnregistered = option.destroy;
      }
      if (!TypeUtils.isEmptyObject(trigger)) {
        this.setTrigger(trigger);
      }

      if (option.handler) {
        this.setHandler(option.handler);
      }
    }
  };

  ActionItem.prototype.clone = function() {
    var clone = new ActionItem();
    clone.setTrigger(this._trigger);
    this._handlers.forEach(function(e) {
      clone.addHandler(e);
    })
    return clone;
  };

  ActionItem.prototype.setTrigger = function(trigger) {
    var current = this._trigger;
    if (!current) {
      current = (this._trigger = {});
    }
    //current.id = trigger.id;
    if (trigger.event) {
      current.event = trigger.event;
      current.target = TypeUtils.isString(trigger.target) ? [trigger.target] : trigger.target;
      if (trigger.matchMode === Constants.BEHAVIOR.TRIGGER.CSS.MATCHMODE.NEGATIVE) {
        current.matchMode = trigger.matchMode;
      } else {
        current.matchMode = Constants.BEHAVIOR.TRIGGER.CSS.MATCHMODE.POSITIVE;
      }
      current.chartType = trigger.chartType;
      if (current.chartType == null || current.chartType === DEFAULT_CHART_TYPE_KEY) {
        current.chartType = DEFAULT_CHART_TYPE_KEY;
      } else {
        current.chartType = TypeUtils.isString(trigger.chartType) ? [trigger.chartType] : trigger.chartType;
      }
    }
    if (trigger.name) {
      current.event = trigger.name;
      current.target = null;
      current.matchMode = Constants.BEHAVIOR.TRIGGER.CSS.MATCHMODE.POSITIVE;
      if (trigger.targets) {
        current.target = TypeUtils.isString(trigger.targets) ? [trigger.targets] : trigger.targets;
      } else if (trigger.excludeTargets) {
        current.target = TypeUtils.isString(trigger.excludeTargets) ? [trigger.excludeTargets] : trigger.excludeTargets;
        current.matchMode = Constants.BEHAVIOR.TRIGGER.CSS.MATCHMODE.NEGATIVE;
      }
      current.chartType = trigger.supportedChartTypes;
      if (current.chartType == null || current.chartType === DEFAULT_CHART_TYPE_KEY) {
        current.chartType = DEFAULT_CHART_TYPE_KEY;
      } else {
        current.chartType = TypeUtils.isString(trigger.supportedChartTypes) ? [trigger.supportedChartTypes] : trigger.supportedChartTypes;
      }
    }
    ["onAfterRegistered", "onBeforeUnregistered"].forEach(function(e) {
      current[e] = TypeUtils.isFunction(trigger[e]) ? trigger[e] : null;
    });
    return this;
  };

  ActionItem.prototype.getTrigger = function() {
    return this._trigger;
  };

  ActionItem.prototype.setHandler = function(handler) {
    if (!TypeUtils.isFunction(handler)) {
      return this;
    }
    this.removeHandler();
    this._handlers = [handler];
    return this;
  };

  ActionItem.prototype.addHandler = function(handler) {
    if (!TypeUtils.isFunction(handler)) {
      return this;
    }
    if (!this._handlers) {
      this._handlers = [];
    }
    this._handlers.push(handler);
    return this;
  };

  ActionItem.prototype.removeHandler = function(handler) {
    if (arguments.length) {
      var index = this._handlers.indexOf(handler);
      if (index > -1) {
        var temp = this._handlers.slice(0, index).concat(this._handlers.slice(index + 1));
        this._handlers = temp;
      }
    } else {
      this._handlers = null;
    }
    return this;
  }

  ActionItem.prototype.getHandler = function() {
    return this._handlers;
  };

  ActionItem.prototype.destroy = function() {
    this._trigger = null;
    this._handlers = null;
  };

  return ActionItem;

});
define('sap/viz/behaviors/plugin/Behavior',[
  "sap/viz/base/utils/TypeUtils",
  "sap/viz/base/EventDispatch",
  "./ActionItem"
], function(TypeUtils, EventDispatch, ActionItem) {

  var Behavior = function() {
    this._dispatch = new EventDispatch();
    this._dispatchTypes = [];
    this._actionItems = {};
  };

  /**
   *@this {Behavior}
   *@returns {Object} a cloned behavior object.
   */
  Behavior.prototype.clone = function() {
    var clone = new Behavior();
    for (var key in this._actionItems) {
      if (this._actionItems.hasOwnProperty(key)) {
        clone.addAction(key, this._actionItems[key].clone());
      }
    }
    return clone;
  };

  /**
   *@param {String} name The event name to be exposed.
   *@this {Behavior}
   *@returns {Object} the behavior object itself.
   *
   *@override
   *@param {Array} name The array of event name to be exposed.
   *@this {Behavior}
   *@returns {Object} the behavior object itself.
   */
  Behavior.prototype.exposeMoreEvents = function(name) {
    if (TypeUtils.isArray(arguments[0])) {
      this._dispatch.addEventTypes.apply(this._dispatch, arguments[0]);
      this._dispatchTypes = arguments[0].concat(this._dispatchTypes);
    } else {
      this._dispatch.addEventTypes.apply(this._dispatch, arguments);
      this._dispatchTypes = [].slice.call(arguments).concat(this._dispatchTypes);
    }
    return this;
  };

  Behavior.prototype.getDispatch = function() {
    return this._dispatch;
  };

  /**
   *@param {String} name The event name to be dispatched.
   *@param {Object} data The event data to be dispatched.
   *@this {Behavior}
   */
  Behavior.prototype.dispatchEvent = function(name, data) {
    if (this._dispatchTypes.indexOf(name) < 0) {
      return;
    }
    var dispatch = this._dispatch;
    setTimeout(function() {
      dispatch[name](data);
    }, 1);
  };

  Behavior.prototype.addAction = function(id, action) {
    if (action instanceof ActionItem) {
      var current = this._actionItems[id];
      if (current && current.getTrigger().onBeforeUnregistered) {
        current.getTrigger().onBeforeUnregistered.call(this);
      }
      this._actionItems[id] = action;
      if (action.getTrigger().onAfterRegistered) {
        action.getTrigger().onAfterRegistered.call(this);
      }
    }
    return this;
  };

  Behavior.prototype.getActionById = function(id) {
    if (this._actionItems[id]) {
      return this._actionItems[id];
    }
    return null;
  };

  Behavior.prototype.removeActionById = function(id) {
    var current = this._actionItems[id];
    if (current && current.getTrigger().onBeforeUnregistered) {
      current.getTrigger().onBeforeUnregistered.call(this);
    }
    delete this._actionItems[id];
    return this;
  }

  Behavior.prototype.getAllActions = function (id){
    return this._actionItems;
  };

  /**
   *@param {String} key the trigger's id to be triggered.
   *@param {Object} event the event data.
   *@param {Object} service the interaction service object.
   *@this {Behavior}
   *@returns {Object} the behavior object itself.
   */
  Behavior.prototype.trigger = function(key, event, service) {
    var current = this._actionItems[key];
    if (!current) {
      return;
    }
    var ret;
    current.getHandler().forEach(function(handler) {
      ret = handler.call(this, event, service);
    }, this);
    return ret;
  };

  Behavior.prototype.destroy = function() {
    if (this._dispatch) {
      this._dispatch.destroy();
      this._dispatch = null;
    }
    for (var key in this._actionItems) {
      if (this._actionItems.hasOwnProperty(key)) {
        this.removeActionById(key);
      }
    }
    this._actionItems = null;
  };

  return Behavior;
});
define('sap/viz/api/interaction/Behavior',[
    "sap/viz/behaviors/plugin/Behavior",
    "sap/viz/behaviors/plugin/ActionItem",
    'exports'
], function(SDKBehavior, ActionItem) {
    function Behavior(options) {
        this.id = options && options.id ? options.id : "";
        this._sdkBehavior = new SDKBehavior();
    };
    
    var pt = Behavior.prototype;
  /**
   * sap.viz.api.interaction.Behavior
   * @ignore
   * @namespace sap.viz.api.interaction.Behavior
   */  


  /**
   * Add a new ActionItem according to input action option to behavior.   
   * 
   * @ignore
   * @function add
   * @memberof sap.viz.api.interaction.Behavior
   * @param {Object} actionOption Action option data, it should follow action option rule defined in spec.
   * <pre>
   * {
   *   "id": String, 
   *   "declaredEvents": Array, //event names for any chart level events, which can be listened by external chart consumer  
   *   "triggerEvent": Object, //The action trigger event
   *   "destroy": Function, //Destroy for lifecycle management
   *   "handler": Function, // Handler function   
   * }
   * @this {Behavior}   
   */
    pt.add = function(actionOption) {
        var ai = new ActionItem(actionOption);
        this._sdkBehavior.addAction(actionOption.id, ai);
    };
    
  /**
   * Remove an ActionItem according to input action id.
   *
   * @ignore
   * @function remove
   * @memberof sap.viz.api.interaction.Behavior
   * @param {String} actionId the action's id.   
   * @this {Behavior}   
   */
    pt.remove = function(actionId) {
        this._sdkBehavior.removeActionById(actionId);
    }

    pt.getBehavior = function() {
        return this._sdkBehavior;
    }
    
    return Behavior;
});
define('sap/viz/behaviors/plugin/BehaviorManager',[
  "./Behavior"
], function(Behavior) {

  var BehaviorManager = {
    _map: {},
    get: function(id) {
      if (id && this._map[id]) {
        this._map[id].updated = false;
        return this._map[id].bhr;
      } else {
        return new Behavior();
      }
    },
    register: function(id, bhr) {
      if (bhr instanceof Behavior) {
        if (!this._map[id]){
          this._map[id] = {};
        } else {
          if (this._map[id].bhr !== bhr){
            //if not the same instance, destroy last one.
            this._map[id].bhr.destroy();
          }
        }
        this._map[id].updated = true;
        this._map[id].bhr = bhr;
      }
      return this;
    },
    unregister:function(id){
      if (this._map[id]){
        this._map[id].bhr.destroy();
        delete this._map[id];
      }
      return this;
    },
    hasUpdate:function(id){
      if (this._map[id]){
        return this._map[id].updated;
      } else {
        return false;
      }
    },
    has:function(id){
      if (this._map[id]){
        return true;
      } else {
        return false;
      }
    }
  };

  return BehaviorManager;

});
define('sap/viz/api/interaction',[
    "sap/viz/api/interaction/Behavior",
    'sap/viz/behaviors/plugin/BehaviorManager',
    'exports'
], function(Behavior, behaviorManager) {
    return {
        /**
         * sap.viz.api.interaction
         * 
         * @ignore
         * @namespace sap.viz.api.interaction
         */
        /**
         * Add a behavior
         * 
         * @ignore
         * @function add
         * @memberof sap.viz.api.interaction
         * @param {sap.viz.api.interaction.Behavior} behavior
         */
        "add": function(behavior) {
            if (behavior && behavior.id) {
                behaviorManager.register(behavior.id, behavior.getBehavior());
            }
        },
        /**
         * Remove a behavior with the specified id
         * 
         * @ignore
         * @function remove
         * @memberof sap.viz.api.interaction
         * @param {String} behaviorId
         */
        "remove": function(behaviorId) {
            behaviorManager.unregister(behaviorId);
        },
        /**
         * Query behavior by its id
         * 
         * @ignore
         * @function getBehaviorById
         * @memberof sap.viz.api.interaction
         * @param {String} behaviorId
         * @returns {sap.viz.api.interaction.Behavior} behavior or null
         */
        "getBehaviorById": function(behaviorId) {
            if(behaviorId && behaviorManager.has(behaviorId)){
                var Bhvr = new Behavior({id:behaviorId});
                Bhvr._sdkBehavior = behaviorManager.get(behaviorId);
                return Bhvr;
            }
            return null;
        }
    };
});
define('sap/viz/modules/Constants',['sap/viz/modules/GlobalConstants'],
  function Setup(GlobalConstants) {
    var moduleConstants = {
      Type: {
        Chart: 'CHART',
        Container: 'CONTAINER',
        Supplementary: 'SUPPLEMENTARY',
        Behavior: 'BEHAVIOR',
        Controller: 'CONTROLLER',

        Scientific: {
          Layout: 'Represents a layout algorithm'
        },

        Presentation: {
          Tooltip: 'Represents a tooltip'
        },

        ThirdParty: 'THIRDPARTY'
      },
      RenderTo: {
        SVG: 'SVG',
        DIV: 'DIV',
        NONE: 'NONE'
      },
      CSS: {
        CLASS: {
          AXIS: {
            CONTAINER:"v-axis",
            TITLE: "v-title",
            SCROLLBAR: "v-scrollbar",
            TITLE_BACKWORD: "viz-axis-title",
            TITLE_HIDDEN: "v-hidden-title",
            LINE_GROUP: "v-line-group",
            TICK_GROUP: "v-tick-group",
            LABEL_GROUP: "v-label-group",
            LINE: "v-line",
            TICK: "v-tick",
            LONGTICK:"v-longtick",
            LABEL: "v-label",
            LABEL_SELECTION: "v-axis-item",
            LABEL_BACKWORD: "viz-axis-label",
            MORPHABLE_LABEL: "v-morphable-label",
            PERIMETER: "v-valueaxisline",
            FIXED_PERIMETER: "v-fixed-valueaxisline",
            BACKGROUND_RECT: "viz-axis-label-rect",
            INDICATOR_LINE:"v-indicator-line",
            INDICATOR_RECT:"v-indicator-rect"
          },
          DATAPOINT: "v-datapoint",
          DATAPOINTDEFAULT: "v-datapoint-default",
          DATAPOINTHOVER: "v-datapoint-hover",
          DATAPOINTSELECTED: "v-datapoint-selected",
          STACK: "v-stack",
          MORPHABLEDATAPOINT: "v-morphable-datapoint",
          MORPHABLELABEL: "v-morphable-label",
          MORPHABLEBACKGROUND: "v-morphable-background",
          MORPHABLELINE: "v-morphable-line",
          MORPHABLEAREABG: "v-morphable-areabg",
          MODULEPREFIX: "v-m-",
          GRIDLINE_GROUP: "v-gridline-group",
          GRIDLINE: "v-gridline",
          GRIDLINE_INCISED: "v-incised-gridline",
          HOVER_SHADOW:"v-hovershadow",
          FOCUS_SHADOW:"v-hovershadow-mousedown"
        }
      },
      LAYOUT_ADJUST_POLICY: {
        APPROXIMATE: 'APPROXIMATE',
        RELAYOUT: 'RELAYOUT'
      },
      Event: {
        SelectData: {
          name: 'selectData',
          desc: 'Event fires when certain data point(s) is(are) selected, data context of selected item(s) would be passed in accordance with the following format.' + '<code>{name: "selectData",' + 'data:[{\n//selected element\'s detail\n' + 'target:"Dom Element",//an object pointed to corresponding dom element\n' + 'data:[{val: "...",//value of this element\n' + 'ctx:{type:"Dimension"||"Measure"||"MND",\n' + '//for Dimension\n' + 'path:{aa:"...",di:"...",dii:"..."},\n' + '//for Measure\n' + 'path:{mg:"...",mi:"...",dii_a1:"...",dii_a2:"..."},\n' + '//for MND\n' + 'path:{mg:"...",mi:"..."}\n' + '//path: analysis path\n' + '//aa: analysis axis index // 0 for analysis axis 1,  1 for analysis 2\n' + '//di: dimension index //zero based\n' + '//dii: dimension item index //zero based\n' + '//mg: measure group index // 0 for measure group 1,1 for measure group 2\n' + '//mi: measure index // measure index in measure group zero based\n' + '//dii_a1: each dii of di in analysis axis 1 index\n' + '//dii_a2: each dii of di in analysis axis 2 index\n' + '}},{\n//for bubble, tagcloud and scatter, there will be more than one values in one selected element.\n' + 'var:"...",ctx:"..."}]},{\n//if under multi selection, there will be more than one selected elements\n' + 'target:"...",data:["..."]}]}'
        },
        DeSelectData: {
          name: 'deselectData',
          desc: 'Event fires when certain data point(s) is(are) deselected, data context of deselected item(s) would be passed in accordance with the following format.' + '<code>{name: "deselectData",' + 'data:["---the same as selectedData---"]}'
        },
        TooltipShow: {
          name: 'showTooltip',
          desc: 'This event is deprecated, please use showDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover onto the specific part of chart, data context of tooltip would be passed in accordance with the following format.' + '<code>{name:"showTooltip",data:{body:[{\n//All measures\n' + 'name:"...",val:[{//measure value is an array containing only one item\n' + 'value:"..."}]},"..."],footer:[{label:"...",value:"..."},"..."],' + 'plotArea:{\n//this object specifies the plot area of the chart\n' + 'height:"...",width:"...",x:"...",y:"..."},point:{\n//this object specifies a point which affects the position of tooltip\n' + 'x:"...",y:"..."},selectedValues:...//this number specify how many values are selected}}'
        },
        TooltipHide: {
          name: 'hideTooltip',
          desc: 'This event is deprecated, please use hideDetail decoration (refer to properties: interaction.decorations) instead. Event fires when the mouse hover out of the specific part of chart, no data is passed.'
        },
        Initialized: {
          name: 'initialized',
          desc: 'Event fires when the loading ends. To use the event listener when creating charts, you must use an event that is passed by the events option. For more information on events options, see the usrOptions section of the <a href="sap.viz.core.html#createViz" target="_blank">createViz</a> function in the API document.'
        },
        highlightedByLegend: {
          desc: "Event fires when legend item is clicked, which contains its data context."
        },
        contextualData: {
          name: 'contextualData',
          desc: 'Event fires when right mouse up on data point or chart elements, data context of item(s) would be passed in accordance with the following format.' + '<code>{name: "deselectData",' + 'data:["---the same as selectedData---"]}'
        }
      },

      mappings: {
        e2p: function(em) {
          return em * 12;
        }
      },
      COLOR: GlobalConstants.COLOR,
      DocExample: {
        SnippetUrl: '/vizdocs_snippet/#',
        TryThisValue: 'Try this.'
      },
      InternalDataModelID: {
        Color: 'Color',
        Shape: 'Shape',
        Series: 'Series',
        Category: 'Category',
        Measure0: 'MeasureName0',
        Measure1: 'MeasureName1',
        Measure2: 'MeasureName2',
        Measure3: 'MeasureName3',
        X: 'X',
        Y: 'Y',
        Width: 'Width',
        Height: 'Height',
        MGIndex: 'MGINDEX',
        DataId: 'contextId'
      },
      SELECTION_MODE: {
        INCLUSIVE: 'INCLUSIVE',
        EXCLUSIVE: 'EXCLUSIVE',
        NONE: 'NONE',
        SINGLE: 'SINGLE',
        MULTIPLE: 'MULTIPLE'
      },
      /* moved to SDK: sap.viz.util.Constants
      TRIGGER: {
        KEY: {
          API: {
            GET_SELECTION: 'Trigger_key_api_get_selection',
            SET_SELECTION: 'Trigger_key_api_set_selection',
          },
          CLICK_ON_DATAPOINT:'click_on_datapoint',
          CLICK_ON_NON_DATAPOINT:'click_on_non_datapoint',
          HOVER_ON_DATAPOINT:'hover_on_datapoint',
          HOVER_ON_NON_DATAPOINT:'hover_on_non_datapoint',
          HOVER_ON_LEGEND:'hover_on_legend',
          HOVER_ON_NON_LEGEND:'hover_on_non_legend',
          CLICK_ON_LEGEND:'click_on_legend',
          MOUSEUP_ON_LEGEND:'mouseup_on_legend',
          HOVER_ON_AXIS_LABEL:'hover_on_axis_label',
          HOVER_ON_NON_AXIS_LABEL:'hover_on_non_axis_label',
          CLICK_ON_AXIS_LABEL:'click_on_axis_label',
          MOUSEUP_ON_AXIS_LABEL:'mouseup_on_axis_label',
          LASSO_START_ON_EVENTLAYER:'lasso_start_on_eventLayer',
          LASSO_MOVE_ON_EVENTLAYER:'lasso_move_on_eventLayer',
          LASSO_END_ON_EVENTLAYER:'lasso_end_on_eventLayer',
          PAN_START_ON_EVENTLAYER:'pan_start_on_eventLayer',
          PINCH_START_ON_EVENTLAYER:'pinch_start_on_eventLayer',
          PINCH_MOVE_ON_EVENTLAYER:'pinch_move_on_eventLayer',
          PINCH_END_ON_EVENTLAYER:'pinch_end_on_eventLayer'
        },
        CSS: {
          MATCHMODE: {
            NEGATIVE: 'negative',
            POSITIVE: 'positive'
          }
        }
      },
      */
      DIRECTION: {
        VERTICAL: "vertical",
        HORIZONTAL: "horizontal"
      },
      POSITION: {
        TOP: "top",
        BOTTOM: "bottom",
        LEFT: "left",
        RIGHT: "right"
      },
      SPACING_TYPE: {
        STEP: "step",
        RANGE: "range"
      },
      GRIDLINE_TYPE: {
        SOLID: "line",
        DASHED: "dotted",
        INCISED: "incised"
      }
      /* moved to SDK: sap.viz.util.Constants
      UNITFORMATTYPE : {
        METRICUNITS : 'MetricUnits',
        FINANCIALUNITS : 'FinancialUnits'
      },
      DEFAULT_BEHAVIOR_ID:"default",
      DEFAULT_CHART_TYPE_KEY:"*"
      */
    };

    return moduleConstants;
  });

define('sap/viz/util/fn/modulebuilder',['sap/viz/util/ignite', 'sap/viz/modules/manifests/Module', 'sap/viz/util/Constants', 'sap/viz/base/utils/Objects'], 
function Setup(ignite, category, Constants, Objects) {
  var WORDING = {
    'CLASS_PREFIX': Constants.CSS.CLASS.MODULEPREFIX
  };
  var retfn = function(paras, selections, context) {
    var dataset = paras.dataset, attrs = paras.props, conf = paras.conf, children = {};
    var modules = conf.modules;
    for(var key in modules) {
      if(modules.hasOwnProperty(key)){
        var value = modules[key];
        if (value === null) {
          continue;
        }
        var target = ignite(value.id, context, WORDING.CLASS_PREFIX + key);
        var data = value.data ? dataset.createDataAdapterForModule(value.data) : dataset;
        var props = {};
        var type = category.get(value.id).type;
  
        if (target.data) {
          target.data(data);
        }
        target.alias = key;
  
        // containers
        if (type === Constants.Type.Container) {
          if (value.configure) {
            props[value.configure.propertyCategory] = value.configure.properties;
          }
          target.parent(selections[key]).config(value).properties(Objects.extend(true, {}, props, attrs));
        } else {// non-containers
          target.properties(Objects.extend(true, {}, value.configure ? value.configure.properties : {}, value.configure ? attrs[value.configure.propertyCategory] : {}));
          if (target.parent) {
            target.parent(selections[key]);
          }
        }
        children[key] = target;
      }
    }
    return children;
  };
  return retfn;
}); 
define('sap/viz/modules/BaseComposition',['sap/viz/base/utils/oo','sap/viz/modules/Base','sap/viz/modules/manifests/Module', 'sap/viz/modules/dispatch',
'sap/viz/data/utils/DatasetUtils', 'sap/viz/manifest','sap/viz/util/fn/dombuilder','sap/viz/util/fn/modulebuilder','sap/viz/base/utils/Objects', 'sap/viz/util/Constants', 'sap/viz/base/utils/TypeUtils'],
function Setup (oo, Base, category, evts, DatasetUtils, Manifest, dombuilder, modulebuilder, Objects, Constants, TypeUtils) {
    
    
    var bindInitializedEvent = function() {
      var that = this;
      for(var key in this._modules){
        if(this._modules.hasOwnProperty(key)){
          var target = this._modules[key];
          if (target.dispatch) {
            if (target.dispatch()['initialized']){
              target.dispatch().on('initialized.BaseComposition', function() {
                return function() {
                  initialized.call(that);
                };
              }());
              that._count++;
            }
            if (target.dispatch()['relayout']){
              target.dispatch().on('relayout.BaseComposition', function (){
                that._charger.func.call(that._charger.scope);
              });
            }
          }   
        }
      }
    };


    var initIfReady = function() {
      //don't check && !$.isEmptyObject(this._properties) as we may have empty properties
      //so we are always using empty properties to initialize, then update properties for each sub module in 'properties' API
      if(TypeUtils.isEmptyObject(this._modules) && !TypeUtils.isEmptyObject(this._config) && this._data !== null) {
         this.init({ 'dataset' : this._data, 'conf' : this._config, 'props' : this._properties });
      }
    };    
    var unBindInitializedEvent = function() {
      var that = this;
      for(var key in this._modules){
        if(this._modules.hasOwnProperty(key)){
          var target = this._modules[key];
          if (target.dispatch) {
            if (target.dispatch()['initialized']){
              target.dispatch().on('initialized.BaseComposition', null);
            }
            if (target.dispatch()['relayout']){
              target.dispatch().on('relayout.BaseComposition', null);
            }
          }
        }
      }
    };

    var initialized = function () {
      if ( ++this._inits === this._count ) {
        this._inits = 0;
        this._dispatch.initialized();
        this._dispatch.ready();
      }
    };   

    var BaseComposition = function ( manifest, context ) {     

      BaseComposition.superclass.constructor.apply(this, arguments);
      this._context = context;
      this._config = {};
      this._modules = {};
      this._properties = {};
      this._charger = { func : null, scope : null };
      this._count = 0;
      this._inits = 0;
      this._dispatch = evts('initialized', 'ready');
      //for containers, we have two kinds of properties, one is for its own which
      //should not passed down to sub modules; the other is specified by users, need
      //pass down to sub modules
      this._ownProperties = manifest.props(null);
      this._chartType = '';
      this._parentNode = null;
      // checklist items in order upon update against this module
      this._selections = {};//hold parent selection for each render-able sub module
      this._data = null;//hold the data for this container
    };


    BaseComposition.prototype.init = function( args ) {

      this._selections = this.dombuilder(this._parentNode, this._config.modules);
      this._modules = this.modulebuilder(args, this._selections, this._context);      
      bindInitializedEvent.call(this);     
    };
    
    oo.extend(BaseComposition, Base);

    BaseComposition.prototype.config = function (xs) {
      if ( !arguments.length ) { return this._config; }
      this._config = xs;
      initIfReady.call(this);

      return this;
    };

    BaseComposition.prototype.data = function (xs) {
      if ( !arguments.length ) { return this._data; }
      this._data = xs;
      initIfReady.call(this);
      return this;
    };
    // Means of wiring up module dependencies
    BaseComposition.prototype.recharge = function (x) {
      if ( !arguments.length ) { return this._charger; }
      this._charger = x;
      return this;
    };

    BaseComposition.prototype.destroy = function() {
      unBindInitializedEvent.call(this);
      this._charger = null;
      this._modules = null;
      this._parentNode = null;
      this._properties = {};
      this._data = null;
      this._context.destroy();
      this._context = null;
    };  

    BaseComposition.prototype.dispatch = function (x) {
      if ( !arguments.length ) { return this._dispatch; }
      this._dispatch = x;
      return this;
    };
     
    BaseComposition.prototype.chartType = function (x) {
      if ( !arguments.length ) {
        return this._chartType;
      }
      this._chartType = x;
      return this;
    };

    BaseComposition.prototype.modules = function (xs) {
      if ( !arguments.length ) {
        initIfReady.call(this);
        return this._modules;
      }
      this._modules = xs;
      return this;
    };

    BaseComposition.prototype.parent = function (x) {
      if ( !arguments.length ) { return this._parentNode; }
      this._parentNode = x;
      return this;
    }; 
     
    /*
     * properties for a module can come from 3 possible places, here we will return merged properties order by priority
     * user defined > module reference > module default
     * here the passedInProperties already contain properties from user defined and module reference
     * it will be called each time properties API is called
     * @Protected 
     */
    BaseComposition.prototype.getMergedProperties = function(passedInProperties){
      
      var currentProperties = this._ownProperties;//it's module default at the first time
      var config = this._config;
      
      var propertyCategory = config.configure ? config.configure.propertyCategory : null; 
      var passedIn = propertyCategory ? passedInProperties[propertyCategory] : null;
      
      var merged = Objects.extend(true, currentProperties, passedIn);
      
      return merged;  
    }; 

    BaseComposition.prototype.properties = function (xs) {
      if ( !arguments.length ) { return this._properties; }
           
      var modules = this._modules;
      var config = this._config;
      
      Objects.extend(true, this._properties, xs);
      //merge to own properties
      this._ownProperties = this.getMergedProperties(xs);
      //update to _properties
      var propertyCategory = config.configure ? config.configure.propertyCategory : null;
      Objects.extend(true, this._properties[propertyCategory], this._ownProperties);
      
 
      
      for ( var key in modules ) {
        if ( modules.hasOwnProperty(key) ) {
          if ( category.get(config.modules[key].id).type === Constants.Type.Container ) {//container indicator
            modules[key].properties(this._properties);
          } else if (config.modules[key].configure) {
            //if it's not container, see if it has configured properties
            modules[key].properties(this._properties[config.modules[key].configure.propertyCategory]);
          }
        }
      }
      
      return this;
    };
    //////////////Protected Methods///////////////////////
    /*
     * build dom nodes for each children and save it to local var 
     * by default only SVG nodes supported
     * @Protected
     */
    BaseComposition.prototype.dombuilder = function( parentNode, subModulesConfig ) {
      return dombuilder(parentNode, subModulesConfig);
    };
    
    /*
     * initialize sub modules and save it to local var
     * @Protected  
     */
    BaseComposition.prototype.modulebuilder = function( args, selections, context ) {
      return modulebuilder(args, selections, context);
    };
     

    /**
     * return Boolean true|false
     * 
     * to judge whether need to convert to MultiAxesDataAdapter, if yes return true, otherwise return false
     */
    BaseComposition.prototype._convert2MultiAxesDataAdapter = function(){
        if (Manifest.viz.getManifest(this._chartType)[0]) {
            return Manifest.viz.getManifest(this._chartType)[0].legacyDataAdapter === true;
        }
        return false;
    };
    /**
     * return Boolean true|false
     * 
     * if dataset is Flat table dataset, return true; this._data is an object with dataset and feeding if we feed the chart with flat dataset.
     */
    BaseComposition.prototype._isFlatTable = function(){
        return DatasetUtils.isFlatTable(this._data);
    };    
    
    return BaseComposition;
});

define('sap/viz/elements/common/Base',['sap/viz/base/EventDispatch'], function(EventDispatch) {
    var Base = function() {
        this._eDispatch = new EventDispatch();
    };

    //a temp flag used to distinguish new and old module style in manifest
    Base.prototype.__new_style__ = true;

    Base.prototype.getDispatch = function() {
        return this._eDispatch;
    };
    
    //backward compatibility, remove it when we switch 
    //everything to this base
    Base.prototype.dispatch = function() {
        return this._eDispatch;
    };

    Base.prototype._exposeMoreEvents = function() {
        this._eDispatch.addEventTypes.apply(this._eDispatch, arguments);
        return this;
    };
    
    Base.prototype.destroy = function() {
        if(this._eDispatch && this._eDispatch.destroy){
            this._eDispatch.destroy();
            this._eDispatch = null;
        }
        
    };

    return Base;

});

define('sap/viz/elements/common/BaseGraphic',['sap/viz/base/utils/oo', 'sap/viz/elements/common/Base', 'sap/viz/base/utils/ObjectUtils',
'sap/viz/base/utils/TypeUtils','sap/viz/base/utils/Objects'],
function Setup(oo, Base, ObjectUtils, TypeUtils, Objects) {
    var BaseGraphic = function(manifest, ctx) {
        BaseGraphic.superclass.constructor.apply(this, arguments);
        this._width = 0;
        this._height = 0;
        this._data = null;
        this._props = manifest.props(null);
        this._randomSuffix = ObjectUtils.guid();
        this._parent = null;
        this._manifest = manifest;
        this._ctx = ctx;
        this._effectManager = this._ctx.effectManager;
        this._styleManager = this._ctx.styleManager;

        this._exposeMoreEvents('initialized');
    };

    oo.extend(BaseGraphic, Base);

    BaseGraphic.prototype.render = function(selection) {
        this._parent = selection;
        if (TypeUtils.isFunction(this._props.preRendering)) {
            this._props.preRendering.call(this, selection, this._data);
        }

        this._doRender(selection);
        if (TypeUtils.isFunction(this._props.postRendering)) {
            this._props.postRendering.call(this, selection, this._data);
        }
        return this;
    };

    // Protected
    BaseGraphic.prototype._doRender = function(selection) {
        // do nothing in base class
    };


    //getWidth() and setWidth() will replace width() method later when Feat branch merge back to dev
    BaseGraphic.prototype.getWidth = function() {
        return this._width;
    };

    BaseGraphic.prototype.setWidth = function(value) {
        this._width = value;
        return this;
    };

	
    BaseGraphic.prototype.width = function(value) {
        if (!arguments.length){
            return this.getWidth();
        }
        return this.setWidth(value);
    };


    //getHeight() and setHeight() will replace height() method later when Feat branch merge back to dev
    BaseGraphic.prototype.getHeight = function() {
        return this._height;
    };

    BaseGraphic.prototype.setHeight = function(value) {
    	this._height = value;
        return this;
    };

	
    BaseGraphic.prototype.height = function(value) {
        if (!arguments.length){
            return this.getHeight();
        }
        return this.setHeight(value);
    };
	

    //getSize() and setSize() will replace size() method later when Feat branch merge back to dev
    BaseGraphic.prototype.getSize = function() {
        return {
            width : this._width,
            height : this._height
        };
    };

    BaseGraphic.prototype.setSize = function(value) {
        if (value) {
          this.setWidth(value.width).setHeight(value.height);
        }
        return this;
    };

    BaseGraphic.prototype.size = function(value) {
        if (!arguments.length){
            return this.getSize();
        }
        return this.setSize(value);
    };
	

    //getData() and setData() will replace data() method later when Feat branch merge back to dev
    BaseGraphic.prototype.getData = function() {
        return this._data;
    };

    BaseGraphic.prototype.setData = function(value) {
        this._data = value;
    };

    BaseGraphic.prototype.data = function(value) {
        if (!arguments.length){
            return this.getData();
        }
        return this.setData(value);
    };
	

    //getProperties() and setProperties() will replace properties() method later when Feat branch merge back to dev
    BaseGraphic.prototype.getProperties = function() {
        return this._props;
    };

    BaseGraphic.prototype.setProperties = function(value) {
        Objects.extend(true, this._props, value);
        return this;
    };

    BaseGraphic.prototype.properties = function(value) {
        if (!arguments.length){
            return this.getProperties();
        }
        return this.setProperties(value);
    };
	
    BaseGraphic.prototype.parent = function() {
        return this._parent;
    };

    BaseGraphic.prototype.destroy = function() {
        BaseGraphic.superclass.destroy.apply(this, arguments);
        this._parent = null;
        this._manifest = null;
        if (this._ctx) {
            this._ctx.destroy();
            this._ctx = null;
        }
        if (this._effectManager) {
            this._effectManager.destroy();
            this._effectManager = null;
        }
        if (this._styleManager) {
            this._styleManager.destroy();
            this._styleManager = null;
        }
      };
      
      BaseGraphic.prototype.getPreferredSize = function() {
        return {
            'minWidth' : 1,
            'minHeight' : 1,
        };
      };      

      return BaseGraphic;
    });

define('sap/viz/modules/util/BoundUtil',[],
function Setup() 
{
  var classname = 'v-bound';
  var BoundUtil = {
      drawBound : function(selection, width, height, css, isEventRect){
          var rect ;
          if(width < 0 || height < 0){
            return;
          }
          if(selection.select('.' + classname).node() == null){
              rect = selection.insert('rect', ':first-child').attr('class', classname).attr('width', width).attr('height', height);
              if (isEventRect){
                rect.attr("fill","transparent");
              } else {
                rect.attr('visibility', 'hidden');
              }
          }else{
              rect = selection.select('.' + classname).attr('width', width).attr('height', height);
          }
          
          if (css) {
            for( var i in css){
                rect.attr(i, css[i]);
            }
          }
      }

  };
  
  return BoundUtil;
});
define('sap/viz/modules/background',['sap/viz/base/utils/oo', 'sap/viz/elements/common/BaseGraphic', 'sap/viz/modules/Constants',
'sap/viz/base/utils/ObjectUtils', 'sap/viz/modules/dispatch', 'sap/viz/base/utils/Objects',
'sap/viz/modules/util/BoundUtil'], 
function Setup(oo, BaseGraphic, ModuleConstants, ObjectUtils, dispatch, Objects, BoundUtil) {
    var CSSCLASS_BORDER = 'v-background-border', CSSCLASS_BORDER_2 = 'viz-plot-background-border';
    var CSSCLASS_BODY = 'v-background-body', CSSCLASS_BODY_2 = 'viz-plot-background';
    var CSSCLASS_MORPHABLEBACKGROUND = ModuleConstants.CSS.CLASS.MORPHABLEBACKGROUND;

    function getCSSStyle() {
        var properties = this._props;
        if (!properties.style) {
            properties.style = {};
        }
        properties.style.body = {
            'fill' : properties.color
        };
        properties.style.border = {
            'stroke' : properties.border.stroke,
            'stroke-width' : properties.border.strokeWidth
        };
    }
    
    var Background = function(manifest, ctx) {
        Background.superclass.constructor.apply(this, arguments);
        this._eDispatch = new dispatch('initialized');
    };

    oo.extend(Background, BaseGraphic);

    Background.prototype._doRender = function(selection) {
        var properties = this._props;

        if (properties.visible) {
            getCSSStyle.call(this);
            var d3rect = selection.select('#' + 'background-rect-' + this._randomSuffix);
            if (d3rect.empty()) {
                d3rect = selection.append('svg:rect')
                         .attr('class', CSSCLASS_BODY + ' ' + CSSCLASS_BODY_2 + ' ' + CSSCLASS_MORPHABLEBACKGROUND)
                         .attr('id', 'background-rect-' + this._randomSuffix);
            }
            var fillID = this._effectManager.register({
                graphType : 'background',
                fillColor : properties.style.body.fill,
                drawingEffect : properties.drawingEffect,
                direction : properties.direction
            });
            d3rect.attr('x', 0).attr('y', 0)
                               .attr('width', this._width)
                               .attr('height', this._height)
                               .attr('style', "fill:" + fillID);

            var borderData = [];
            if (properties.border.left.visible) {
                borderData.push({
                    x1 : 0,
                    y1 : 0,
                    x2 : 0,
                    y2 : this._height
                });
            }
            if (properties.border.right.visible) {
                borderData.push({
                    x1 : this._width,
                    y1 : 0,
                    x2 : this._width,
                    y2 : this._height
                });
            }
            if (properties.border.top.visible) {
                borderData.push({
                    x1 : 0,
                    y1 : 0,
                    x2 : this._width,
                    y2 : 0
                });
            }
            if (properties.border.bottom.visible) {
                borderData.push({
                    x1 : 0,
                    y1 : this._height,
                    x2 : this._width,
                    y2 : this._height
                });
            }

            var d3border = selection.selectAll("." + CSSCLASS_BORDER).data(borderData);
            d3border.enter().append('svg:line').attr('class', CSSCLASS_BORDER + ' ' + CSSCLASS_BORDER_2);
            d3border.exit().remove();
            d3border.attr('x1', function(d) {
                return d.x1;
            }).attr('y1', function(d) {
                return d.y1;
            }).attr('x2', function(d) {
                return d.x2;
            }).attr('y2', function(d) {
                return d.y2;
            });
            // now we use attribute in dom element to let customer css file work.
            d3border.each(function(d) {
                d3.select(this).attr('shape-rendering', 'crispEdges');
                for (var key in properties.style.border) {
                    if (properties.style.border.hasOwnProperty(key)) {
                        d3.select(this).attr(key, properties.style.border[key]);
                    }
                }
            });
        } else {
            var temp = selection.node();
            while (temp.hasChildNodes()) {
                temp.removeChild(temp.firstChild);
            }
        }

        //currently, we do not have animation. If it has, should fire initialized event after animation complete.
        this._eDispatch.initialized();

        return this;
    };

    Background.prototype.destroy = function(_) {
        Background.superclass.destroy.apply(this, arguments);
        this._eDispatch = null;
    };
    
    return Background;
}); 
define('sap/viz/modules/util/BackgroundUtil',['sap/viz/modules/manifests/Module','sap/viz/util/ignite','sap/viz/modules/background'],
function Setup(ModuleManifest, ignite) 
{
  var CLASSNAME = 'v-backgroundutil';
  var BackgroundUtil = {
      drawBackground : function(selection, backgroundModule, props ){
        var d3background = d3.selectAll(selection.node().childNodes).filter('.' + CLASSNAME);
        if (d3background.empty() ) {
            d3background = selection.insert('svg:g', ":first-child").attr('class', CLASSNAME);
        }
        
        backgroundModule.setWidth(props.width).setHeight(props.height).setProperties(props.properties);
        d3background.call(backgroundModule);

        return backgroundModule;
      },
      
      initModule : function(parentCtx) {
        return ignite('sap.viz.modules.background', parentCtx, CLASSNAME);
      }
  };
  
  return BackgroundUtil;
});
define('sap/viz/util/functional',[],
function Setup () {
  
  var _ = {
    // Represents a tail recursion combinator. 
    tailrec : function ( cond, then, before ) {
      return function () {
        var args = arguments;
        
        // for saving an intermediate storage of linear structure
        /*jshint noempty:false*/
        for (; !cond.apply(this, args); args = before.apply(this, args)){}
        
        // a resulting action taken after recursion completes
        return then.apply(this, args);
      };
    }
  };
  
  return _;
  
});
define('sap/viz/modules/layout/dock',['jquery', 'sap/viz/modules/Constants','sap/viz/util/functional','sap/viz/util/Objects',"sap/viz/base/utils/log/Analyzer"],
function Setup ( $, registry, lambda, Objects,Analyzer ) {

  function dock_sort (a, b) { return a - b; }
  function dock_edge (x) { return x.position; }
  function dock_value (x) { return x.value; }
  function dock_filter (x) { return; }
  function dock_size (x) { return x.size(); }

  var _ = function () {
    var sort = dock_sort,
        edge = dock_edge,
        value = dock_value,
        filter = dock_filter,
        size = dock_size,
        width = 0,
        height = 0,
        charger = { func : null, scope : null },
        em = registry.mappings.e2p(1),
        padding = [2 * em, 2 * em, 2 * em, 2 * em],
        tolerance = 1,
        cache = [],
        // counters for position requests
        tops = 0, bottoms = 0, lefts = 0, rights = 0,
        // anchoring sentinels
        x1 = 0, x2 = 0, y1 = 0, y2 = 0;
    var hgap,vgap;

    function dock () {
      // orientation test
      function isHorizontal (x) { return edge(x) === 'top' || edge(x) === 'bottom'; }
      function isVertical (x) { return edge(x) === 'left' || edge(x) === 'right'; }

      // minimum size accessing utility
      function minSize (x) {
        var pref = size(x);
        if ( pref === null ) {return null;}
        return filter(x) ? filter(x).call(this, { 
          edge : edge(x),
          result : { width : pref.minWidth, height : pref.minHeight },
          size : { width : width, height : height }
        }) : maxSize(x);
      }
      
      // maximum size accessing utility
      function maxSize (x) {
        var pref = size(x);
        if ( pref === null ) {return null;}
        return filter(x) ? filter(x).call(this, {
          edge : edge(x), 
          result : { width : pref.maxWidth, height : pref.maxHeight },
          size : { width : width, height : height }
        }) : minSize(x);
      }
      
      // re-wiring component links
      function rewire () { if ( charger.func ) {charger.func.call(charger.scope);} }

      // perfectly fits or not
      function perfect (x) {
        var module = x.module, pref = maxSize(x);
        if ( isVertical(x) ) {return Math.abs(pref.width - module.width()) < tolerance;}    
        if ( isHorizontal(x) ) {return Math.abs(pref.height - module.height()) < tolerance;}
        return true;
      }
      
      function enough (xs) {
        var result = true;
        xs.forEach(function (d) { result = perfect(d); });
        return result;
      }
      
      // reconciles space conflicts in orders of precedences
      function reconcile ( src, targets ) {
        // calculate viable improvement
        function improve (x) { // half-interval method
          var module = x.module, pref = maxSize(x);
          return isHorizontal(x) ?
            (pref.height - module.height()) / 2:
            (pref.width - module.width()) / 2;
        }
        
        var priority = targets.indexOf(src),
            result = {};
        result = targets.map(function ( d, i ) {
          if ( i <= priority ) {return d;}
          
          var vol = improve(src), 
              module = d.module, srcModule = src.module;
          
          if ( isVertical(src) ) {
            if ( vol > 0 ) {
              srcModule.width(srcModule.width() + vol);
              module.width(module.width() - vol);
            } else {
              srcModule.width(srcModule.width() - vol);
              module.width(module.width() + vol);
            }
          } else {
            if ( vol > 0 ) {
              srcModule.height(srcModule.height() + vol);
              module.height(module.height() - vol);
            } else {
              srcModule.height(srcModule.height() - vol);
              module.height(module.height() + vol);
            }
          }
          
          return d;
        });
        
        rewire();
        return result;
      }
      
      function layoutOnce (fullSize, elems) {
        var fullW = fullSize[0], fullH = fullSize[1];
        // FIXME thanks to the state-oriented programming style,
        // the dock function will be called with state. So this
        // refreshing has to be performed in order to react to 
        // resizing.
        x1 = 0, x2 = 0, y1 = 0, y2 = 0;
        tops = 0, bottoms = 0, lefts = 0, rights = 0;
        
        x1 = padding[3], x2 = fullW - padding[1];
        y1 = padding[0], y2 = fullH - padding[2];
        fullW -= ( padding[1] + padding[3] );
        fullH -= ( padding[0] + padding[2] );
        var area = [fullW, fullH];
        elems.forEach(function (d) {
          Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-" + d.module.alias);
          var module = d.module,
              osize = size(d), 
              max = maxSize(d),
              min = minSize(d),
              pref = {
                width : max !== null && min !== null ? 
                        d3.max([ max.width, min.width ]) : undefined,
                height : max !== null && min !== null ? 
                         d3.max([ max.height, min.height ]) : undefined
              };
          
          d.acceptable = true;
          
          if ( pref.width === 0 || pref.height === 0 ||
              ( edge(d) !== 'center' && (osize.minWidth > pref.width || osize.minHeight > pref.height || area[0] < osize.minWidth || area[1] < osize.minHeight) )) {
            // FIXME refactor
			if ( d.module.alias === 'legends' && d.module.modules()['sizeLegend'] && Objects.size(d.module.modules()) === 1 ) {
              d.acceptable = true;
            } else {
              d.acceptable = false;
              module.width(0).height(0);
              Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-" + d.module.alias);
              return;
			}
          }
          
          // grant initial available space
          switch ( edge(d) ) {
            case 'top' :
              module.width(area[0]).height(pref.height);
              if(tops){
                area[1] -= (pref.height + hgap * (tops - 1));
              }else{
                area[1] -= (pref.height + hgap);
              }
              tops++;
              break;
            case 'bottom' :
              module.width(area[0]).height(pref.height);
              if (bottoms){ 
                area[1] -= (pref.height + hgap * (bottoms - 1));
              }else{
                area[1] -= (pref.height + hgap);
              }
              bottoms++;
              break;
            case 'left' :
              module.width(pref.width).height(area[1]);
              if (lefts){ 
                area[0] -= (pref.width + vgap * (lefts - 1));
              }else{
                area[0] -= (pref.width + vgap);
              }
              lefts++;
              break;
            case 'right' :
              module.width(pref.width).height(area[1]);
              if (rights){ 
                area[0] -= (pref.width + vgap * (rights - 1));
              }else{
                area[0] -= (pref.width + vgap);
              }
              rights++;
              break;
            case 'center' :
              module.size({width:area[0],height:area[1]});
              area[0] = 0, area[1] = 0;
              break;
            }
            Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-" + d.module.alias);
          });
      }
      
      function anchor (xs) {
        var map = xs.map(function ( d, i ) {
          var coord = { x : 0, y : 0 },
              module = d.module;
          
          if ( !d.acceptable ) {
            d.anchor = coord;
            return d;
          }
          
          switch ( edge(d) ) {
          case 'top' :
            coord.x = x1, coord.y = y1;
            y1 += (module.height() + hgap);
            break;
          case 'bottom' :
            coord.x = x1, coord.y = y2 - module.height();
            y2 -= (module.height() + hgap);
            break;
          case 'left' :
            coord.x = x1, coord.y = y1;
            x1 += (module.width() + vgap);
            break;
          case 'right' :
            coord.x = x2 - module.width(), coord.y = y1;
            x2 -= (module.width() + vgap);
            break;
          case 'center' :
            coord.x = x1, coord.y = y1;
            x1 = x2, y1 = y2;
            break;
          }
          
          d.anchor = coord;
          return d;
        }), result = {};
        
        for ( var key in map ) {
          if ( map.hasOwnProperty(key) ) {
            var moduleIter = map[key].module;
            result[moduleIter.alias] = map[key].anchor;
            //we add more info here although it doesn't fit the function name
            //consider a new function name 
            result[moduleIter.alias].width = moduleIter.width();
            result[moduleIter.alias].height = moduleIter.height();
          }
        }
        
        return result;
      }

      // start of processing
      var elems = [],
          adjustPolicy = arguments[1],
          result = {};
      
      // accepts array argument only
      if ( !$.isArray(arguments[0]) ) {return result;}
      
      // defensive copy and sort by custom needs
      elems = arguments[0].slice().sort(sort);
      
      cache = [];
      
      // first layout
      
      layoutOnce([width, height], elems);
      
      // re-wiring component links after initial calculation
      rewire();
      
      if ( adjustPolicy === registry.LAYOUT_ADJUST_POLICY.APPROXIMATE ) {
        /*
        // tail recursion of reconciliation against incomplete layout data
        return lambda.tailrec(
          perfect,  // * CONDITION * base condition
          anchor,   // * THEN *      action taken when recursion stops
          reconcile // * BEFORE *    action taken before next loop/recursion
        ).apply(this, elems);
        */
        return anchor.call(this, (function recur (xs) {
          var first = xs[0];
          if ( !first.acceptable || perfect(first) ) {
            cache.push( xs.shift() );
            if ( xs.length ) {recur(xs);}
          } else {
            recur( reconcile(first, xs) );
          }
          return cache;
        })(elems)); 
      } else if ( adjustPolicy === registry.LAYOUT_ADJUST_POLICY.RELAYOUT ){
        //layout again
        
        layoutOnce([width, height], elems);
       
        rewire();
        
        return anchor.call(this, elems);
      } else {
        // No further precise size approaching will be taken,
        // which trades possible layout preciseness for time.
        return anchor(elems);
      }
    }
    
    dock.filter = function (x) {
      if ( !arguments.length ) {return filter;}
      filter = x;
      return dock;
    };
    
    dock.sort = function (x) {
      if ( !arguments.length ) {return sort;}
      sort = x;
      return dock;
    };
    
    dock.size = function (x) {
      if ( !arguments.length ) {return size;}
      size = x;
      return dock;
    };
    
    dock.edge = function (x) {
      if ( !arguments.length ) {return edge;}
      edge = x;
      return dock;
    };
    
    dock.value = function (x) {
      if ( !arguments.length ) {return value;}
      value = x;
      return dock;
    };
    
    dock.rewire = function (xs) {
      if ( !arguments.length ) {return charger;}
      charger = xs;
      return dock;
    };
    
    dock.vgap = function () {
      if ( !arguments.length ) {return vgap;}
      vgap = $.isFunction(arguments[1]) ? 
             arguments[1](arguments[0]) : arguments[0];
      return dock;
    };
    
    dock.hgap = function () {
      if ( !arguments.length ) {return hgap;}
      hgap = $.isFunction(arguments[1]) ? 
             arguments[1](arguments[0]) : arguments[0];
      return dock;
    };
    
    dock.padding = function () {
      if ( !arguments.length ) {return padding;}
      var val = arguments[0], filter = arguments[1];
      
      if ( $.isArray(val) ) {
        val.forEach(function (d, i) {
          padding[i] = $.isFunction(filter) ? filter(d) : +d;
        });
      } else {
        padding.forEach(function (d, i) { padding[i] = val; });
      }
      
      return dock;
    };
    
    dock.width = function (x) {
      if ( !arguments.length ) {return width;}
      width = x;
      return dock;
    };
    
    dock.height = function (x) {
      if ( !arguments.length ) {return height;}
      height = x;
      return dock;
    };
    
    dock.tolerance = function (x) {
      if ( !arguments.length ) {return tolerance;}
      tolerance = x;
      return dock;
    };
    
    dock.properties = function () { return dock; };
    dock.data = function () { return dock; };
    
    dock.destroy = function() {
      //charger.scope holds the div contaier in UIComponent
      charger.func = null;
      charger.scope = null;      
      charger = null;
    };
    
    return dock;
  };
  
  return _;

});
define('sap/viz/util/FeedingZoneUtil',['jquery', 'sap/viz/base/utils/Objects', 'sap/viz/manifest', 'sap/viz/util/UtilsRegister'],

function Setup($, Objects, manifest, UtilsRegister){
    

    var lookupModule = function(tree, id) {
        if (tree.hasOwnProperty(id)) {
            return tree[id];
        }
        
        if (typeof tree !== 'object') {
            return;
        }
        
        for (var i in tree) {
            if (tree.hasOwnProperty(i) && tree[i]) {
                var res = lookupModule(tree[i], id);
                if (res) {
                    return res;
                }
            }
        }
        return;
    };
    
    var lookupFeed = function(allFeeds, ids) {
        var res = [];
        for (var i = 0; i < allFeeds.length; i++) {
            for (var j = 0; j < ids.length; j++) {
                if (allFeeds[i].id === ids[j]) {
                    res.push(allFeeds[i]);
                }
            }
            
        }
        return res;
    };
    
    var buildTrellisRes = function(name, feed, selection) {
        var element = selection.select('.v-m-' + name);
        element = $(element.node());
        var pos = element.offset();
        var width = element.width();
        var height = element.height();
        var rootPos = $('.v-m-root').offset();
        var point1 = [pos.left - rootPos.left, pos.top - rootPos.top];
        var point2 = [point1[0] + width, point1[1]];
        var point3 = [point1[0] + width, point1[1] + height];
        var point4 = [point1[0], point1[1] + height];
        var res = {
            name : name,
            feedDef : feed,
            bound : [[point1, point2, point3, point4]]
        };
        return res;
    };

    var buildMultiRes = function(name, feed, selection, byBound) {
        var element = selection.select('.v-m-' + name);
        var rect = element.node().getBBox();
        if (byBound) {
            rect = element.select('.v-bound').node().getBBox();
        }
        var transform = element.node().getTransformToElement(element.node().ownerSVGElement);
        var point1 = [transform.e + rect.x, transform.f + rect.y];
        var point2 = [point1[0] + rect.width, point1[1]];
        var point3 = [point1[0] + rect.width, point1[1] + rect.height];
        var point4 = [point1[0], point1[1] + rect.height];
        var res = {
            name : name,
            feedDef : feed,
            bound : [[point1, point2, point3, point4]]
        };
        return res;
    };
    
    var buildRes = function(name, feed, selection, byBound) {
        var elements = selection.selectAll('.v-m-' + name);
        var bound = [];
        elements.each(function(d, i) {
            var rect = this.getBBox();
            if (byBound) {
                var node = d3.select(this).select('.v-bound').node();
                if (node === null) {
                    return;
                }
                rect = node.getBBox();
            }
            var transform = this.getTransformToElement(this.ownerSVGElement);
            var point1 = [transform.e + rect.x, transform.f + rect.y];
            var point2 = [point1[0] + rect.width, point1[1]];
            var point3 = [point1[0] + rect.width, point1[1] + rect.height];
            var point4 = [point1[0], point1[1] + rect.height];
            bound.push([point1, point2, point3, point4]);
        });
        var res = {
            name : name,
            feedDef : feed,
            bound : bound
        };
        return res;
    };
    
    var buildGeoRes = function(id, name, feed, selection) {
        var bound = [];
        var elements;
        if(id === 'viz/choropleth' || id === 'viz/geobubble'|| id === 'viz/geopie')
        {
         elements = selection.selectAll('.v-m-main');
         elements.each(function(d, i) {
            var node = d3.select(this).select('.v-bound').node();
            if (node === null) {
                return;
            }
            var rect = node.getBBox();            
            var transform = this.getTransformToElement(this.ownerSVGElement);
            var point1 = [transform.e + rect.x, transform.f + rect.y];
            var point2 = [point1[0] + rect.width, point1[1]];
            var point3 = [point1[0] + rect.width, point1[1] + rect.height];
            var point4 = [point1[0], point1[1] + rect.height];
            bound.push([point1, point2, point3, point4]);
            });
        }
        if(id === 'viz/multi_choropleth' || id === 'viz/multi_geobubble')
        {
         var mainelements = selection.selectAll('.v-m-plot');
         for(var i = 0; i< mainelements[0].length; i++)
         {
             elements = selection.selectAll('.v-m-plot'+i);
             elements.each(function(d, i) {
                var node = d3.select(this).select('.v-bound').node();
                if (node === null) {
                return;
                }
                var rect = node.getBBox();            
                var transform = this.getTransformToElement(this.ownerSVGElement);
                var point1 = [transform.e + rect.x, transform.f + rect.y];
                var point2 = [point1[0] + rect.width, point1[1]];
                var point3 = [point1[0] + rect.width, point1[1] + rect.height];
                var point4 = [point1[0], point1[1] + rect.height];
                bound.push([point1, point2, point3, point4]);
               });
         }
        }
        var res = {
            name : name,
            feedDef : feed,
            bound : bound
        };
        return res;
    };
    
    var parseXYLegend = function(id, selection, builder) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var legend = lookupModule(chartManifest, 'legends');
        if (legend) {
            // waterfall chart uses xy feed, but without legend
            var resBulder = builder ? builder : buildRes;
            return [resBulder('legend', lookupFeed(allFeeds, ['regionColor']), selection, true)];
        }
        return;
    };
    
    var parseXYChart = function(id, selection, moduleManifest) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var res = [];
        var is2dVizChart = id.indexOf('3d') < 0 && id.indexOf('info/') < 0;
        
        var plotDef = buildRes('plot', allFeeds.filter(function(d){if(d.id === 'multiplier'){ return false;} return true;}), selection, is2dVizChart);
        res.push(plotDef);
        
        var xAxis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'xAxis');
        var xAxisDef;
        if (xAxis.configure.properties.type === 'value') {
            // value axis
            xAxisDef = buildRes('xAxis', lookupFeed(allFeeds, ['primaryValues']), selection, is2dVizChart);
        } else {
            // category axis
            xAxisDef = buildRes('xAxis', lookupFeed(allFeeds, ['axisLabels']), selection, is2dVizChart);
        }
        res.push(xAxisDef);
        
        var x2Axis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'xAxis2');
        if (x2Axis) {
            // only value axis can be applied
            var x2AxisDef = buildRes('xAxis2', lookupFeed(allFeeds, ['secondaryValues']), selection, is2dVizChart);
            res.push(x2AxisDef);
        }
        
        var yAxis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'yAxis');
        var yAxisDef;
        if (yAxis.configure.properties.type === 'value') {
            yAxisDef = buildRes('yAxis', lookupFeed(allFeeds, ['primaryValues']), selection, is2dVizChart);
        } else {
            yAxisDef = buildRes('yAxis', lookupFeed(allFeeds, ['axisLabels']), selection, is2dVizChart);
        }
        res.push(yAxisDef);
        
        var y2Axis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'yAxis2');
        if (y2Axis && y2Axis.id !== "sap.viz.chart.elements.scrollbar") {
            var y2AxisDef = buildRes('yAxis2', lookupFeed(allFeeds, ['secondaryValues']), selection, is2dVizChart);
            res.push(y2AxisDef);
        }
        
        // zAxis exists for 3D bar/column, which is always category axis
        var zAxis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'zAxis');
        if (zAxis) {
            var zAxisDef = buildRes('zAxis', lookupFeed(allFeeds, ['regionColor']), selection, is2dVizChart);
            res.push(zAxisDef);
        }
        
        return res;
    };
    
    var parseXYTrellis = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var res = [];
        
        var xAxis = lookupModule(chartManifest, 'xAxis');
        var xAxisDef;
        if (xAxis.configure.properties.type === 'value') {
            // value axis
            xAxisDef = buildTrellisRes('xAxis', lookupFeed(allFeeds, ['primaryValues']), selection);
        } else {
            // category axis
            xAxisDef = buildTrellisRes('xAxis', lookupFeed(allFeeds, ['axisLabels']), selection);
        }
        res.push(xAxisDef);
        
        var x2Axis = lookupModule(chartManifest, 'xAxis2');
        if (x2Axis) {
            // only value axis can be applied
            var x2AxisDef = buildTrellisRes('xAxis2', lookupFeed(allFeeds, ['secondaryValues']), selection);
            res.push(x2AxisDef);
        }
        
        var yAxis = lookupModule(chartManifest, 'yAxis');
        var yAxisDef;
        if (yAxis.configure.properties.type === 'value') {
            yAxisDef = buildTrellisRes('yAxis', lookupFeed(allFeeds, ['primaryValues']), selection);
        } else {
            yAxisDef = buildTrellisRes('yAxis', lookupFeed(allFeeds, ['axisLabels']), selection);
        }
        res.push(yAxisDef);
        
        var y2Axis = lookupModule(chartManifest, 'yAxis2');
        if (y2Axis) {
            var y2AxisDef = buildTrellisRes('yAxis2', lookupFeed(allFeeds, ['secondaryValues']), selection);
            res.push(y2AxisDef);
        }
        
        return res;
    };
    
    var parseScatterLegend = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var res = [buildRes('legend', lookupFeed(allFeeds, ['regionColor', 'regionShape']), selection, true)];
        if (lookupModule(chartManifest, 'sizeLegend')) {
            res.push(buildRes('sizeLegend', lookupFeed(allFeeds, ['bubbleWidth']), selection, true));
        }
        return res;
    };
    
    var parseScatterChart = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var isVizChart = id.indexOf('info/') < 0;
        
        var plotDef = buildRes('plot',  allFeeds.filter(function(d){if(d.id === 'multiplier'){ return false;} return true;}), selection, isVizChart);
        
        var xAxisDef = buildRes('xAxis', lookupFeed(allFeeds, ['primaryValues']), selection, isVizChart);
        
        var yAxisDef = buildRes('yAxis', lookupFeed(allFeeds, ['secondaryValues']), selection, isVizChart);
        
        var res = [plotDef, xAxisDef, yAxisDef];
        return res;
    };
    
    var parseScatterTrellis = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        
        var xAxisDef = buildTrellisRes('xAxis', lookupFeed(allFeeds, ['primaryValues']), selection);
        
        var yAxisDef = buildTrellisRes('yAxis', lookupFeed(allFeeds, ['secondaryValues']), selection);
        
        var res = [xAxisDef, yAxisDef];
        return res;
    };
    
    var parserScatterMatrixChart = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        
        var plotDef = buildRes('plot', allFeeds, selection, true);
        
        var xAxisDef = buildRes('xAxis', lookupFeed(allFeeds, ['primaryValues']), selection, true);
        
        var yAxisDef = buildRes('yAxis', lookupFeed(allFeeds, ['primaryValues']), selection, true);
        
        var res = [plotDef, xAxisDef, yAxisDef];
        return res;
    };
    
    var parsePieLegend = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        return [buildRes('legend', lookupFeed(allFeeds, ['pieSectorColor']), selection, true)];
    };
    
    var parsePieChart = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        
        var plotDef = buildRes('plot',  allFeeds.filter(function(d){if(d.id === 'multiplier'){ return false;} return true;}), selection);

        var res = [plotDef];
        return res;
    };
    
    var parseNumberChart = parsePieChart;
    
    var parseMapLegend = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        return [buildRes('legend', lookupFeed(allFeeds, ['rectangleColor']), selection, true)];
    }; 
    
    var parseMapChart = function(id, selection, moduleManifest) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        
        var plotDef = buildRes('plot', allFeeds, selection);
        
        var res = [plotDef];
        
        var xAxis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'xAxis');
        if (xAxis) {
            var xAxisDef = buildRes('xAxis', lookupFeed(allFeeds, ['mainLabelAxis']), selection, true);
            res.push(xAxisDef);
        }
        
        var yAxis = lookupModule(moduleManifest ? moduleManifest : chartManifest, 'yAxis');
        if (yAxis) {
            var yAxisDef = buildRes('yAxis', lookupFeed(allFeeds, ['secondaryLabelAxis']), selection, true);
            res.push(yAxisDef);
        }
	
        return res;
    };
    
    var parseGeoLegend = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var res = [];
        if (id === 'viz/choropleth' || id === 'viz/multi_choropleth')
        {
           res.push(buildRes('legend', lookupFeed(allFeeds, ['featureValues']), selection, true));
        }
        if (id === 'viz/geobubble' || id === 'viz/multi_geobubble')
        {
            if (lookupModule(chartManifest, 'sizeLegend')) {
                res.push(buildRes('sizeLegend', lookupFeed(allFeeds, ['featureValues']), selection, true));
            }
            if(lookupModule(chartManifest, 'legend')){
              res.push(buildRes('legend', lookupFeed(allFeeds, ['color']), selection, true));
            }
        }
        if (id === 'viz/geopie')
        {
            res.push(buildRes('legend', lookupFeed(allFeeds, ['featureAnalysis']), selection, true));
            if (lookupModule(chartManifest, 'sizeLegend')) {
                res.push(buildRes('sizeLegend', lookupFeed(allFeeds, ['featureValues']), selection, true));
            }
        }
        return res;
    }; 
    
    var parseGeoChart = function(id, selection, moduleManifest) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var plotDef = buildGeoRes(id, 'plot', allFeeds.filter(function(d){if(d.id === 'multiplier'){ return false;} return true;}), selection);
        var res = [plotDef];        
        return res;
    };
    
    var parseTagCloudLegend = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        return [buildRes('legend', lookupFeed(allFeeds, ['tagFamily']), selection, true)];
    };
    
    var parseTagCloudChart = function(id, selection) {
      var chartManifest = manifest.viz.get(id);
      var allFeeds = chartManifest.allFeeds();
      
      var plotDef = buildRes('plot', allFeeds, selection);
      
      return [plotDef];
    };
  
    var parseNetworkChart = function(id, selection) {
      var chartManifest = manifest.viz.get(id);
      var allFeeds = chartManifest.allFeeds();
      
      var plotDef = buildRes('plot', allFeeds, selection, true);
      
      return [plotDef];
    };
    
    var parseTreeChart = parseTagCloudChart;
    
    var parseNetworkLegend = function (){};
    
    var parseTreeLegend = function (){};

    var parseRadarChart = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        
        var plotDef = buildRes('plot', allFeeds.filter(function(d){if(d.id === 'multiplier'){ return false;} return true;}), selection);
        
        var elements = selection.selectAll('.v-valueaxis');
        var bound = [];
        elements.each(function(d, i) {
            var rect;
            if (d3.select(this).select('.v-bound').empty()) {
                rect = d3.select(this).node().getBBox();
            } else {
                rect = d3.select(this).select('.v-bound').node().getBBox();
            }
            var transform = this.getTransformToElement(this.ownerSVGElement);
            var point1 = [transform.e + rect.x, transform.f + rect.y];
            var point2 = [point1[0] + rect.width, point1[1]];
            var point3 = [point1[0] + rect.width, point1[1] + rect.height];
            var point4 = [point1[0], point1[1] + rect.height];
            bound.push([point1, point2, point3, point4]);
        });
        var valueaxisDef = {
            name : 'valueaxis',
            feedDef : lookupFeed(allFeeds, ['radarAxesValues']),
            bound : bound
        };
        
        return [plotDef, valueaxisDef];
    };
    
    var parseBulletChart = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        var isVizChart = id.indexOf('info/') < 0;
        
        var plotDef = buildRes('plot',  allFeeds.filter(function(d){if(d.id === 'multiplier'){ return false;} return true;}), selection, isVizChart);
        
        var xAxisDef = buildRes('xAxis2', lookupFeed(allFeeds, ['primaryValues']), selection, isVizChart);
        
        var yAxisDef = buildRes('yAxis', lookupFeed(allFeeds, ['axisLabels']), selection, isVizChart);
        
        var res = [plotDef, xAxisDef, yAxisDef];
        return res;
    };
    
    var parseBulletLegend = function(id, selection) {
        var chartManifest = manifest.viz.get(id);
        var allFeeds = chartManifest.allFeeds();
        return [buildRes('legend', allFeeds.filter(function(d){if(d.type === 'Measure'){ return true;} return false;}), selection, true)];
    };
    
    var parseTrellisChart = function(trellisParser, legendParser) {
        return function(id, selection) {
            var chartManifest = manifest.viz.get(id);
            var allFeeds = chartManifest.allFeeds();
            
            var def = [];
            var trellis = trellisParser.call(this, id, selection);
            if (trellis) {
                def = def.concat(trellis);
            }
            
            var plotDef = buildTrellisRes('plot', allFeeds, selection);
            plotDef.name = 'mainPlot';
            def = def.concat(plotDef);
            
            var legendDef = legendParser.call(this, id, selection);
            var legendElement = d3.select('.v-m-legends');
            var legendOffsetLeft = parseFloat(legendElement.style('left')),
                legendOffsetTop = parseFloat(legendElement.style('top'));
            for (var k = 0; k < legendDef.length; k++) {
                if (legendDef[k].bound.length === 0) {
                    continue;
                }
                for (var i = 0; i < legendDef[0].bound.length; i++) {
                    for (var j = 0; j < legendDef[0].bound[i].length; j++) {
                        legendDef[k].bound[i][j][0] += legendOffsetLeft;
                        legendDef[k].bound[i][j][1] += legendOffsetTop;
                    }
                }
            }
            def = def.concat(legendDef);
            
            var multiplierDef = buildTrellisRes('trellisXAxis', lookupFeed(allFeeds, ['multiplier']), selection);
            multiplierDef.name = 'multiplier';
            
            var yAxisDef = buildTrellisRes('trellisYAxis', lookupFeed(allFeeds, ['multiplier']), selection);
            multiplierDef.bound = multiplierDef.bound.concat(yAxisDef.bound);
            
            def = def.concat(multiplierDef);
            return def;
        };
    };
    
    var parseMultiChart = function(plotParser, legendParser) {
        return function(id, selection) {
            var chartManifest = manifest.viz.get(id);
            var allFeeds = chartManifest.allFeeds();
            
            var plotSelection = selection.select('.v-m-plot');
            var def = plotParser.call(this, id, plotSelection, chartManifest.modules.root.modules.main.modules.plot.modules);
            
            var legendDef = legendParser.call(this, id, selection);
            def = def.concat(legendDef);
            
            var plotsDef = buildMultiRes('plot', allFeeds, selection, true);
            plotsDef.name = 'mainPlot';
            def = def.concat(plotsDef);
            
            var multiplierDef = buildMultiRes('xAxis2', lookupFeed(allFeeds, ['multiplier']), selection, true);
            multiplierDef.name = 'multiplier';
            
            var yAxisDef = buildMultiRes('yAxis', lookupFeed(allFeeds, ['multiplier']), selection, true);
            multiplierDef.bound = multiplierDef.bound.concat(yAxisDef.bound);
            
            def.push(multiplierDef);
            return def;
        };
    };
    
    var parseSingleChart = function(plotParser, legendParser) {
        return function(id, selection) {
            var scatterMatrixSelection;
            if (id === 'viz/scatter_matrix') {
                scatterMatrixSelection = selection.select('.v-m-plot');
            }
            var def = plotParser.call(this, id, scatterMatrixSelection ? scatterMatrixSelection : selection);
            if (legendParser) {
                var legendDef = legendParser.call(this, id, selection);
                if (legendDef) {
                    def = def.concat(legendDef);
                }
            }
            return def;
        };
    };
    
    var distribute = function(id) {
        var chartManifest = manifest.viz.get(id);
        if (chartManifest.feedingZone) {
            return chartManifest.feedingZone;
        }
        var module, plotParser, legendParser, trellisParser;
        if (id === 'viz/scatter_matrix') {
            module = chartManifest.modules.root.modules.main.id;
        } else if (id.indexOf('multi') >= 0 || id.indexOf('trellis') >= 0) {
            module = chartManifest.modules.root.modules.main.modules.plot.modules.plot.id;
        } else {
            module = chartManifest.modules.root.modules.main.modules.plot.id;
        }
        
        var feedsID;
        if (id.indexOf('info/') >= 0) {
            feedsID = manifest.module.get(module).feedsID;
        } else {
            feedsID = manifest.module.get(module).feeds.id;
        }
        switch(feedsID) {
            case 'xy' : 
                plotParser = parseXYChart;
                legendParser = parseXYLegend;
                trellisParser = parseXYTrellis;
                break;
            case 'scatter' : 
                plotParser = parseScatterChart;
                legendParser = parseScatterLegend;
                trellisParser = parseScatterTrellis;
                break;
            case 'pie' : 
                plotParser = parsePieChart;
                legendParser = parsePieLegend;
                trellisParser = function(){};
                break;
            case 'heatMap' :
            case 'treeMap' : 
                plotParser = parseMapChart;
                legendParser = parseMapLegend;
                break;
            case 'tagCloud' : 
                plotParser = parseTagCloudChart;
                legendParser = parseTagCloudLegend;
                break;
            case 'network':
                plotParser = parseNetworkChart;
                legendParser = parseNetworkLegend;
                break;
            case 'tree':
                plotParser = parseTreeChart;
                legendParser = parseTreeLegend;
                break;
            case 'radar' : 
                plotParser = parseRadarChart;
                legendParser = parseScatterLegend;
                break;
            case 'scattermatrix' :
                plotParser = parserScatterMatrixChart;
                legendParser = parseScatterLegend;
                break;
            case 'geo':
                plotParser = parseGeoChart;
                legendParser = parseGeoLegend;
                break;
            case 'number':
                plotParser = parseNumberChart;
                break;
            case 'bullet':
                plotParser = parseBulletChart;
                legendParser = parseBulletLegend;
                break;
            default :
        }
        // handle extensions which don't support feedingZone by now
        if (plotParser === undefined && legendParser === undefined && trellisParser === undefined) {
            return function () {return [];};
        }
        if (id.indexOf('trellis') >= 0) {
            return parseTrellisChart(trellisParser, legendParser);
        } else if (id.indexOf('multi') >= 0) {
            return parseMultiChart(plotParser, legendParser);
        } else {
            return parseSingleChart(plotParser, legendParser);
        }
    }; 

  
    var FeedingZoneUtil = {
        
        parse : function(id, selection) {
            var parser = distribute(id);
            return parser.call(this, id, selection);
        }

    };
    UtilsRegister.register('FeedingZoneUtil', FeedingZoneUtil);
    return FeedingZoneUtil;
});

define('sap/viz/util/PropertyZoneUtil',['sap/viz/util/UtilsRegister'],
  function Setup(UtilsRegister) {
    var PropertyZoneUtil = {
      getPropertyZone: function(id, modules, root) {
        var result = [],
          key, value, i, isMulti;
        if (root.select(".v-m-plot0").empty()) {
          isMulti = false;
        } else {
          isMulti = true;
        }

        for (key in modules) {
          if (modules.hasOwnProperty(key)) {
            value = modules[key];
            if (typeof value.concat === "function") {
              for (i = 0; i < value.length; i++) {
                checkPropertyZone(key + '[' + i + ']', value[i], result, isMulti);
              }
            } else {
              checkPropertyZone(key, value, result, isMulti);
            }
          }
        }
        calcOffsetFromChart(root, result);
        //add axis missing property zone for single chart
        if (!isMulti) {
          reloadAxisZone(modules, result);
        }
        return result;
      }
    };

    function reloadAxisZone(modules, result) {
      var plotZone = findCurrentZone("plot", result);
      if (!plotZone){
        return;
      }

      function getAxisStartPoint(key, plotZone) {
        var startPoint = plotZone.bound[0][0];
        if (key === "xAxis") {
          startPoint = plotZone.bound[0][3];
        } else if (key === "yAxis2") {
          startPoint = plotZone.bound[0][1];
        }
        return startPoint;
      }

      function getAxisSize(key, plotZone) {
        var verticalAxisCandidate = ["yAxis", "yAxis2"];
        var plotBound = plotZone.bound[0];
        var width, height;
        if (verticalAxisCandidate.indexOf(key) > -1) {
          width = 0;
          height = Math.abs(plotBound[0][1] - plotBound[2][1]);
        } else {
          width = Math.abs(plotBound[0][0] - plotBound[2][0]);
          height = 0;
        }
        return {
          width: width,
          height: height
        };
      }

      var axisCandidate = ["xAxis", "xAxis2", "yAxis", "yAxis2"];
      var axisInScope = [];
      for (var key in modules) {
        if (modules.hasOwnProperty(key) && !modules[key].hasOwnProperty('scrollbarExist')//For bar chart, yAxis2 is for scroll bar
        ) {
          axisCandidate.forEach(function(e) {
            if (key.indexOf(e) > -1) {
              axisInScope.push(e);
            }
          });
        }
      }
      axisInScope.forEach(function(e) {
        if (!findCurrentZone(e, result)) {
          var bound = [
            []
          ];
          var startPoint = getAxisStartPoint(e, plotZone);
          var size = getAxisSize(e, plotZone);
          bound[0].push([startPoint[0], startPoint[1]]);
          bound[0].push([startPoint[0] + size.width, startPoint[1]]);
          bound[0].push([startPoint[0] + size.width, startPoint[1] + size.height]);
          bound[0].push([startPoint[0], startPoint[1] + size.height]);
          result.push({
            bound: bound,
            name: e
          });
        }
      });
    }

    function findCurrentZone(key, result) {
      var found = false;
      for (var i = 0; i < result.length; i++) {
        if (key === result[i].name) {
          found = result[i];
          break;
        }
      }
      return found;
    }

    function calcOffsetFromChart(root, result) {
      var rootRect = root.node().getBoundingClientRect();
      var xOffset = rootRect.left;
      var yOffset = rootRect.top;
      var i, j, k, bound, zone, coordinate;
      for (i = 0; i < result.length; i++) {
        bound = result[i].bound;
        for (j = 0; j < bound.length; j++) {
          zone = bound[j];
          for (k = 0; k < zone.length; k++) {
            coordinate = zone[k];
            coordinate[0] = Math.round(coordinate[0] - xOffset);
            coordinate[1] = Math.round(coordinate[1] - yOffset);
          } //zone
        } //bound
      } //result
    }

    function findSubZoneFromPropertyZone(sub, result) {
      var findzone = null;
      var i;
      for (i = 0; i < result.length; i++) {
        if (sub.name === result[i].name) {
          findzone = result[i];
          break;
        }
      }
      return findzone;
    }

    function addMultiSubZone2PropertyZone(sub, result) {
      var zone = findSubZoneFromPropertyZone(sub, result);
      if (zone) {
        zone.bound.push(sub.bound[0]);
      } else {
        result.push(sub);
      }
    }

    function checkPropertyZone(key, module, result, isMulti) {
      var temp, index1, index2, i, value1, index3, left, right;
      if (module && ((typeof module.getPropertyZone) === "function")) {
        temp = module.getPropertyZone();
        if (temp) {
          index1 = key.indexOf("[");
          index2 = key.indexOf("]");
          if (index1 < 0 && index2 < 0) {
            for (i = 0; i < temp.length; i++) {
              value1 = temp[i];
              if (isMulti &&
                (value1.name.indexOf("xAxis") >= 0 || value1.name.indexOf("yAxis") >= 0)) {
                if (value1.name.indexOf("xAxis") >= 0) {
                  left = "columnAxis";
                }
                if (value1.name.indexOf("yAxis") >= 0) {
                  left = "rowAxis";
                }
                index3 = value1.name.indexOf(' ');
                if (index3 >= 0) {
                  right = value1.name.substring(index3);
                } else {
                  right = '';
                }
                value1.name = left + right;
              }
              if (key.indexOf("zAxis") >= 0) {
                left = 'zAxis';
                index3 = value1.name.indexOf(' ');
                if (index3 >= 0) {
                  right = value1.name.substring(index3);
                } else {
                  right = '';
                }
                value1.name = left + right;
              }
              result.push(value1);
            }
          } else {
            for (i = 0; i < temp.length; i++) {
              addMultiSubZone2PropertyZone(temp[i], result);
            }
          }
        }
      }
    }
    UtilsRegister.register('PropertyZoneUtil', PropertyZoneUtil);
    return PropertyZoneUtil;
  });
define('sap/viz/modules/BaseContainer',['sap/viz/base/utils/oo','sap/viz/modules/BaseComposition','jquery','sap/viz/modules/Constants','sap/viz/modules/manifests/Module','sap/viz/util/ignite',
'sap/viz/util/append','sap/viz/modules/util/BackgroundUtil','sap/viz/modules/layout/dock','sap/viz/util/fn/domposition','sap/viz/base/utils/FunctionUtils',
'sap/viz/base/utils/log/Analyzer', 'sap/viz/util/FeedingZoneUtil', 'sap/viz/util/PropertyZoneUtil'],
function Setup ( oo, BaseComposition, $, Constants, category, ignite, append, 
 BackgroundUtil, dock, domposition, FnUtil, Analyzer, FeedingZoneUtil, PropertyZoneUtil) {
    

  
    var rewireControllers = function () {
      var config = this._config;
      var modules = this._modules;
      $.each(config.modules, function ( key, value ) {
        if ( value === null ) { return; }
        if ( category.get(value.id).type === Constants.Type.Controller ) {
          modules[key]().module(modules[value.configure.clientID]);
        }
      });
    };  

    
    var getDefaultLayout = function () {
      //why don't add it to modules directly? because sometimes we will
      //iterate all modules and want to get meta data for each module, then
      //we will fail for this default layout as we don't have metadata for it in the config.
      if ( !this._bc_defaultLayout ) {
        this._bc_defaultLayout = this.getDefaultLayout(this._context);
      }
      return this._bc_defaultLayout;
    };

    
    var WORDING = {
      'CLASS_PREFIX': Constants.CSS.CLASS.MODULEPREFIX,
      'DEFAULT_LAYOUT_KEY': 'sap_viz_modules_layout_dock_key'
    };
    
    var BaseContainer = function ( manifest, context ) {
      BaseContainer.superclass.constructor.apply(this, arguments);
      
      this._bc_manifest = manifest;
      this._bc_width = 0; 
      this._bc_height = 0;

      this._bc_update_checklist = [ rewireControllers ];
      this._bc_backgroundModule = null;
      // checklist items in order upon update against this module
      this._bc_defaultLayout = null;//hold default layout instance
      
      ///////////Protected//////////////
      this._layout = {};//hold layout info for each render-able sub module
      
      this._bc_backgroundModule = BackgroundUtil.initModule(this._context);
    };
 
    BaseContainer.prototype.refresh = function () {
      //Jimmy/6/4/2013 I found refresh happens when data is updated from outside in ChartComponent
      var update_checklist = this._bc_update_checklist;
      for ( var i = 0; i < update_checklist.length; i++ ) {
        update_checklist[i].call(this);
      }
      return this;
    };  
       

    oo.extend(BaseContainer, BaseComposition);
    
    BaseContainer.prototype.render = function(selection){
      
      this._inits = 0;
      this._parentNode = selection;
      var subSelections = this._selections;
      var modules = this._modules;
      var config = this._config;

      if (modules['interaction'] && modules['interaction'].runDecoration) {
        // hide tooltip before resizing/data updating/redrawing
        modules['interaction'].runDecoration('hideDetail', 'infoMode');
        modules['interaction'].runDecoration('hideDetail', 'actionMode');
      }
      
      Analyzer.pnrProfiling('Render:drawing-layout');
      this._layout = this.layout(config, this._bc_width, this._bc_height, modules, subSelections);
      // special treatment against inefficient workflow
      // TODO refine work flow definition
      var type = this._chartType.substr(this._chartType.indexOf('/') + 1);
      if ( type === 'bubble' || type === 'multi_bubble' || type === 'geobubble' || 
           type === 'geopie' || type === 'multi_geobubble' ) {
        this._layout = this.layout(config, this._bc_width, this._bc_height, modules, subSelections);
      }
      Analyzer.pnrProfiling('Render:drawing-layout');
      
      Analyzer.pnrProfiling("Render:drawing-paint");
      Analyzer.pnrProfiling("Render:drawing-paint-background");
      //Jimmy/6/6/2013, currently we have two places to draw background, they are both using
      //background module, but here the module usage is hardcoded (while in xycontainer is configurable)
      //here the background module is not exposed to external and only used in internal high contrast template  
      this.drawBackground();
      Analyzer.pnrProfiling("Render:drawing-paint-background");
      
      Analyzer.pnrProfiling("Render:drawing-paint-chart");
      // execute module drawing logics
      for ( var key in subSelections ) {//only render-able modules will have corresponding selection
        if ( subSelections.hasOwnProperty(key) && subSelections[key] && modules.hasOwnProperty(key) && modules[key] ) {
           Analyzer.pnrProfiling("Render:drawing-paint-chart-" + key);
           subSelections[key].call(modules[key]);
           Analyzer.pnrProfiling("Render:drawing-paint-chart-" + key);
         }
      }
      Analyzer.pnrProfiling("Render:drawing-paint-chart");
      Analyzer.pnrProfiling("Render:drawing-paint");
    };
    
    // x stands for scalar values and xs stands for collection/compound values
    BaseContainer.prototype.width = function (x) {
      if ( !arguments.length ) { return this._bc_width; }
      this._bc_width = x;
      return this;
    };
    
    BaseContainer.prototype.height = function (x) {
      if ( !arguments.length ) { return this._bc_height; }
      this._bc_height = x;
      return this;
    };
    
    BaseContainer.prototype.size = function (xs) {
      if ( !arguments.length ) { return { 'width' : this._bc_width, 'height' : this._bc_height }; }
      this._bc_width = xs.width;
      this._bc_height = xs.height;
      return this;
    };

    var bindControllerClient = function() {
      var config = this._config;
      var modules = this._modules;
      var behaviorRootNode = this._parentNode;
      var chartType = this._chartType;
      $.each(config.modules, function(key, value) {
        if (value === null) {
          return;
        }
        //Jimmy/9/12/2013 still keep Constants.Type.Controller to keep backward compatibility
        //should remove it as controller is not so accurate.
        //Jimmy/9/14/2013 deprecate clientID. all behaviors are able to get all modules in the 
        //same container.
        //Jimmy/10/28/2013 we add a new rootNode to behavior which means all dom triggers will be limited
        //inside the rootNode(see wiki page for details)
        if (category.get(value.id).type === Constants.Type.Behavior && modules[key].module) {
          modules[key].module(modules);
          if (modules[key].setChartType){
            modules[key].setChartType(chartType);
          }
          modules[key].setRootNode(behaviorRootNode);
        }else if(category.get(value.id).type === Constants.Type.Controller && modules[key].module){
            //FIXME Jimmy/9/14/2013 REMOVE THIS ELSE IF AS WE WANT TO DEPRECATE THSI CONTROLLER
          if(!value.configure || !value.configure.clientID){
            FnUtil.error('A clientID is required for a controller module:' + value.id);
          }
          modules[key].module(modules[value.configure.clientID]);
        }
      });
    };

    BaseContainer.prototype.init = function( args ) {
      BaseContainer.superclass.init.apply(this, arguments);
      bindControllerClient.call(this);
    };

    
    BaseContainer.prototype.data = function (xs) {
      BaseContainer.superclass.data.apply(this, arguments);
    
      var modules = this._modules;
      var config = this._config;
      var data = this._data;
      
      for ( var key in modules ) {
        if ( modules.hasOwnProperty(key) ) {
          if ( config.modules[key].data ) {
            modules[key].data(
              data.createDataAdapterForModule(config.modules[key].data));
          } else {
            if ( modules[key].data ) {
              modules[key].data(data);
            }
          }
        }
      }
      
      return this;
    };

    BaseContainer.prototype.relayout = function ( evt ) {
      //Jimmy/6/4/2013 I found legend in bubble chart may trigger relayout of BaseContainer by event dependency
      /*
      {
              targetModule : 'root',
              listener : 'relayout',
              sourceModule : 'root.legends',
              type : 'relayout'
            }*/
      this.layout(this._config, this._bc_width, this._bc_height, this._modules, this._selections);
    };


    

    
    BaseContainer.prototype.destroy = function() {
      BaseContainer.superclass.destroy.apply(this, arguments);
      //release all properties which hold dom instances
      this._selections = null;

      
      if (this._bc_backgroundModule) {
          this._bc_backgroundModule.destroy();
          this._bc_backgroundModule = null;
      }
      

      
      //call sub modules destroy
      //default layout
      if(this._bc_defaultLayout && this._bc_defaultLayout.destroy){
        this._bc_defaultLayout.destroy();
      }
      //we don't need iterate sub modules here, we will iterate all modules in chart component
    };

    
    /*
     * get default layout for container. by default, it's sap.viz.modules.layout.dock
     * @Protected 
     */
    BaseContainer.prototype.getDefaultLayout = function( context ) {
      //if no layout has been specified for container, we will use dock layout by default
      //and for this default layout module, we will give a DEFAULT_LAYOUT_KEY to it.
      //actually we are hard coding package here
      var defaultKey = WORDING['DEFAULT_LAYOUT_KEY'];
      return ignite('sap.viz.modules.layout.dock', context, WORDING.CLASS_PREFIX + defaultKey);
    };
    
    /*
     * draw background. by default, we are using sap.viz.modules.background to draw background
     * @Protected
     */
    BaseContainer.prototype.drawBackground = function( parent ) {
      var props = {
        'width' : this._bc_width,
        'height' : this._bc_height,
        'properties' : {
          'border' : {
            'left' : {
              'visible' : false
            },
            'right' : {
              'visible' : false
            },
            'top' : {
              'visible' : false
            },
            'bottom' : {
              'visible' : false
            }
          }
        },
        'parentCtx' : this._context
      };
      BackgroundUtil.drawBackground(this._parentNode, this._bc_backgroundModule, props);
    };
    

    
    /*
     * layout is responsible for:
     * set width/height for each sub module
     * set position for each sub module's selection
     * return a map with module reference key as key and (position (x, y) and size (width, height)) as value
     * {
     *   x:xx
     *   y:xx
     *   width:xx
     *   height:xx
     * } 
     * @Protected
     */
    BaseContainer.prototype.layout = function( ownConfig, width, height, subModules, subSelections) {
      
      var charger = this._charger;
      var algorithm = subModules.layout || getDefaultLayout.call(this);
      var props = this._ownProperties.layout; 

      // evaluates layout function
      function calc (xs, adjustPolicy) {
        return (algorithm.width(width).height(height))(xs, adjustPolicy);
      }
      // validates input data
      function validate (inputPadding) {
        return typeof inputPadding !=='undefined' && inputPadding !== null && inputPadding >= 0;
      }
      // formulates layout data
      function create (xs, chargerFn) {
        Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatModule");
        var padding = [ 24, 24, 24, 24 ], 
            vgap = 0,
            hgap = 0,
            elements = [];
        
        vgap = props.vgap;
        hgap = props.hgap;
       
        if (validate(props['padding'])) {
          for ( var i = 0; i < padding.length; i++ ) {
            padding[i] = parseInt(props.padding,10);
          }
        }
        if (validate(props['paddingLeft'])) { padding[3] = props['paddingLeft'] < width/2 ? parseInt(props['paddingLeft'],10) : 24;}
        if (validate(props['paddingRight'])) { padding[1] = props['paddingRight'] < width/2 ? parseInt(props['paddingRight'],10) : 24;}
        if (validate(props['paddingTop'])) { padding[0] = props['paddingTop'] < height/2 ? parseInt(props['paddingTop'],10) : 24;}
        if (validate(props['paddingBottom'])) { padding[2] = props['paddingBottom'] < height/2 ? parseInt(props['paddingBottom'],10) : 24;}

        algorithm
          .padding(padding,function(d){
           var min=Math.min(width,height);
           if(min<=108){
             return d <= 2 ? d : 2;
           }else{
             return d;
           }
           })
          .vgap(vgap || 0, function (d) { return d; })
          .hgap(hgap || 0, function (d) { return d; })
          .width(width)
          .height(height)
          .rewire(chargerFn)
          .sort(function (a, b) { return a.priority - b.priority; })
          .size(function (d) {
            return d.module.getPreferredSize ? d.module.getPreferredSize() : null; 
          })
          .value(function (d) { return d.priority; })
          .edge(function (d) { return d.position; })
          .filter(function (d) { return d.filter; })
          .tolerance(1);
        
        $.each(xs, function ( key, value ) {
          if ( category.get(ownConfig.modules[key].id).type !== Constants.Type.Container &&
               category.get(ownConfig.modules[key].id).type !== Constants.Type.Supplementary &&
               category.get(ownConfig.modules[key].id).type !== Constants.Type.Chart ) {
            return;
          }
          
          //if value is a container, the properties contains all property categories. 
          //we need get it from its own propertyCategory
          //otherwise, we get it from 'layout' properties directly
          var req = value.properties().layout || 
                    value.properties()[ownConfig.modules[key].configure.propertyCategory].layout,
              pos = req.position;
          
          var maxSizeRatio = 1/4;
          if(ownConfig.modules){
            if(ownConfig.modules.legends){
              if(ownConfig.modules.legends.modules){
                if(ownConfig.modules.legends.modules.sizeLegend){
                  maxSizeRatio = 1/3;
                }
              }
            }
          }

          if ( key === 'legends' ) {
            subModules.legends
              .maxWidth(maxSizeRatio * width - padding[0] - padding[2])
              .maxHeight(maxSizeRatio * height - padding[1] - padding[3]);
          }
          
          elements.push({
            module : value,
            position : pos,
            filter : function (d) {
              var ret = {},
                  result = d.result,
                  size = d.size;
              if ( d.edge === 'top' || d.edge === 'bottom' ) {
                 ret.height = ( result.height > maxSizeRatio * (size.height - padding[0] - padding[2]) ) ? 
                    maxSizeRatio * (size.height - padding[0] - padding[2]) : result.height;
                 ret.width = result.width;
              }
              if ( d.edge === 'left' || d.edge === 'right' ) {
                  ret.width = ( result.width > maxSizeRatio * (size.width - padding[1] - padding[3]) ) ? 
                    maxSizeRatio * (size.width - padding[1] - padding[3]) : result.width;
                ret.height = result.height;
              }
              return ret;
            },
            priority : req.priority
          }); 
        });
        Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatModule");
        return elements;
      }
      
      Analyzer.pnrProfiling("Render:drawing-layout-calculation");
      var ret = calc(create(subModules, charger), 'RELAYOUT');
     // console.log(padding);
      Analyzer.pnrProfiling("Render:drawing-layout-calculation");
      
      Analyzer.pnrProfiling('Render:drawing-layout-positionsub');
      domposition(ret, subSelections);
      Analyzer.pnrProfiling('Render:drawing-layout-positionsub');
      
      return ret;
      
    };

    
    return BaseContainer;
});

define('sap/viz/util/EffectManager',['sap/viz/base/utils/ObjectUtils'],
function Setup(ObjectUtils){

  /**
   * 
   * @param svgdef d3 svg defs to store all gradient effect
   * @return TODO: add desc
   */
  function EffectManager(svgdef, enableGhostEffect){
    this._defs  = svgdef;
    this._enableGhostEffect = enableGhostEffect;
    this._glossyIds = [];
  }

  EffectManager.prototype.rgba = function (r_, g_, b_, a_, signForOpacity) {
    var temp = {
        r: r_,
        g: g_,
        b: b_,
        a: a_,
        toHex : function() {
            return d3.rgb(temp.r, temp.g, temp.b).toString();
        },
        toString : function() {
          if (temp.a<= 1 && signForOpacity === true) {
            return "rgba(" + temp.r + "," + temp.g + "," + temp.b + "," + temp.a + ")";
          } else if(temp.a< 1 ){
            return "rgba(" + temp.r + "," + temp.g + "," + temp.b + "," + temp.a + ")";
          }else {
            return temp.toHex();
          }
        }
    };
    return temp;
  };

  EffectManager.prototype.color2rgba = function (color, a) {
    var nc = d3.rgb(0,0,0), na =1, signForOpacity;
    if(a){
      na = a;
      signForOpacity = true;
    }
    if (color != null && typeof(color) === 'object') {
      if (color.rgb) {
        nc = color.rgb();
      } else {
        nc = color;
      }
    } else if (typeof(color) === 'string') {
        color = color.toLowerCase();
        var temp, i, j;
        if (color.indexOf('rgba') >= 0) {
            temp = color.substring(color.indexOf('(')+1);
            
            i = temp.lastIndexOf(',');
            j = temp.indexOf(')');
            if (i>=0 && j>=0) {
                var rgbStr = 'rgb(' + temp.substring(0,i) + ')';
                na = parseFloat(temp.substring(i+1,j));
                nc = d3.rgb(rgbStr);
            }
        } else if (color.indexOf('hsla') >= 0) {
            temp = color.substring(color.indexOf('(')+1);

            i = temp.lastIndexOf(',');
            j = temp.indexOf(')');
            if (i>=0 && j>=0) {
                var hslStr = 'hsl(' + temp.substring(0,i) + ')';
                na = parseFloat(temp.substring(i+1,j));
                nc = d3.hsl(hslStr).rgb();
            }
        } else if (color.indexOf('hsl') >= 0) {
            nc = d3.hsl(color).rgb();
        } else if (color.indexOf('#') >= 0){
           var r,g,b;
           if (color.length === 4) {
                r = color.charAt(1);
                r += r;
                g = color.charAt(2);
                g += g;
                b = color.charAt(3);
                b += b;
            } else if (color.length === 7) {
                r = color.substring(1, 3);
                g = color.substring(3, 5);
                b = color.substring(5, 7);
            }
            r = parseInt(r, 16);
            g = parseInt(g, 16);
            b = parseInt(b, 16);
            if( isNaN(r) ||
                isNaN(g) ||
                isNaN(b) ) {
              r = 0;
              g = 0;
              b = 0;
            }
            nc = d3.rgb(r,g,b);
        } else{
            nc = d3.rgb(color);
        }
    }
    return this.rgba(nc.r, nc.g, nc.b, na, signForOpacity);
  };
  
  EffectManager.prototype.rgba2gray = function (c) {
    var r = c.r, g = c.g, b = c.b, gc;

    if ((r === g) && (g === b)) {
      gc = Math.round(r + (255 - r)*0.6);
    } else {
      gc = Math.round((r*299 + g*587 + b*114 + 500) / 1000);
    }
    return this.rgba(gc, gc, gc, c.a);
  };

  function increaseBrightness(c, percent) {
    var r = c.r, g = c.g, b = c.b, nr,ng,nb;
    if (percent >= 0) {
      nr = Math.round(r + (255 - r) * percent / 100);
      ng = Math.round(g + (255 - g) * percent / 100);
      nb = Math.round(b + (255 - b) * percent / 100);
    } else {
      nr = Math.round(r * (100 + percent) / 100);
      ng = Math.round(g * (100 + percent) / 100);
      nb = Math.round(b * (100 + percent) / 100);
    }
    return this.rgba(nr,ng,nb,c.a);
  }
  
  function drawGlossySector(d3defs, id, c, radius) {
    var c0 = c.toHex();
    var c2 = increaseBrightness.call(this, c, 50).toHex();
    var c3 = increaseBrightness.call(this, c, -30).toHex();

    var d3rg = d3defs.append('radialGradient');
    var rg = d3rg[0][0];
    rg.setAttribute('id', id);
    rg.setAttribute('cx', 0);
    rg.setAttribute('cy', 0);
    rg.setAttribute('r', radius);
    rg.setAttribute('fx', 0);
    rg.setAttribute('fy', 0);
    rg.setAttribute('gradientUnits',"userSpaceOnUse");
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.9).attr("stop-color", c0);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c3);
  }
  
  function drawGlossy3dSector(d3defs, id, c) {
    var c0 = c.toHex();
    var c1 = increaseBrightness.call(this, c, 10).toHex();
    var c2 = increaseBrightness.call(this, c, 60).toHex();

    var d3rg = d3defs.append('radialGradient');
    var rg = d3rg[0][0];
    rg.setAttribute('id', id);
    rg.setAttribute('cx', '50%');
    rg.setAttribute('cy', '50%');
    rg.setAttribute('r', '50%');
    rg.setAttribute('fx', '25%');
    rg.setAttribute('fy', '25%');
    rg.setAttribute('gradientUnits',"userSpaceOnUse");
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.8).attr("stop-color", c1);
    //d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.9).attr("stop-color", c0);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c0);
  }   
  function drawGlossyCircle(d3defs, id, c) {
    var c0 = c.toHex();
    var c1 = increaseBrightness.call(this, c, 10).toHex();
    var c2 = increaseBrightness.call(this, c, 80).toHex();

    var d3rg = d3defs.append('radialGradient');
    var rg = d3rg[0][0];
    rg.setAttribute('id', id);
    rg.setAttribute('cx', '50%');
    rg.setAttribute('cy', '50%');
    rg.setAttribute('r', '50%');
    rg.setAttribute('fx', '50%');
    rg.setAttribute('fy', '20%');
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.7).attr("stop-color", c1);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 0.9).attr("stop-color", c0);
    d3rg.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c0);
  }

  function drawGlossyRectangle(d3defs, id, c, direction) {
    var c1 = increaseBrightness.call(this, c, 30).toHex();
    var c2 = increaseBrightness.call(this, c, 50).toHex();
    var c3 = increaseBrightness.call(this, c, -10).toHex();
    var c4 = increaseBrightness.call(this, c, 10).toHex();
    var gradient = d3defs.append("svg:linearGradient").attr("id", id).attr("x1", "0%").attr("y1", "0%");
    if(direction === 'horizontal') {
      gradient.attr("y2", "0%").attr("x2", "100%");
    } else {
      gradient.attr("y2", "100%").attr("x2", "0%");
    }
    
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c1);
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0.2).attr("stop-color", c2);
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0.8).attr("stop-color", c3);
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c4);
 }
  
  function drawGlossyCubeTopSurface(d3defs, id, c, direction) {
    var c1 = increaseBrightness.call(this, c, 50).toHex();
    var c2 = increaseBrightness.call(this, c, -10).toHex();
    
    var gradient = d3defs.append("svg:linearGradient").attr("id", id);

    switch(direction){
    case "LeftRight": 
      gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "0%").attr("x2", "100%");
      break;
    case "BottomUp": 
      gradient.attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "0%");
      break;
    case "RightLeft": 
      gradient.attr("x1", "100%").attr("y1", "0%").attr("y2", "0%").attr("x2", "0%");
      break;
    case "TopDown": 
      gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "100%").attr("x2", "0%");
      break;
    default :
      gradient.attr("x1", "0%").attr("y1", "0%").attr("y2", "0%").attr("x2", "100%");      
    }
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c1);
 }
  
  function drawGlossyCubeSideSurface(d3defs, id, c, direction) {
    var c1 = increaseBrightness.call(this, c, 50).toHex();
    var c2 = increaseBrightness.call(this, c, -10).toHex();

    var gradient = d3defs.append("svg:linearGradient").attr("id", id).attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "100%");
    
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c1);
 }
  function drawGlossySectorSideSurface(d3defs, id, c, direction) {
    var c1 = increaseBrightness.call(this, c, 50).toHex();
    var c2 = increaseBrightness.call(this, c, -30).toHex();

    var gradient = d3defs.append("svg:linearGradient").attr("id", id).attr("x1", "0%").attr("y1", "100%").attr("y2", "0%").attr("x2", "100%");
    
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", c2);
    gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c1);
 }

  function drawGlossyBackground(d3defs, id, c, direction) {
     var gradient = d3defs.append("svg:linearGradient").attr("id", id);
     if(direction === 'horizontal') {
       gradient.attr("x1", "100%").attr("y1", "0%").attr("x2", "0%").attr("y2", "0%");
     } else {
       gradient.attr("x1", "0%").attr("y1", "0%").attr("x2", "0%").attr("y2", "100%");
     }
     
     gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 0).attr("stop-color", '#ffffff');
     gradient.append("stop").attr('stop-opacity', c.a).attr("offset", 1).attr("stop-color", c.toHex());
  }

  function getExistedFillElementId(parameters) {
    if (parameters.drawingEffect !== "glossy") {
      return;
    }
    
    for (var i = 0; i < this._glossyIds.length; i++) {
      var prop = this._glossyIds[i].parameter;
      if (prop['fillColor'] === parameters['fillColor'] &&
          prop['direction'] === parameters['direction']) {
        if (prop['graphType'] === 'sector' && parameters['graphType'] === 'sector') {
            if (prop.radius === parameters.radius) {
          return this._glossyIds[i].id;
          }
        } else if(prop['graphType'] === parameters['graphType']) {
          return this._glossyIds[i].id;
        }
      }
    }
  }
  
  function getFillElementId(parameters) {
    var id;

    if(parameters.drawingEffect === "glossy")
    {
      
      if (parameters.graphType === 'line') {
        id = null;
      } else {
        id = parameters.drawingEffect + ObjectUtils.guid();
        this._glossyIds.push({
          id : id,
          parameter : {
            fillColor : parameters.fillColor,
            direction : parameters.direction,
            graphType : parameters.graphType,
            radius : parameters.radius
          }
        });
      }
    }

    return id;
  }
  /**
   * 
   * @param parameters
   * {
   *   graphType: 'circle','square','diamond'.....
   *   drawingEffect,
   *   fillColor,
   *   direction,  "horizontal" means left to right. "vertical" means top to bottom
   * }
   * @return id to use in "fill"
   */

  EffectManager.prototype.register = function(parameters, a)
  {
    var originalColor = parameters.fillColor;
    if (typeof(originalColor) === 'string') {
        if ((originalColor.toLowerCase() === 'transparent') ||
            (originalColor.toLowerCase() === 'none')) {
            return originalColor;
        }
    }

    var color = this.color2rgba(originalColor, a);
    if (this._enableGhostEffect) {
      color = this.rgba2gray(color);
    }

    var id = getExistedFillElementId.call(this, parameters);
    if(id) { 
      return "url(#" + id + ")"; 
    }
    
    id = getFillElementId.call(this, parameters);
    if(!id) { return color.toString(); }

    var element = this._defs.select("#" + id);
    if(element.empty())
    {
      if(parameters.drawingEffect === "glossy") {
        switch (parameters.graphType)
        {
        case 'background' : 
          drawGlossyBackground.call(this, this._defs, id, color, parameters.direction);
          break;
         case 'sector' :
          drawGlossySector.call(this, this._defs, id, color, parameters.radius);
          break;
         case '3dSector':
           drawGlossy3dSector.call(this, this._defs, id, color);
           break;
         case 'cubeTop':
           drawGlossyCubeTopSurface.call(this, this._defs, id, color, parameters.direction);
           break;
         case 'cubeSide':
           drawGlossyCubeSideSurface.call(this, this._defs, id, color);
           break;
         case 'sectorSide':
           drawGlossySectorSideSurface.call(this, this._defs, id, color);
           break;
         case 'circle' :
          drawGlossyCircle.call(this, this._defs, id, color, parameters.direction);
          break;
         case 'triangle-up' :
         case 'triangle-down' :
          drawGlossyRectangle.call(this, this._defs, id, color, 'vertical');
          break;
         case 'triangle-left' :
         case 'triangle-right' :
          drawGlossyRectangle.call(this, this._defs, id, color, 'horizontal');
          break;
         case 'rectangle' :
         case 'diamond' :
         case 'cross' :
         case 'star' :
         case 'intersection' :
           drawGlossyRectangle.call(this, this._defs, id, color, parameters.direction);
           break;
         default :
          drawGlossyRectangle.call(this, this._defs, id, color, parameters.direction);
          break;
         }
       } else {
            return color.toString();
       }
     }
     return "url(#" + id + ")";
   };
   
  EffectManager.prototype.container = function(container){
    if(!arguments.length){
      return this._defs;
    }
    this._defs = container;
  };

  EffectManager.prototype.ghostEffect = function(_){
    if(!arguments.length) {
      return this._enableGhostEffect;
    }
    this._enableGhostEffect = _;
  };
  
  EffectManager.prototype.destroy = function(){
    this._defs = null;
    this._glossyIds = null;
  };
  return EffectManager;
});

define('sap/viz/modules/DivContainer',['sap/viz/base/utils/oo','sap/viz/modules/BaseContainer','sap/viz/util/EffectManager'],
function Setup ( oo, BaseContainer, EffectManager ) {
    
    var DivContainer = function ( manifest, context ) {
      DivContainer.superclass.constructor.apply(this, arguments);
      this._effectManager = context.effectManager = new EffectManager();
      this._div_container = null;
    };
    
    oo.extend(DivContainer, BaseContainer);
    
    DivContainer.prototype.drawBackground = function( parent ) {
      //override parent function, do nothing for now
    };
    
    DivContainer.prototype.container = function (x) {
      if ( !arguments.length ) { return this._div_container; }
      this._div_container = x;
      if (this._effectManager) {
        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        var defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
        svg.appendChild(defs);
        this._div_container.appendChild(svg);
        this._effectManager.container(d3.select(defs));
      }
      return this;
    };    
    
    //20140106_JohnWen: Tooltip is initialized itself when showTooltip is firstly called,
    //so this method is not needed anymore.    
//    DivContainer.prototype.render = function(selection){
//      DivContainer.superclass.render.apply(this, arguments);
//      var modules = this._modules;
//      var selections = this._selections;
//      
//      //Special case for tooltip, we need refactor tooltip
//      //Get transform for main module, tooltip needs the boundary
//     var layoutInfo = this._layout;
//      if ( modules['tooltip'] ) {
//        modules['tooltip'](this._div_container);
//
//        modules['tooltip'].plotArea({
//          'x' : layoutInfo['main'].x,
//          'y' : layoutInfo['main'].y,
//          'width' : modules['main'].width(),
//          'height' : modules['main'].height()
//        }).zone({ 'width' : this.width(), 'height' : this.height() });
//      }
//    };    
    
    DivContainer.prototype.destroy = function() {
      DivContainer.superclass.destroy.apply(this, arguments);
      //set null to all properties which holds html elements
      this._div_container = null;
    };    
    
    return DivContainer;
});

define('sap/viz/modules/manifests/BaseContainer',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/Constants'],
function Setup ( Manifest, Constants) {
  
  var module = {
    id : "sap.viz.modules.basecontainer",
    type : Constants.Type.Container,
    'abstract' : true, //seems abstract is keyword in YUI compressor
    name : "BaseContainer",
    renderto : Constants.RenderTo.SVG,
    description : "Represents the abstract base container",
    properties : {
      layout : {
        name : 'layout',
        description : 'Settings for the layout of the root container',
        supportedValueType : 'Object',
        supportedValues : {
          adjustPolicy : {
            name : 'adjustPolicy',
            supportedValueType : 'String',
            defaultValue : undefined,
            description : 'Indicates the layout adjust policy',
            isExported : false
          },
          padding : {
            name : 'padding',
            supportedValueType : 'PositiveInt',
            defaultValue : 24,
            description : 'Set the universal padding value. This single value is applied to all sides of the chart. Individual settings for each edge are also supported.',
            'example': "<a href='"+Constants.DocExample.SnippetUrl+"4609' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          'paddingTop' : {
            name : 'paddingTop',
            supportedValueType : 'PositiveInt',
            defaultValue : undefined,
            description : 'Set the padding value for the top side',
           'example': "<a href='"+Constants.DocExample.SnippetUrl+"4609' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          'paddingLeft' : {
            name : 'paddingLeft',
            supportedValueType : 'PositiveInt',
            defaultValue : undefined,
            description : 'Set the padding value for the left side',
            'example': "<a href='"+Constants.DocExample.SnippetUrl+"4609' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          'paddingRight' : {
            name : 'paddingRight',
            supportedValueType : 'PositiveInt',
            defaultValue : undefined,
            description : 'Set the padding value for the right side',
            'example': "<a href='"+Constants.DocExample.SnippetUrl+"4609' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          'paddingBottom' : {
            name : 'paddingBottom',
            supportedValueType : 'PositiveInt',
            defaultValue : undefined,
            description : 'Set the padding value for the bottom side',
            'example': "<a href='"+Constants.DocExample.SnippetUrl+"4609' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          vgap : {
            name : 'vgap',
            supportedValueType : 'PositiveInt',
            defaultValue : 8,
            description : 'Vertical gap value between UI components',
            isExported : false
          },
          hgap : {
            name : 'hgap',
            supportedValueType : 'PositiveInt',
            defaultValue : 8,
            description : 'Horizontal gap value between UI components',
            isExported : false
          },
          hideAxisTitleFirst : {
            name : 'hideAxisTitleFirst',
            supportedValueType : 'Boolean',
            defaultValue : true,
            description : 'Hide axis title firstly if the space is limited.',
            isExported : false
          }
        }
      }
    },
    events : {
      selectData : Constants.Event.SelectData.desc,
      deselectData : Constants.Event.DeSelectData.desc,
      showTooltip : Constants.Event.TooltipShow.desc,
      hideTooltip : Constants.Event.TooltipHide.desc
    },
    configure : null
  };
  
  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
  
});
define('sap/viz/modules/manifests/DivContainer',['sap/viz/modules/manifests/Module',
	'sap/viz/modules/Constants',
	'sap/viz/modules/DivContainer', 
	'sap/viz/modules/manifests/BaseContainer'],
function Setup( Manifest, Constants, fn, BaseContainer ) {
  
  var module = {
    id : "sap.viz.modules.divcontainer",
    base : "sap.viz.modules.basecontainer",
    renderto : Constants.RenderTo.DIV,
    name : "DivContainer",
    description : "Settings for the modular unit of the div container.",
    fn : fn
  };
  
  var manifests = {
    viz: [],
    module: [module].concat(BaseContainer.module),
    feeds: [].concat(BaseContainer.feeds)
  }
  return manifests;
  
});
define('sap/viz/api/manifest/Feed',['sap/viz/feeds/Manifest', 'sap/viz/base/utils/TypeUtils', 'sap/viz/manifests/util/ManifestRegister', 'exports'], function Setup(Feed, TypeUtils, ManifestRegister) {
    
    var manifest = 
      /**
       * sap.viz.api.manifest.Feed<br>
       * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€. 
       * You should load sap.viz.js library before using the API.]
       * @namespace sap.viz.api.manifest.Feed
       */
    {
            
        /**         
         * @function get
         * @memberof sap.viz.api.manifest.Feed
         * @static
         * @deprecated 
         * @param {String} [id]
         *                       Returns feed manifest that is associated with the ID. If the ID is not defined, it returns all the feed manifests.
         * @param {Boolean} [throwErrorIfNull]
         *                       Only works when an ID argument exists
         * @return {sap.viz.api.manifest.FeedManifest[]} Feed manifests; this is a read-only object.
         *                         A feed manifest registered by {@link sap.viz.extapi.manifest.Feed.register}.</br>
         *
         * @example <caption>Sample Code:</caption>
         * var feedById =  sap.viz.api.manifest.Feed.get(id)[0]; // Get feed by a specific category ID  such as: heatMap, network, pie, radar, scatter, scattermatrix, tagCloud, tree, treeMap and xy; returns an array which contains one feed object.
         * var feeds =  sap.viz.api.manifest.Feed.get(); // Get all feeds; returns an array which contains all feed objects.
         * 
         * This function replaces API manifest.feeds.each which was in the previous API version. Use this function instead.
         * 
         * If you used sap.viz.manifest.feeds.each(function(obj, id){....}) in previous versions,
         * you can now use the following: var FeedSet =  sap.viz.api.manifest.Feed.get(); FeedSet.forEach(function(obj, id){....});
         *
         * var feedDefinition = sap.viz.api.manifest.Feed.get('heatMap')[0].feeds[0]; // Get first feed definition for category heatMap
         * feed definition return:
         * {
         *     "aaIndex": Number,
         *     "acceptMND": Number,
         *     "id": String, // DimensionId or measureId
         *     "max": Number,
         *     "min": Number,
         *     "name": String,
         *     "type": String{Dimension|Measure}
         * }
         */
        get : function() {
            // Register all manifests to the repo
            ManifestRegister.registerAll();
            return Feed.getManifest.apply(this, arguments);
        }
    };
    return manifest;
});

define('sap/viz/api/manifest/Module',['sap/viz/modules/manifests/Module', 'sap/viz/base/utils/TypeUtils', 'sap/viz/manifests/util/ManifestRegister', 'exports'], function Setup(Module, TypeUtils, ManifestRegister) {
    
    var manifest = 
  /**
   * sap.viz.api.manifest.Module<br>
   * [NOTE: This API is only applicable to all viz charts, in which the ID starts with â€œviz/â€
   * You should load sap.viz.js library before using the API.]
   * @deprecated
   * @namespace sap.viz.api.manifest.Module
   */
    {

        /**
         * 
         * @function get
         * @memberof sap.viz.api.manifest.Module
         * @static         
         * @param {String} [id]
         *                       Returns module manifest that is associated with the ID. If the ID is not defined, it returns all the module manifests.
         * @param {Boolean} [throwErrorIfNull]
         *                      Only works when an ID argument exists
         * @return {sap.viz.api.manifest.ModuleManifest[]} Module manifests; this is a read-only object.
        *                       A module manifest registered by {@link sap.viz.extapi.manifest.Module.register}.</br>
        * 
        * @example <caption>Sample Code:</caption>
        * var legend = sap.viz.api.manifest.Module.get(legendid); // Get legend module with legend ID; returns an array which contains one module object.
        * var allModules = sap.viz.api.manifest.Module.get(); // Get all modules; returns an array which contains all module objects.
        * 
        * This function replaces API manifest.modules.each which was in the previous API version. Use this function instead.
        * If you used sap.viz.manifest.modules.each(function(obj, id){....}) in previous versions,
        * you can now use the following: var moduleSet =  sap.viz.api.manifest.Module.get(); moduleSet.forEach(function(obj, id){....});
        * 
        * module manifest returned:
        * {
        *     "id": String, // UNIQ_ID
        *     "type": String, // 'CONTAINER|CHART|SUPPLEMENTARY|CONTROLLER',
        *     "name": String,
        *     "abstract": Boolean, // optional
        *     "base": String, // optional
        *     "properties": Object, 
        *     "css": Object, // style sheet
        *     "fn": Function, // module main function
        *     "subModules": Function,
        * }
        */
        get : function() {
            // Register all manifests to repo
            ManifestRegister.registerAll();
            return Module.getManifest.apply(this, arguments);
        }
    };
    return manifest;
});

define('sap/viz/flow/FlowConstant',[], function() {

    var flowConstant = {
        CONST_DEFAULT_TYPE:'DIV',
        CONST_DEFAULT_ELEMENT_PATH:'root.modules.main.modules.plot',
        CONST_SVG_TYPE:'SVG',
        CONST_POSITION_LEFT:'left',
        CONST_POSITION_RIGHT:'right',
        CONST_POSITION_TOP:'top',
        CONST_POSITION_BOTTOM:'bottom',
        CONST_POSITION_CENTER:'center',
        CONST_TITLE_NAME:'sap.viz.modules.title',
        CONST_LEGEND_NAME:'sap.viz.modules.legend.common',
        CONST_LEGENDS_NAME: 'sap.viz.modules.legend',
        CONST_LEGENDS_MODULE_KEY: 'legends',
        CONST_INTERACTION_NAME: 'sap.viz.modules.controller.interaction',
        CONST_TOOLTIP_NAME: 'sap.viz.chart.elements.Tooltip',
        CONST_DATA_FILTER: 'sap.viz.modules.dataFilter'
    };

    return  flowConstant;

});

define('sap/viz/flow/ElementMapping',['sap/viz/flow/FlowConstant'], function(FlowConstant) {

    var elementMapping = {
        'sap.viz.chart.elements.Title' : FlowConstant.CONST_TITLE_NAME,
        'sap.viz.chart.elements.ColorLegend' : FlowConstant.CONST_LEGEND_NAME,
        'sap.viz.chart.elements.BubbleColorLegend' : FlowConstant.CONST_LEGEND_NAME,
        'sap.viz.chart.elements.SizeColorLegend' : FlowConstant.CONST_LEGEND_NAME,
        'sap.viz.chart.elements.MeasureBasedColoringLegend' : FlowConstant.CONST_LEGEND_NAME,
        'sap.viz.viz.modules.legend' : FlowConstant.CONST_LEGENDS_NAME,
        'sap.viz.modules.controller.interaction' : FlowConstant.CONST_INTERACTION_NAME,
        'sap.viz.chart.elements.Tooltip' : FlowConstant.CONST_TOOLTIP_NAME,
        'sap.viz.modules.dataFilter' : FlowConstant.CONST_DATA_FILTER

    };

    return  elementMapping;

});

define('sap/viz/flow/flowTemplate/DivTemplate',[], function() {

    var flowDivTempalte = {
        "id" : "",
        "name" : "",
        "modules" : {
            "root" : {
                "id" : "sap.viz.modules.divcontainer",
                "configure" : {
                    "propertyCategory" : "root",
                },
                "modules" : {
                    "layout" : {
                        "id" : "sap.viz.modules.layout.dock"
                    },
                    "main" : {
                        "id" : "sap.viz.modules.divcontainer",
                        "modules" : {
                            "plot" : {
                                "id" : "",
                                "configure" : {
                                    "propertyCategory" : "",
                                    "properties" : {
                                        "layout" : {
                                            "position" : "center",
                                            "priority" : 5
                                        }
                                    }
                                }
                            }
                        },
                        "configure" : {
                            "properties" : {
                                "layout" : {
                                    "position" : "center",
                                    "priority" : 5
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    return  flowDivTempalte;

});
define('sap/viz/flow/flowTemplate/SVGTemplate',[], function() {
    var SVGFlowTemplate = {
        "id" : "",
        "name" : "",
        "modules" : {
            "root" : {
                "id" : "sap.viz.modules.rootContainer",
                "configure" : {
                    "propertyCategory" : "general"
                },
                "modules" : {
                    "layout" : {
                        "id" : "sap.viz.modules.layout.dock"
                    },
                    "main" : {
                        "id" : "sap.viz.modules.rootContainer",
                        "modules" : {
                            "plot" : {
                                "id" : "",
                                "configure" : {
                                    "propertyCategory" : "",
                                    "properties" : {
                                        "layout" : {
                                            "position" : "center",
                                            "priority" : 5
                                        }
                                    }
                                }
                            }
                        },
                        "configure" : {
                            "properties" : {
                                "layout" : {
                                    "position" : "center",
                                    "priority" : 5
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    return SVGFlowTemplate;
});


define('sap/viz/flow/flowTemplate/FlowTemplateManager',['sap/viz/flow/flowTemplate/DivTemplate', 'sap/viz/flow/flowTemplate/SVGTemplate'], function(divFlowTemplate, SVGTemplate) {

    var flowTemplateManager = function() {
    };

    var typeList = {
        BorderSVGFlow : SVGTemplate,
        BorderDIVFlow : divFlowTemplate,
        SVG : SVGTemplate,
        DIV : divFlowTemplate,
    };
    
    flowTemplateManager.prototype.getTemplateByType = function(type){
        return typeList[type];
    };
    
    return new flowTemplateManager();

});

define('sap/viz/flow/elementTemplate/ElementTemplate',[], function() {
    //div&svg element can share the same elementTemplate
    var ElementTemplate = {
        id : '',
        name : '',
        feeds : [],
        renderto : '',
        configure : {
            propertyCategory : '',
            properties : {
                layout : {
                    position : '',//top,left,bottom,right,center
                    priority: 1
                },
            }
        },
        type : 'CHART',
        description : '',
        fn : null
    };

    return {

        template : ElementTemplate
    };

});

define('sap/viz/flow/elementTemplate/LegendTemplate',[], function() {

    var LegendTemplate = {
        "id" : "sap.viz.modules.legend.common",
        "data" : {
            "aa" : [1]
        },
        "configure" : {
            "propertyCategory" : "legend",
            "properties" : {
                "layout" : {
                    "position" : "",
                    "order": 0,
                    "priority": 1
                },
                "isScrollable" : true,
                "type" : "",
                "drawingEffect" : ""
            }
        }
    };

    var LegendDependency = {
        "targetModule" : "",
        "target" : "colorPalette",
        "sourceModule" : "root.main.plot",
        "source" : "colorPalette"
    };
    
    var LegendTemplateInteraction = {
        "id" : "sap.viz.modules.legend",
        "configure" : {
            "propertyCategory" : "legendGroup",
            "properties" : {
                "layout" : {
                    "position" : "",
                    "priority" : 1,
                    "alignment" : "right"
                }
            }
        },
        "modules" : {
            "layout" : {
                "id" : "sap.viz.modules.layout.stack"
            },
            "legend" : {
                "id" : "sap.viz.modules.legend.common",
                "configure" : {
                    "propertyCategory" : "legend",
                    "properties" : {
                        "layout" : {
                            "order" : 0
                        }
                    }
                },
                "data" : {
                    "aa" : [1]
                }
            }
        }
    };
    var LegendDependencyInteraction = {
        "targetModule" : "root.legends.legend",
        "target" : "colorPalette",
        "sourceModule" : "root.main.plot",
        "source" : "colorPalette"
    };
    return {
        template : LegendTemplate,
        dependency : LegendDependency,
        templateInteraction: LegendTemplateInteraction,
        dependencyInteraction: LegendDependencyInteraction
    };

});

define('sap/viz/flow/flowModule/DataFilter',['jquery',
        'sap/viz/base/utils/oo',
        'sap/viz/elements/common/BaseGraphic'], function($, oo, BaseGraphic) {
    var SHOW_DATA_FILTER = "showDataFilter.DataFilter",
        HIDE_DATA_FILTER = "hideDataFilter.DataFilter";

    var DataFilter = function (manifest, ctx) {
        this._dispatch = d3.dispatch('initialized', 'startToInit', 'selectData', 'showDataFilter', 'hideDataFilter');
        this._selectedObjs = [];
        // for Lumira buttons container
          this._extensionDiv = null;
          // properties, contains preRender and postRender
          this._properties = {};
          this._container = {};
    };

    oo.extend(DataFilter, BaseGraphic);

    DataFilter.prototype.properties = function(_) {
        if (!arguments.length) {
            return this._properties;
        }
        $.extend(true, this._properties, _);
        return this._properties;
    };

    DataFilter.prototype.dispatch = function(_){
        if(!arguments.length){
            return this._dispatch;
        }
        this._dispatch = _;
        return this;
    };

    var triggerCallback = function(callback, vis, eventData) {
        if (callback) {
            try {
                callback(vis, eventData);
            } catch(e) {
                Logger.error("ERROR in DataFilter callback");
            }
        }
    };

    DataFilter.prototype.showDataFilter = function(event) {
        this._removeDataFilterDiv();
        this._extensionDiv = $('<div></div>').css({
            "width": 160,
            "height": 30,
            "right": 0,
            "position": "absolute"
        });
        this._extensionDiv.attr("id", "datafilter");
        var ctx = event.dataCtx;
        this._dispatch.selectData({
            name:"selectData.chartview",
            data: ctx
        });  
        var options = event.options;
        if (options && options.position) {
            this._extensionDiv.css({
                "left" : options.position.x ? options.position.x : 0,
                "top" : options.position.y ? options.position.y : 0
            })
        }
        triggerCallback(this._properties.preRender, d3.select(this._extensionDiv[0]), ctx);
        triggerCallback(this._properties.postRender, d3.select(this._extensionDiv[0]), ctx);
        this._container.append(this._extensionDiv);
    };

    DataFilter.prototype.hideDataFilter = function(event) {
        this._removeDataFilterDiv();
    };

    DataFilter.prototype._removeDataFilterDiv = function(event) {
        if (this._extensionDiv) {
            this._extensionDiv.remove();
        }
    };

    DataFilter.prototype.destory = function(){
          this._extensionDiv = null;
          this._properties = {};
          this._container = {};
    };

    DataFilter.prototype.render = function(selection){
        this._container = $(selection.node()).closest('svg').parent();
        this._removeDataFilterDiv();
        this._dispatch.initialized();
    };

    return DataFilter;
});
define('sap/viz/flow/elementTemplate/DataFilterTemplate',['sap/viz/flow/flowModule/DataFilter'], function(DataFilter) {

    var DataFilterTemplate = {
        id : 'sap.viz.modules.dataFilter',
        properties: {
            'visible': {
                'name': 'visible',
                'supportedValueType': 'Boolean',
                'defaultValue': false,
                'description': 'Set the visibility of the main title'
            },
            'preRender': {
                'name': 'preRender',
                'supportedValueType': 'Function',
                'defaultValue': null
            },
            'postRender': {
                'name': 'postRender',
                'supportedValueType': 'Function',
                'defaultValue': null
            }
        },
        configure : {
            propertyCategory : 'tooltip',
            "properties" : {
                "preRender" : null,
                "postRender" : null,
                "visible": true
            }
        },
        fn : DataFilter
    };

    var DataFilterDependency = [{
        targetModule : 'root.dataFilter',
        listener : 'showDataFilter',
        sourceModule : 'root.main.plot',
        type : 'showDataFilter.DataFilter'
    }, {
        targetModule : 'root.dataFilter',
        listener : 'hideDataFilter',
        sourceModule : 'root.main.plot',
        type : 'hideDataFilter.DataFilter'
    }];

    return {
        template : DataFilterTemplate,
        eventDependency: DataFilterDependency
    };

});

define('sap/viz/flow/Flow',['sap/viz/flow/FlowConstant', 
        'sap/viz/flow/ElementMapping', 
        'sap/viz/flow/flowTemplate/FlowTemplateManager', 
        'sap/viz/base/utils/ObjectUtils', 
        'sap/viz/base/utils/FunctionUtils', 
        'sap/viz/lang/langManager', 
        'sap/viz/flow/elementTemplate/ElementTemplate', 
        'sap/viz/flow/elementTemplate/LegendTemplate',
        'sap/viz/flow/elementTemplate/DataFilterTemplate',  
        'sap/viz/base/utils/TypeUtils'], 
        function(FlowConstant, ElementMapping, FlowTemplateManager, ObjectUtils, Logger, langManager, ElementTemplate, LegendTemplate, DataFilterTemplate, TypeUtils) {
    /**
     * @constructer
     * @param {Object} options
     * {
     * 	id: flow id,
     * 	name: flow name,
     *  type: flow type, currently we have: Single DIV Flow, Border SVG Flow, Border DIV Flow.
     *  dataModel: dataModel supported for the flow, currently we have: sap.viz.api.data.CrosstableDatasetâ€ , â€œsap.viz.api.data.FlatTableDataset". Default is none which means no specific data model defined.
     * }
     * @param {String}flowType Flow type, like div,svg...
     */
    var flow = function(options, flowType) {
        this.elements = {};
        this._type = flowType;
        this.flowManifest = ObjectUtils.clone(FlowTemplateManager.getTemplateByType(flowType));
        this.flowManifest.acceptPartialValidation = true;
        if (this.flowManifest !== null && this.flowManifest !== undefined) {
            for (var i in options) {
                this.flowManifest[i] = options[i];
            }
        } else {
            Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
        }

    };

    var setModuleByPlace = function(Params) {
        var ModuleId = ElementMapping[Params.id];
        if (!ModuleId) {
            ModuleId = Params.id;
        }
        var newModule;
        var newDependency;
        var legacyDataAdapter = false;
        if (ModuleId === FlowConstant.CONST_LEGEND_NAME) {
            newModule = ObjectUtils.clone(LegendTemplate.template);
            newDependency = ObjectUtils.clone(LegendTemplate.dependency);
            var type = Params.id.split('.').pop();
            newModule.configure.properties.type = type;
            legacyDataAdapter = true;
            if(parseInt(Params.aaIndex)>0){
                newModule.data.aa = [Params.aaIndex];
            }
        } else if (ModuleId === FlowConstant.CONST_LEGENDS_NAME) {
            newModule = ObjectUtils.clone(LegendTemplate.templateInteraction);
            newDependency = ObjectUtils.clone(LegendTemplate.dependencyInteraction);
            var type = Params.id.split('.').pop();
            newModule.configure.properties.type = type;
            legacyDataAdapter = true;
            if(parseInt(Params.aaIndex)>0){
                newModule.modules.legend.data.aa = Params.aaIndex;
            }
        } else if (ModuleId === FlowConstant.CONST_INTERACTION_NAME) {
            legacyDataAdapter = true;
            newDependency = {
                targetModule : 'root.interaction',
                listener : 'initialize',
                sourceModule : 'root.main.plot',
                type : 'initialized.interaction'
            };
            newModule = ObjectUtils.clone(ElementTemplate.template);
        } else if (ModuleId === FlowConstant.CONST_DATA_FILTER) {
            newModule = ObjectUtils.clone(DataFilterTemplate.template);
            newDependency = ObjectUtils.clone(DataFilterTemplate.eventDependency);
        } else {
            newModule = ObjectUtils.clone(ElementTemplate.template);
        };

        if (newModule.configure.properties.layout) {
            newModule.configure.properties.layout.position = Params.place;
        }
        newModule.id = ModuleId;
        newModule.configure.propertyCategory = Params.propertyCategory;

        return {
            'module' : newModule,
            'dependency' : newDependency,
            'legacyDataAdapter': legacyDataAdapter
        };
    };

    var defaultPath = FlowConstant.CONST_DEFAULT_ELEMENT_PATH;

    /**
     *
     * sample parameters:
     *
     * element: plotElement,
     * propertyCategory: "plot",
     * place: "center" //Other supported place top, bottom, left, right
     * });
     */

    flow.prototype.addElement = function(parameterObject) {
        if (parameterObject != null) {
            var element = parameterObject.element;
            var propertyCategory = parameterObject.propertyCategory;
            var place = parameterObject.place;
            if (!element.elmManifest.id) {
                //element must have an id.
                element.elmManifest.id = this.flowManifest.id + ".element";
            };
            if (!element.elmManifest.name) {
                //element should have a name.
                element.elmManifest.name = this.flowManifest.name + ".element";
            };

            if (this._type.indexOf(FlowConstant.CONST_DEFAULT_TYPE) >= 0) {
                element.elmManifest.renderto = FlowConstant.CONST_DEFAULT_TYPE;
            } else if (this._type.indexOf(FlowConstant.CONST_SVG_TYPE) >= 0) {
                element.elmManifest.renderto = FlowConstant.CONST_SVG_TYPE;
            } else {
                Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
            };

            if (place !== undefined || element.elmManifest.id === FlowConstant.CONST_INTERACTION_NAME
            || element.elmManifest.id === FlowConstant.CONST_DATA_FILTER) {//position to set center,right,left,top,bottom
                var elemModule = setModuleByPlace({
                    place : place,
                    id : element.elmManifest.id,
                    propertyCategory : propertyCategory,
                    aaIndex : element.elmManifest.dimensionIndex
                });
                if (place !== FlowConstant.CONST_POSITION_CENTER) {
                    var idName = element.elmManifest.id.split('.').pop();
                    idArray = null;
                    if (element.elmManifest.id === FlowConstant.CONST_LEGENDS_NAME) {
                        this.flowManifest.modules.root.modules[FlowConstant.CONST_LEGENDS_MODULE_KEY] = elemModule.module;
                    } else {
                        this.flowManifest.modules.root.modules[idName] = elemModule.module;
                    }
                    if (elemModule.dependency && !elemModule.dependency.targetModule) {
                        //Set target module to itself.
                        elemModule.dependency.targetModule = 'root.' + idName;
                    }

                } else {
                    //For center case, we use plot as it's default name. So that we will only have one center module.
                    this.flowManifest.modules.root.modules.main.modules.plot = elemModule.module;
                    //For center module, set it's priority to 5;
                    element.elmManifest.configure.properties.layout.priority = 5;
                };
                this.elements[element.elmManifest.id] = element.elmManifest;

                if (elemModule.module.id === FlowConstant.CONST_DATA_FILTER) {
                    this.elements[element.elmManifest.id] = elemModule.module;
                }
                if (elemModule.dependency) {
                    if (!this.flowManifest.dependencies) {
                        this.flowManifest.dependencies = {};
                    };
                    if (elemModule.module.id === FlowConstant.CONST_INTERACTION_NAME) {
                        if ((!this.flowManifest.dependencies.events) || (!this.flowManifest.dependencies.events.push)) {
                            this.flowManifest.dependencies.events = [];
                        }
                        this.flowManifest.dependencies.events.push(elemModule.dependency);
                    } else if (elemModule.module.id === FlowConstant.CONST_DATA_FILTER) {
                        if ((!this.flowManifest.dependencies.events) || (!this.flowManifest.dependencies.events.push)) {
                            this.flowManifest.dependencies.events = [];
                        }
                        var i;
                        for (i = 0; i < elemModule.dependency.length; i++) {
                            this.flowManifest.dependencies.events.push(elemModule.dependency[i]);
                        } 
                    } else {
                        if ((!this.flowManifest.dependencies.attributes) || (!this.flowManifest.dependencies.attributes.push)) {
                            this.flowManifest.dependencies.attributes = [];
                        }
                        this.flowManifest.dependencies.attributes.push(elemModule.dependency);
                    }
                };
                // if (element.elmDependency && element.elmDependency.length) {
                //     if (!this.flowManifest.dependencies) {
                //         this.flowManifest.dependencies = {};
                //     };
                //     if ((!this.flowManifest.dependencies.events) || (!this.flowManifest.dependencies.events.push)) {
                //         this.flowManifest.dependencies.events = [];
                //     }
                //     var i;
                //     for (i = 0; i < element.elmDependency.length; i++) {
                //         this.flowManifest.dependencies.events.push(element.elmDependency[i]);
                //     } 
                // }
                if(!this.flowManifest.legacyDataAdapter && elemModule.legacyDataAdapter!== undefined){
                    this.flowManifest.legacyDataAdapter = elemModule.legacyDataAdapter;
                };

            } else {
                //Use default flow path to add this module. Currently we use root.modules.main.modules.plot as it's default path.
                var path = defaultPath;
                this.elements[defaultPath] = element.elmManifest;
                var flowPath = path.split('.');
                var placeHolder = this.flowManifest.modules;
                for (var i = 0, len = flowPath.length; i < len; i++) {
                    placeHolder = placeHolder[flowPath[i]];
                }
                placeHolder.id = element.elmManifest.id;
                if (element.elmManifest.configure) {
                    placeHolder.configure = ObjectUtils.extend(true, {}, placeHolder.configure, element.elmManifest.configure);

                    if (propertyCategory != null) {
                        placeHolder.configure['propertyCategory'] = propertyCategory;
                    }
                }
                placeHolder.configure.properties.layout.position = 'center';
            }
        }
    };

    return flow;
});

define('sap/viz/elements/common/ExtensionGraphic',[
    'sap/viz/base/utils/oo',
    'sap/viz/elements/common/BaseGraphic',
    'sap/viz/modules/GlobalConstants'
], function Setup(oo, BaseGraphic, GlobalConstants) {
    var ExtensionGraphic = function(manifest, ctx) {
        ExtensionGraphic.superclass.constructor.apply(this, arguments);
        this.init();
    };

    oo.extend(ExtensionGraphic, BaseGraphic);

    // protected
    ExtensionGraphic.prototype.init = function() {
        //to be overridden in subclass
    };

    ExtensionGraphic.prototype.feeds = function() {
        return this._manifest.feeds;
    };

    ExtensionGraphic.prototype.dispatch = function(_){
        if(!arguments.length){
            return this._eDispatch;
        }
        this._eDispatch = _;
        return this;
    };

    ExtensionGraphic.prototype.colorPalette = function(_) {
        if (!arguments.length) {
            if(!!this._colorPalette) {
                return this._colorPalette;
            } else if (this.properties().colorPalette !== GlobalConstants.COLOR.SAPColorSingleAxis) {
                return this.properties().colorPalette;
            } else {
                return GlobalConstants.COLOR.SAPColorSingleAxis
            }
        }
        this._colorPalette = _;
        return this;
    };

    return ExtensionGraphic;

    });

define('sap/viz/flow/Element',[
    'sap/viz/flow/elementTemplate/ElementTemplate',
    'sap/viz/base/utils/ObjectUtils',
    'sap/viz/base/utils/TypeUtils',
    'sap/viz/base/utils/FunctionUtils',
    'sap/viz/lang/langManager',
    'sap/viz/elements/common/ExtensionGraphic',
    'sap/viz/modules/GlobalConstants'
  ],
  function(ElementTemplate, ObjectUtils, TypeUtils, Logger, langManager, ExtensionGraphic, Constants) {
    /**
     * @param {Object} options
     * {
     *  id: element id,
     *  name: element name,
     *  fn: element function base object.//See more on basic module spec, fn needs to implement each function of the basic module.
     * }
     */
    var Element = function(options) {
      this.elmManifest = ObjectUtils.clone(ElementTemplate.template);
      this.elmDependency = ObjectUtils.clone(ElementTemplate.dependencies);
      if (this.elmManifest !== null && this.elmManifest !== undefined) {
        this.elmManifest.feeds = [];
        this.elmManifest.properties = {};
        for (var i in options) {
          if (i !== 'type') { //type in manifest is not same with this, we don't need to change the value of this key.
            this.elmManifest[i] = options[i];
          }

        };
      } else {
        Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
      }

    };


    var baseElements = {
      'sap.viz.elements.common.BaseGraphic': ExtensionGraphic
    };

    Element.prototype.addFeed = function(feed) {
      if (TypeUtils.isArray(feed)) {
        var len = feed.length;
        for (var i = 0; i < len; i++) {
          this.elmManifest.feeds.push(feed[i]);
        }
      } else {
        this.elmManifest.feeds.push(feed);
      }
    };

    // Element.prototype.connectTo = function(target, eventName){
    //     if (!this.elmDependency) {
    //         this.elmDependency = [];
    //     }
    //     var sourceModuleName = target.elmManifest.id.split(".").pop();
    //     if (sourceModuleName === "plot") {
    //         sourceModuleName = "main." + sourceModuleName;
    //     }
    //     if (target && target.elmManifest && target.elmManifest.id){
    //         this.elmDependency.push({
    //             targetModule : "root." + this.elmManifest.id.split(".").pop(),
    //             listener : eventName,
    //             sourceModule : "root." + sourceModuleName,
    //             type : eventName + "." + this.elmManifest.id.split(".").pop()
    //         });
    //     } 
    // };

    var checkObjectValid = function(Obj, key) {
      if (key != undefined) {
        var keyLength = key.length;
        for (var i = 0; i < keyLength; i++) {
          if (Obj[key[i]] === undefined) {
            return false;
          }
        }
      }
      return true;
    };

  var validPropSettingsV2 = [
    "defaultValue",
    "readonly",
    "serializable"
  ];
  var checkObjectValidV2 = function(propertyObject) {
    for (var p in propertyObject) {
      if (propertyObject.hasOwnProperty(p)) {
        var propertyDef = propertyObject[p];
        var valid = false;
        validPropSettingsV2.forEach(function(item) {
          if (propertyDef[item] !== undefined) {
            valid = true;
          }
        });
        if (!valid) {
          return false;
        }
      }
    }
    return true;
  };
   /*
    * Backport property definition from v2 to v1
    */
  var backportProperty = function(name, prop) {
    var nameArray = name.split('.');
    var result = {}, current = result;
    for( var len = nameArray.length, i = 0; i < len; i++) {
      if(i == len-1) {
        current.name = nameArray[i];
        current.type = prop.supportedValueType || '';
        current.supportedValues = prop.supportedValues || '';
        current.defaultValue = prop.defaultValue;
      } else {
        current.name = nameArray[i];
        current.type = 'Object';
        var child = {};
        current.supportedValues = {};
        current.supportedValues[nameArray[i+1]] = child;
        current = child;
      }
    }
    return result;
  }
    /*
     * Properties sample:
     * {
     * 'properties' : {
     * 'tooltip' : {
     *   'name' : 'tooltip',
     *   'supportedValueType' : 'Object',
     *   'supportedValues' : {
     *   'enabled' : {
     *     'name' : 'enabled',
     *     'supportedValueType' : 'Boolean',
     *     'defaultValue' : true,
     *     'description' : 'Set enabled/disabled tooltip.'
     *     }
     *    }
     *   }
     *  }
     * }
     */
    var propertyObjectKey = ['name', 'type']; //must have properties.
    var createPropertyObject = function(propertyObject) {
      //deep copy the propertyObject.
      var inputObj = ObjectUtils.clone(propertyObject);
      var returnObj = {};
      //parse input to output;
      returnObj.name = inputObj.name;
      returnObj.supportedValueType = inputObj.type;
      returnObj.supportedValues = inputObj.supportedValues;
      //default value won't work for "Object" type properties
      if(returnObj.supportedValueType !== 'Object') {
        returnObj.defaultValue = inputObj.defaultValue;
      }
      //Add default value for colorPalette
      if(returnObj.name === 'colorPalette' && !returnObj.defaultValue) {
        returnObj.defaultValue = Constants.COLOR.SAPColorSingleAxis;
      }
      return returnObj;
    };

    var extendImplement = function(type, extendJson) {
      if (baseElements[type]) {
        var superMethod = baseElements[type].prototype;
        var implementFn = function() {
          superMethod.constructor.apply(this, arguments);
        };

        for (var i in superMethod) {
          implementFn.prototype[i] = superMethod[i];
        };
        //change to BaseGraphic
        for (var i in extendJson) {
          implementFn.prototype[i] = extendJson[i];
        };
        return implementFn;
      } else {
        Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
      }
    };

    /**
     *
     * @param {String} path Base element path.
     * @param {Object} extendJson Override functions object.
     */
    Element.prototype.implement = function(type, extendJson) {
      var fn = extendImplement(type, extendJson);
      if (this.elmManifest != null) {
        this.elmManifest.fn = fn;
      }
    };

    /**
     * @param {Object}propertyObject
     * {
     *   name:propName,
     *   type:String, property type, can be: Obejct, String, Number, ...
     *   supportedValues:
     * }
     *
     * {
     *
     * 'properties' : {
     * 'tooltip' : {
     *   'name' : 'tooltip',
     *   'supportedValueType' : 'Object',
     *   'supportedValues' : {
     *   'enabled' : {
     *     'name' : 'enabled',
     *     'supportedValueType' : 'Boolean',
     *     'defaultValue' : true,
     *     'description' : 'Set enabled/disabled tooltip.'
     *     }
     *    }
     *   }
     *  }
     * }
     */
  Element.prototype.addProperty = function(propertyObject) {
    if (checkObjectValid(propertyObject, propertyObjectKey)) {
      this.elmManifest.properties[propertyObject.name] = createPropertyObject(propertyObject);
    } else if (checkObjectValidV2(propertyObject)) {
      var propertiesToAdd = {};
      for (var p in propertyObject) {
        if (propertyObject.hasOwnProperty(p)) {
          var backported = backportProperty(p, propertyObject[p]);
          this.addProperty(backported);
        }
      }
    } else {
      Logger.error(langManager.getLogMessage('IDS_ERROR_CAN_NOT_FIND_CATEGORY'));
    }
  };

    return Element;
  });
define('sap/viz/flow/FlowManager',['sap/viz/flow/FlowConstant','sap/viz/flow/Flow', 'sap/viz/flow/Element', 'sap/viz/modules/manifests/Module', 'sap/viz/manifests/Viz'], function(FlowConstant,Flow, Element, Module, Viz) {

    var FlowManager = function() {

    };
    var defaultType = FlowConstant.CONST_DEFAULT_TYPE;
    FlowManager.prototype.createElement = function(options) {
        return new Element(options);
    };

    FlowManager.prototype.createFlow = function(options) {
        var flowType = (options && options.type) ? options.type : defaultType;
        return new Flow(options, flowType);
    };

    FlowManager.prototype.register = function(flow) {
        for (var i in flow.elements) {
	    //if module is existed, we don't register it.
            if(!Module.get(flow.elements[i].id)){
                Module.register(flow.elements[i]);
            }else{
                //TODO: Add error handlering.
	    }
             
        };
        if(!Viz.get(flow.flowManifest.id)){
            Viz.register(flow.flowManifest);
        }
        
    };
    

    FlowManager.prototype.unregister = function(flowid) {
        Viz.unregister(flowid);
    }; 

    

    return new FlowManager();
});

define('sap/viz/extapi/Flow',['sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'sap/viz/lang/langManager', 'sap/viz/flow/FlowManager', 'exports'], function Setup(TypeUtils, Logger, langManager, FlowManager) {

    /**
     * sap.viz.extapi.Flow     
     * @namespace sap.viz.extapi.Flow
     */
    var FlowApi = {};

    /**
     * Create visualization flow
     * @function createFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {Object}flowParams Parameters for the visualization flow.<br>
     * e.g.<br>
     * <pre>
     *      {
     *          'id':"flowId", // The flow ID; you can use this ID to create a visualization.
     *          'name': "flowName", // The flow name
     *          'type': flow type, // We currently have: "DIV", "BorderDIVFlow", "BorderSVGFlow"
     *          'dataModel': dataModel, // The visualization will use the dataModel. CVOM currently supports: "sap.viz.api.data.CrosstableDatasetâ€ and â€œsap.viz.api.data.FlatTableDataset". The default is none which means there is no specific data model defined.
     *      }
     * </pre>
     * @returns {Object}
     *                 Return a flow instance<br><br>
     *              With this instance, you can add an element into the flow by calling its method :addElement.
     * <br>
     *<div class="name" id="flowInstance.addElement" style="margin:20px,font-size:12px;color:black;font-weight:bold">
     *     <a name="createFlow"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">flowInstance.addElement</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">elementParam:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Element and its properties.<div>e.g.</div></div>
     * <pre>
     *          {
     *              element:elementInstance, // The element instance which is created by sap.viz.extapi.Flow.createElement
     *              propertyCategory: property category, // You can use this category to set the property for the element in createViz.
     *              place:  position for the element. // We currently support five positions: "center", "top", "right", "bottom", "left".
     *          }
     * </pre>
     * @example <caption>How to add the element into the flow:</caption>
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     * });
     *  var flow = sap.viz.extapi.Flow.createFlow({
     *     id:flowId,
     *     name:flowName
     * });
     * //add element1 into flow.
     *  flow.addElement({
     *     element:element1
     *     propertyCategory: "plot",
     *     place: "center"
     * });
     */

    FlowApi.createFlow = function(options) {
        return FlowManager.createFlow(options);
    };

    /**
     * Create visualization element
     * @function createElement
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {Object}elmParams Parameters for the visualization element:<br>
     * e.g.<br>
     * <pre>
     *      {
     *          'id':"elementId", // The element ID
     *          'name':"elementName", // The element name
                'dimensionIndex': dimensionIndex, // (Optional) The index of the dimension which is required by your element. It is currently used by the CVOM legend to set the correct dimensions to the legend element only. 
     *      }
     * </pre>
     * CVOM enables you to reuse internal elements to create flow
     * @returns {Object}
     *                 Return an element instance
     *
     * <br>With this instance you can add its implementation by using the method: implement();
     * <br>With this instance you can add its property by using the method: addProperty();
     * <br>With this instance you can add its feed definition by using the method: addFeed();
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     *<div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.implement</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;">
     *         <li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">baseElementPath:</span><span style="margin-left:5px;">String</span></li>
     *              <div>Base element path. We currently only support:'sap.viz.elements.common.BaseGraphic'.</div>
     *         <br>
     *         <li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">implementFunction:</span><span style="margin-left:5px;">Object</span></li>
     *              <div>Element implementation class</div>
     * </div>
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.addProperty</div>
     * <div style="color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">propertyObject:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Properties for the element:</div>
     * <pre style="margin-left:50px;">
     * {
     *     name:propName, // (Required) The property name
     *     type:String, // (Required) The property type
     *     supportedValues:[value1, value2] // (Optional) The supportedValues array.
     * }
     * </pre>
     * <br>
     *<div class="name" id="implement" style="margin:20px,font-size:12px;color:black;font-weight:bold"><a name="implement"></a><br>method:</div>
     * <div style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:gray;padding-left:10px;">elementInstance.addFeed</div>
     * <div style="margin:20px,font-size:12px;color:black;font-weight:bold"><br>Parameters:<br></div>
     * <div style="padding-left:25px;"><li><span style="font-family:''Open Sans' sans-serif';font-weight:bold;font-size:12px;color:#7f7f7f;">feedObject:</span><span style="margin-left:5px;">Object</span></li></div>
     * <div style="margin-left:25px;">Feed for the element</div>
     * <br>
     * <br>
     *
     * @example <caption>How to add the implementation class into the element:</caption>
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     * });
     * 
     *  var DimfeedingInfo = [{
     * 'id' : 'regionColor',
     * 'name' : 'IDS_REGIONCOLOR',
     *       'type' : 'Dimension', // Cannot access constants.Type.Dimension,
     *       'min' : 0,
     *       'max' : 2,
     *       'aaIndex' : 2,
     *       'acceptMND' : 1
     *   }, {
     *       'id' : 'axisLabels',
     *       'name' : 'IDS_AXISLABELS',
     *       'type' : 'Dimension',
     *       'min' : 1,
     *       'max' : 2,
     *       'acceptMND' : 0,
     *       'aaIndex' : 1
     *   }];
     *   var MeasureFeedingInfo = {
     *       'id' : 'primaryValues',
     *       'name' : 'IDS_PRIMARYVALUES',
     *       'type' : 'Measure',
     *       'min' : 1,
     *      'max' : Number.POSITIVE_INFINITY,
     *       'mgIndex' : 1
     *  };
     * 
     * element1.addFeed(DimfeedingInfo);// addFeed by using the array of feeding definition
     * element1.addFeed(MeasureFeedingInfo);// addFeed by the single feeding definition
     * 
     * var chartFn = {
     *      render : function(){
     *     // Enter your rendering work here:
     *      }
     * };
     * // Add the visualization implement functions into element1.
     *  element1.implement('sap.viz.elements.common.BaseGraphic',chartFn);
     */
    FlowApi.createElement = function(options) {
        return FlowManager.createElement(options);
    };

    /**
     * Register flow into CVOM. <br>
     * After registering, you can use sap.viz.api.core.createViz to create the registered visualization by using the flow's ID as the visualization ID. 
     * @function registerFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {flowInstance}flowInstance Flow Instance
     * @example <caption>How to register and create the visualization flow:</caption>
     *  // Create Flow steps:
     *  var element1 = sap.viz.extapi.Flow.createElement({
     *     id:elementId,
     *  });
     *  var chartFn = {
     *      render : function(){
     *     // Enter your rendering work here:
     *      }
     *  };
     *  // Add visualization implementation functions into element1.
     *  element1.implement('sap.viz.elements.common.BaseGraphic',chartFn);
     *
     *  // Create visualization flow
     * var chartFlow = sap.viz.extapi.Flow.createFlow({
     *     id:flowId,
     *  });
     *
     *  // Add element into flow
     *  chartFlow.addElement({
     *     element:element1
     *  });
     *
     *  // Register flow into CVOM.
     *  sap.viz.extapi.Flow.registerFlow(flow);
     *
     *  // Create visualization flow:
     *  var chartInstance = sap.viz.api.core.createViz({
     *    type : flowId,
     *     data : {}// Visualization dataset
     *     container :{} // Visualization plotting jquery HTMLDivElement
     *     options : {}// Visualization options
     * });
     */
    FlowApi.registerFlow = function(flow) {
        FlowManager.register(flow);
    };

    /**
     * Unregister flow from CVOM
     * @function unregisterFlow
     * @memberof sap.viz.extapi.Flow
     * @static
     * @param {String}flowId The flow ID you want to unregister
     *
     */
    FlowApi.unregisterFlow = function(flowId) {
        FlowManager.unregister(flowId);
    };

    return FlowApi;

    /**
     * This class is a basic graphic reference for you to extend and implement the element.
     * <br>You cannot get this class through global namespace.<br>
     * You can use basic graphic path:<br> <div style="font-weight:bold;">'sap.viz.elements.common.BaseGraphic'</div><br>
     * As base class to create element implementation function.<br>
     * You can refer to {sap.viz.extapi.Flow#createElement} for more information.
     * @example <caption>How to use base graphic</caption>
     * var elementInstance = sap.viz.extapi.Flow.createElement({id:'sampleChart'});
     * elementInstance.implement('sap.viz.elements.common.BaseGraphic',{<br>    render:<bar>function(){},<br>    size:<bar>function(){},<br>    other function definitions...});
     *
     * @Class sap.viz.elements.common.BaseGraphic
     * @ignore
     */

    /**
     * Function for visualization to get/set visualization size.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this method by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *     {
     *         size:function(parameters){Implementation code}
     *     });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.size
     * @param {object}sizeObject size object with width&height.
     * <br>e.g.<br>
     * <pre>
     * {
     *     width:300,
     *     height:400
     * }
     * </pre>
     * @return {object}sizeObject size of the set width&height
     * <br>e.g.<br>
     * <pre>
     * {
     *     width:300,
     *     height:400
     * }
     * </pre>
     */
    /**
     * Rendering function for element to create visualization.<br>
     * <br><div style="font-weight:bold">You must override this function to do your visualization rendering.<br>
     * @method sap.viz.elements.common.BaseGraphic.render
     * @param {object}selection The d3 selection object. It's the dom's div/svg selection for you to render the visualization.
     * @example <caption>How to override rendering function</caption>
     *
     * // Create element
     * var elementInstance = sap.viz.extapi.Flow.createElement({id:'sampleChart'});
     *
     * // Create function object
     * var renderFn = {};
     * renderFunctionObject.render = function(parameters){Implementation code};
     *
     * // Add function object with base class into element
     * elementInstance.implement('sap.viz.elements.common.BaseGraphic',renderFn);
     */
    /**
     * Function for visualization to get/set dom width.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this method by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          width:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.width
     * @param {Number|undefined}width Width of rendering area.
     *
     * @return {Number}height Height of rendering area.
     */
    /**
     * Function for visualization to get/set dom height.<br><br>
     * You can resize the visualization by overriding this method.<br><br>
     * You can override this method by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          height:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.height
     * @param {Number|undefined}height Height of rendering area.
     *
     * @return {Number}height Height of rendering area.
     */
    /**
     * Function for visualization to get dataset.<br><br>
     * You can change the dataset by overriding this method.<br><br>
     *
     * You can override this by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          data:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.data
     * @param {Object|undefined}data Dataset
     * <br>e.g.<br>
     * <pre>
     * {
     *    dataset: Dataset,// Dataset which is set in the createViz's data option
     *    feeding: Feeding// Feeding which is set in the createViz's feeding option
     * }
     * </pre>
     * For more dataset and feeding information, please refer to {@link sap.viz.api.core#createViz}.
     *
     * @return{Object}data Dataset
     */

    /**
     * Function for the visualization to destroy itself.<br><br>
     * You can change the destroy logic by overriding this method.<br><br>
     * You can override this method by using:<br>
     * <pre> elementInstance.implement('sap.viz.elements.common.BaseGraphic',
     *      {
     *          destroy:function(parameters){Implementation code}
     *      });
     * </pre>
     * @method sap.viz.elements.common.BaseGraphic.destroy
     */

});

define('sap/viz/util/ContextUtils',['sap/viz/api/data/CrosstableDataset', 'sap/viz/api/data/FlatTableDataset',
        'sap/viz/base/utils/ObjectUtils'], 
    function(CrosstableDataset, FlatTableDataset, ObjectUtils){
        function flat(dataSet, binding) {
            var measureTypeName = "Measure",
                dimesionTypeName = "Dimension",
                sematicTypeName = "semanticType";

            var fields,
                ctx = [];

            var hashFlt;

            dataSet = dataSet.data();
            fields = dataSet.metadata.fields;

            if(binding && binding.length>0){
                hashFlt = {};
                binding.forEach(function(e){
                    e.source.forEach(function(s){
                        if( typeof s == 'string'){
                            hashFlt[s] = true;
                        }                        
                    });
                });
            }
                
            dataSet.data.forEach(function(row, idx_r){
                var ctx_row = [], 
                    dims = {};

                row.forEach(function(dp, idx_f){
                    var rawCtx = {};
                    if(!hashFlt || hashFlt[fields[idx_f].id]){
                        if(fields[idx_f][sematicTypeName] == dimesionTypeName){
                            dims[fields[idx_f].id] = dp;
                        }else if(fields[idx_f][sematicTypeName] == measureTypeName){
                            rawCtx[fields[idx_f].id] = dp;
                            rawCtx._tmpDims = dims;
                            ctx_row.push(rawCtx);
                        }
                    }
                });
                ctx.push(
                    ctx_row.map(function(rawCtx){
                        var dims = rawCtx._tmpDims;
                        delete rawCtx._tmpDims;
                        return ObjectUtils.extend(rawCtx, dims);
                    })
                );                
            });

            return ctx;
        }

        function cross(dataSet, binding) {
            var ctx = [], mgLen,
                i, j, k, l, measureGroup, measures, measureVals, measuresLen, a1Vals, 
                ctx_mg, ctx_ms, ctx_a1, ctx_a0;

            var hashFlt;
            if(binding && binding.length>0){
                hashFlt = {};
                binding.forEach(function(e){
                    e.source.forEach(function(s){
                        hashFlt[s.type + s.index] = true;
                    });
                });
            }

            dataSet = dataSet.data();
            mgLen = dataSet.measureValuesGroup.length;

            for( i = 0; i < mgLen; i++){
                ctx_mg = [];
                measureGroup = dataSet.measureValuesGroup[i];
                if(hashFlt && !hashFlt['measureValuesGroup'+ (i + 1)]){
                    /**only care measuregroup binding here. since binding subset of analysis axis doesn't make sense*/
                    continue;
                }
                measures = measureGroup.data;
                measuresLen = measureGroup.data.length;
                for( j = 0; j < measuresLen; j++){
                    ctx_ms = [];
                    measureVals = measures[j].values;
                    for( k = 0; k < measureVals.length; k++){                        
                        a1Vals = measureVals[k];
                        ctx_a1 = [];
                        for( l = 0; l < a1Vals.length; l++){                            
                            ctx_a1.push({   
                                type: "Measure",
                                path: {
                                    mg: i,
                                    mi: j,
                                    dii_a1: l,
                                    dii_a2: k
                                }
                            });
                        }                        
                        ctx_ms.push(ctx_a1);
                    }
                    ctx_mg.push(ctx_ms);
                }
                ctx.push(ctx_mg);
            }
            return ctx;
        }

        return{
            flatTableContext: flat,
            crossTableContext: cross
        };
    }
);
define('sap/viz/extapi/utils/Data',['sap/viz/util/ContextUtils', 'exports'],
    /**
     * sap.viz.extapi.utils.Data     
     * @namespace sap.viz.extapi.utils.Data
     */
    function(ContextUtils){ 
        return {
            /**
             * The main entry point of creating a context.
             * 
             * @function getDataContext
             * @memberof sap.viz.extapi.utils.Data
             * @static
             * @param {Object} dataSet
             * <pre>
             * crossTableDataSet or flatTableDataSet
             * for crossTableDatSet,
             * {
             *    'analysisAxis': [{
             *        'index': 1,
             *        'data': [{
             *                'type': 'Dimension',
             *                'name': 'Product',
             *                'values': ['Car', 'Truck']
             *             },]
             *    }, {
             *        'index': 2,
             *        'data': [{
             *                'type': 'Dimension',
             *                'name': 'Country',
             *                'values': ['China', 'USA']
             *            }]
             *    }],
             *    'measureValuesGroup' :[{
             *        'index': 1,
             *        'data': [{
             *                'type': 'Measure',
             *                'name': 'Profit',
             *                'values': [[25, 236], [58, 128]],
             *            }, {
             *                'type': 'Measure',
             *                'name': 'Revenue',
             *                'values': [[50, 86], [158, 88]]
             *            }]
             *    }, {
             *        'index': 2,
             *        'data': [{
             *                'type': 'Measure',
             *                'name': 'Profit1',
             *                'values': [[925, 9236], [958, 9128]],
             *            }, {
             *                'type': 'Measure',
             *                'name': 'Revenue1',
             *                'values': [[950, 986], [9158, 988]]
             *            }]
             *    }]
             * }
             *
             * for flatTabledataSet,
             * {
             *     metadata:{
             *         fields: [{
             *             id: 'Year',
             *             name: 'Year',
             *             semanticType: 'Dimension',
             *             dataType: 'Number'
             *         }, {
             *             id: 'Quarter',
             *             name: 'Quarter',
             *             semanticType: 'Dimension',
             *             dataType: 'String'
             *         }, {
             *             id: 'Country',
             *             name: 'Country',
             *             semanticType: 'Dimension',
             *             dataType: 'String'
             *         }, {
             *             id: 'SumRevenue',
             *             name: 'Sum of Revenue',
             *             semanticType: 'Measure'
             *         }, {
             *             id: 'SumProfit',
             *             name: 'Sum of Profit',
             *             semanticType: 'Measure'
             *         }, {
             *             id: 'Quarter_ID',
             *             name: 'Quarter_ID',
             *             semanticType: 'Dimension',
             *             dataType: 'String'
             *         }],
             *         context : ['Quarter_ID']
             *     },
             *     data: [
             *         [2001, 'Q1', 'USA', 100, 50,  'U2001_1'],
             *         [2001, 'Q1', 'CAN', 200, 100, 'C2001_1'],
             *         [2001, 'Q2', 'USA', 200, 100, 'U2001_2'],
             *         [2001, 'Q2', 'CAN', 300, 200, 'C2001_2'],
             *         [2002, 'Q1', 'USA', 150, 100, 'U2002_1'],
             *         [2002, 'Q1', 'CAN', 300, 200, 'C2002_1'],
             *         [2002, 'Q2', 'USA', 250, 150, 'U2002_2'],
             *         [2002, 'Q2', 'CAN', 350, 250, 'C2002_2']
             *     ]
             * }
             * </pre>
             * @param {Object} binding 
             * <pre>
             * (optional)binding information of chart, to filter out those data out of binding info
             * for crossTableDatSet, 
             * [
             *    {
             *        "feed" : "categoryAxis",
             *        "source" :  [{
             *            "type" : "analysisAxis",
             *            "index" : 1
             *        }]
             *    }, {
             *        "feed" : "valueAxis",
             *        "source" : [{
             *            "type" : "measureValuesGroup",
             *            "index" : 2
             *        }]
             *    }, {
             *        "feed" : "color",
             *        "source" : [{
             *            "type" : "analysisAxis",
             *            "index" : 2
             *          }, {
             *            "type" : "measureNamesDimension"
             *        }]
             *    }
             * ]
             * for flatTabledataSet,
             * [{
             *     "feed": "trellisRow",
             *     "source": ["Year"]
             * }, {
             *     "feed": "valueAxis",
             *     "source": ["SumProfit", "SumRevenue"]
             * }, {
             *     "feed": "forecastValues",
             *     "source": ["Country"]
             * }]
             * </pre>
             * @returns {Object} context Array
             * <pre>
             * for crossTableDatSet, 
             *     [
             *         [
             *             [                          
             *                 [{
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 0,
             *                         "dii_a2": 0
             *                     }
             *                 }, {
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 1,
             *                         "dii_a2": 0
             *                     }
             *                 }],
             *                 [{
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 0,
             *                         "dii_a2": 1
             *                 }
             *                 }, {
             *                     "type": "Measure",
             *                     "path": {
             *                         "mg": 0,
             *                         "mi": 0,
             *                         "dii_a1": 1,
             *                         "dii_a2": 1
             *                     }
             *                 }]
             *             ],
             *             [...]//mg:0 mi:1
             *         ],
             *             [...]//mg:1 mi:0
             *             [...]//mg:1 mi:1
             *     ]
             * for flatTabledataSet,
             *     [
             *         [{
             *             Year: 2001,
             *             Quater: 'Q1',
             *             Country: 'USA',
             *             SumRevenue: 100,
             *             'Quarter_ID': 'U2001_1'
             *         }, {
             *             Year: 2001,
             *             Quater: 'Q1',
             *             Country: 'USA',
             *             SumProfit: 50,
             *             'Quarter_ID': 'U2001_1'
             *         }],//record of data array
             *         [... ]//record of data array
             *          ...
             *     ]
             * </pre>              
             */
            getDataContext : function(dataSet, binding){
                var _parse;

                if(!dataSet){
                    return;
                }

                if(dataSet.type == 'sap.viz.api.data.CrosstableDataset'){           
                    _parse = ContextUtils.crossTableContext;                
                }else if(dataSet.type == 'sap.viz.api.data.FlatTableDataset'){ 
                    _parse = ContextUtils.flatTableContext;
                }else{
                    return;
                }

                return _parse(dataSet, binding);                
            }
        };    
    });
define('sap/viz/extapi/env/Language',['sap/viz/lang/langManager', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/LinkedHashMap','sap/viz/base/Logger', 'exports'], function Setup(langManager, TypeUtils, LinkedHashMap, Logger) {

    var _listeners = new LinkedHashMap();

    var language =
    /**
     * sap.viz.extapi.env.Language
     * @namespace sap.viz.extapi.env.Language
     */
    {

        /**
         * Get current language
         * @function get
         * @memberof sap.viz.extapi.env.Language
         * @static
         * @return {String} Language value such as: en, de, fr, es, zh_CN, ja, ru, pt
         */
        get : function() {
            return langManager.current();
        },

        /**
         * @function addListener
         * @memberof sap.viz.extapi.env.Language
         * @static
         * @param {Function} listener
         *                      function(language){...} // The language parameter is optional.
         * @return {sap.viz.extapi.env.Language} Self
         */
        addListener : function(l) {
            if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                var listener = {
                    fn : l
                };
                langManager.addListener(listener);
                _listeners.add(l, listener);
                return language;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }

        },

        /**
         * @function removeListener
         * @memberof sap.viz.extapi.env.Language
         * @static
         * @param {Function} listener
         *                      function(language){...} // This function must be the original listener function.
         * @return {sap.viz.extapi.env.Language} Self
         *
         */
        removeListener : function(l) {
            if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                langManager.removeListener(_listeners.get(l));
                _listeners.remove(l);
                return language;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }
        },

        /**
         * @function register
         * @memberof sap.viz.extapi.env.Language
         * @static
         * @param {Object} languagePackage
         * <pre>
         * { "id" : languageId,
         *     "value" : 
         *     {
         *         "string_key" : string_value,
         *         ...
         *     },
         * }
         * </pre>
         * @return {sap.viz.extapi.env.Language} Self
         */
        register : function(languagePackage) {
            if (arguments.length === 1 && TypeUtils.isPlainObject(languagePackage)) {
                langManager.register(languagePackage);
                return language;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }
        },

        /**
         * Get error message in the current language by the error code
         * @function getErrorMessage
         * @memberof sap.viz.extapi.env.Language
         * @static
         * @param {Number} id
         * Error ID
         *
         * @return {String} Error message
         * 
         * @example sap.viz.extapi.env.Language.getErrorMessage(50000) = "Length of dimension cannot be zero."(locale == en);
         */
        getErrorMessage : function(id) {
            return langManager.getLogMessageByID(id);
        },

        /**
         * Get user defined resourceString according to the current language setting
         * @function getResourceString
         * @memberof sap.viz.extapi.env.Language
         * @static
         * @param {String} ids
         *
         * @return {String} The value of the IDs
         *
         * @example sap.viz.extapi.env.Language.getResourceString("TESTKEY") = "testValue"
         */
        getResourceString : function(ids) {
            return langManager.get(ids);
        }
    };
    return language;
});

define('sap/viz/extapi/env/Locale',['sap/viz/Locale', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/LinkedHashMap','sap/viz/base/Logger', 'sap/viz/lang/langManager', 'exports'], function Setup(Locale, TypeUtils, LinkedHashMap, Logger, langManager) {
    var _listeners = new LinkedHashMap();
    var locale =
  /**
   * sap.viz.extapi.env.Locale
   * @namespace sap.viz.extapi.env.Locale
   */
    { 
            
        /**
         * Get the current locale
         * @function get
         * @memberof sap.viz.extapi.env.Locale
         * @static
         * @return {String} Locale value such as: en, de, fr, es, zh_CN, ja, ru, pt
         */
        get : function() {
            return Locale.locale();
        },

        /**
         * @function addListener
         * @memberof sap.viz.extapi.env.Locale
         * @static
         * @param {Function}
         *            listener function(locale){...} // The parameter locale is optional
         * @return {sap.viz.extapi.env.Locale} Self
         */
        addListener : function(l) {
            if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                var listener = {
                    fn : l
                };
                Locale.addListener(listener);
                _listeners.add(l, listener);
                return locale;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }
        },

        /**
         * @function removeListener
         * @memberof sap.viz.extapi.env.Locale
         * @static
         * @param {Function} listener
         *            function(locale){...} // This function must be the original listener function
         * @return {sap.viz.extapi.env.Locale} Self
         */
        removeListener : function(l) {
            if (arguments.length === 1 && TypeUtils.isFunction(l)) {
                Locale.removeListener(_listeners.get(l));
                _listeners.remove(l);
                return locale;
            } else {
            	Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }
        }
    };
    return locale;
});

define('sap/viz/extapi/env/Resource',[
    'sap/viz/api/env/Resource',
    'exports'
], function(Resource) {

    /**
     * sap.viz.extapi.env.Resource
     * @namespace sap.viz.extapi.env.Resource
     */

    /**
     * Get/Set the resource path
     * @function path
     * @memberof sap.viz.extapi.env.Resource
     * @static
     * @param {String} key
     * @param {undefined|String|Array} [path]
      *     If the path is undefined, this is a get path by key function; otherwise this is a set path by key function. <br>
     * Example:
     *          Resource.path('baseURL') is to get path by key. <br>
     *          Resource.path('baseURL', 'testurl') is to set path by key. <br>
      * If the path is an array, keep a cloned array in the internal map. <br>
     * Predefined Resource Paths:
     * <pre>
     *   1.  "sap.viz.api.env.Template.loadPaths":    ["../../../resources/templates"];
     *   2.  "sap.viz.api.env.Language.loadPaths":    ["../../../resources/langs/"];
     *   4.  "sap.viz.map.Resources" :                                   "../../resources"
     *
     * 
     * Example:
     * 
     *   Set path:
     * 
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Template.loadPaths", ["../../../resources/templates"]);
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Language.loadPaths", ["../../../resources/langs/"]);
     *   sap.viz.api.env.Resource.path("sap.viz.map.Resources", "../../resources");
     *   
     *   Get path:
     * 
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Template.loadPaths") =  ["../../../resources/templates"];
     *   sap.viz.extapi.env.Resource.path("sap.viz.api.env.Language.loadPaths") =  ["../../../resources/langs/"];
     *   sap.viz.api.env.Resource.path("sap.viz.map.Resources")                 =  "../../resources";
     *   
     * Or you can use customized paths:
     *         Resource.path('baseURL', 'testurl'), you can set any key-value pair in which the value should be a valid path.
     * @return {sap.viz.extapi.env.Resource|String|Array} Return self when it is a set function and return the string or array if it is a get function.
     */

    return Resource;
});

define('sap/viz/extapi/env/Template',[
    'sap/viz/TemplateManager', 
    'sap/viz/base/utils/ObjectUtils', 
    'sap/viz/base/utils/TypeUtils',
    'sap/viz/base/Logger', 
    'sap/viz/lang/langManager', 
    'exports'],
function Setup(TemplateManager, ObjectUtils, TypeUtils, Logger, langManager) {
    var _listeners = {};
    var template =
    /**
     * sap.viz.extapi.env.Template
     * @namespace sap.viz.extapi.env.Template
     */
    {

        /**
         * Get the current template's unique ID
         * @function get
         * @memberof sap.viz.extapi.env.Template
         * @static
         * @return {String} Template's unique ID
         * <pre>
         *  Example: 
         *      sap.viz.extapi.env.Template.set("flashy", completeCallback, failedCallback);// Set template by ID
         *      sap.viz.extapi.env.Template.get() = "flashy";// Get the set template ID 
         * </pre>
         */
        get : function() {
            return TemplateManager.current().id;
        },

        /**
         * Get a clone of the current applied template object
         * @function current
         * @memberof sap.viz.extapi.env.Template
         * @static
         * @return {Object} templatePackage
         * <pre>
         * {
         *     "id" : templateId,
         *     "name" : templateName,
         *     "version" : version,
         *     "css" : templateCss, // Such as css: ".v-m-main .v-background-body{fill:#eeeeee;}.v-m-main .v-background-body{fill:#eeeeee;}" 
         *     "properties" : 
         *     {
         *            "string_key" : string_value,
         *         ...
         *     },
         * }
         * </pre>
         */
        current : function() {
            var templatePackage = {};
            return ObjectUtils.extend(true, templatePackage, TemplateManager.current());
        },
        /**
         * Add or extend the existing template object.
         * The api sap.viz.TemplateManager.extend which was in the previous api version is now replaced by this function. <br>
         * 
         * If the template does not exist, it will add this template.
         * If the template already exists, it will merge and extend the old one with the new template.
         *
         * @function register
         * @memberof sap.viz.extapi.env.Template
         * @static
         * @param {Object} templatePackage
         * <pre>
         * {
         *     "id" : templateId,
         *     "name" : templateName,
         *     "version" : version,
         *     "css" : templateCss, // Such as css: ".v-m-main .v-background-body{fill:#eeeeee;}.v-m-main .v-background-body{fill:#eeeeee;}" 
         *     "properties" : 
         *     {
         *            "string_key" : string_value,
         *         ...
         *     },
         * }
         * </pre>
         * @return {sap.viz.extapi.env.Template} Self
         */
        
        /**
         * @function addListener
         * @memberof sap.viz.extapi.env.Template
         * @static
         * @param {Function} func
         *             function(template){...} // The parameter template is optional
         * @return {sap.viz.extapi.env.Template} Self
         */
        addListener : function(func) {
            if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                var listener = {
                    fn : func
                };
                TemplateManager.addListener(listener);
                _listeners[func] = _listeners[func] || [];
                _listeners[func].push(listener);
                return template;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }
        },

        /**
         * @function removeListener
         * @memberof sap.viz.extapi.env.Template
         * @static
         * @param {Function} func
         *            function(template){...} // This function must be the original listener function
         * @return {sap.viz.extapi.env.Template} Self
         */
        removeListener : function(func) {
            if (arguments.length === 1 && TypeUtils.isFunction(func)) {
                if (_listeners[func]) {
                    for (var i = 0; i < _listeners[func].length; i++) {
                        if (_listeners[func][i].fn === func) {
                            TemplateManager.removeListener(_listeners[func][i]);
                            _listeners[func].splice(i, 1);
                            break;
                        }
                    }
                }
                return template;
            } else {
                Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
                return;
            }
        }
    };
    return template;
});
define('sap/viz/extapi/manifest/Feed',['sap/viz/feeds/Manifest', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'sap/viz/lang/langManager', 'exports'], function Setup(Feed, TypeUtils, Logger, langManager) {
    
    /**
     * sap.viz.extapi.manifest.Feed<br>
     * [NOTE: You should load sap.viz.js library before using the API.]<br>
     * @namespace sap.viz.extapi.manifest.Feed
     */
    var FeedManifest = {};

    /**
     * Register an item into the category
     * @function register
     * @memberof sap.viz.extapi.manifest.Feed
     * @static
     * @param {Object} newItems Variable parameters; at least one item is needed to be registered in the category.
     * @return {sap.viz.extapi.manifest.Feed} Manifest itself
     *
     */
    FeedManifest.register = Feed.register;
    /**
     * Unregister an item into the category
     * @function unregister
     * @memberof sap.viz.extapi.manifest.Feed
     * @static
     * @param {String} id
     * @return {Object} The removed feed object
     * <pre>
     * feed manifest returned:
     * {
     *     "aaIndex": Number,
     *     "acceptMND": Number,
     *     "id": String,
     *     "max": Number,
     *     "min": Number,
     *     "name": String,
     *     "type": String{Dimension|Measure} 
     * }
     * </pre>
     */
    FeedManifest.unregister = function(id) {
        if(TypeUtils.isString(id)){
            return Feed.unregister(id);
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    }
    
    return FeedManifest;
});
define('sap/viz/extapi/manifest/Module',['sap/viz/modules/manifests/Module', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'sap/viz/lang/langManager', 'exports'], function Setup(Module, TypeUtils, Logger, langManager) {
    
    /**
     * sap.viz.extapi.manifest.Module<br>
     * [NOTE: You should load sap.viz.js library before using the API.]<br>
     * @namespace sap.viz.extapi.manifest.Module
     */
    var ModuleManifest = {};
    
    /**
     * Register an item into the category
     * @function register
     * @memberof sap.viz.extapi.manifest.Module
     * @static
     * @param {Object} newItems Variable parameters; at least one item is needed to be registered in the category.
     * @return {sap.viz.extapi.manifest.Module} Manifest itself
     */
    ModuleManifest.register = Module.register;
    
    /**
     * Unregister an item into the category
     * @function unregister
     * @memberof sap.viz.extapi.manifest.Module
     * @static
     * @param {String} id
     * @return {Object} The removed feed object
     * <pre>
     * module manifest returned:
     * {
     *     "id": String, // UNIQ_ID
     *     "type": String, // 'CONTAINER|CHART|SUPPLEMENTARY|CONTROLLER',
     *     "name": String,
     *     "abstract": Boolean, // Optional
     *     "base": String, // Optional
     *     "properties": Object, 
     *     "css": Object, // Style sheet
     *     "fn": Function,// Module main function
     *     "subModules": Function,
     * }
     * </pre>   
     */
    ModuleManifest.unregister = function(id) {
        if(TypeUtils.isString(id)){
            return Module.unregister(id);
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    }

    return ModuleManifest;
});
define('sap/viz/extapi/manifest/Viz',['sap/viz/manifests/Viz', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/Logger', 'sap/viz/lang/langManager', 'exports'], function Setup(Viz, TypeUtils, Logger, langManager) {
    
    /**
     * sap.viz.extapi.manifest.Viz<br>
     * [NOTE: You should load sap.viz.js library before using the API.]<br>
     * @namespace sap.viz.extapi.manifest.Viz
     */
    var VizManifest = {};
    /**
     * Register an item into category
     * @function register
     * @memberof sap.viz.extapi.manifest.Viz
     * @static
     * @param {Object} newItems Variable parameters; at least one item is needed to be registered in the category.
     * @return {sap.viz.extapi.manifest.Viz} Manifest itself
     */
    VizManifest.register = Viz.register;

    /**
     * Unregister an item into the category
     * @function unregister
     * @memberof sap.viz.extapi.manifest.Viz
     * @static
     * @param {String} id
     * @return {Object} The removed feed object
     * <pre>
     * viz manifest returned:
     * {
     *     "id": String,
     *     "name": String,
     *     "modules": Object, // Modules in the viz such as: title, legend, etc.
     *     "dependencies": Object, // Dependencies between modules
     *     "allFeeds": Function, // Get all feed manifests of the viz
     *     "allProperties": Function,// Get all properties of the viz
     * }
     * </pre>
     */
    VizManifest.unregister = function(id) {
        if(TypeUtils.isString(id)){
            return Viz.unregister(id);
        } else {
            Logger.warn(langManager.getLogMessage('IDS_WARN_PARAMETER_NOT_CORRECT'));
        }
    }
    
    return VizManifest;
});

define('sap/viz/modules/rootContainer',['sap/viz/base/utils/oo','sap/viz/modules/BaseContainer','sap/viz/base/utils/log/LogUtil','sap/viz/util/EffectManager','sap/viz/config'],
function Setup ( oo, BaseContainer, LOG, EffectManager,config) {
    
    var RootContainer = function ( manifest, context ) {
      this._rc_effectManager = new EffectManager();
      context.effectManager = this._rc_effectManager;
      RootContainer.superclass.constructor.apply(this, arguments);
  
      this._rc_container = null;
    };
    
    oo.extend(RootContainer, BaseContainer);
    
    RootContainer.prototype.container = function (x) {
      if ( !arguments.length ) { return this._rc_container; }
      this._rc_container = x;
      return this;
    };
    
    RootContainer.prototype.data = function(xs) {
      var ret = RootContainer.superclass.data.apply(this, arguments);
      if ( !arguments.length ) { return ret; }
      
      if(this._rc_effectManager && this._isFlatTable()){
        this._rc_effectManager.ghostEffect(this._data.dataset.hasFakeData());  
      }else if(!this._isFlatTable() && this._rc_effectManager && this._convert2MultiAxesDataAdapter()){
        this._rc_effectManager.ghostEffect(this._data.fakeData());  
      }
      
      return this;
    };
    
    RootContainer.prototype.parent = function(xs) {
      var ret = RootContainer.superclass.parent.apply(this, arguments);
      if ( !arguments.length ) { return ret; }
      
      if(this._rc_effectManager){
        this._rc_effectManager.container(this._parentNode.append("svg:defs"));  
      }
      return this;
    };
    
    //20140106_JohnWen: Tooltip is initialized itself when showTooltip is firstly called,
    //so this method is not needed anymore.
//    RootContainer.prototype.render = function(selection){
//      RootContainer.superclass.render.apply(this, arguments);
//      var modules = this._modules;
//      var selections = this._selections;
//      
//      //Special case for tooltip, we need refactor tooltip
//      //Get transform for main module, tooltip needs the boundary
//     var layoutInfo = this._layout;
//      if ( modules['tooltip'] ) {
//        modules['tooltip'](this._rc_container);
//
//        modules['tooltip'].plotArea({
//          'x' : layoutInfo['main'].x,
//          'y' : layoutInfo['main'].y,
//          'width' : modules['main'].width(),
//          'height' : modules['main'].height()
//        }).zone({ 'width' : this.width(), 'height' : this.height() });
//      }
//    };
    
    RootContainer.prototype.destroy = function() {
      RootContainer.superclass.destroy.apply(this, arguments);
      //set null to all properties which holds html elements
      this._rc_container = null;
      if(this._rc_effectManager && this._rc_effectManager.destroy){
        this._rc_effectManager.destroy();
      }
    };
    
    return RootContainer;
});
define('sap/viz/modules/manifests/RootContainer',['sap/viz/modules/manifests/Module',
	'sap/viz/modules/Constants',
	'sap/viz/modules/rootContainer', 
	'sap/viz/modules/manifests/BaseContainer'],
function Setup ( Manifest, Constants, fn, BaseContainer ) {
  
  var module = {
    id : "sap.viz.modules.rootContainer",
    base : "sap.viz.modules.basecontainer",
    type : Constants.Type.Container,
    name : "rootContainer",
    description : "Settings for the root container",
    fn : fn
  };
  
  var manifests = {
    viz: [],
    module: [module].concat(BaseContainer.module),
    feeds: [].concat(BaseContainer.feeds)
  }
  return manifests;
  
});
define('sap/viz/modules/manifests/layout/Base',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/Constants'],
function Setup ( Manifest, Constants) {
  var module = {
    'abstract' : true,
    'id' : "sap.viz.modules.layout.base",
    'type' : Constants.Type.Scientific.Layout,
    'renderto' : Constants.RenderTo.NONE,
    'name' : "Abstract Layout",
    'description' : "Abstract layout algorithm",
    'properties' : {},
    'configure' : null,
    'fn' : null
  };
  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
});

define('sap/viz/modules/manifests/layout/Dock',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/layout/dock', 
  'sap/viz/modules/manifests/layout/Base'],
function Setup ( Manifest, fn, Base ) {
  var module = {
    'id' : "sap.viz.modules.layout.dock",
    'name' : "dock",
    'base' : "sap.viz.modules.layout.base",
    'description' : "The dock layout algorithm",
    'properties' : {},
    'configure' : null,
    'fn' : fn
  };
  var manifests = {
    viz: [],
    module: [module].concat(Base.module),
    feeds: [].concat(Base.feeds)
  }
  return manifests;
});
define('sap/viz/modules/layout/stack',[],
function Setup () {
  
  function stack_sortDefault (a, b) { return a.order - b.order; }
  function stack_sizeDefault (x) { return x.size(); }
  function stack_orderDefault (x) { return x.order; }
  
  var _ = function () {
    var sort = stack_sortDefault,
        size = stack_sizeDefault,
        order = stack_orderDefault,
        gravity = -1, // top or bottom alignment
        position = 'right',
        spacing = 0,
        width = 0,
        height = 0;
    
    function stack () {
      var data = arguments[0].slice().sort(stack_sortDefault),
        align = arguments[1],
        result = {},
        isEnough = false,
        preSizeInfo = _setSizeInfoByOrientation(data);
      
      var start = 0, _finalSize, 
        _availableSize = preSizeInfo.availableSize,
        _referenceSize = preSizeInfo.referenceSize,
        _referenceMinSizes = preSizeInfo.referenceMinSizes,
        _maxSizes = preSizeInfo.maxSizes,
        _minSizes = preSizeInfo.minSizes,
        _totalSize = {width : 0, height: 0},
        _maxSize, _minSize;
      
      if (d3.sum(_maxSizes) <= _availableSize) {
        isEnough = true;
      }
      
      data.forEach(function(d, i) {
        var anchor = { x : 0, y : 0 }; 
        
        _maxSize = _maxSizes[i];
        _minSize = _minSizes[i];
        
        if( i > 0 ){
          start = start + spacing;
        }
        
        if(position === 'top' || position === 'bottom'){
          anchor.x = start;
        }else{
          anchor.y = start;
        }
          
        if (isEnough && _referenceMinSizes[i] < _referenceSize) {
          start = start + _maxSize;
          _finalSize = _maxSize;
        } else {
            // Not enough, cover margin of layout error
          if (_availableSize < _minSize || _referenceMinSizes[i] - _referenceSize > 1) {
            d.module.width(0).height(0);
            return anchor;
          } else if (_availableSize > _maxSize) {
            start = start + _maxSize;
            _finalSize = _maxSize;
            _availableSize = _availableSize - _maxSize;
          } else {
            start = start + _availableSize;
            _finalSize  = _availableSize;
            _availableSize = 0;
          }
        }
        
        //Set module size
        if(position === 'top' || position === 'bottom'){
          d.module.height(height).width(_finalSize);
          _totalSize.width = _finalSize + _totalSize.width;
          _totalSize.height = height;
        }else{
          d.module.width(width).height(_finalSize);
          _totalSize.height = _finalSize + _totalSize.height;
          _totalSize.width = width;
        }

//        if (align === 'right' && (w = maxWidth(d)) < width) {
//          anchor.x = width - w;
//        }

        /* if ( align === 'center' ) {  TODO add support  }*/

        result[d.module.alias] = anchor;
      });

      //Alignment
//      if(position === 'top' || position === 'bottom'){
//        var gap = width - _totalSize.width;
//        if(gap > 0){
//          data.forEach(function(d, i) {
//            if(result[d.module.alias]){
//              result[d.module.alias].x = result[d.module.alias].x + gap/2;
//            }
//          });
//        }
//      }
      
      return result;
    }
    
    stack.sort = function (x) {
      if ( !arguments.length ) { return sort; }
      sort = x;
      return stack;
    };
    
    stack.size = function (x) {
      if ( !arguments.length ) { return size; }
      size = x;
      return stack;
    };
    
    stack.gravity = function (x) {
      if ( !arguments.length ) { return gravity; }
      gravity = x;
      return stack;
    };
    
    stack.order = function (x) {
      if ( !arguments.length ) { return order; }
      order = x;
      return stack;
    };
    
    stack.width = function (x) {
      if ( !arguments.length ) { return width; }
      width = x;
      return stack;
    };
    
    stack.height = function (x) {
      if ( !arguments.length ) { return height; }
      height = x;
      return stack;
    };
    
    stack.position = function(_){
      if(!arguments.length) {
        return position;
      }
      position = _;
      return stack;
    };
    
    stack.spacing = function(_){
      if(!arguments.length) {
        return spacing;
      }
      spacing = _;
      return stack;
    };
    
    stack.data = function () { return stack; };
    stack.properties = function () { return stack; };
    
    var _setSizeInfoByOrientation = function(data){
      var availableSize, refSize, maxSizes = [], minSizes = [], preSize, refMinSizes = [];
      if(position === 'top' || position === 'bottom'){
        //Horizontal layout
        availableSize = width;
        refSize = height;
        
        data.forEach(function(d) {
          preSize = size(d);
          maxSizes.push(preSize.maxWidth);
          minSizes.push(preSize.minWidth);
          refMinSizes.push(preSize.minHeight);
        });
      }else{
        //Vertical layout
        availableSize = height;
        refSize = width;
        
        data.forEach(function(d) {
          preSize = size(d);
          maxSizes.push(preSize.maxHeight);
          minSizes.push(preSize.minHeight);
          refMinSizes.push(preSize.minWidth);
        });
      }
      return {
        'availableSize' : availableSize,
        'referenceSize' : refSize,
        'maxSizes' : maxSizes,
        'minSizes' : minSizes,
        'referenceMinSizes' : refMinSizes
      };
    };
    
    return stack;
  };
  
  return _;
  
});

define('sap/viz/modules/legend',['jquery','sap/viz/modules/Constants','sap/viz/modules/manifests/Module','sap/viz/util/ignite','sap/viz/util/append',
'sap/viz/base/utils/Objects','sap/viz/modules/dispatch','sap/viz/modules/layout/stack'],
function Setup ( $, registry, category, ignite, append, objects, evts, stack ) {
  
  var _ = function ( manifest, context ) {
    var width = 0,
        height = 0,
        maxWidth = 0,
        maxHeight = 0,
        properties = {},
        innerProperties = manifest.props(null),//set an inner properties list to maintain contain's private properties.
        data = {},
        config = {},
        parentNode = null,
        children = {},
        selections = {},
        dispatch = evts('relayout', 'initialized'),
        charger = {},
        initComplete = false;
    
    var PROPERTYCATEGORY = 'legendGroup', SPACING = 0;

    // TODO redundant logic to be abstracted out
    function init ( data, attrs, conf ) {
      var children = {};
      
      $.each(conf.modules, function ( key, value ) {
        if ( value === null ) { return; }
        var dataset = value.data ? data.createDataAdapterForModule(value.data) : data,
            type = category.get(value.id).type;
        
        children[key] = ignite(value.id, context, 'v-m-' + key);
        children[key].alias = key;
        
        if ( key !== 'layout' ) {
          selections[key] = append.apply(parentNode, [ 'g', { 'class' : 'v-m-' + key } ]);
        }
        
        if ( type !== registry.Type.Container ) {
          children[key].data(dataset)
            .properties(_setLegendPositionPro(attrs[PROPERTYCATEGORY], objects.extend(
              true, 
              {}, 
              value.configure ? value.configure.properties : {}, 
              value.configure ? attrs[value.configure.propertyCategory] : {})));
          
          if ( children[key].parent ) { children[key].parent(selections[key]); }
        }
      });
      
      initComplete = true; 
      return children;
    }
    
    function layout () {
      var algorithm = children.layout, 
          components = [],
          props = properties.legendGroup ? 
                  properties.legendGroup.layout : manifest.props().layout,
          alignment = 'left', // alignment for legend stack always at left
          result = {};
      
      algorithm
        .width(width)
        .height(height)
        .gravity(-1)
        .spacing(SPACING)
        .position(props.position)
        .size(function (d) { return d.module.getPreferredSize(); })
        .sort(function (a, b) { return a.order - b.order; });
      
      $.each(config.modules, function ( key, value ) {
        if ( value === null ) { return; }
        if ( !value.configure || !value.configure.properties || !value.configure.properties.layout ) { 
          return;
        }
        
        if ( value.configure.properties.layout ) {
          components.push({
            module : children[key],
            order : value.configure.properties.layout.order
          });
        }
      });
      
      result = algorithm(components, alignment);

      $.each(result, function ( key, value ) {
        selections[key].attr('transform', 
          'translate(' + value.x + ',' + value.y + ')');
      });
    }
    
    function chart ( selection ) {
      selection.each(function (d) {
        layout();
        $.each(children, function ( key, value ) {
          if ( key !== 'layout' ) { selections[key].call(value); }
        });
      });
      
      dispatch.initialized();
    }
    
    chart.width = function (x) {
      if ( !arguments.length ) { return width; }
      width = x;
     // FIXME remove it
     for ( var key in children ) {
       if ( children.hasOwnProperty(key) ) {
         children[key].width(x);
       }
     }
      return chart;
    };
    
    chart.height = function (x) {
      if ( !arguments.length ) { return height; }
      height = x;
      // FIXME remove it
      for ( var key in children ) {
        if ( children.hasOwnProperty(key) ) {
          children[key].height(x);
        }
      }
      return chart;
    };
    
    chart.size = function (xs) {
      if ( !arguments.length ) { return { width : width, height : height }; }
      width = xs.width;
      height = xs.height;
      return chart;
    };
    
    chart.properties = function (xs) {
      if ( !arguments.length ) { return innerProperties; }
      properties = $.extend(true, {}, properties, xs);
      if (properties[PROPERTYCATEGORY]){
        objects.extend(true, innerProperties, properties[PROPERTYCATEGORY]);
      }
      $.each(children, function ( key, value ) {
        if ( config.modules[key].configure ) {
          value.properties(_setLegendPositionPro(properties[PROPERTYCATEGORY], properties[config.modules[key].configure.propertyCategory]));
        }
      });
      
      if ( !$.isEmptyObject(config) && !$.isEmptyObject(data) && !initComplete ) {
        children = init(data, properties, config);
      }
      
      return chart;
    };
    
    chart.config = function (xs) {
      if ( !arguments.length ) { return config; }
      config = xs;
      
      if ( !$.isEmptyObject(properties) && !$.isEmptyObject(data) && !initComplete ) {
        children = init(data, properties, config);
      }
      
      return chart;
    };
    
    chart.dispatch = function (x) {
      if ( !arguments.length ) { return dispatch; }
      dispatch = x;
      return chart;
    };
    
    chart.data = function (xs) {
      if ( !arguments.length ) { return data; }
      data = xs;
      
      $.each(children, function ( key, value ) {
        if ( config.modules[key].data ) {
          value.data(data.createDataAdapterForModule(config.modules[key].data));
        } else {
          value.data(data);
        }
      });
      
      if ( !$.isEmptyObject(config) && !$.isEmptyObject(properties) && !initComplete ) {
        children = init(data, properties, config);
      }
      
      return chart;
    };
    
    chart.parent = function (x) {
      if ( !arguments.length ) { return parentNode; }
      parentNode = x;
      return chart;
    };
    
    // Means of wiring up module dependencies
    chart.recharge = function (x) {
      if ( !arguments.length ) { return charger; }
      charger = x;
      return chart;
    };
    
    chart.modules = function (xs) {
      if ( !arguments.length ) { return children; }
      children = xs;
      return chart;
    };
    
    chart.maxHeight = function (x) {
      if ( !arguments.length ) { return maxHeight; }
      maxHeight = x;
      return chart;
    };
    
    chart.maxWidth = function (x) {
      if ( !arguments.length ) { return maxWidth; }
      maxWidth = x;
      return chart;
    };
    
    chart.getPreferredSize = function () {
        var minWidths = [], maxWidths = [], minHeights = [], maxHeights = [];
        
        $.each(children, function ( key, value ) {
          if ( key === 'layout' ) { return; }
          var size = value.getPreferredSize();
          minWidths.push(size.minWidth);
          minHeights.push(size.minHeight);
          maxWidths.push(size.maxWidth);
          maxHeights.push(size.maxHeight);
        });
        
        var minimums = {
          width : d3.min(minWidths),
          height : d3.min(minHeights)
        },
        maximums = {
          width : d3.max(maxWidths),
          height : d3.max(maxHeights)
        };
        
        var props = properties.legendGroup ? properties.legendGroup.layout : manifest.props().layout, 
            position, i = 0;
        position = props.position;
        
        if(position === 'top' || position === 'bottom'){
          for ( i = 0; i < minHeights.length; i++ ) {
            if ( minHeights[i] > maxHeight ) {
              maximums.height = d3.min(maxHeights);
            }
          }
        }else{
          for ( i = 0; i < minWidths.length; i++ ) {
            if ( minWidths[i] > maxWidth ) {
              maximums.width = d3.min(maxWidths);
            }
          }
        }
      
        return {
          minWidth : minimums.width,
          maxWidth : maximums.width,
          minHeight : minimums.height,
          maxHeight : maximums.height
        };
    };
    
    chart.destroy = function(){
      selections = null;
      parentNode = null;
      data = null;
      dispatch.on('relayout', null);
      dispatch.on('initialized', null);
      //destroy ctx
      if(context){
        context.destroy();
        context = null;
      } 
    };
    
    var _setLegendPositionPro = function(groupPros, legendPros){
      if(groupPros && groupPros.layout && groupPros.layout.position){
        if(legendPros === undefined){
          legendPros = {};
        }
        legendPros.position = groupPros.layout.position;
      }
      return legendPros;
    };
    return chart;
  };
  
  return _;
  
});
define('sap/viz/modules/manifests/Legend',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/Constants',
  'sap/viz/modules/legend'],
function Setup(Manifest, Constants, fn) {
  var module = {
    id : 'sap.viz.modules.legend',
    type : Constants.Type.Container,
    name : 'legend',
    description: 'Settings for the legend area',
    properties : {
		'layout' : {
        'name' : 'layout',
        'supportedValueType' : 'Object',
        'supportedValues' : {
          'position' : {
            'name' : 'position',
            'supportedValueType' : 'String',
            'supportedValues' : [ 'top', 'bottom', 'right', 'left' ],
            'defaultValue' : 'right',
            'description' : 'Set the position of the legend area',
            'example': "<a href='"+Constants.DocExample.SnippetUrl+"4945' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          'priority' : {
            'name' : 'priority',
            'supportedValueType' : 'Int',
            'defaultValue' : 1,
            'description' : 'Set the priority of the position for the legend area',
			'isExported' : false
          },           
        },
        'description' : 'Settings for the layout of the legend area'
      },
    },
    css : {
      
    },
    configure : null,
    fn : fn
  };

  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
});
define('sap/viz/util/DrawUtil',['sap/viz/base/utils/TypeUtils'],

function Setup(TypeUtils) {
/*jshint bitwise:false */
  var DrawUtil = {

  };

  /**
   *  props = {
   *    type: 
   *    rx:
   *    ry:
   *  }
   *  @return path "d" for D3 
   */
  DrawUtil.DEFAULT_OPACITY = 0.8;
  DrawUtil.createMarkerData = function (props){
    // TODO Maybe we can use hashmap to cache here
    //if(symbolMap[props]) return symbolMap[props];
    var result;
    var temp = props.borderWidth / 2;
    switch(props.type)
    {
    case "circle" :
      result = "M" + (-props.rx - temp)  + ",0 A" + (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (props.rx + temp) + ",0 A";
      result += (props.rx + temp) + "," + (props.ry + temp) + " 0 1,0 " + (-props.rx -temp) + ",0z";
      break;
    case "cross" :
      result = "M" + (-props.rx - temp) + "," + (-props.ry/3 - temp) + "H" + (-props.rx/3  - temp) + "V" + (-props.ry - temp)+ "H" + (props.rx/3 +temp);
      result += "V" + (-props.ry/3 - temp) + "H" + (props.rx + temp) + "V" + (props.ry/3 + temp) + "H" + (props.rx/3 + temp);
      result += "V" + (props.ry +temp) + "H" + (-props.rx/3 - temp) + "V" + (props.ry/3 + temp) + "H" + (-props.rx -temp) + "Z";
      break;
    case "diamond" :
      result = "M0," + (-props.ry -temp)  + "L" + (props.rx + temp) + ",0" + " 0," + (props.ry + temp) + " " + (-props.rx -temp) + ",0" + "Z";
      break;
    case "square" :
      result = "M" + (-props.rx - temp) + "," + (-props.ry - temp) + "L" + (props.rx + temp) + ",";
      result += (-props.ry - temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + "L" + (-props.rx - temp) + "," + (props.ry + temp) + "Z";
      break;
    case "triangle-down" ://TODO: remove duplicate
    case "triangleDown" :
      result = "M0," + (props.ry + temp) + "L" + (props.rx + temp) + "," + -(props.ry + temp) + " " + -(props.rx + temp) + "," + -(props.ry + temp) + "Z";
      break;
    case "triangle-up" ://TODO: remove duplicate
    case "triangleUp" : 
      result =  "M0," + -(props.ry + temp) + "L" + (props.rx + temp) + "," + (props.ry + temp) + " " + -(props.rx + temp) + "," + (props.ry + temp) + "Z";
      break;
    case "triangle-left" ://TODO: remove duplicate
    case "triangleLeft" :
      result = "M" + -(props.rx + temp) + ",0L" + (props.rx + temp) + "," + (props.ry + temp) + " " + (props.rx + temp) + "," + -(props.ry + temp) + "Z";
      break;
    case "triangle-right" ://TODO: remove duplicate
    case "triangleRight" :
      result = "M" + (props.rx + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + " " + -(props.rx + temp) + "," + -(props.ry + temp) + "Z";
      break;
    case "intersection" :
      result = "M" + (props.rx + temp) + "," + (props.ry + temp) + "L" +  (props.rx/3 + temp) + ",0L" + (props.rx + temp) + "," + -(props.ry +temp) + "L";
      result += (props.rx / 2 - temp) + "," + -(props.ry + temp) + "L0," + (-props.ry/3 - temp) + "L" + (-props.rx / 2 + temp) + "," + -(props.ry + temp) + "L";
      result += -(props.rx + temp) + "," + -(props.ry +temp) + "L" + -(props.rx/3 + temp) + ",0L" + -(props.rx + temp) + "," + (props.ry + temp) + "L";
      result += (-props.rx/2 + temp) + "," + (props.ry + temp) + "L0," + (props.ry/3 + temp) + "L" + (props.rx/2 - temp) + "," + (props.ry + temp) + "Z";
      break;
    case 'squareWithRadius' : 
      var r = props.rx;
      var radius = r - 3;
      result = "M0," +  -r + "L" + -radius + ","+ -r + "Q" + -r +"," + -r + " " + -r + "," + -radius + "L" + -r +"," + radius + "Q" + -r + "," + r + " " + -radius + "," + r;
      result += "L" + radius + "," + r +"Q" + r + "," + r + " " + r + "," +radius + "L" + r +"," + -radius + "Q" + r + "," + -r + " "+ radius + "," + -r +"Z";
      break;
    case "vbar":
      result = "M" + (-props.rx/3) + "," + (-props.ry) + "H" + (props.rx/3) + "V" + (props.ry) + "H" + (-props.rx/3) + "Z";
      break;
    }
    //symbolMap[props] = result;
    return result;

  };

  function getAnimationInitData(props)
  {
    var result;
    switch(props.type)
    {
    case "circle" :
      result = "M0,0A0,0 0 1,0 0,0A0,0 0 1,0 0,0z"; 
      break;
    case "cross" :
      result = "M0,0H0V0H0V0H0V0H0V0H0V0H0Z";
      break;
    case "diamond" :
      result = "M0,0L0,0 0,0 0,0Z";
      break;

    case "triangle-down" ://TODO: remove duplicate
    case "triangle-up" ://TODO: remove duplicate
    case "triangle-left" ://TODO: remove duplicate
    case "triangle-right" :  //TODO: remove duplicate
    case "triangleDown" :
    case "triangleUp" :
    case "triangleLeft" :
    case "triangleRight" :        
      result = "M0,0L0,0 0,0Z";
      break;
    case "intersection" :
      result = "M0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0L0,0Z";
      break;
    case 'squareWithRadius' : 
      result = "M0,0L0,0Q0,0 0,0L0,0Q0,0 0,0L0,0Q0,0 0,0L0,0Q0,0 0,0Z";
      break;  
    case "square" :
      result = "M0,0L0,0L0,0L0,0Z";
      break;
    default:
      result = "M0,0L0,0L0,0L0,0Z";
      break;
    }
    return result;
  }
  
  DrawUtil.createElements = function(d3Enter, props)
  {
    return d3Enter.append("path").attr("class", props.className);
  };
  
  DrawUtil.createElement = function(d3Parent, props, effectManager)
  {
    var d3Element = d3Parent.append("path").attr("class", props.className);
    props.node = d3Element;
    DrawUtil.drawGraph(props, effectManager);
    return d3Element;
  };

  /**
   * props = {
   *   node: current d3 svg element,
   *  graphType : marker type
   *  drawingEffect: drawingEffect
   *  direction : direction
   *   rx : size
   *  ry: size
   *  fillColor: color
   *  borderWidth:
   *  borderColor,
   *  visibility: "visible" or "hidden"
   *  animateTime: total time for animation in ms 
   *  strokeOpacity: opacity for border line
   *  endFunc: callback function, when animation complete, it will be called
   * }
   *  effectManager: current effectManager
   */
  DrawUtil.drawGraph =  function (props, effectManager, a)
  {
    return DrawUtil.updateGraph(props, effectManager, a, DrawUtil.createGraph(props));
  };
  
  DrawUtil.createGraph =  function (props) {
    var para = {
        type: props.graphType,
        rx:Math.round(props.rx),
        ry:Math.round(props.ry),
        borderWidth: props.borderWidth ? Math.round(props.borderWidth) : 0
    };
    return DrawUtil.createMarkerData(para);
  };
  
  DrawUtil.updateGraph =  function (props, effectManager, a, data) {
    var para = {
        type: props.graphType,
        rx:Math.round(props.rx),
        ry:Math.round(props.ry),
        borderWidth: props.borderWidth ? Math.round(props.borderWidth) : 0
    };
    var tempOpacity;
    if (props.visibility === 'hidden') {
        tempOpacity = 0;
    } else {
        tempOpacity = 1;
    }
    
    var fillId;
    if(props.fillId){
      fillId = props.fillId;
    }else{      
      fillId = effectManager? effectManager.register(props, a) : props.fillColor;
    }

    if(props.animateTime && props.animateTime > 0) {
      props.node.each(function(){
            this.setAttribute("class",props.className);
            if(!this.getAttribute("fill")){
              this.setAttribute("fill", fillId);
            }
            this.setAttribute("stroke-width", props.borderWidth);
            this.setAttribute("stroke", props.borderColor);
            this.setAttribute("opacity", tempOpacity);
            this.setAttribute("stroke-opacity", props.strokeOpacity);
            if(!this.getAttribute("d")){
              this.setAttribute("d", getAnimationInitData(para));
            }
      });
      var t = props.node.transition().duration(props.animateTime).attr("fill", fillId).each('end', props.endFunc);
      if (data) {
        t.attr("d", data);
      }
    } else {
      props.node.each(function(){
            this.setAttribute("class",props.className);
            this.setAttribute("fill", fillId);
            
            if(fillId!=="transparent"){
              this.setAttribute("stroke-width", props.borderWidth);
              this.setAttribute("stroke", props.borderColor);
              if(!a){this.setAttribute("opacity", tempOpacity);}
              if(props.fillOpacity !== undefined){
                  this.setAttribute("fill-opacity", props.fillOpacity);
              }
            }
            this.setAttribute("stroke-opacity", props.strokeOpacity);
            if (data) {
              this.setAttribute("d", data);
            }
      });
    }
    return  props.node;
  };

  DrawUtil.rgb2Hex = function (rgb) {
    return "#" + ((1 << 24) + (rgb.r << 16) + (rgb.g << 8) + rgb.b).toString(16).slice(1);
  };

  DrawUtil.hex2Rgb = function (color) {
    var rgb = parseInt(color.slice(1), 16);
    return {
        r: rgb >> 16,
        g: rgb >> 8 & 0xff,
        b: rgb & 0xff
    };
  };

  DrawUtil.highlightProperties = {
    attributeOpacityName : 'fill-opacity',
    attributeColorName : 'fill',
    strokeWidth : 1,
    selectedOpacity : 1,
    unSelectedOpacity : 0.4,
    recoveryOldAttributes : false
  };

  DrawUtil.resetHighlightProperties = function () {
    DrawUtil.highlightProperties = {};
    DrawUtil.highlightProperties.attributeOpacityName = 'fill-opacity';
    DrawUtil.highlightProperties.attributeColorName = 'fill';
    DrawUtil.highlightProperties.strokeWidth = 1;
    DrawUtil.highlightProperties.selectedOpacity = 1;
    DrawUtil.highlightProperties.unSelectedOpacity = 0.4;
    DrawUtil.highlightProperties.recoveryOldAttributes = false;
  };

  DrawUtil.getNodeAttributeValue = function (node, attrName) {
    return node.getAttribute(attrName);
  }; 

  DrawUtil.getColorString = function (node, attributeColorName) {
    var colorName = (attributeColorName) ? attributeColorName : DrawUtil.highlightProperties.attributeColorName;
    var color = node.getAttribute(colorName);
    if (color.indexOf('url') !== -1) {
      var urlSelector = color.substring(color.indexOf('#'), color.indexOf(')'));
      var urlDefs = d3.selectAll(urlSelector);
      if (!urlDefs.empty()) {
        var colorTable = urlDefs.selectAll('stop');
        if (!colorTable.empty()) {
          color = colorTable[0][colorTable[0].length - 1].getAttribute('stop-color');
        }
      }
    }
    return color;
  };

  DrawUtil.colorLinerTransform = function (rgbHelperFun, linerVariable, colorString) {
    var oldRGB = rgbHelperFun.color2rgba(colorString);
    var factor = 1, constant = 0;
    factor = linerVariable.factor;
    constant = linerVariable.constant;
    return {
      r : Math.round(oldRGB.r * factor + constant),
      g : Math.round(oldRGB.g * factor + constant),
      b : Math.round(oldRGB.b * factor + constant)
    };
  };

  DrawUtil.nodeDecoration = function (node, decorationBag) {
    if (node && decorationBag) {
      for (var prop in decorationBag) {
        if(decorationBag.hasOwnProperty(prop)){
          node.setAttribute(prop, decorationBag[prop]);
        }
      }
    }
  };

  DrawUtil.nodeHighlight = function (node, linerVariable, borderWidth, rgbHelperFun, hovered) {
    var colorString = DrawUtil.getColorString(node, DrawUtil.highlightProperties.attributeColorName);
    if (rgbHelperFun) {
      if (!DrawUtil.highlightProperties.hoverBorderColor && !DrawUtil.highlightProperties.selectedBorderColor) {
        var newRGB = DrawUtil.colorLinerTransform(rgbHelperFun, linerVariable, colorString);
        node.setAttribute('stroke', DrawUtil.rgb2Hex(newRGB));
      } else {
        if (hovered) {
          node.setAttribute('stroke' , DrawUtil.highlightProperties.hoverBorderColor);
        } else {
          node.setAttribute('stroke' , DrawUtil.highlightProperties.selectedBorderColor);
        }
      }
      node.setAttribute('stroke-width', borderWidth);

      if (!hovered) {
        node.setAttribute(DrawUtil.highlightProperties.attributeOpacityName, DrawUtil.highlightProperties.selectedOpacity);
      }
    }
  };

  DrawUtil.nodesHighlight = function (nodes, linerVariable, rgbHelperFun, hovered) {
    if (!TypeUtils.isArray(nodes)) {
      nodes = [ nodes ];
    } 

    for (var i = 0; i < nodes.length; i++) {
      if (hovered) {
        DrawUtil.nodeHighlight(nodes[i], linerVariable, DrawUtil.highlightProperties.strokeWidth * 2, rgbHelperFun, hovered);
      } else {
        DrawUtil.nodeHighlight(nodes[i], linerVariable, DrawUtil.highlightProperties.strokeWidth, rgbHelperFun, hovered);      
      }
    }
  };

  DrawUtil.nodesUnhighlight = function (nodes, selected, normalMode) {
    if (!TypeUtils.isArray(nodes)) {
      nodes = [ nodes ];
    }

    for (var i = 0; i < nodes.length; i++) {
      if (selected) {
        nodes[i].setAttribute('stroke-width', DrawUtil.highlightProperties.strokeWidth);
        if (DrawUtil.highlightProperties.selectedBorderColor) {
          nodes[i].setAttribute('stroke' , DrawUtil.highlightProperties.selectedBorderColor);
        }
      } else {
        if (DrawUtil.highlightProperties.recoveryOldAttributes && DrawUtil.highlightProperties.recoveryPropsBag) {
          for (var prop in DrawUtil.highlightProperties.recoveryPropsBag) {
            if(DrawUtil.highlightProperties.recoveryPropsBag.hasOwnProperty(prop)){
              nodes[i].setAttribute(prop, DrawUtil.highlightProperties.recoveryPropsBag[prop]);
            }
          }
        } else  {
            nodes[i].setAttribute('stroke', 'none');
          if (normalMode) {
            nodes[i].setAttribute(DrawUtil.highlightProperties.attributeOpacityName, DrawUtil.highlightProperties.selectedOpacity);
          } else {
            nodes[i].setAttribute(DrawUtil.highlightProperties.attributeOpacityName, DrawUtil.highlightProperties.unSelectedOpacity);
          }
        }
      }
    }
  };

  return DrawUtil;
});

define('sap/viz/util/ScrollBar',['sap/viz/base/utils/Objects', 'sap/viz/base/utils/TypeUtils',
        'sap/viz/base/UADetector'], 
  function Setup(Objects, TypeUtils, UADetector){
  /*
   * Scroll Bar doesn't distinguish platform(Desktop/Mobile). Only provide style settings to match different platform 
   * and different layout. 
   * min_ScrollBar_Size = style.thumbSize + style.padding * 2 
   */
    var ScrollBar = function(){
      this._props = {
        contentSize: 0,
        size: 0,
        vertical : true,
        visibility : 'visible',
        eventWrapper : undefined, //For drag scroll bar out of scrollbar area event. 
        style : {
          thumbSize : 6,
          fill : '#a6a6a6',
          hoverFill : '#a6a6a6',
          opacity : 1,
          padding : 2,
          hasScrollingArea : false,
          scrollingArea : {
            fill : '#F7F7F7',
            opacity : 1
          },
          isRoundCorner : true,
          useMinScrollbarSize : true
        },
        onScroll : function(){} 
      },
      this._scrollPosition = 0;
      this._factor = undefined;
      this._scrollbarWrapper = undefined;
      this._scrollbarSlotWrapper = undefined;
      this._startPos = undefined;
      this._maxScrollPosition = 0;
      this._minFactor = 1;
      this._contentStartPos = 0;
      this._selection = undefined;
      this._isPressed = false;
      this._scrollbarSize = undefined;
      this._moveStep = 0;
    };

    ScrollBar.prototype.render = function(selection){
      this._selection = selection;
      var wrapper = selection.selectAll('g');
      var thumbSize = this._props.style.thumbSize;
      if(wrapper.empty()){
        wrapper = selection.append('g');
      }
      var scrollbarWrapper = wrapper.selectAll('rect.v-m-scrollBar');
      var scrollbarSlotWrapper = wrapper.selectAll('rect.v-m-scrollBarSlot');
      if (this._props.style.hasScrollingArea && scrollbarSlotWrapper.empty()) {
        scrollbarSlotWrapper = wrapper.append('rect').attr('class', 'v-m-scrollBarSlot')
          .attr('fill', this._props.style.scrollingArea.fill).attr('opacity', this._props.style.scrollingArea.opacity)
          .attr('visibility', this._props.visibility);
      }
      if(this._props.vertical){
        scrollbarSlotWrapper.attr('width', thumbSize).attr('height', this._props.size);
      }else{
        scrollbarSlotWrapper.attr('width', this._props.size).attr('height', thumbSize);
      }
      this._scrollbarSlotWrapper = scrollbarSlotWrapper;
      if(scrollbarWrapper.empty()){
        scrollbarWrapper = wrapper.append('rect').attr('class', 'v-m-scrollBar')
            .attr('fill', this._props.style.fill).attr('opacity', this._props.style.opacity)
            .attr('visibility', this._props.visibility);

        if (this._props.style.isRoundCorner) {
          scrollbarWrapper.attr('rx', thumbSize/2).attr('ry', thumbSize/2);
        }
      }
      this._scrollbarWrapper = scrollbarWrapper;
      this._factor = this._props.size / this._props.contentSize;
      var scrollBarSize = this._factor * this._props.size;
      this._moveStep = scrollBarSize;
      this._maxScrollPosition = this._props.size - scrollBarSize;
      this._scrollPosition = -this._contentStartPos * this._factor;

      var startPct = (100 * (this._scrollPosition / (this._props.size - this._factor * this._props.size)));
      if (startPct > 100) {
        this._contentStartPos = this._props.size - this._props.contentSize;
        this._scrollPosition = -this._contentStartPos * this._factor;
      }
      
      // Check ScrollBar Size. Not more than min_ScrollBar_Size
      if (this._props.style.useMinScrollbarSize) {
        var minScrollBarSize = this._props.style.thumbSize * 2 + this._props.style.padding * 2;
        this._minFactor = 1;
        if(scrollBarSize < minScrollBarSize){
          this._minFactor = minScrollBarSize / scrollBarSize;
          scrollBarSize = minScrollBarSize;
          this._factor = scrollBarSize / this._props.size;
          this._maxScrollPosition = this._props.size - scrollBarSize;
          this._scrollPosition = - this._contentStartPos * this._factor / this._minFactor;
          
          startPct = (100 * (this._scrollPosition / (this._props.size - this._factor * this._props.size)));
          if (startPct > 100) {
            this._contentStartPos = this._props.size - this._props.contentSize;
            this._scrollPosition = Math.min(this._maxScrollPosition, - this._contentStartPos * this._factor / this._minFactor);
          }
        }
      }

      this._scrollbarSize = scrollBarSize;
      if(this._props.vertical){
        scrollbarWrapper.attr('width', thumbSize).attr('height', scrollBarSize).attr('transform', 'translate(' + this._props.style.padding +','+this._scrollPosition+')');
      }else{
        scrollbarWrapper.attr('width', scrollBarSize).attr('height', thumbSize).attr('transform', 'translate('+this._scrollPosition+','+ this._props.style.padding +')');
      }

      if (UADetector.isWindowsSurface() || UADetector.isMobile()) {
        return wrapper;
      }
      
      //build event
      var that = this;

      var moveHandler = function(e) {
        _mousemoveHandler.call(that, e);
        e.preventDefault();
        e.stopPropagation();
      };

      var upHandler = function(e) {
        _mouseupHandler.call(that, e);
        if (window.removeEventListener !== undefined) {
          window.removeEventListener("mousemove", moveHandler);
          window.removeEventListener("mouseup", upHandler);
        } else {
          document.body.removeEventListener("mousemove", moveHandler);
          document.body.removeEventListener("mouseup", upHandler);
        }
        e.preventDefault();
        e.stopPropagation();
      };

      scrollbarWrapper.on('mousedown', function() {
        _mousedownHandler.call(that, d3.event);
        if (window.addEventListener !== undefined) {
          window.addEventListener('mousemove', moveHandler);
          window.addEventListener('mouseup', upHandler);
        } else {
          document.body.addEventListener("mousemove", moveHandler);
          document.body.addEventListener("mouseup", upHandler);
        }
      }).on('mouseover', function() {
        _mouseoverHandler.call(that);
      }).on('mouseleave', function() {
        _mouseleaveHandler.call(that);
      });

      scrollbarSlotWrapper.on('click', function() {
        _mouseclickHandler.call(that, d3.event);
      });

      var _mouseclickHandler = function(event) {
        that._startPos = 0;
        var pos = that._moveStep;
        var boundingBox = that._scrollbarWrapper.node().getBoundingClientRect();
        if (that._props.vertical) {
          if (event.clientY < boundingBox.top) {
            pos = -pos;
          } 
        } else {
          if (event.clientX < boundingBox.left) {
            pos = -pos;
          }
        }
        _scrollTo.call(that, pos);
      };

      var _mousedownHandler = function(e) {
        if (this._props.vertical) {
          this._startPos = e.clientY;
        } else {
          this._startPos = e.clientX;
        }
        this._scrollbarWrapper.attr('fill', this._props.style.hoverFill);
        this._isPressed = true;
      };

      var _mouseupHandler = function(e) {
        this._startPos = undefined;
        this._isPressed = false;
        if (e.target !== this._scrollbarWrapper.node()) {
          this._scrollbarWrapper.attr('fill', this._props.style.fill);
        }
      };

      var _mousemoveHandler = function(event) {
        if (this._startPos !== undefined) {
          if (this._props.vertical) {
            _scrollTo.call(this, event.clientY - this._startPos);
            this._startPos = event.clientY;
          } else {
            _scrollTo.call(this, event.clientX - this._startPos);
            this._startPos = event.clientX;
          }
          this._scrollbarWrapper.attr('visibility', 'visible');
        }
      };

      var _mouseoverHandler = function() {
        this._scrollbarWrapper.attr('fill', this._props.style.hoverFill);
      };

      var _mouseleaveHandler = function() {
        if (!this._isPressed) {
          this._scrollbarWrapper.attr('fill', this._props.style.fill);
        }
      };

      return wrapper;
    };

    ScrollBar.prototype.setProperties = function(props){
      Objects.extend(true, this._props, props);
      return this;
    };
    
    ScrollBar.prototype.getProperties = function(){
      return this._props;
    };

    ScrollBar.prototype.destroy = function(){
      if(this._scrollbarWrapper){
        this._scrollbarWrapper.remove();
      }

      if (this._scrollbarSlotWrapper) {
        this._scrollbarSlotWrapper.remove();
      }
      this._factor = undefined;
    };

    ScrollBar.prototype.scrollTo = function(offset, option){
      if (offset && isNaN(offset)) {
        return;
      }
      if (option) {
        var isPageMove = (option.moveType.indexOf("drag") < 0)? true : false;
        if (isPageMove) {
          var pos = this._scrollbarSize;
          switch (option.moveType) {
            case "wheelmove":
              pos *= 0.1;
              if (offset < 0) {
                pos = -pos;
              }
              break;
            case "leftarrow":
            case "uparrow":
              pos *= 0.06;
              pos = -pos;
              break;
            case "rightarrow":
            case "downarrow":
              pos *= 0.06;
              break;
            }
          _scrollTo.call(this, pos);              
        } else {
          _scrollTo.call(this, offset, option);
        }       
      }
      else {
        _scrollTo.call(this, offset, option);
      }
    };

    ScrollBar.prototype.setVisibility = function(visibility){
      this._scrollbarWrapper.attr('visibility', visibility);
      if (this._scrollbarSlotWrapper) {
        this._scrollbarSlotWrapper.attr('visibility', visibility);
      }
    };
    
    ScrollBar.prototype.resetPos = function(){
      this._startPos = undefined;
    };

    var _scrollTo = function(offset, option){
      if (UADetector.isMobile()) {
        offset *= (this._factor / this._minFactor);
      }
      var currentPos = this._scrollPosition + offset;
      if(currentPos < 0){
        currentPos = 0;
      } else if(currentPos > this._maxScrollPosition){
        currentPos = this._maxScrollPosition;
      }
      this._scrollPosition = currentPos;
      if(this._props.vertical){
        this._scrollbarWrapper.attr('transform', 'translate('+ this._props.style.padding +','+ this._scrollPosition+')');
      }else{
        this._scrollbarWrapper.attr('transform', 'translate('+this._scrollPosition+', '+this._props.style.padding+')');
      }
      _callbacks.call(this, 'onScroll', option);
    };

    var _callbacks = function(type, option){
      var start = - Math.round(this._scrollPosition * this._minFactor/ this._factor),
          thumbStart = this._scrollPosition,
          startPct = (100 * (thumbStart / (this._props.size - this._factor * this._props.size)));

      if(startPct === 100){
        start = this._props.size - this._props.contentSize;
      }  
      this._contentStartPos = start;
      
      var msc = {
        start : start,
        thumbStart : thumbStart,
        startPct : startPct,
        option : option
      };
      
      this._props[type].call(this, msc);
    };

    var getCurrentEvent = function() {
      if ( d3.event ) {
        return d3.event;
      } else {
        return window.event;
      }
    };

    return ScrollBar;
});

define('sap/viz/modules/legend/colorLegendArea',['sap/viz/base/utils/oo', 'sap/viz/modules/Base', 'sap/viz/util/TextUtils', 'sap/viz/base/utils/Objects', 'sap/viz/modules/dispatch','sap/viz/util/DrawUtil','sap/viz/base/utils/ObjectUtils',
'sap/viz/base/UADetector', 'sap/viz/util/ScrollBar'],
function Setup(oo, Base, TextRuler, Objects, dispatch, DrawUtil, ObjectUtils, UADetector, ScrollBar) {

  var MINIMAL_ITEM_HEIGHT_MOBILE = 30;
  var ColorLegendArea = function(styleManager){
    this._colorLA_width = 400;
    this._colorLA_height = 200;
    this._colorLA_contentSize = undefined;
    this._colorLA_valueLabelFont = {
      'fontfamily' : "'Open Sans', Arial, Helvetica, sans-serif",
      'fontsize' : '12px',
      'fontweight' : 'normal',
      'color' : '#333333'
    };
    this._colorLA_options = {
      isHierarchy : undefined,
      position : 'right',
      legendType : 'ColorLegend'
    };
    this._colorLA_colorLabelSize = 1;
    this._colorLA_shapes = [];
    this._colorLA_colors = [];
    this._colorLA_colorFeedLength = 0;
    this._colorLA_shapeFeedLength = 0;
    this._colorLA_wrap = undefined;
    this._colorLA_textHeight = 20;
    this._colorLA_textWidth = 80;
    this._colorLA_maxTextCount = 12; //For measure max text width. if the frist twelve text width is less than maxTextWidth(80), use its width. Otherwise, use maxTextWidth.
    this._colorLA_selectedItem = [];
    this._colorLA_isStyleChanged = true;
    this._colorLA_markerMargin = {
        right : 0.5,
        bottom : 0.5,
        left : 1,
        top : 0
    };
    this._colorLA_relayout  = true;
    
    this._colorLA_imageInfo = {
        imageMode: false,
        imagePalette: [],
        radio: 1
    };
    
    
    this._colorLA_startRow = 0;
    this._colorLA_lastStartRow = 0;
    this._colorLA_endRow = Infinity;
    
    //Each row's position [{x: 10, y: 10}, {...}...]
    this._colorLA_rowPosArr = [];
    this._colorLA_chartData = {};
    this._colorLA_hieChartData = []; //For hierarchical data
    this._colorLA_isItemsOverflow = undefined;
    
    // Added for geo lengend customization, when this flag, the color legend area
    // will append "..." to end of legend items, and without scroll bar
    // Currently only process virtical case 
    this._colorLA_bForceEllipsis = false;
    this._colorLA_endItemNum = undefined;
    this._colorLA_startItemNum = 0;
    this._colorLA_firstOverFlowPos = undefined;
    
    this._colorLA_effectManager = null;
    this._colorLA_styleManager = styleManager;
    
    this._colorLA_style = {};
    this._colorLA_style.hovershadow = styleManager.queryDefault('v-hovershadow');
    this._colorLA_style.clickedshadow = '#808080';
    this._colorLA_magicMaxTextItemWidth = 0;

    this._colorLA_scrollBar = undefined;
    this._colorLA_scrollBarSize = UADetector.isMobile() ? 8 : 10;
    this._colorLA_scrollBarTimer = undefined;
    this._colorLA_scrollBarStartPos = undefined;
    this._colorLA_contentSize = 0;
    this._colorLA_eachRowHeight = 0;

    this._colorLA_pathID = ObjectUtils.guid();
  };
  
  oo.extend(ColorLegendArea, Base);
  
  ColorLegendArea.prototype.forceEllipsis = function(_){
    if(!arguments.length){
      return this._colorLA_bForceEllipsis;
    }
    
    this._colorLA_bForceEllipsis = _;
    return this;
  };
  
  ColorLegendArea.prototype.render = function(selection){
    this._colorLAfn_getThemeStyleDef();

    // relayout for new smart layout
    var labelsData;
    if (this._colorLA_relayout) {
      this._colorLAfn_cleanScrollBar();
      this._colorLA_wrap = undefined;
      this._colorLA_isItemsOverflow = false;
      this._colorLAfn_calculatePreferredSize({width: this._colorLA_width, height: this._colorLA_height});
      labelsData = this._colorLAfn_getLabelData();
    } else {
      labelsData = this._colorLAfn_getLabelData();
      this._colorLA_isItemsOverflow = false;
      if((labelsData.length > 0 && labelsData.length < this._colorLA_chartData.length) || this._colorLA_startItemNum > 0){
        this._colorLA_isItemsOverflow = true;
      }
      if (this._colorLA_isItemsOverflow === true) {
        this._colorLAfn_calculatePreferredSize({width: this._colorLA_width, height: this._colorLA_height});
        labelsData = this._colorLAfn_getLabelData();
      }
    }

    // initial wrap
    var wrap;
    if (this._colorLA_wrap === undefined) {
      wrap = selection.selectAll('g.v-legend-content');
      if(!wrap.empty()){
        wrap.remove();
      }
      wrap = selection.append('g').attr('class', 'v-legend-content');
      this._colorLA_wrap = selection;
    } else {
      wrap = this._colorLA_wrap.selectAll('g.v-legend-content');
    }

    // indicated item while hovering or clicking
    var indicatedItems = wrap.selectAll('rect.v-indicatedRect');
    if (indicatedItems.empty()) {
      indicatedItems = wrap.append('rect').attr('class', 'v-indicatedRect v-legend-item v-hovershadow').attr('visibility', 'hidden');
    }

    var rectMargin = this._colorLA_markerMargin.bottom * this._colorLA_textHeight,rectWidth;
      if(this._colorLA_isItemsOverflow){
        if(this._colorLAfn_isScrollable()){
          rectWidth = this._colorLA_width - this._colorLA_scrollBarSize + 5;
        }else{
          rectWidth = this._colorLA_width + 5;
        }
      }else{
        rectWidth = this._colorLA_width + 10;
      }
      indicatedItems.attr('width', rectWidth).attr('x', -5).attr('y', -rectMargin/2);
      if(UADetector.isMobile() && (!this._colorLA_options.isHierarchy) && (this._colorLA_textHeight + rectMargin < MINIMAL_ITEM_HEIGHT_MOBILE)){
        indicatedItems.attr('height', MINIMAL_ITEM_HEIGHT_MOBILE).attr('y', (this._colorLA_textHeight - MINIMAL_ITEM_HEIGHT_MOBILE)/2);
      }else{
        if(this._colorLAfn_isHorizontal() && this._colorLAfn_isScrollable()){
          indicatedItems.attr('height',this._colorLA_textHeight + 10).attr('y', -5);
        }else{
          indicatedItems.attr('height',this._colorLA_textHeight + rectMargin).attr('y', -rectMargin/2);
        }
      }
    // Set default value style
    var defaultValueLabelStyle = this._colorLA_styleManager.queryDefault('v-label');
    d3.select(wrap.node().parentNode).attr('font-family', defaultValueLabelStyle['font-family']).attr('font-size', defaultValueLabelStyle['font-size']).attr('font-weight', defaultValueLabelStyle['font-weight']).attr('fill', defaultValueLabelStyle['fill']).attr('font-style',defaultValueLabelStyle['font-style']);

    // Create each row
    var gEnterRow = wrap.selectAll('g.v-row').data(labelsData);
    gEnterRow.exit().remove();

    var rectEnterRow = gEnterRow.enter().append('g');

    gEnterRow.attr('class', function(d, i) {
      return 'v-row ID_' + i;
    });

    // Render legend itmes
    if ((this._colorLA_options.legendType !== 'BubbleColorLegend') && this._colorLA_options.isHierarchy && (!this._colorLAfn_isHorizontal())) {
      //Legend with hierarchy, not bubble color legend and not in top/bottom
      this._colorLAfn_renderHierarchicalLegend.call(this, labelsData, gEnterRow);
    } else {
      // No hierarchy
      this._colorLAfn_renderNormalLegend.call(this, labelsData, gEnterRow);
    }

    // Add 'rect' element to handle click event.
    rectEnterRow.select('rect').attr('class', 'v-eventRect');  
    gEnterRow.each(function(d, i) {
      wrap.selectAll('rect.v-eventRect').attr('class', function() {
        return 'v-eventRect v-legend-item ID_' + i;
      });
    });
    var eventItems = wrap.selectAll('rect.v-eventRect').data(labelsData);
    eventItems = wrap.selectAll('rect.v-eventRect');
    eventItems.attr('height', this._colorLA_eachRowHeight).attr('fill', 'rgba(255, 255, 255, 0)');
    eventItems.attr("transform", "translate(0," + (this._colorLA_textHeight - this._colorLA_eachRowHeight) / 2 + ")");
    if(this._colorLAfn_isHorizontal() && this._colorLAfn_isScrollable()){
      eventItems.attr('height',this._colorLA_eachRowHeight + 6);
    }

    if (this._colorLAfn_isHorizontal()) {
      // markerSize = Color_Marker_Size + Right_Margin + Left_Margin
      var markerSize = (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * this._colorLA_textHeight + this._colorLA_markerMargin.left * this._colorLA_textHeight / 2;
      var that = this;
      eventItems.attr('width', function(d){
        if(that._colorLA_options.isScrollable){
          return d.size.width + markerSize;
        }else{
          return that._colorLA_magicMaxTextItemWidth + markerSize;
        }
      });
    } else {
      if(this._colorLAfn_isScrollable()){
        eventItems.attr('width', this._colorLA_width - this._colorLA_scrollBarSize);
      }else{
        eventItems.attr('width', this._colorLA_width);
      }
    }

    // Handle items are overflow
    var overflowIndicator = selection.selectAll('.v-overflow');
    if ((this._colorLA_isItemsOverflow || this._colorLA_bForceEllipsis) && (labelsData.length > 0 || this._colorLA_hieChartData.length > 0)) {
      if(overflowIndicator.empty()){
        overflowIndicator = selection.append('g').attr('class', 'v-overflow');
      }
      
      if (this._colorLAfn_isScrollable()) {
        this._colorLAfn_renderScrollable.call(this, overflowIndicator);
      } else {
        this._colorLAfn_renderEllipsis.call(this, overflowIndicator);
      } 
    } else {
      if(!overflowIndicator.empty()){
        this._colorLAfn_cleanScrollBar();
        overflowIndicator.remove();
      }
    }

    this._colorLA_relayout = false;
  };
    
    ColorLegendArea.prototype.width = function(_) {
      if(!arguments.length){
        return this._colorLA_width;
      }
      this._colorLA_width = _;
      this._colorLA_relayout = true;
      this._colorLA_isItemsOverflow = false;
      return this;
    };

    ColorLegendArea.prototype.height = function(_) {
      if(!arguments.length){
        return this._colorLA_height;
      }
      this._colorLA_height = _;
      this._colorLA_relayout = true;
      this._colorLA_isItemsOverflow = false;
      return this;
    };
    
    ColorLegendArea.prototype.color = function(_) {
      if(!arguments.length){
        return this._colorLA_colors;
      }
      this._colorLA_colors = _;  
      return this;
    };

    ColorLegendArea.prototype.shapes = function(_) {
      if(!arguments.length){
        return this._colorLA_shapes;
      }
      this._colorLA_shapes = _;
      return this;
    };
    
    ColorLegendArea.prototype.colorFeedLength = function(_){
      this._colorLA_colorFeedLength = _;
      return this;
    };
    
    ColorLegendArea.prototype.shapeFeedLength = function(_){
      this._colorLA_shapeFeedLength = _;
      return this;
    };
    
    ColorLegendArea.prototype.data = function(_){
      if(!arguments.length){
        return this._colorLA_chartData;
      }
      this._colorLA_chartData = _;
      return this;
    };

    ColorLegendArea.prototype.imageInfo = function(_) {
      if(!arguments.length){
        return this._colorLA_imageInfo;
      }
      this._colorLA_imageInfo = _;
      this._colorLA_relayout = true;
      return this;
    };
    
    ColorLegendArea.prototype.properties = function(properties) {
      if(!arguments.length){
        return this._colorLA_options;
      }
      
      if (this._colorLA_options.position !== properties.position) {
        this._colorLA_width = 400;
        this._colorLA_height = 200;
      }
      
      Objects.extend(true, this._colorLA_options, properties);
      //Reset isHierarchy according with isScrollable.
      //if isScrollable === true, set isHierarchy to false. BY UX DESIGN.
      if(this._colorLA_options.isScrollable === true){
        this._colorLA_options.isHierarchy = false;
      }
      return this;
    };
    
    ColorLegendArea.prototype.hasData = function(){
     if( this._colorLA_chartData && this._colorLA_chartData.length > 0){
       return true;
     }else {
       return false;
       }
    };
    
    ColorLegendArea.prototype.getPreferredSize = function() {
      this._colorLAfn_getThemeStyleDef();
      //TODO reset itemsCount which is used in overflow legend items
      this._colorLA_startItemNum = 0;
      return this._colorLAfn_calculatePreferredSize({width: this._colorLA_width, height: this._colorLA_height});
    };
    
    ColorLegendArea.prototype.doLayout = function(size){
      return size;
    };
    
    ColorLegendArea.prototype.effectManager = function(_) {
      if(!arguments.length){
        return this._colorLA_effectManager;
      }
      this._colorLA_effectManager = _;

      return ColorLegendArea.prototype;
    };
    ColorLegendArea.prototype.destroy = function(){
      //remove listener
      if(this._colorLA_wrap){
        this._colorLA_wrap = null;  
      }
      this._colorLA_styleManager = null;
      this._colorLA_selectedItem = null;
      this._colorLA_effectManager = null;
    };

    ColorLegendArea.prototype.highlight = function(target){ 
      if(target.__data__){
        var indicatedItem = this._colorLA_wrap.selectAll('.v-indicatedRect');
        var indicatedItemPos = target.__data__.pos;
        if(indicatedItemPos){
          indicatedItem.attr('class', 'v-indicatedRect v-legend-item v-hovershadow')
            .attr('visibility', 'visible')
            .attr('fill', this._colorLA_style.hovershadow.fill);
//            .attr('y', indicatedItemPos.y - (this._colorLA_eachRowHeight - this._colorLA_textHeight) / 2);
          if(this._colorLAfn_isHorizontal()) {
            var size = this._colorLA_magicMaxTextItemWidth + (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * this._colorLA_textHeight + this._colorLA_markerMargin.left * this._colorLA_textHeight / 2;
            if(this._colorLAfn_isScrollable()){
              size = target.__data__.size.width + (this._colorLA_colorLabelSize + this._colorLA_markerMargin.left) * this._colorLA_textHeight;
            } else {
              indicatedItem.attr('y', indicatedItemPos.y - (this._colorLA_eachRowHeight - this._colorLA_textHeight) / 2);
            }
            indicatedItem.attr('x', indicatedItemPos.x - 4).attr('width', size);
          }else{
            indicatedItem.attr('y', indicatedItemPos.y - (this._colorLA_eachRowHeight - this._colorLA_textHeight) / 2);
          }
        }
      }
    };

    ColorLegendArea.prototype.unhighlight = function(target, isResetPos){
      if(this._colorLA_wrap){
        this._colorLA_wrap.selectAll('.v-indicatedRect').attr('visibility', 'hidden');
      }
      if(this._colorLA_scrollBar && isResetPos){
        this._colorLA_scrollBar.resetPos();
      }
    };

    ColorLegendArea.prototype.panStart = function(target){
      if(this._colorLAfn_isScrollable()){
        //console.log('pan start: ', JSON.stringify(target));
        this._colorLA_scrollBarStartPos = (this._colorLAfn_isHorizontal()) ? target.x : target.y;
        clearTimeout(this._colorLA_scrollBarTimer);
      }
    };

    ColorLegendArea.prototype.panMove = function(target){
      if (this._colorLA_scrollBarStartPos === undefined) {
        return;
      }
      if(this._colorLAfn_isScrollable() && this._colorLA_scrollBar){
        //console.log('pan move: ', JSON.stringify(target));
        var offset = 0;
        if(this._colorLAfn_isHorizontal()){
          offset = this._colorLA_scrollBarStartPos - target.x;
          this._colorLA_scrollBarStartPos = target.x;
        }else{
          offset = this._colorLA_scrollBarStartPos- target.y;
          this._colorLA_scrollBarStartPos = target.y;
        }
        this._colorLA_scrollBar.scrollTo(offset);
        this._colorLA_scrollBar.setVisibility('visible');
      }
    };

    ColorLegendArea.prototype.panEnd = function(target){
      if(this._colorLAfn_isScrollable()){
        //console.log('pan end: ', JSON.stringify(target));
        this._colorLA_scrollBarStartPos = undefined;
        var that = this;
        if(this._colorLA_scrollBar){
          this._colorLA_scrollBarTimer = setTimeout(
            function(){
              that._colorLA_scrollBar.setVisibility('hidden');
            },1000);
        }
      }
    };

    ColorLegendArea.prototype.selected = function(target){
      if(target.__data__){
        var indicatedItem = this._colorLA_wrap.selectAll('.v-indicatedRect');
        var indicatedItemPos = target.__data__.pos;
        if(indicatedItemPos){
          indicatedItem.attr('class', 'v-indicatedRect v-legend-item v-hovershadow-mousedown').attr('visibility', 'visible')
            .attr('fill', this._colorLA_style.clickedshadow);
//            .attr('y', indicatedItemPos.y - (this._colorLA_eachRowHeight - this._colorLA_textHeight) / 2); 
          if(this._colorLAfn_isHorizontal()) {
            var size = this._colorLA_magicMaxTextItemWidth + (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * this._colorLA_textHeight + this._colorLA_markerMargin.left * this._colorLA_textHeight / 2;
            if(this._colorLAfn_isScrollable()){
              size = target.__data__.size.width + (this._colorLA_colorLabelSize + this._colorLA_markerMargin.left) * this._colorLA_textHeight;
            }else {
              indicatedItem.attr('y', indicatedItemPos.y - (this._colorLA_eachRowHeight - this._colorLA_textHeight) / 2);
            }
            indicatedItem.attr('x', indicatedItemPos.x - 4).attr('width', size);
          }else{
            indicatedItem.attr('y', indicatedItemPos.y - (this._colorLA_eachRowHeight - this._colorLA_textHeight) / 2);
          }
        }
      }
    };

    ColorLegendArea.prototype._colorLAfn_cleanScrollBar = function(){
      if(this._colorLA_scrollBar){
        this._colorLA_scrollBar.destroy();
        var parentNode = d3.select(this._colorLA_wrap.node().parentNode);
        if(parentNode.selectAll('clipPath')){
          parentNode.selectAll('clipPath').remove();
        }
        this._colorLA_wrap.attr('clip-path',null);
        this._colorLA_contentSize = 0;
        this._colorLA_scrollBar = undefined;
      }
    };

    ColorLegendArea.prototype._colorLAfn_cleanTextEllipsis = function(){
      var itemsEllipsis = this._colorLA_wrap.selectAll('text.v-itemsEllipsis');
      if(!itemsEllipsis.empty()){
        itemsEllipsis.remove();
      }
    };

    ColorLegendArea.prototype._colorLAfn_renderEllipsis = function(overflowIndicator){
      var that = this;
      //Clean Scroll Bar
      this._colorLAfn_cleanScrollBar();
      //Much items ellipsis
      var itemsEllipsis = overflowIndicator.selectAll('text.v-itemsEllipsis');
      if(itemsEllipsis.empty()){
        itemsEllipsis = overflowIndicator.append('text').attr('class', 'v-itemsEllipsis').text('...'); //.attr('text-anchor', 'middle');
      }
      var dx = (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * this._colorLA_textHeight; //this._colorLA_width/2
      itemsEllipsis.attr('visibility', function(){
        var visible = 'hidden';
        if(that._colorLA_isItemsOverflow || that._colorLA_bForceEllipsis){
          visible = 'visible';
        }
        return visible;
      }).attr('dx', dx).attr('dy', function(){
        return (that._colorLA_firstOverFlowPos === undefined || that._colorLA_firstOverFlowPos > that._colorLA_height) ? that._colorLA_height : that._colorLA_firstOverFlowPos;
      });
      overflowIndicator.attr('transform', 'translate(0, 0)');
    };
    
    ColorLegendArea.prototype._colorLAfn_renderScrollable = function(overflowIndicator){
      //Clean Text Ellipsis
      this._colorLAfn_cleanTextEllipsis();

      if(this._colorLAfn_isHorizontal()){
        this._colorLAfn_renderHorizontalScrollable(overflowIndicator);
      }else{
        this._colorLAfn_renderVerticalScrollable(overflowIndicator);
      }
    };

    ColorLegendArea.prototype._colorLAfn_renderVerticalScrollable = function(overflowIndicator){
      if(this._colorLA_scrollBar === undefined){
        this._colorLA_scrollBar = new ScrollBar();
        var that = this;
        var contentWrapper = this._colorLA_wrap.selectAll('g.v-legend-content');
        
        //Get Scrollbar Style 
        var thumbStyle = this._colorLA_styleManager.query('v-scrollbarThumb');
        this._colorLAfn_setScrollBarForMobile();
        this._colorLA_scrollBar.setProperties({
          size: this._colorLA_height,
          contentSize: this._colorLA_contentSize,
          eventWrapper: [contentWrapper],
          style : {
            fill : thumbStyle.fill,
            opacity : thumbStyle.opacity
          },
          onScroll : function(options){
            contentWrapper.attr('transform', 'translate(0, '+options.start+')');
            if(that._colorLA_endItemNum < that._colorLA_chartData.length && options.startPct === 100){
              that._colorLA_lastStartRow = that._colorLA_startItemNum;
              that._colorLA_startItemNum = that._colorLA_endItemNum;  
              that.render(that._colorLA_wrap);
            }
          }
        });
        
        this._colorLA_scrollBar.render(overflowIndicator);
        
        if(UADetector.isMobile() && this._colorLA_scrollBar){
          clearTimeout(this._colorLA_scrollBarTimer);
          this._colorLA_scrollBar.setVisibility('visible');
          this._colorLA_scrollBarTimer = setTimeout(
            function(){
              that._colorLA_scrollBar.setVisibility('hidden');
            },2000);
        }
      } else {
        this._colorLA_scrollBar.setProperties({
          size: this._colorLA_height,
          contentSize: this._colorLA_contentSize
        }).render(overflowIndicator);
      }
      //Add clip path to legend items's container
      var parentNode = d3.select(this._colorLA_wrap.node().parentNode);
      if(parentNode.selectAll('.legend-clip-rect').empty()){
        parentNode.insert('svg:defs', ":first-child").append('svg:clipPath').attr('id', 'legend_'+this._colorLA_pathID).append('rect')
            .attr('class', 'legend-clip-rect').attr('width', (this._colorLA_width+5)+'px').attr('height', this._colorLA_height+'px')
            .attr('x', -5)
            .attr('style', 'stroke: blue; fill: none;');
      }else{
        parentNode.selectAll('.legend-clip-rect').attr('width', (this._colorLA_width+5)+'px').attr('height', this._colorLA_height+'px').attr('y', 0);
      }
      this._colorLA_wrap.attr('clip-path', 'url(#'+'legend_'+this._colorLA_pathID+')');
  
      overflowIndicator.attr('transform', 'translate('+(this._colorLA_width - this._colorLA_scrollBarSize)+', 0)');
    };

    ColorLegendArea.prototype._colorLAfn_setScrollBarForMobile = function(){
      if(UADetector.isMobile()){
        this._colorLA_scrollBar.setProperties({
          visibility : 'visible',
          style : {
            thumbSize : 4,
            padding: 1,
            opacity : 0.8
          }
        });
      }
    };

    ColorLegendArea.prototype._colorLAfn_renderHorizontalScrollable = function(overflowIndicator){
      if(this._colorLA_scrollBar === undefined){
        this._colorLA_scrollBar = new ScrollBar();
        var that = this;
        var contentWrapper = this._colorLA_wrap.selectAll('g.v-legend-content');
        //Get Scrollbar Style 
        var thumbStyle = this._colorLA_styleManager.query('v-scrollbarThumb');
        
        this._colorLAfn_setScrollBarForMobile();
        this._colorLA_scrollBar.setProperties({
          size: this._colorLA_width,
          contentSize: this._colorLA_contentSize,
          vertical: false,
          eventWrapper: [contentWrapper],
          style : {
            fill : thumbStyle.fill,
            opacity : thumbStyle.opacity
          },
          onScroll : function(options){
            contentWrapper.attr('transform', 'translate('+options.start+', 0)');
            if(that._colorLA_endItemNum < that._colorLA_chartData.length && options.startPct === 100){
              that._colorLA_lastStartRow = that._colorLA_startItemNum;
              that._colorLA_startItemNum = that._colorLA_endItemNum;  
              that.render(that._colorLA_wrap);
            }
          }
        }); 
        this._colorLA_scrollBar.render(overflowIndicator);
        
        if(UADetector.isMobile() && this._colorLA_scrollBar){
          clearTimeout(this._colorLA_scrollBarTimer);
          this._colorLA_scrollBar.setVisibility('visible');
          this._colorLA_scrollBarTimer = setTimeout(
            function(){
              that._colorLA_scrollBar.setVisibility('hidden');
            },2000);
        }
        
      } else {
       // this._colorLAfn_setScrollBarForMobile();
        this._colorLA_scrollBar.setProperties({
          size: this._colorLA_width,
          contentSize: this._colorLA_contentSize
        }).render(overflowIndicator);
      }
      //Add clip path to legend items's container
      var parentNode = d3.select(this._colorLA_wrap.node().parentNode);
      if(parentNode.selectAll('.legend-clip-rect').empty()){
        parentNode.insert('svg:defs', ":first-child").append('svg:clipPath').attr('id', 'legend_'+this._colorLA_pathID).append('rect')
            .attr('class', 'legend-clip-rect').attr('width', (this._colorLA_width+5)+'px').attr('height', (this._colorLA_height+5)+'px')
            .attr('x', -5).attr('y', -5)
            .attr('style', 'stroke: blue; fill: none;');
      }else{
        parentNode.selectAll('.legend-clip-rect').attr('width', (this._colorLA_width+5)+'px').attr('height', (this._colorLA_height+5)+'px').attr('y', -5);
      }
      this._colorLA_wrap.attr('clip-path', 'url(#'+'legend_'+this._colorLA_pathID+')');
  
      overflowIndicator.attr('transform', 'translate(0,'+((this._colorLA_eachRowHeight + this._colorLA_textHeight) / 2 + 6)+')');
    };
    
    ColorLegendArea.prototype._colorLAfn_renderNormalLegend = function(labelsData, gEnterRow){
      //Create each row
      this._colorLA_wrap.selectAll('g.v-group').remove();
      var rowWrap;
      for(var i = 0, len = labelsData.length; i < len; i++) {
        rowWrap = this._colorLA_wrap.selectAll("g.v-row.ID_" + i);       
        if(this._colorLAfn_isHorizontal()) {
          this._colorLAfn_createRowWithColorLabel.call(this, rowWrap, i, true, labelsData[i].val, this._colorLA_textWidth);
        }else{
          this._colorLAfn_createRowWithColorLabel.call(this, rowWrap, i, true, labelsData[i].val);
        }
        
      }

      //Each row position
      gEnterRow.attr('transform', function(d, i) {
        if(d.pos){
          return 'translate(' + d.pos.x + ',' + d.pos.y + ')';
        }
      });
    };
    
    ColorLegendArea.prototype._colorLAfn_renderHierarchicalLegend = function(labelsData, gEnterRow){
      var hieLabelsData = this._colorLA_hieChartData, that = this;
      
      this._colorLA_wrap.selectAll('g.v-group').remove();
      var groupWrap = this._colorLA_wrap.selectAll('g.v-legend-content').selectAll('g.v-group').data(hieLabelsData);
      groupWrap.exit().remove();
      var groupWrapEnter = groupWrap.enter().append('g').attr('class', 'v-group');
      
      var groupText = groupWrapEnter.selectAll('text').data(function(d){
        return d.subgroup;
      }, function(d){
        return d;
      });
      groupText.enter().append('text');
      var labelFont = "font-size:" + this._colorLA_valueLabelFont.fontsize + "; font-weight:" + this._colorLA_valueLabelFont.fontweight + "; font-family:" + this._colorLA_valueLabelFont.fontfamily;
      groupText.each(function(d, i) {
        TextRuler.ellipsis(d, this, that._colorLA_width - i * 10, labelFont);
      });
      
      groupWrap.selectAll('text').attr('dy', function(d, i){
        return (i + 1) * that._colorLA_textHeight + ((i > 0) ? i * that._colorLA_markerMargin.bottom * that._colorLA_textHeight : 0);
      }).attr('dx', function(d, i){
        return i * 10;
      });
      
      var rowWrap, maxItemTextWidth;
      for(var i = 0, len = labelsData.length; i < len; i++) {
        rowWrap = this._colorLA_wrap.selectAll("g.v-row.ID_" + i);
        if(this._colorLAfn_isHorizontal()) {
          this._colorLAfn_createRowWithColorLabel.call(this, rowWrap, i + this._colorLA_startItemNum, true, labelsData[i].orignialVal[labelsData[i].orignialVal.length-1], this._colorLA_textWidth);
        }else{
          maxItemTextWidth = this._colorLA_width - labelsData[i].pos.x - (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * this._colorLA_textHeight;
          this._colorLAfn_createRowWithColorLabel.call(this, rowWrap, i + this._colorLA_startItemNum, true, labelsData[i].orignialVal[labelsData[i].orignialVal.length-1], maxItemTextWidth);
        }
      }
      groupWrap.attr('transform', function(d, i){
        if(d.pos){
          return 'translate(' + d.pos.x + ',' + d.pos.y + ')';
        }
      });
      //Each row position
      gEnterRow.attr('transform', function(d, i) {
        if(d.pos){
          return 'translate(' + d.pos.x + ',' + d.pos.y + ')';
        }
      });
    };
    
   ColorLegendArea.prototype._colorLAfn_getLabelData = function(){
      var labelsData = [], start = 0, len = this._colorLA_endItemNum;
      if(this._colorLA_chartData.length > 0){
        //Split items
        labelsData = this._colorLA_chartData.slice(start, len);
        this._colorLA_startRow = 0;
        this._colorLA_endRow = len;
      }
      return labelsData;
    };
    
    ColorLegendArea.prototype._colorLAfn_getThemeStyleDef = function(){
      var valueLabelStyle = this._colorLA_styleManager.query('v-label');
      if(valueLabelStyle){
        if(valueLabelStyle['fill']){
          this._colorLA_valueLabelFont.color = valueLabelStyle['fill'];
        }
        if(valueLabelStyle['font-family']){
          this._colorLA_valueLabelFont.fontfamily = valueLabelStyle['font-family'];
        }
        if(valueLabelStyle['font-size']){
          if(this._colorLA_valueLabelFont.fontsize !== valueLabelStyle['font-size']){
            this._colorLA_isStyleChanged = true;
          }
          this._colorLA_valueLabelFont.fontsize = valueLabelStyle['font-size'];
        }
        if(valueLabelStyle['font-weight']){
          if(this._colorLA_valueLabelFont.fontweight !== valueLabelStyle['font-weight']){
            this._colorLA_isStyleChanged = true;
          }
          this._colorLA_valueLabelFont.fontweight = valueLabelStyle['font-weight'];
        }
      }
    };
    
    ColorLegendArea.prototype._colorLAfn_calculatePreferredSize = function(wholeSize){
      var maxHeight = 0, maxWidth = 0, minWidth = 0, minHeight = 0,
        maxRowTextSize = {'width':0, 'height':0}, 
        labelsData = this._colorLA_chartData,
        maxRowWidth = 0;
      
      if(labelsData && labelsData.length > 0){
        this._colorLA_textHeight = parseInt(this._colorLA_valueLabelFont.fontsize, 10); //1em
        
        //markerSize = Color_Marker_Size + Right_Margin
        var markerSize = (this._colorLA_colorLabelSize + this._colorLA_markerMargin.right) * this._colorLA_textHeight;
        var rowLabelSize = [], xPos = 0, yPos = 0; //each row text width
        
        this._colorLA_eachRowHeight = this._colorLA_textHeight + this._colorLA_textHeight * this._colorLA_markerMargin.bottom;
        if(UADetector.isMobile() && (!this._colorLA_options.isHierarchy) && this._colorLA_eachRowHeight < MINIMAL_ITEM_HEIGHT_MOBILE){
          this._colorLA_eachRowHeight = MINIMAL_ITEM_HEIGHT_MOBILE;
        }
        
        this._colorLA_rowPosArr = [];
        
        var i, j, len, jLen = 0, _colorLA_contentHeight = 200;
        //Measure labels size
        //If colors feed don't have MND, can't show legend in hierarchy.
        if((this._colorLA_options.legendType !== 'BubbleColorLegend') && this._colorLA_options.isHierarchy && (!this._colorLAfn_isHorizontal())){
          this._colorLA_firstOverFlowPos = undefined;
          
          var dimLen = 0, lastDimIndex, lastSameDimVal, 
            hieLabelItem = {
              subgroup: [],
              item: [],
              pos: { x: xPos, y: yPos}
            },
            hieLabelsData = this._colorLA_hieChartData = [];
          this._colorLA_endItemNum = labelsData.length;
          if(wholeSize.height !== 0) {
            _colorLA_contentHeight = wholeSize.height;
          }
          
          for(i = 0, len = labelsData.length; i < len; i++) {
            dimLen = labelsData[i].orignialVal.length;
            lastDimIndex = labelsData[i].val.search(labelsData[i].orignialVal[dimLen - 1]);
            if(lastSameDimVal === undefined){
              lastSameDimVal = labelsData[i].val.substring(0, lastDimIndex);
              for(j = 0; j < dimLen; j++){
                if(j === dimLen - 1){
                  hieLabelItem.item.push({
                    val: labelsData[i].orignialVal[j],
                    ctx: labelsData[i].ctx
                  });
                }else{
                  hieLabelItem.subgroup.push(labelsData[i].orignialVal[j]);
                }
                yPos = yPos + this._colorLA_eachRowHeight;
              }
            }else{
              if(labelsData[i].val.search(lastSameDimVal) === -1){
                hieLabelsData.push(Objects.extend(true, {}, hieLabelItem));
  
                //New group
                lastSameDimVal = labelsData[i].val.substring(0, lastDimIndex);
                hieLabelItem.subgroup = [];
                hieLabelItem.item = [];
                hieLabelItem.pos = {
                  x: xPos,
                  y: yPos
                };
                for(j = 0; j < dimLen; j++){
                  yPos = yPos + this._colorLA_eachRowHeight;
                  if(yPos > _colorLA_contentHeight){
                    break;
                  }
                  if(j === dimLen - 1){
                    hieLabelItem.item.push({
                      val: labelsData[i].orignialVal[j],
                      ctx: labelsData[i].ctx
                    });
                  }else{
                    hieLabelItem.subgroup.push(labelsData[i].orignialVal[j]);
                  }
                }
              }else{
                yPos = yPos + this._colorLA_eachRowHeight;
                hieLabelItem.item.push({
                  val: labelsData[i].orignialVal[dimLen - 1],
                  ctx: labelsData[i].ctx
                });
              }
            }
            if(yPos > _colorLA_contentHeight){
              this._colorLA_isItemsOverflow = true;
              this._colorLA_endItemNum = i;
              yPos = yPos - this._colorLA_eachRowHeight;
              this._colorLA_firstOverFlowPos = yPos + this._colorLA_textHeight;
              
              //if(hieLabelItem.subgroup.length > 0){
                hieLabelsData.push(Objects.extend(true, {}, hieLabelItem));
              //}
              hieLabelItem = undefined;
              break;
            }
            labelsData[i].pos = {x: (xPos + 10 * (dimLen-1)), y: (yPos - this._colorLA_eachRowHeight)};
          }
          if(len > 0 && hieLabelItem !== undefined){
            hieLabelsData.push(Objects.extend(true, {}, hieLabelItem));
          }
          
          //Calculate max width
          var rowWidth = 0, isOverMaxTextCount = false; //Used for measure text
          maxRowWidth = 0;
         
          for(i = 0, len = hieLabelsData.length; i < len; i++){
            for(j = 0, jLen = hieLabelsData[i].subgroup.length; j < jLen; j++){
              rowWidth = xPos + j * 10 + TextRuler.fastMeasure(hieLabelsData[i].subgroup[j], this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily).width;
              if(rowWidth > maxRowWidth){
                maxRowWidth = rowWidth;
              }
            }
            for(j = 0; j < hieLabelsData[i].item.length; j++){
              rowWidth = xPos + 10 * (jLen - 1) + markerSize + this._colorLA_markerMargin.left * this._colorLA_textHeight + TextRuler.fastMeasure(hieLabelsData[i].item[j].val, this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily).width;
              if(rowWidth > maxRowWidth){
                maxRowWidth = rowWidth;
              }
            }
          }

          maxWidth = maxRowWidth;
          minWidth = xPos + 10 * (jLen - 1) + markerSize + this._colorLA_markerMargin.left * this._colorLA_textHeight + TextRuler.fastMeasure('M...', this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily).width;
          maxHeight = yPos;
          minHeight = 2 * this._colorLA_textHeight;
        }else{
          var _colorLA_contentSize = {width : 200, height: 200};
          //No isHierarchy. Calculate each row's position
          if(this._colorLAfn_isHorizontal()){
            //Horizontal Layout
            if(this._colorLAfn_isScrollable()){
              //Horizontal with Scrollbar 
              var _scrollBarContentSize;
              if(wholeSize.width !== 0) {
                _colorLA_contentSize.width = wholeSize.width;
                _scrollBarContentSize = wholeSize.width * 2;
              }
              if(this._colorLA_startItemNum > 0){
                _scrollBarContentSize = this._colorLA_contentSize + wholeSize.width * 2;
                xPos = this._colorLA_contentSize;
              }
              var fixedWidth = markerSize + this._colorLA_markerMargin.left * this._colorLA_textHeight;
              this._colorLA_endItemNum = labelsData.length;
              for(i = this._colorLA_startItemNum, len = labelsData.length; i < len; i++){
                labelsData[i].pos = {x : xPos, y : yPos};
                labelsData[i].size = TextRuler.fastMeasure(labelsData[i].val, this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily);
                // if(labelsData[i].size.width > this._colorLA_textWidth){
                //   labelsData[i].size.width = this._colorLA_textWidth;
                // }
                xPos = xPos + fixedWidth + labelsData[i].size.width;
                if(xPos > _colorLA_contentSize.width){
                  this._colorLA_isItemsOverflow = true;
                }
                if(xPos > _scrollBarContentSize){
                  if(this._colorLA_startItemNum === i){
                    //No item is added. Enlarge content size.
                    _scrollBarContentSize = xPos;
                    this._colorLA_endItemNum = i + 1;
                  }else{
                    this._colorLA_endItemNum = i; 
                    xPos = xPos - fixedWidth - labelsData[i].size.width; 
                  }
                  break;
                }
              }
              this._colorLA_contentSize = xPos;
              maxWidth = _colorLA_contentSize.width;
              maxHeight = minHeight = this._colorLA_eachRowHeight + this._colorLA_scrollBarSize + 6;
              minWidth = 10;
            } else {
              //Horizontal without scrollbar
              if(wholeSize.width !== 0) {
                _colorLA_contentSize.width = wholeSize.width;
              }
              if(wholeSize.height !== 0) {
                _colorLA_contentSize.height = wholeSize.height;
              }
              
              var maxTextItemWidth = 0;
              //Measure max text size
              for(i = 0, len = labelsData.length; i < len; i++){
                if(i >= this._colorLA_maxTextCount){
                  break;
                }
                labelsData[i].size = TextRuler.fastMeasure(labelsData[i].val, this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily);
                if(labelsData[i].size.width > maxTextItemWidth){
                  maxTextItemWidth = labelsData[i].size.width; 
                }
              }
           
              if(maxTextItemWidth > this._colorLA_textWidth){
                maxTextItemWidth = this._colorLA_textWidth;
              }
              var tempSize = {
                   width : maxTextItemWidth
              };
              for(i = this._colorLA_maxTextCount , len = labelsData.length; i < len; i++){
                labelsData[i].size = tempSize;
              }  
              this._colorLA_magicMaxTextItemWidth = maxTextItemWidth;
              
              var eachItemWidth = markerSize + maxTextItemWidth + this._colorLA_markerMargin.left * this._colorLA_textHeight,
                eachRowCount = Math.floor(_colorLA_contentSize.width / eachItemWidth),
                colIndex = 0;
              
              maxWidth = (eachRowCount > labelsData.length) ? (labelsData.length * eachItemWidth) : (eachRowCount * eachItemWidth);
              var maxRowCount = Math.ceil(labelsData.length/eachRowCount);
              maxHeight = maxRowCount * this._colorLA_eachRowHeight;
              
              if(labelsData.length > eachRowCount) {
                minHeight = this._colorLA_eachRowHeight * 2 ;
              }else{
                minHeight = this._colorLA_eachRowHeight;
              }
              
              this._colorLA_endItemNum = labelsData.length;
              for(i = 0, len = labelsData.length; i < len; i++){
                if(colIndex === eachRowCount){
                  this._colorLA_firstOverFlowPos = xPos;
                  xPos = 0;
                  colIndex = 0;
                  yPos = yPos + this._colorLA_eachRowHeight;
                  
                  if((len - i > 0) && (yPos + this._colorLA_eachRowHeight > _colorLA_contentSize.height)){
                    this._colorLA_endItemNum = i;
                    this._colorLA_firstOverFlowPos = yPos + this._colorLA_textHeight;
                    this._colorLA_isItemsOverflow = true;
                    break;
                  }
                }
                labelsData[i].pos = {x: xPos, y: yPos};
                
                colIndex++;
                xPos = xPos + eachItemWidth;
              }
              
              minWidth = eachItemWidth;
            }
          }else{
            //Vertical Layout
            _colorLA_contentHeight = 200;
            if(wholeSize.height !== 0) {
              _colorLA_contentHeight = wholeSize.height;
            }
            var tempAvaliableLableCount = Math.floor(_colorLA_contentHeight / this._colorLA_eachRowHeight),
                avaliablelableCount;
            if(tempAvaliableLableCount < labelsData.length){
              avaliablelableCount = tempAvaliableLableCount;
              if(avaliablelableCount > 1 && !this._colorLAfn_isScrollable()){
                avaliablelableCount = avaliablelableCount - 1;
              }
              this._colorLA_isItemsOverflow = true;
            }else{
              avaliablelableCount = labelsData.length;
            }
    
            //Measure max text size
            var size;
            for( i = 0, len = avaliablelableCount; i < len; i++){
              size = TextRuler.fastMeasure(labelsData[i].val, this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily);
              if(size.width > maxRowTextSize.width){
                maxRowTextSize = size;
              }
            }

            //TODO split caculate position with preferrence size
            this._colorLAfn_calculateVerticalRowPosition(wholeSize);
            
            maxRowWidth = markerSize + maxRowTextSize.width;
            maxWidth = xPos + maxRowWidth;
            maxHeight = this._colorLA_eachRowHeight *  (this._colorLA_bForceEllipsis ? labelsData.length + 1 : labelsData.length);
            minWidth = xPos + markerSize + TextRuler.fastMeasure('M...', this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily).width; 

            if(this._colorLAfn_isScrollable()){
              minHeight = this._colorLA_eachRowHeight;
              maxWidth = maxWidth + this._colorLA_scrollBarSize;
              minWidth = minWidth + this._colorLA_scrollBarSize;
            }else{
              minHeight = this._colorLA_eachRowHeight * (labelsData.length > 1 ? 2 : labelsData.length) + this._colorLA_textHeight * this._colorLA_markerMargin.bottom;
            }
            if(minHeight > maxHeight){
              minHeight = maxHeight;
            }          
          }
        }
      }
      if(minWidth > maxWidth){
        minWidth = maxWidth;
      }
      if(this._colorLA_isStyleChanged === true){
        this._colorLA_isStyleChanged = false;
      }
      return {
        minHeight : minHeight,
        minWidth: minWidth,
        height: maxHeight,
        width: maxWidth
      };
    };

    /*
     * Calculate legend row position and return legend max size. 
     * return max and min size.
     */
    ColorLegendArea.prototype._colorLAfn_calculateVerticalRowPosition = function(wholeSize) {
      var i, len, xPos = 0, yPos = 0,
          labelsData = this._colorLA_chartData,
          _colorLA_contentHeight;

      
      _colorLA_contentHeight = this._colorLAfn_isScrollable() ? (wholeSize.height * 2) : wholeSize.height;

      if(this._colorLA_startItemNum > 0){
        _colorLA_contentHeight = this._colorLA_contentSize + wholeSize.height * 2;
      }
      this._colorLA_endItemNum = labelsData.length;
      for(i = this._colorLA_startItemNum, len = labelsData.length; i < len; i++){
        //Measure label text size.
        if((labelsData[i].size === undefined) || (this._colorLA_isStyleChanged !== false)){
          labelsData[i].size = TextRuler.fastMeasure(labelsData[i].val, this._colorLA_valueLabelFont.fontsize , this._colorLA_valueLabelFont.fontweight , this._colorLA_valueLabelFont.fontfamily);
        }
        yPos = this._colorLA_eachRowHeight * i;
        if((yPos + this._colorLA_eachRowHeight > _colorLA_contentHeight) && (i < len)){
          this._colorLA_endItemNum = i; //This index's label can't be shown.
         this._colorLA_firstOverFlowPos = yPos;
          if(!this._colorLAfn_isScrollable()){
            if(yPos + this._colorLA_textHeight > _colorLA_contentHeight){
              this._colorLA_endItemNum = this._colorLA_endItemNum - 1;
              this._colorLA_firstOverFlowPos -= this._colorLA_eachRowHeight;
            }
          }
        
          break;
        }

        labelsData[i].pos = {x: xPos, y: yPos};
      }
      
      if( i === len && this._colorLA_startItemNum === 0 && (yPos + this._colorLA_textHeight < wholeSize.height)){
        this._colorLA_isItemsOverflow = false;
      }
      this._colorLA_contentSize = this._colorLA_endItemNum * this._colorLA_eachRowHeight;
        if ( this._colorLA_bForceEllipsis){
          this._colorLA_firstOverFlowPos = this._colorLA_contentSize + this._colorLA_textHeight;
          this._colorLA_contentSize += this._colorLA_eachRowHeight;
        }
    };
    
    ColorLegendArea.prototype._colorLAfn_getImageURL = function(index)
    {
        var imageURL = "";

        var imageURLNumber = this._colorLA_imageInfo.imagePalette.length;
        if(imageURLNumber > 0)
        {
            imageURL = this._colorLA_imageInfo.imagePalette[index%imageURLNumber];
        }

        return imageURL;
    };

    ColorLegendArea.prototype._colorLAfn_isHorizontal = function(){
      return (this._colorLA_options.position === 'top' || this._colorLA_options.position === 'bottom') ? true : false;
    };
    
    ColorLegendArea.prototype._colorLAfn_isScrollable = function(){
      return this._colorLA_options.isScrollable &&  this._colorLA_options.isHierarchy === false;
    };
    
    ColorLegendArea.prototype._colorLAfn_createRowWithColorLabel = function(wrap, index, isShowColorLabel, labelText, maxWidth) {
      var dx = 0, colorLabelType;
      var markerSize = this._colorLA_colorLabelSize * this._colorLA_textHeight;
      var that = this;
      
      if(isShowColorLabel) {
        if(this._colorLA_shapeFeedLength > 0){
          var shapeIndex = index % this._colorLA_shapeFeedLength;
          if(this._colorLA_shapes.length < this._colorLA_shapeFeedLength){
            //less shape to be used
            shapeIndex = shapeIndex % this._colorLA_shapes.length;
          }
          colorLabelType = this._colorLA_shapes[shapeIndex];
        }else{
          if(this._colorLA_options.legendType === 'BubbleColorLegend'){
            colorLabelType = (this._colorLA_shapes[0] === undefined) ? 'square' : this._colorLA_shapes[0];
          }else{
              var tmpShape = this._colorLA_shapes[index % this._colorLA_shapes.length];
              colorLabelType = (tmpShape === undefined) ? 'square' : tmpShape;
              if(colorLabelType === 'square'){
              colorLabelType = "squareWithRadius";
            }
          }
        }
        
        if(!this._colorLA_imageInfo.imageMode)
        {
            var centerPos = this._colorLA_textHeight / 2; 
            var path = wrap.selectAll('path').data([labelText]);
            //DrawUtil.createElements(path.enter(),{shape: colorLabelType, className: null} );
            path.enter().append('path');
            var parameter = {
                drawingEffect:this._colorLA_options.drawingEffect,
                graphType:colorLabelType,
                fillColor : null,
                direction : 'vertical',
                rx: markerSize / 2,
                ry: markerSize / 2,
                borderWidth: 0,
                borderColor: "transparent",
                node:null,
                className: ""
  //              visibility: "visible"
            };
            path.attr("transform", function(d,i)
            {
              var color;
              if(that._colorLA_shapeFeedLength > 0) {
                i = Math.floor(index / that._colorLA_shapeFeedLength);
                var t = that._colorLA_colors.length > that._colorLA_colorFeedLength ? that._colorLA_colorFeedLength : that._colorLA_colors.length;
                if(t > 0){
                  color = that._colorLA_colors[i % t];
                }else{
                  color = that._colorLA_colors[0];
                }
              } else {
                color = that._colorLA_colors[index % (that._colorLA_colors.length > that._colorLA_colorFeedLength ? that._colorLA_colorFeedLength : that._colorLA_colors.length)];
              }
              parameter.fillColor = color;
              parameter.node = d3.select(this);
              DrawUtil.drawGraph(parameter, that._colorLA_effectManager);
              return 'translate(' + centerPos + ',' + centerPos + ')';
          
            });
        }
        else
        {
            var imageObjs = wrap.select("image");
            if(imageObjs.empty())
            {
                imageObjs = wrap.append("image");
            }

            imageObjs.attr("xlink:xlink:href", this._colorLAfn_getImageURL(index))
                .attr("width",markerSize)
                .attr("height",markerSize);
        }
        
        dx = markerSize + this._colorLA_markerMargin.right * this._colorLA_textHeight;
      }
      // item text label
      var text = wrap.selectAll('text').data([labelText]);
      text.enter().append('text');
      text.attr('x', dx).attr('y', this._colorLA_textHeight).text(function(d) {
          return d;
        });
      wrap.append("rect");
      var labelFont = "font-size:" + this._colorLA_valueLabelFont.fontsize + "; font-weight:" + this._colorLA_valueLabelFont.fontweight + "; font-family:" + this._colorLA_valueLabelFont.fontfamily;
      if(!(this._colorLAfn_isScrollable() && this._colorLAfn_isHorizontal())){
        text.each(function(d) {
          var textWidth;
          if(maxWidth === undefined){
            textWidth = that._colorLA_width - dx;
            if(that._colorLAfn_isScrollable()){
              textWidth = textWidth - that._colorLA_scrollBarSize;
            }
          }else{
            textWidth = maxWidth;
          }
          if(TextRuler.ellipsis(d, this, textWidth, labelFont) !== labelText) {
            text.select("title").remove();        
            if(wrap.select("title").empty()) {
                wrap.select("rect").append("title").text(labelText);
            }            
          }
        });
      }
      return wrap;
    };

    //Utility method.
    var _contains = function(a, obj){
      for (var i = 0; i < a.length; i++) {
            if (a[i] === obj) {
                return true;
            }
        }
        return false;
    };
    
  return ColorLegendArea;
});

define('sap/viz/modules/legend/sizeLegendArea',['sap/viz/base/utils/oo', 'sap/viz/modules/Base', 'sap/viz/util/TextUtils','sap/viz/lang/langManager','sap/viz/format/FormatManager','sap/viz/base/utils/TypeUtils', 'sap/viz/util/DrawUtil'],
function Setup(oo, Base, TextRuler, langManager,FormatManager,TypeUtils, DrawUtil) {
  
  var SizeLegendArea = function(styleManager){
    this._sizeLA_width = 400;
    this._sizeLA_height = 200; 
    this._sizeLA_valueLabelFont = {
      'fontfamily' : "'Open Sans', Arial, Helvetica, sans-serif",
      'fontsize' : '14px',
      'fontweight' : 'normal',
      'color' : '#333333'
    };
    this._sizeLA_chartData=[0, 0, 0]; 
    this._sizeLA_scale = undefined;
    this._sizeLA_color = []; 
//    this._sizeLA_shapes; 
    this._sizeLA_guildeLineWidth = 10; 
    this._sizeLA_valuePaddingLeft = 15; 
    //TODO maybe can move this global argument to local
    this._sizeLA_valueLabelHeight = 0; 
    this._sizeLA_options = undefined;
    
    this._sizeLA_effectManager  = null;
    this._sizeLA_styleManager = styleManager;
  };
  
  oo.extend(SizeLegendArea, Base);
    
  SizeLegendArea.prototype.render = function(selection){
    var that = this;
    selection.each(function(){
      if(that._sizeLA_scale === undefined){
        return;
      }
      
      that._sizeLAfn_getThemeStyleDef();
      
      //Smart value label management.
      var textHeight = parseInt(that._sizeLA_valueLabelFont.fontsize, 10); //1em
      var visibleData = [], labelFont = "font-size:" + that._sizeLA_valueLabelFont.fontsize + "; font-weight:" + that._sizeLA_valueLabelFont.fontweight + "; font-family:" + that._sizeLA_valueLabelFont.fontfamily;
      if(that._sizeLA_valueLabelHeight === 0){
        that._sizeLA_valueLabelHeight = TextRuler.fastMeasure('M', that._sizeLA_valueLabelFont.fontsize, that._sizeLA_valueLabelFont.fontweight, that._sizeLA_valueLabelFont.fontfamily).height;
      }
      var visibleCount = Math.floor((that._sizeLA_scale(that._sizeLA_chartData[0]) + textHeight) / that._sizeLA_valueLabelHeight);
      switch(visibleCount){
        case 0:
        case 1:
          visibleData.push(that._sizeLA_chartData[0]);
          break;
        case 2:
          visibleData.push(that._sizeLA_chartData[0]);
          if(that._sizeLA_chartData.length > 1){
            visibleData.push(that._sizeLA_chartData[that._sizeLA_chartData.length -1]);
          }
          break;
        default :
          visibleData = that._sizeLA_chartData;
      }

      var bubbleSizeArr = [], maxWidth = -1, dataWidth, value;
      for(var i = 0, len = visibleData.length; i < len; i++){
        bubbleSizeArr.push(that._sizeLA_scale(visibleData[i])/2);
        value = _isNullValue(visibleData[i]);
        value = FormatManager.format(value , that._sizeLA_options.formatString );
        dataWidth = TextRuler.fastMeasure(value,  that._sizeLA_valueLabelFont.fontsize, that._sizeLA_valueLabelFont.fontweight, that._sizeLA_valueLabelFont.fontfamily).width;
        if(dataWidth > maxWidth){
          maxWidth = dataWidth;
        }
      }
      var maxBubbleSize = bubbleSizeArr[0];
      var wrap = d3.select(this);
      var circlesWrap = wrap.selectAll('g.v-circles');
      if(!circlesWrap.empty()){
        circlesWrap.remove();
      }
      circlesWrap = wrap.append('g').attr('class', 'v-circles').data([bubbleSizeArr]);
      
      circlesWrap.attr('transform', 'translate(' + maxBubbleSize + ',' + (maxBubbleSize+textHeight/2)+ ')');
      
      var parameter = {
        drawingEffect : that._sizeLA_options.drawingEffect,
        graphType : 'circle',
        fillColor : that._sizeLA_color ? that._sizeLA_color : '#748CB2'
      };
      var fillID = that._sizeLA_effectManager.register(parameter);
      var circleElements = circlesWrap.selectAll('path').data(bubbleSizeArr, function(d, i){
        return d;
      });
      circleElements.exit().remove();
      circleElements.enter().append('path').attr('stroke', 'white').attr('stroke-width', 1).attr('fill', fillID).attr('opacity', '1').attr('fill-opacity', '0.85');
      circleElements.attr('d', function(d, i){ 
        return DrawUtil.createMarkerData({type: 'circle', borderWidth: 0, rx: d, ry: d});
      }).attr('transform', function(d, i){
       return ['translate(', 0, ',', maxBubbleSize-d, ')'].join('');
      });

      
      var labelsWrap = wrap.selectAll('g.v-valueLabels');
      if(labelsWrap.empty()){
        labelsWrap = wrap.append('g').attr('class', 'v-valueLabels').data([visibleData]);
      }
      var labelX = (maxBubbleSize*2+that._sizeLA_valuePaddingLeft+that._sizeLA_guildeLineWidth+maxWidth) > that._sizeLA_width ? that._sizeLA_width : (maxBubbleSize*2+that._sizeLA_valuePaddingLeft+that._sizeLA_guildeLineWidth+maxWidth);
      labelsWrap.attr('transform', 'translate('+ labelX +', '+(maxBubbleSize+textHeight)+')');
      var valueElements = labelsWrap.selectAll('text').data(visibleData, function(d, i){
        return d;
      });
      valueElements.exit().remove();
      valueElements.enter().append('text').attr('text-anchor', 'end');
      valueElements.text(function(d, i){
          var value = _isNullValue(d);
          value = FormatManager.format(value , that._sizeLA_options.formatString );
          return value;
        }).attr('dx', 0).attr('dy', function(d, i){
          var dy = (i-1)*maxBubbleSize - 2;
          if(visibleData.length === 2 && i === 1){
            dy = maxBubbleSize - 2;
          }
          return dy;
        });
      
      var guidelineWrap = wrap.selectAll('g.v-guideLines');
      if(!guidelineWrap.empty()){
        //Empty
        guidelineWrap.remove();
      }
      guidelineWrap = wrap.append('g').attr('class', 'v-guideLines').attr('transform', 'translate(' + maxBubbleSize + ',' + (maxBubbleSize+textHeight/2)+ ')');
      if(visibleData.length > 0){
        guidelineWrap.append('path').attr('stroke', 'gray').attr('d', 'M 0 '+ -maxBubbleSize +' L '+(maxBubbleSize+that._sizeLA_guildeLineWidth)+" "+ -maxBubbleSize);
      }
      if(visibleData.length > 1){
        guidelineWrap.append('path').attr('stroke', 'gray').attr('d', 'M 0 '+ maxBubbleSize +'L'+(maxBubbleSize+that._sizeLA_guildeLineWidth)+" "+ maxBubbleSize);
      }
      if(visibleData.length > 2){
        guidelineWrap.append('path').attr('stroke', 'gray').attr('d', 'M 0 '+ (maxBubbleSize - bubbleSizeArr[1]) +' L '+maxBubbleSize+" 0"+  ' M '+ maxBubbleSize + " 0 " + " L "+ (maxBubbleSize + that._sizeLA_guildeLineWidth) +" 0");
      }
      
      var defaultValueLabelStyle = that._sizeLA_styleManager.queryDefault('v-label');
      wrap.attr('font-family', defaultValueLabelStyle['font-family']).attr('font-size', defaultValueLabelStyle['font-size']).attr('font-weight', defaultValueLabelStyle['font-weight']).attr('fill', defaultValueLabelStyle.color);
    });
  };
    
  SizeLegendArea.prototype.width = function(_) {
    if(!arguments.length){
      return this._sizeLA_width;
    }
    this._sizeLA_width = _;
    return this;
  };

  SizeLegendArea.prototype.height = function(_) {
    if(!arguments.length){
      return this._sizeLA_height;
    }
    this._sizeLA_height = _;
    return this;
  };
 
  SizeLegendArea.prototype.higlight = function(_) {
    return this;
  };

  SizeLegendArea.prototype.unhighlight = function(_) {
    return this;
  };
  
  SizeLegendArea.prototype.selected = function(_) {
    return this;
  };
 
  SizeLegendArea.prototype.color = function(_) {
    if(!arguments.length){
      return this._sizeLA_color;
    }
    this._sizeLA_color = _;  
    return this;
  };

  SizeLegendArea.prototype.shapes = function(_) {
    return this;
  };
  
  SizeLegendArea.prototype.properties = function(properties) {
    if(!arguments.length){
      return this._sizeLA_options;
    }
    //TODO use extends...
    this._sizeLA_options = properties;
    return this;
  };
  
  SizeLegendArea.prototype.data = function(_){
    if(!arguments.length){
      return this._sizeLA_chartData;
    }
    this._sizeLA_chartData = _;
    return this;
  };
  
  SizeLegendArea.prototype.scale = function(_){
    if(!arguments.length){
      return this._sizeLA_scale;
    }
    this._sizeLA_scale = _;
    return this;
  };
  
  SizeLegendArea.prototype.effectManager = function(_) {
    if(!arguments.length){
      return this._sizeLA_effectManager;
    }

    this._sizeLA_effectManager = _;
    return this;
  };
  
  SizeLegendArea.prototype._sizeLAfn_getThemeStyleDef = function(){
    var valueLabelStyle = this._sizeLA_styleManager.query('v-label');
    if(valueLabelStyle){
      if(valueLabelStyle['fill']){
        this._sizeLA_valueLabelFont.color = valueLabelStyle['fill'];
      }
      if(valueLabelStyle['font-family']){
        this._sizeLA_valueLabelFont.fontfamily = valueLabelStyle['font-family'];
      }
      if(valueLabelStyle['font-size']){
        this._sizeLA_valueLabelFont.fontsize = valueLabelStyle['font-size'];
      }
      if(valueLabelStyle['font-weight']){
        this._sizeLA_valueLabelFont.fontweight = valueLabelStyle['font-weight'];
      }
    }
  };
  
  SizeLegendArea.prototype.hasData = function(){
    if(this._sizeLA_scale){
       return true;
    }else {
      return false;
    }
  };
  
  SizeLegendArea.prototype.getPreferredSize = function(){

    this._sizeLAfn_getThemeStyleDef();
    var maxWidth = 0, maxHeight = 0, minWidth = 0, minHeight = 0;
    var maxValueWidth = -1, maxBubbleSize, valueSize = [], value = null, space, i, len,
      data = this._sizeLA_chartData, labelFont = "font-size:" + this._sizeLA_valueLabelFont.fontsize + "; font-weight:" + this._sizeLA_valueLabelFont.fontweight + "; font-family:" + this._sizeLA_valueLabelFont.fontfamily;

      /*** start new layout algorithm ***/
      if(this._sizeLA_scale){
        for(i = 0, len = data.length; i < len; i++){
          value = _isNullValue(data[i]);
          value = FormatManager.format(value , this._sizeLA_options.formatString );
          valueSize[i] = TextRuler.fastMeasure(value, this._sizeLA_valueLabelFont.fontsize , this._sizeLA_valueLabelFont.fontweight, this._sizeLA_valueLabelFont.fontfamily);
          if((valueSize[i] === undefined) || (valueSize[i].width > maxValueWidth)) {
            maxValueWidth = valueSize[i].width;
          }
        }
        space =  maxValueWidth + this._sizeLA_valuePaddingLeft + this._sizeLA_guildeLineWidth;
        maxBubbleSize = this._sizeLA_scale(data[0]);
        
        maxHeight = maxBubbleSize + valueSize[len - 1].height;
        maxWidth = maxBubbleSize + space;
        minWidth = maxBubbleSize + this._sizeLA_valuePaddingLeft + this._sizeLA_guildeLineWidth + valueSize[0].width;
        minHeight = maxHeight;
        
        //TODO workaround to add 1em padding in the bottom or right 
        if (this._sizeLA_options.position === 'top' || this._sizeLA_options.position === 'bottom') {
          maxWidth = maxWidth + valueSize[len - 1].height;
          minWidth = minWidth + valueSize[len - 1].height;
        }else{
          maxHeight = maxHeight + valueSize[len - 1].height;
          minHeight = maxHeight;
        }
      }
    return {
      minHeight: minHeight,
      minWidth: minWidth,
      height: maxHeight,
      width: maxWidth
    };
  };
    
  SizeLegendArea.prototype.doLayout = function(size){
    return size;
  };
  
  SizeLegendArea.prototype.destroy = function(){
    this._sizeLA_styleManager = null;
    this._sizeLA_effectManager = null;
  };
    
  var _isNullValue = function(value){
    return (value === null) ? langManager.get('IDS_ISNOVALUE') : value;
  };
  
  return SizeLegendArea;
});

define('sap/viz/modules/legend/mbcLegendArea',['sap/viz/base/utils/oo', 'sap/viz/modules/Base', 'sap/viz/util/TextUtils','sap/viz/lang/langManager','sap/viz/base/utils/TypeUtils',
'sap/viz/base/UADetector'],
function Setup(oo, Base, TextRuler, langManager,TypeUtils,
  UADetector) {
  
  var MBCLegendArea = function(styleManager){
    
    this._mbcLA_width = 400;
    this._mbcLA_height = 200;
    this._mbcLA_valueLabelFont = {
        'fontfamily' : "'Open Sans', Arial, Helvetica, sans-serif",
        'fontsize' : '12px',
        'fontweight' : 'normal',
        'color' : '#333333'
      };
    this._mbcLA_wrap = undefined;
    this._mbcLA_chartData = undefined;
    this._mbcLA_colors = [];
    this._mbcLA_markerSize = {width: 12, height : 12};
    this._mbcLA_paddingBottom = 1;
    this._mbcLA_selectedItem = [];
    this._mbcLA_posInfo = {
        markerSize: 12, //default marker width is 12px in vertical layout. Opposite, marker height is 12px in horizontal layout.
        markerPaddingRight : 0.5,
        paddingTop : 1,
        maxValueSpace : 1.6,
        minValueSpace : 0.5,
        maxMarkerHeight : 36,  //3em(12*3 px)
        minMarkerHeight : 12,  //10pixel changes to 1em(12px)
        space : 0,
        noValuePadding : 18  //1.5em
      };
    this._mbcLA_textInfos = null;
    this._mbcLA_perferredSize = null;
    this._mbcLA_nullLabelIndex = -1;
    this._mbcLA_textHeight = 20;
    this._mbcLA_minimized = false;
    
    // this._mbcLA_noValueString = langManager.get('IDS_ISNOVALUE');
    this._mbcLA_options = undefined;
    this._mbcLA_effectManager = null;
    this._mbcLA_styleManager = styleManager;

    this._mbcLA_style = {};
    this._mbcLA_style.hovershadow = styleManager.queryDefault('v-hovershadow');
    this._mbcLA_style.clickedshadow = '#808080';

    this._need_calTextSize = false;
  };

  oo.extend(MBCLegendArea, Base);

  MBCLegendArea.prototype.render = function(selection){
    var that = this;
    var calMarkerAndTextInfo = function(labelsData){
      var info = {marker: [], label: []}, xPos = 0, yPos = 0, colors = that._mbcLA_colors.slice(),
        valuePaddingLeft = that._mbcLA_posInfo.markerPaddingRight * that._mbcLA_textHeight,
        eachMarkerCellSize, i, len, val, tVal;
      var valueSizes = that._mbcLAfn_calTextSize().textSize;
      
      colors = colors.reverse();
      if(that._mbcLA_nullLabelIndex !== -1){
        var firstColor = colors.shift();
        colors.push(firstColor);
      }
      
      if(that._mbcLA_options.position === 'top' || that._mbcLA_options.position === 'bottom'){
        //Horizontial layout
        eachMarkerCellSize = that._mbcLA_markerSize.width + that._mbcLA_paddingBottom;
        var textYPos = that._mbcLA_markerSize.height + valuePaddingLeft + that._mbcLA_textHeight;
        
        for(i = 0, len = labelsData.length; i < len; i++){
          val = labelsData[i].val;
          tVal = labelsData[i].val1;
          //Marker
          if(val === 'N/A' && len > 1){
            xPos = xPos + that._mbcLA_posInfo.noValuePadding;
          }
          info.marker.push({x: xPos, y: yPos, color: colors[i], val: labelsData[i].val, ctx: labelsData[i].ctx});
          
          //TextL
          if(tVal !== undefined){
            info.label.push({val: tVal, x: 0, y: textYPos, visibility: valueSizes[i].visibility_tVal});
          }
          if (val !== undefined) {
            if(val === 'N/A'){
              info.label.push({val: langManager.get('IDS_ISNOVALUE'), x: xPos, y: textYPos, visibility: valueSizes[i].visibility});
            }else{
              info.label.push({val: val, x: xPos + eachMarkerCellSize, y: textYPos, visibility: valueSizes[i].visibility});
            }
          }

          xPos = xPos + eachMarkerCellSize;
        }
        
        //Handler only one value label. Put it again.
        //now we set tVal for labelData[0] in legend/common.js/_legendfn_parseMeasureBasedColoringLegend(), so do not need these codes
        // if(len === 1 && labelsData[0].val !== 'N/A'){
        //   info.label.push({val: labelsData[0].ctx.ranges.endValue, x: xPos - eachMarkerCellSize, y: textYPos});
        // }
      }else{
        //Vertical layout
        eachMarkerCellSize = that._mbcLA_markerSize.height + that._mbcLA_paddingBottom; 
        var textXPos = that._mbcLA_markerSize.width + valuePaddingLeft;
        for(i = 0, len = labelsData.length; i < len; i++){
          val = labelsData[i].val;
          tVal = labelsData[i].val1;
          //Marker
          if(val === 'N/A' && len > 1){
            yPos = yPos + that._mbcLA_posInfo.noValuePadding;
          }
          info.marker.push({x: xPos, y: yPos, color: colors[i], val: val, ctx: labelsData[i].ctx});
          //Text
          if(tVal !== undefined){
            info.label.push({val: tVal, x: textXPos, y: that._mbcLA_textHeight, visibility: valueSizes[i].visibility_tVal});
          }
          if (val !== undefined) {
            if(val === 'N/A'){
              info.label.push({val: langManager.get('IDS_ISNOVALUE'), x: textXPos, y: yPos+that._mbcLA_textHeight-that._mbcLA_paddingBottom, visibility: valueSizes[i].visibility});
            }else{
              info.label.push({val: val, x: textXPos, y: yPos + eachMarkerCellSize+that._mbcLA_textHeight-that._mbcLA_paddingBottom, visibility: valueSizes[i].visibility});
            }
          }

          yPos = yPos + eachMarkerCellSize;
        }
        
        //Handler only one value label. Put it again.
        //now we set tVal for labelData[0] in legend/common.js/_legendfn_parseMeasureBasedColoringLegend(), so do not need these codes
        // if(len === 1 && labelsData[0].val !== 'N/A'){
        //   info.label.push({val: labelsData[0].ctx.ranges.endValue, x: textXPos, y: yPos - eachMarkerCellSize + that._mbcLA_textHeight - that._mbcLA_paddingBottom});
        // }
      }
      
      return info;
    };
      selection.each(function(){
        that._mbcLAfn_getThemeStyleDef();
        
        //Calculate marker size.
        that._mbcLAfn_calMarkerSize({width: that._mbcLA_width, height: that._mbcLA_height});
        
        var labelsData = that._mbcLA_chartData, textElements, y = 0, j, jlen, valuePaddingLeft = that._mbcLA_posInfo.markerPaddingRight * that._mbcLA_textHeight;
        var wrap = d3.select(this);
        that._mbcLA_wrap = wrap;
        
        var indicatedRectElement = wrap.selectAll('rect.v-indicatedRect');
        if(indicatedRectElement.empty()){
          indicatedRectElement = wrap.append('rect').attr('class', 'v-indicatedRect v-hovershadow');
        }
        indicatedRectElement.attr('visibility', 'hidden');
        if(that._mbcLA_options.position === 'top' || that._mbcLA_options.position === 'bottom'){
          indicatedRectElement.attr('width', that._mbcLA_markerSize.width + 2).attr('height', that._mbcLA_markerSize.height + 4);
        }else{
          indicatedRectElement.attr('width', that._mbcLA_markerSize.width + 4).attr('height', that._mbcLA_markerSize.height + 2);
        }
        
        var infos = calMarkerAndTextInfo(labelsData);
        var makerWrapper = wrap.selectAll('rect.v-marker').data(infos.marker);
        makerWrapper.exit().remove();
        makerWrapper.enter().append('rect');
        makerWrapper.attr('class', function(d, i){
          return 'v-marker v-legend-item ID_' + i;
        });
        makerWrapper.attr('width', that._mbcLA_markerSize.width)
          .attr('height', that._mbcLA_markerSize.height)
          .attr('x', function(d){
            return d.x;
          })
          .attr('y', function(d){
            return d.y;
          })
          .attr('fill', function(d){
            var parameter = {
              drawingEffect : 'normal',
              fillColor : d.color
            };
            var fillID = that._mbcLA_effectManager.register(parameter);
            return fillID;
          });
        
        var labelmaxLen = (that._mbcLA_nullLabelIndex === -1) ? infos.label.length : (infos.label.length-1); 
        var textWrapper = wrap.selectAll('text').data(infos.label);
        textWrapper.exit().remove();
        textWrapper.enter().append('text');
        textWrapper.text(function(d) {
          return d.val;
        });
        textWrapper.attr('x', function(d){
          return d.x;
        }).attr('y', function(d){
          return d.y;
        }).attr('visibility', function(d){
          return d.visibility;
        });
        
        var defaultValueLabelStyle = that._mbcLA_styleManager.queryDefault('v-label');
        wrap.attr('font-family', defaultValueLabelStyle['font-family']).attr('font-size', defaultValueLabelStyle['font-size']).attr('font-weight', defaultValueLabelStyle['font-weight']).attr('fill', defaultValueLabelStyle.color);
      });
    };

    MBCLegendArea.prototype.highlight = function(target){
      if(target.__data__){
        var indicatedItem = this._mbcLA_wrap.selectAll('.v-indicatedRect');
        var indicatedItemPos = target.__data__;
        if(indicatedItemPos.x !== undefined && indicatedItemPos.y !== undefined ){
          indicatedItem.attr('class', 'v-indicatedRect v-legend-item v-hovershadow').attr('visibility', 'visible').attr('fill', this._mbcLA_style.hovershadow.fill);
          if(this._mbcLA_options.position === 'top' || this._mbcLA_options.position === 'bottom'){
            indicatedItem.attr('x', indicatedItemPos.x - 1).attr('y', indicatedItemPos.y- 2);
          }else{
            indicatedItem.attr('x', indicatedItemPos.x - 2).attr('y', indicatedItemPos.y- 1);
          }
        }
      }
    };

    MBCLegendArea.prototype.unhighlight = function(target){
      if(this._mbcLA_wrap){
        this._mbcLA_wrap.selectAll('.v-indicatedRect').attr('visibility', 'hidden');
      }
    };

    MBCLegendArea.prototype.selected = function(target){
      if(target.__data__){
        var indicatedItem = this._mbcLA_wrap.selectAll('.v-indicatedRect');
        var indicatedItemPos = target.__data__;
        if(indicatedItemPos.x !== undefined  && indicatedItemPos.y !== undefined ){
          indicatedItem.attr('class', 'v-indicatedRect v-legend-item v-hovershadow-mousedown').attr('visibility', 'visible')
            .attr('fill', this._mbcLA_style.clickedshadow);
          if(this._mbcLA_options.position === 'top' || this._mbcLA_options.position === 'bottom'){
            indicatedItem.attr('x', indicatedItemPos.x - 1).attr('y', indicatedItemPos.y- 2);
          }else{
            indicatedItem.attr('x', indicatedItemPos.x - 2).attr('y', indicatedItemPos.y- 1);
          }
        }
      }
    };
    
    MBCLegendArea.prototype.width = function(_) {
      if(!arguments.length){
        return this._mbcLA_width;
      }
      this._mbcLA_width = _;
      return this;
    };

    
    MBCLegendArea.prototype.height = function(_) {
      if(!arguments.length){
        return this._mbcLA_height;
      }
      this._mbcLA_height = _;
      return this;
    };
    
    MBCLegendArea.prototype.properties = function(properties) {
      if(!arguments.length){
        return this._mbcLA_options;
      }
      //TODO use extends...
      if(this._mbcLA_options !== undefined && this._mbcLA_options.position !== properties.position){
        //reset default marker size
        this._mbcLA_markerSize = {width: 12, height : 12};
      }
      this._mbcLA_options = properties;
      this._need_calTextSize = true;
      return this;
    };
    
    MBCLegendArea.prototype.data = function(_){
      if(!arguments.length){
        return this._mbcLA_chartData;
      }
      if (this._mbcLA_chartData !== _) {
        this._mbcLA_chartData = _;
        this._need_calTextSize = true;
        //reset N/A flag
        this._mbcLA_nullLabelIndex = -1;
      }
      return this;
    };
    
    MBCLegendArea.prototype.hasData = function(){
      if( this._mbcLA_chartData){
        return true;
      }else {
        return false;
      }
    };
    
    MBCLegendArea.prototype.getPreferredSize = function() {
      var maxWidth = 0, maxHeight = 0, minHeight = 0, minWidth = 0;
      if(this._mbcLA_chartData && this._need_calTextSize) {
        
        this._mbcLAfn_getThemeStyleDef();
        this._mbcLA_textHeight = parseInt(this._mbcLA_valueLabelFont.fontsize, 10); //1em
        var textInfos = this._mbcLAfn_calTextSize();
        var maxValueWidth = textInfos.maxValueWidth;
        var valueSizes = textInfos.textSize;
        var len = this._mbcLA_chartData.length;
        
//        var h = (this._mbcLA_posInfo.maxValueSpace + 1) * this._mbcLA_textHeight;
        var h = this._mbcLA_posInfo.maxMarkerHeight;
        var l = this._mbcLA_posInfo.minMarkerHeight;
        
        if(this._mbcLA_options.position === 'top' || this._mbcLA_options.position === 'bottom'){
          var temp = this._mbcLAfn_calLegendWidthFromMarkerWidth(h);
          maxHeight = temp.height;
          maxWidth  = temp.width;
          temp = this._mbcLAfn_calLegendWidthFromMarkerWidth(l);
          minHeight = temp.height;
          minWidth  = temp.width;

        }else{
          maxWidth = this._mbcLA_markerSize.width + this._mbcLA_posInfo.markerPaddingRight * this._mbcLA_textHeight + maxValueWidth;
          minWidth = this._mbcLA_markerSize.width + this._mbcLA_posInfo.markerPaddingRight * this._mbcLA_textHeight + (valueSizes[0].width>valueSizes[len-1].width ? valueSizes[0].width : valueSizes[len-1].width);
          if(this._mbcLA_nullLabelIndex !== -1){
            maxHeight = (h + this._mbcLA_paddingBottom) * len + this._mbcLA_posInfo.noValuePadding - this._mbcLA_paddingBottom;
            minHeight = (l + this._mbcLA_paddingBottom) * len + this._mbcLA_posInfo.noValuePadding - this._mbcLA_paddingBottom;
          }else{
            maxHeight = (h + this._mbcLA_paddingBottom) * len + this._mbcLA_textHeight - this._mbcLA_paddingBottom;
            minHeight = (l + this._mbcLA_paddingBottom) * len + this._mbcLA_textHeight - this._mbcLA_paddingBottom;
          }
        }

        this._mbcLA_perferredSize = {
        minHeight: minHeight,
        minWidth: minWidth,
        width: maxWidth,
        height: maxHeight
      };
      }
      //console.log(JSON.stringify(this._mbcLA_perferredSize));
      return this._mbcLA_perferredSize;
    };
    
    MBCLegendArea.prototype.color = function(_) {
      if(!arguments.length){
        return this._mbcLA_colors;
      }
      this._mbcLA_colors = _;  
      return this;
    };
    
    MBCLegendArea.prototype.effectManager = function(_) {
      if(!arguments.length){
        return this._mbcLA_effectManager;
      }
      this._mbcLA_effectManager = _;

      return this;
    };
    
    MBCLegendArea.prototype._mbcLAfn_calTextSize = function(){
      var maxValueWidth = -1, valueSize = [], data = this._mbcLA_chartData;
      var len = data.length;

      if (this._need_calTextSize) {
        for ( var i = 0; i < len; i++) {
          if(data[i].val === 'N/A'){
            valueSize[i] = TextRuler.fastMeasure(langManager.get('IDS_ISNOVALUE'), this._mbcLA_valueLabelFont.fontsize,  this._mbcLA_valueLabelFont.fontweight , this._mbcLA_valueLabelFont.fontfamily);
            this._mbcLA_nullLabelIndex = i;
          }else{
            var value = data[i].val;
            if (value !== undefined) {
              valueSize[i] = TextRuler.fastMeasure(value,  this._mbcLA_valueLabelFont.fontsize,  this._mbcLA_valueLabelFont.fontweight , this._mbcLA_valueLabelFont.fontfamily);
            } else {
              valueSize[i] = {width:0, height:0};
            }

            var tValue = data[i].val1;
            if (tValue !== undefined) {
              var temp = TextRuler.fastMeasure(tValue,  this._mbcLA_valueLabelFont.fontsize,  this._mbcLA_valueLabelFont.fontweight , this._mbcLA_valueLabelFont.fontfamily);
              if (temp.width>valueSize[i].width) {
                valueSize[i] = temp;
              }
            } 
          }
          if (valueSize[i].width > maxValueWidth) {
            maxValueWidth = valueSize[i].width;
          }
        }
        this._mbcLA_textInfos = {
          maxValueWidth : maxValueWidth,
          textSize : valueSize
        };
        this._need_calTextSize = false;
      }
      return this._mbcLA_textInfos;
    };
    
    MBCLegendArea.prototype._mbcLAfn_calMarkerSize = function(size){
      var len = this._mbcLA_chartData.length, h = 0, space = 0, areaSize, value, tValue, i;
      this._mbcLA_minimized = false;
      var maxValueSpace = this._mbcLA_posInfo.maxValueSpace * this._mbcLA_textHeight;
      var minValueSpace = this._mbcLA_posInfo.minValueSpace * this._mbcLA_textHeight;
      var valueSizes = this._mbcLAfn_calTextSize().textSize;
      
      if(this._mbcLA_options.position === 'top' || this._mbcLA_options.position === 'bottom'){
        areaSize = size.width;
        
        var r = this._mbcLA_posInfo.maxMarkerHeight;
        var l = this._mbcLA_posInfo.minMarkerHeight;
        var m = -1;
        var flag_need_calLegendWidthFromMarkerWidth = false;
        var temp = this._mbcLAfn_calLegendWidthFromMarkerWidth(r);
        if (temp.width <= areaSize) {
          h = r;
        } else {
          temp = this._mbcLAfn_calLegendWidthFromMarkerWidth(l);
          if (temp.width >= areaSize) {
            h = l;
          } else {
            while (r-l > 1) {
              m = l + (r-l)/2;
              temp = this._mbcLAfn_calLegendWidthFromMarkerWidth(m);
              if (Math.abs(temp.width-areaSize) < 1) {
                l = m;
                flag_need_calLegendWidthFromMarkerWidth = false;
                break;
              } else if (temp.width > areaSize) {
                r = m;
                flag_need_calLegendWidthFromMarkerWidth = true;
          } else {
                l = m;
                flag_need_calLegendWidthFromMarkerWidth = false;
          }
            } // while
            h = l;
            if (flag_need_calLegendWidthFromMarkerWidth) {
              this._mbcLAfn_calLegendWidthFromMarkerWidth(h);
            }
            }
        }
      }else{
        areaSize = size.height;
        
        var isFontOverflow = false;
        var lenNoNovalue;
        if(this._mbcLA_textHeight > this._mbcLA_posInfo.maxMarkerHeight){
          isFontOverflow = true;
        }
        //Calculate marker size
        if(this._mbcLA_nullLabelIndex !== -1){
          //No value
          h = (areaSize - this._mbcLA_paddingBottom * (len - 1) - this._mbcLA_posInfo.noValuePadding - (isFontOverflow ? (this._mbcLA_textHeight - this._mbcLA_posInfo.maxMarkerHeight): 0))/(len);
        }else{
          h = (areaSize - this._mbcLA_paddingBottom * (len - 1) - this._mbcLA_textHeight) / len;
        }
        //Check marker size
        if(h > this._mbcLA_posInfo.maxMarkerHeight){
          h = this._mbcLA_posInfo.maxMarkerHeight;
        }
        if(h < this._mbcLA_textHeight){
          isFontOverflow = true;
        }
        if(isFontOverflow){
          this._mbcLA_minimized = true;
        }
        for (i=0; i<valueSizes.length; i++) {
          if (this._mbcLA_minimized) {
            valueSizes[i].visibility = 'hidden';
          } else {
            valueSizes[i].visibility = 'visible';
          }
        }
        valueSizes[0].visibility_tVal = 'visible';
        if (this._mbcLA_nullLabelIndex !== -1) {
          valueSizes[this._mbcLA_nullLabelIndex].visibility = 'visible';
          lenNoNovalue = valueSizes.length - 1;
        } else {
          lenNoNovalue = valueSizes.length;
        }
        if (lenNoNovalue > 0) {
          if (valueSizes[lenNoNovalue-1].height === 0) {
            valueSizes[lenNoNovalue-2].visibility = 'visible';
          } else {
            valueSizes[lenNoNovalue-1].visibility = 'visible';
          }
        }
      }

      this._mbcLA_posInfo.space = space;
      if(this._mbcLA_options.position === 'top' || this._mbcLA_options.position === 'bottom'){
        this._mbcLA_markerSize.width = h;
        this._mbcLA_markerSize.height = this._mbcLA_posInfo.markerSize;
      }else{
        this._mbcLA_markerSize.width = this._mbcLA_posInfo.markerSize;
        this._mbcLA_markerSize.height = h;
      }
    };
    
    MBCLegendArea.prototype._mbcLAfn_getThemeStyleDef = function(){
      var valueLabelStyle = this._mbcLA_styleManager.query('v-label');
      var fontChangedFlag = false;
      if(valueLabelStyle){
        if(valueLabelStyle['fill'] && valueLabelStyle['fill']!==this._mbcLA_valueLabelFont.color){
          this._mbcLA_valueLabelFont.color = valueLabelStyle['fill'];
        }
        if(valueLabelStyle['font-family'] && valueLabelStyle['font-family']!==this._mbcLA_valueLabelFont.fontfamily){
          this._mbcLA_valueLabelFont.fontfamily = valueLabelStyle['font-family'];
          fontChangedFlag = true;
        }
        if(valueLabelStyle['font-size'] && valueLabelStyle['font-size']!==this._mbcLA_valueLabelFont.fontsize){
          this._mbcLA_valueLabelFont.fontsize = valueLabelStyle['font-size'];
          fontChangedFlag = true;
        }
        if(valueLabelStyle['font-weight'] && valueLabelStyle['font-weight']!==this._mbcLA_valueLabelFont.fontweight){
          this._mbcLA_valueLabelFont.fontweight = valueLabelStyle['font-weight'];
          fontChangedFlag = true;
        }
        if (fontChangedFlag) {
          this._need_calTextSize = true;
        }
      }
    };
    
    MBCLegendArea.prototype.destroy = function(){
      //remove listener
      if(this._mbcLA_wrap){
        this._mbcLA_wrap = null;  
      }
      this._mbcLA_styleManager = null;
      this._mbcLA_effectManager = null;
      this._mbcLA_selectedItem = null;
    };

    MBCLegendArea.prototype._mbcLAfn_calLegendWidthFromMarkerWidth = function(width) {
      var markerWidth=0, textWidth=0, isTextMini=false, i, noValueWidth, resultHeight, resultWidth;
      var valueSizes = this._mbcLAfn_calTextSize().textSize;
      var len = this._mbcLA_chartData.length, 
          lenNoNovalue = len;
      if(this._mbcLA_nullLabelIndex !== -1){
        noValueWidth = valueSizes[this._mbcLA_nullLabelIndex].width;
        lenNoNovalue = len - 1;
      }
      for (i=0; i<valueSizes.length; i++) {
        if (i === this._mbcLA_nullLabelIndex) {
          continue;
        }
        if (valueSizes[i].width > width) {
          isTextMini = true;
          this._mbcLA_minimized = true;
          break;
        }
      }
      for (i=0; i<valueSizes.length; i++) {
        if (isTextMini) {
          valueSizes[i].visibility = 'hidden';
        } else {
          valueSizes[i].visibility = 'visible';
        }
      }
      if(this._mbcLA_nullLabelIndex !== -1) {
         valueSizes[this._mbcLA_nullLabelIndex].visibility = 'visible';
      }
      valueSizes[0].visibility_tVal = 'visible';
      if (lenNoNovalue > 0) {
        if (valueSizes[lenNoNovalue-1].width === 0) {
          valueSizes[lenNoNovalue-2].visibility = 'visible';
        } else {
          valueSizes[lenNoNovalue-1].visibility = 'visible';
        }
      }
      //marker width
      markerWidth = (width + this._mbcLA_paddingBottom) * len;
      if (this._mbcLA_nullLabelIndex !== -1) {
        if (lenNoNovalue > 0) {
          markerWidth += this._mbcLA_posInfo.noValuePadding - this._mbcLA_paddingBottom;
        } else {
          markerWidth = width; //only one Novalue
        }
      }
      //text width
      if (lenNoNovalue > 0) {
        if (isTextMini) {
          if (valueSizes[lenNoNovalue-1].width === 0) {
            if (valueSizes[0].width > (width+this._mbcLA_paddingBottom)*(lenNoNovalue-1)) {
              textWidth = 0;
              valueSizes[0].visibility_tVal = 'hidden';
              valueSizes[lenNoNovalue-2].visibility = 'hidden';
            } else {
              textWidth = (width + this._mbcLA_paddingBottom) * (lenNoNovalue-1) + valueSizes[lenNoNovalue-2].width;
            }
          } else {
            if (valueSizes[0].width > (width + this._mbcLA_paddingBottom) * lenNoNovalue) {
              valueSizes[0].visibility_tVal = 'hidden';
              valueSizes[lenNoNovalue-1].visibility = 'hidden';
              textWidth = 0;
            } else {
              textWidth = (width + this._mbcLA_paddingBottom) * lenNoNovalue + valueSizes[lenNoNovalue-1].width;
            }
          }
        } else {
          textWidth = (width + this._mbcLA_paddingBottom) * lenNoNovalue + valueSizes[lenNoNovalue-1].width;
        }
      } else {
        textWidth = 0; //only one Novalue
      }
      if (this._mbcLA_nullLabelIndex !== -1) {
        if (lenNoNovalue > 0) {
          if (textWidth < ((width + this._mbcLA_paddingBottom)*lenNoNovalue+this._mbcLA_posInfo.noValuePadding)) {
            textWidth = (width + this._mbcLA_paddingBottom)*lenNoNovalue + this._mbcLA_posInfo.noValuePadding + noValueWidth; 
          } else {
            valueSizes[this._mbcLA_nullLabelIndex].visibility = 'hidden';
          }
        } else {
          textWidth = noValueWidth; //only one Novalue
        }
      }
      resultWidth = markerWidth>textWidth ? markerWidth : textWidth;
      if (textWidth <= 0) {
        resultHeight = this._mbcLA_posInfo.markerSize;
      } else {
        resultHeight = this._mbcLA_posInfo.markerSize + this._mbcLA_posInfo.markerPaddingRight * this._mbcLA_textHeight + this._mbcLA_textHeight;
      }
      return {width:resultWidth, height:resultHeight};
    };
  //Utility method.
  var _contains = function(a, obj){
    for (var i = 0; i < a.length; i++) {
          if (a[i] === obj) {
              return true;
          }
      }
      return false;
  };

  return MBCLegendArea;
});

define('sap/viz/modules/legend/common',['sap/viz/base/utils/oo', 'sap/viz/modules/Base', 'sap/viz/manifest','sap/viz/util/TextUtils','sap/viz/base/utils/TypeUtils',
  'sap/viz/modules/dispatch','sap/viz/base/utils/ObjectUtils','sap/viz/modules/legend/colorLegendArea','sap/viz/modules/legend/sizeLegendArea',
  'sap/viz/modules/legend/mbcLegendArea',
  'sap/viz/lang/langManager','sap/viz/base/utils/Objects','sap/viz/modules/util/BoundUtil','sap/viz/base/UADetector','sap/viz/mvc/TapGestureDetector',
  'sap/viz/format/FormatManager'],
function Setup(oo, Base, Manifest, TextRuler, TypeUtils, 
  dispatch, ObjectUtils, ColorLegendArea, SizeLegendArea, MBCLegendArea,
  langManager, Objects, BoundUtil, UADetector, TapGestureDetector,
  FormatManager) 
{
  var Legend = function(manifest, ctx) {
    this._legend_imageInfo = {
        imageMode: false,
        imagePalette: [],
        radio: 1
    };

    this._legend_width = 0; 
    this._legend_height = 0;
    this._legend_preferenceSize = { width : 0, height : 0}; 
    this._legend_titleFont = {
      'fontfamily' : "'Open Sans', Arial, Helvetica, sans-serif",
      'fontsize' : '14px',
      'fontweight' : 'bold',
      'color' : '#333333'
    };
    this._legend_valueLabelFont = {
      'fontfamily' : "'Open Sans', Arial, Helvetica, sans-serif",
      'fontsize' : '12px',
      'fontweight' : 'normal',
      'color' : '#333333'
    };
    this._legend_options = {}; 
    this._legend_isVisible = true;  
    this._legend_shapes = []; 
    this._legend_colors = []; 
    this._legend_textHeight = 20; 
    this._legend_margin = {
      top : 0,
      right : 0,
      bottom : 0,
      left : 0
    }; 
    this._legend_titleMarginBottom = 0.5; 
    this._legend_legendAreaPos = {x:0, y:0}; 
    this._legend_sizeInfo = {
      sizeScale: undefined,
      colorScale: undefined
    };
    this._legend_mbcInfo = {
        colorScale: undefined
    };
    this._legend_hideTitle = false;
    
    //Each row's position [{x: 10, y: 10}, {...}...]
    this._legend_chartData = {title:'', labels:''}; 
    this._legend_bubleSizeData = []; 
    this._legend_data = null;  //original data
    this._legend_shapeFeeds = []; 
    this._legend_colorFeeds = []; 
    this._legend_colorFeedLength = 0; 
    this._legend_shapeFeedLength = 0; 
    this._legend_relayout = true;
    this._legend_ctx = ctx;
    this._legend_legendArea = new ColorLegendArea(ctx.styleManager);
    this._legend_eDispatch = new dispatch('highlightedByLegend');
    this._legend_effectManager = ctx.effectManager;
    this._legend_eventManager = ctx.eventManager;
    this._legend_styleManager = ctx.styleManager;
    this._legend_properties = manifest.props(null);
    this._legend_isHierarchicalChanged = false;
    this._legend_oTapGestureDetector = undefined;
    this._legend_gEnterCol = undefined;
    this._legend_elem_title = null;
    this._legend_elem_root = null;
    this.properties(null);

    this._need_parseFeedsData = false;
    this._firstRenderReady = undefined;
  };
  
  oo.extend(Legend, Base);
  
  Legend.prototype.render = function(selection){
    BoundUtil.drawBound(selection, this._legend_width, this._legend_height, undefined, true);
    this._legend_elem_root = selection;
    this._legendfn_parseFeedsData(this._legend_data);
    this._legendfn_renderLegend(selection);
    if (this._firstRenderReady === undefined) {
      this._firstRenderReady = !this._legend_options.visible;
    }
  };
  
  /**
   * ff
   */
  Legend.prototype.width = function(_) {
    if(!arguments.length){
      return this._legend_width;
    }
    this._legend_width = _;
    this._legend_legendArea.width(_);
    this._legend_relayout = true;
    return this;
  };

  Legend.prototype.height = function(_) {
    if(!arguments.length){
      return this._legend_height;
    }
    this._legend_height = _;
    this._legend_legendArea.height(_);
    this._legend_relayout = true;
    return this;
  };

  Legend.prototype.imageInfo = function(_) {
    if(!arguments.length){
      return this._legend_imageInfo;
    }
    this._legend_imageInfo = _;
    this._legend_relayout = true;
    return this;
  };

  Legend.prototype.colorPalette = function(_) {
    if(!arguments.length){
      return this._legend_colors;
    }
    this._legend_colors = _;  
    this._legend_legendArea.color(_);
    return this;
  };

  Legend.prototype.shapes = function(_) {
    if(!arguments.length){
      return this._legend_shapes;
    }
    this._legend_shapes = _;
    this._legend_legendArea.shapes(_);
    return this;
  };

  Legend.prototype.data = function(_) {
    if(!arguments.length){
      return this._legend_data;
    }
    this._legend_data = _;
    this._need_parseFeedsData = true;
    return this;
  };
  
  Legend.prototype.properties = function(props) {
    if(!arguments.length){
      return this._legend_properties;
    }
    //TODO use extends...
    if (this._legend_properties && props && this._legend_properties.isHierarchical !== props.isHierarchical){
      this._legend_isHierarchicalChanged = true;
    }
    Objects.extend(true, this._legend_properties, props);
    this._legend_options.visible = this._legend_properties.visible;
    this._legend_isVisible = this._legend_options.visible;
    this._legend_options.isShowTitle = this._legend_properties.title.visible;
    this._legend_options.titleText = this._legend_properties.title.text;
    this._legend_options.isHierarchy = this._legend_properties.isHierarchical;
    this._legend_options.isScrollable = this._legend_properties.isScrollable;
    this._legend_options.position = this._legend_properties.position;
    this._legend_options.formatString = this._legend_properties.formatString;
    this._legend_options.alignment = this._legend_properties.alignment;
    this._legend_options.drawingEffect = this._legend_properties.drawingEffect;

    if (this._legend_options.visible === true) {
      if (this._firstRenderReady) {
        this._need_parseFeedsData = true;
        this._firstRenderReady = false;
      }
      if(this._legend_options.legendType !== this._legend_properties.type){
        this._legend_options.legendType = this._legend_properties.type;
        if(this._legend_data && this._legend_chartData.labels){
          this._need_parseFeedsData = true;
        }
        if(isSizeLegend(this._legend_options.legendType)){
          this._legend_legendArea = new SizeLegendArea(this._legend_styleManager); 
        }else if (isMeasureBasedColoringLegend(this._legend_options.legendType)){
          this._legend_legendArea = new MBCLegendArea(this._legend_styleManager);
        }
      }

      this._legend_legendArea.properties(this._legend_options);      
    } else {
      this._need_parseFeedsData = false;
    }
    
    //reset
    this._legend_height = 0;
    this._legend_width = 0;
    return this;
  };

  Legend.prototype.getPreferredSize = function () {
    this._legendfn_parseFeedsData(this._legend_data);
    this._legendfn_getThemeStyleDef();
    return this._legendfn_calculateRowPosition();
  };
  
  Legend.prototype.sizeLegendInfo = function(_){
    if(!arguments.length){
      return this._legend_sizeInfo.sizeScale;
    }
    //Size scale
    this._legend_sizeInfo.sizeScale = _.scale;
    this._legend_legendArea.scale(this._legend_sizeInfo.sizeScale);
    this._legend_sizeInfo.color = _.color;
    
    //Size data
    if(_.data.length === 0){
      this._legend_isVisible = false;
    }else{
      this._legend_isVisible = this._legend_options.visible;
      this._legend_bubleSizeData = _.data;
      this._legend_legendArea.data(this._legend_bubleSizeData);
    }
    
    //Size legend title
    this._legend_chartData.title = handleNull(_.title);
    
    return this;
  };
  
  /*
   * Measure based coloring
   */
  Legend.prototype.mbcLegendInfo = function(_){
    if(!arguments.length){
      return this._legend_mbcInfo.colorScale;
    }
    this._legendfn_parseFeedsData(this._legend_data);
    if(_.colorScale === undefined){
      this._legend_isVisible = false;
    }else{
      this._legend_isVisible = this._legend_options.visible;
      this._legend_mbcInfo.colorScale = _.colorScale;
      //Legend title
      this._legend_chartData.title = handleNull(_.title);
      this._legendfn_parseMeasureBasedColoringLegend();
      this._legend_legendArea.data(this._legend_chartData.labels);
    }
    return this;
  };
  
  //[Christy] Remove the following two function after remove all older interation dependancy in Chart manifest.
  Legend.prototype.deselectLegend = function(deselectedData){
  };
  Legend.prototype.setSelectionMode = function(_){
  };
  
  /**
   * get/set your event dispatch if you support event
   */
  Legend.prototype.dispatch = function(_){
    if(!arguments.length){
      return this._legend_eDispatch;
    }
    this._legend_eDispatch = _;
    return this;
  };
  
  Legend.prototype.getPropertyZone = function() {
    var result = [], zonenamePrefix, boundRect, boundRect1, bound, bound1, temp;
    if (isSizeLegend(this._legend_options.legendType)) {
      zonenamePrefix = 'sizeLegend';
    } else {
      zonenamePrefix = 'legend';
    }

    if (this._legend_isVisible && this._legend_options.isShowTitle && !this._legend_hideTitle) {
      boundRect = this._legend_elem_title.node().getBoundingClientRect();
      if (boundRect.width>1.5 && boundRect.height>1.5) {
        bound = [[]];
        bound[0].push([boundRect.left, boundRect.top]);
        bound[0].push([boundRect.right, boundRect.top]);
        bound[0].push([boundRect.right, boundRect.bottom]);
        bound[0].push([boundRect.left, boundRect.bottom]);
        result.push({
          "name": zonenamePrefix + ' title',
          "bound": bound
        });
      }
    }

    temp = this._legend_elem_root.select(".v-bound").node().getBoundingClientRect();
    if (temp.width>1.5 && temp.height>1.5) {
      boundRect1 = {
        left: temp.left,
        right: temp.right,
        top: temp.top,
        bottom: temp.bottom
      };
      if (result.length > 0) {
        boundRect1.top = result[0].bound[0][3][1]+1;
      }   
      bound1 = [[]];
      bound1[0].push([boundRect1.left, boundRect1.top]);
      bound1[0].push([boundRect1.right, boundRect1.top]);
      bound1[0].push([boundRect1.right, boundRect1.bottom]);
      bound1[0].push([boundRect1.left, boundRect1.bottom]);

      result.push({
        "name": zonenamePrefix,
        "bound": bound1
      });
    }

    return result;
  };

  Legend.prototype.destroy = function() {
    //call sub legend area destroy
    if(this._legend_legendArea && this._legend_legendArea.destroy){
      this._legend_legendArea.destroy();
    }
    if(this._legend_gEnterCol){
      this._legend_gEnterCol.on('click', null);
      //self destroy
      this._legend_gEnterCol = null;  
    }
    this._legend_colorFeeds = null;
    this._legend_data = null;
    this._legend_chartData = null;
    this._legend_legendArea = null;
    this._legend_effectManager = null;
    this._legend_eventManager = null;
    this._legend_styleManager = null;
    this._legend_elem_root = null;

    //destroy ctx
    if(this._legend_ctx){
      this._legend_ctx.destroy();
      this._legend_ctx = null;
    }    
    
  };
  
  Legend.prototype.highlight = function(target){
    if(this._legend_legendArea){
      this._legend_legendArea.highlight(target);
    }
  };

  Legend.prototype.unhighlight = function(target, isResetPos){
    if(this._legend_legendArea){
      this._legend_legendArea.unhighlight(target, isResetPos);
    }
  };

  Legend.prototype.selected = function(target){
    if(this._legend_legendArea){
      this._legend_legendArea.selected(target);
    }
  };

  Legend.prototype.panStart = function(target){
    if(this._legend_legendArea && this._legend_legendArea.panStart){
      this._legend_legendArea.panStart(target);
    }
  };
  Legend.prototype.panMove = function(target){
    if(this._legend_legendArea && this._legend_legendArea.panMove){
      this._legend_legendArea.panMove(target);
    }
  };
  Legend.prototype.panEnd = function(target){
    if(this._legend_legendArea && this._legend_legendArea.panEnd){
      this._legend_legendArea.panEnd(target);
    }
  };

  Legend.prototype._legendfn_renderLegend = function(selection){
    var that = this;
    selection.each(function() {
      if ( isColorLegend(that._legend_options.legendType) || isBubbleColorLegend(that._legend_options.legendType) ) {
        if ( that._legend_chartData.labels.length === 0 ) {
          that._legend_isVisible = false;
        }
      }
      
      if ( that._legend_isVisible && _isSizeAcceptable.call(that)) {
        that._legendfn_getThemeStyleDef();
        
        if ( that._legend_relayout ) {
          that._legendfn_calculateRowPosition({'width': that._legend_width, 'height' : that._legend_height});
        }

        var xPos = that._legend_margin.left * that._legend_textHeight, 
            yPos = that._legend_margin.top * that._legend_textHeight,
            paddingRight = that._legend_margin.right * that._legend_textHeight,
            paddingBottom = that._legend_margin.bottom * that._legend_textHeight;
        
        var wrap = d3.select(this).selectAll('g.v-content').data([that._legend_chartData]);
        wrap.enter().append('g').attr('class', 'v-content');//.attr('clip-path', 'url(#legend-edge-clip)');
        if ( that._legend_isHierarchicalChanged ) {
          that._legend_isHierarchicalChanged = false;
          wrap.selectAll('.v-row').remove();
          wrap.selectAll('.v-group').remove();
        }
        //Legend Title
        if ( that._legend_options.isShowTitle && !that._legend_hideTitle ) {
          var titleTextHeight = parseInt(that._legend_titleFont.fontsize, 10);
          var titleStyle = 'font-weight: ' + that._legend_titleFont.fontweight +'; fill:' + that._legend_titleFont.color + '; font-family: ' + that._legend_titleFont.fontfamily + '; font-size: '+that._legend_titleFont.fontsize+";";
          var titleLabel = (that._legend_options.titleText===undefined || that._legend_options.titleText === null) ? that._legend_chartData.title : that._legend_options.titleText;
          
          var labelTitleElement = wrap.selectAll('text.v-title');
          if ( labelTitleElement.empty() ) {
            labelTitleElement = wrap.append('text').attr('class', 'v-title viz-legend-title');
          }
          that._legend_elem_title = labelTitleElement;
          var defaultTitleFont = that._legend_styleManager.queryDefault('v-title');
          labelTitleElement.text(titleLabel).attr('dx', xPos).attr('dy', yPos + titleTextHeight).attr('visibility', 'visible')
          .attr('font-weight', defaultTitleFont['font-weight']).attr('fill', defaultTitleFont['fill']).attr('font-family', defaultTitleFont['font-family']).attr('font-size', defaultTitleFont['font-size']).attr('font-style', defaultTitleFont['font-style']);
          
          //Show ... in title 
          labelTitleElement.each(function(d) {
            TextRuler.ellipsis(titleLabel, this, that._legend_width - xPos - paddingRight, titleStyle);
          });
        } else {
          wrap.selectAll('text.v-title').attr('visibility', 'hidden');
          if ( that._legend_hideTitle ) {
              that._legend_hideTitle = false;
          } 
        }

        var labelsData = that._legend_chartData.labels;
        // Create Legend Groups
        var gEnterCol = wrap.selectAll('g.v-groups').data([labelsData]);
        that._legend_gEnterCol = gEnterCol;
        gEnterCol.enter().append('g').attr('class', 'v-groups v-label viz-legend-valueLabel');
        gEnterCol.attr('transform', 'translate('+that._legend_legendAreaPos.x+','+that._legend_legendAreaPos.y+')');

        var tmpWidth = ( !that._legend_width ? that._legend_preferenceSize.width : that._legend_width) - xPos - paddingRight;
        var tmpHeight = ( !that._legend_height ? that._legend_preferenceSize.height : that._legend_height) - paddingBottom;
        
        //TODO Need to handle legend in the top/bottom side.
        that._legend_legendArea.properties(that._legend_options).width(tmpWidth).height(tmpHeight-that._legend_legendAreaPos.y).effectManager(that._legend_effectManager);
        if ( isSizeLegend(that._legend_options.legendType) ) {
          that._legend_legendArea.data(that._legend_bubleSizeData).scale(that._legend_sizeInfo.sizeScale).color(that._legend_sizeInfo.color);
        } else if ( isMeasureBasedColoringLegend(that._legend_options.legendType) ) {
          that._legend_legendArea.data(labelsData).color(that._legend_mbcInfo.colorScale.range());
        } else {
          that._legend_legendArea.imageInfo(that._legend_imageInfo);
          that._legend_legendArea.data(labelsData).color(that._legend_colors).colorFeedLength(that._legend_colorFeedLength).shapeFeedLength(that._legend_shapeFeedLength);
        }
        //var temp = gEnterCol.call(that._legend_legendArea);
        that._legend_legendArea.render(gEnterCol);
        
        //Vertical align to center
        if ( that._legend_options.position === 'left' || that._legend_options.position === 'right' ) {
          switch(that._legend_options.alignment){
            case 'start': 
              wrap.attr('transform','translate('+ 0 +','+ 0+')');
              break;
            case 'end':
              wrap.attr('transform', 'translate(' + 0 + ', ' + (((that._legend_height-that._legend_preferenceSize.height) > 0) ? ((that._legend_height-that._legend_preferenceSize.height)) : 0)+')');
              break;
            case 'middle':
              wrap.attr('transform', 'translate(' + 0 + ', '+(((that._legend_height-that._legend_preferenceSize.height)/2 > 0) ? ((that._legend_height-that._legend_preferenceSize.height)/2) : 0)+')');
              break;
          }
        } else {
//          var xpos = (that._legend_width-that._legend_preferenceSize.width)/2;
//          if(xpos < 0){
//            xpos = 0;
//          }
          
          wrap.attr('transform','translate('+ 0 +','+0+')');
        }
      } else {
        //Handle visible is false.
        var elements = d3.select(this).selectAll('g.v-content');
        if (!elements.empty()) {
            elements.remove();
        }
      }
    });
  };
  
  Legend.prototype._legendfn_isInLegendContent = function(node) {
      var result = false;
      if(node === null){
          return false;
      }else{
          if(node === this._legend_gEnterCol.node()){
              return true;
          }
          result = this._legendfn_isInLegendContent(node.parentNode);
      }
      return result;
  };

  Legend.prototype._legendfn_isValid = function(event) {
      return this._legendfn_isInLegendContent(event.target);
  };
    
    
      
  Legend.prototype._legendfn_getThemeStyleDef = function(){
    var titleStyle = this._legend_styleManager.query('v-title');
    if(titleStyle){
      if(titleStyle['fill']){
        this._legend_titleFont.color = titleStyle['fill'];
      }
      if(titleStyle['font-family']){
        this._legend_titleFont.fontfamily = titleStyle['font-family'];
      }
      if(titleStyle['font-size']){
        this._legend_titleFont.fontsize = titleStyle['font-size'];
      }
      if(titleStyle['font-weight']){
        this._legend_titleFont.fontweight = titleStyle['font-weight'];
      }
    }
    
    var valueLabelStyle = this._legend_styleManager.query('v-label');
    if(valueLabelStyle){
      if(valueLabelStyle['fill']){
        this._legend_valueLabelFont.color = valueLabelStyle['fill'];
      }
      if(valueLabelStyle['font-family']){
        this._legend_valueLabelFont.fontfamily = valueLabelStyle['font-family'];
      }
      if(valueLabelStyle['font-size']){
        this._legend_valueLabelFont.fontsize = valueLabelStyle['font-size'];
      }
      if(valueLabelStyle['font-weight']){
        this._legend_valueLabelFont.fontweight = valueLabelStyle['font-weight'];
      }
    }
  };
    
  Legend.prototype._legendfn_parseFeedsData = function(data) {
    if(!this._need_parseFeedsData || !data){
      return;
    }
    this._legend_colorFeeds = [];
    this._legend_shapeFeeds = [];
    var aa = data.getAnalysisAxisDataByIdx(0);
    if(aa){ 
      this._legend_colorFeeds = aa.values;
    }
    
    aa = data.getAnalysisAxisDataByIdx(1);
    if(aa){
      this._legend_shapeFeeds = aa.values;
    }
    
    if(isBubbleColorLegend(this._legend_options.legendType)){
      this._legendfn_parseBubbleColorLegendFeeds();
    } else if(isSizeLegend(this._legend_options.legendType)){
      this._legend_chartData.labels = [0,0,0];
    } else {
      this._legendfn_parseColorLegendFeeds();
    }
    if (!isMeasureBasedColoringLegend(this._legend_options.legendType)) {
      this._legend_legendArea.data(this._legend_chartData.labels);
    }
    this._need_parseFeedsData = false;
  };
    
  Legend.prototype._legendfn_parseMeasureBasedColoringLegend = function(){
    var labels = [], item = {
      'val' : undefined,
      'ctx' : {}
    };
    var mbcDomains = this._legend_mbcInfo.colorScale.domain();
    var mbcDomainInfo = this._legend_mbcInfo.colorScale.domainInfo;
    var len = mbcDomains.length;
    for(var i = 0, j = len-1; i < len; i++, j--){
        if(mbcDomains[i].length > 0) {
  //          item.val = '[ ' + mbcDomains[i][0] + ' ; ' + mbcDomains[i][1] + ( i===len-1 ? ' ]' : ' [');
          item.val = mbcDomains[i][0];

          item.ctx.ranges = {
            startValue : mbcDomains[i][0],
            endValue : mbcDomains[i][1],
            isRightOpen : mbcDomainInfo[i].isRightOpen,
            isLeftOpen : mbcDomainInfo[i].isLeftOpen,
            isAsending : mbcDomainInfo[i].isAscending
          };
        } else {
          item.val = 'N/A';
          item.ctx.ranges = {};
          // if(labels[j+1] !== undefined){
          //   labels[j+1].ctx.ranges.isRightOpen = false;
          // }
        }

        //20131128_JohnWen: attach contexts of datapoints to corresponding color
        //so that interaction can select these points directly instead of
        //asking plot module to get points when clicking on legend  
        item.ctx.path = mbcDomainInfo[i].dpPaths;        

        labels[j] = {};
        ObjectUtils.extend(true, labels[j], item);
    }//for

    if (labels[len-1].val === -Number.MAX_VALUE) {
        labels[len-1].val = undefined;
        labels[len-2].val = "<" + FormatManager.format(labels[len-2].ctx.ranges.startValue, this._legend_options.formatString);
    }

    //put N/A to the end of array
    if(labels[0].val ===  'N/A'){
      var firstItem = labels.shift();
      labels.push(firstItem);
    }

    //labels[0].ctx.ranges.isRightOpen = false;
    var temp1 = labels[0].ctx.ranges.endValue;
    if (temp1 === Number.MAX_VALUE) {
      temp1 = ">" + FormatManager.format(labels[0].ctx.ranges.startValue, this._legend_options.formatString);
    }
    labels[0].val1 = temp1;

    if(TypeUtils.isExist(this._legend_options.formatString)){
      for (i=0; i<labels.length; i++) {
        var label = labels[i];
        if (label.val !== undefined) {
          label.val = FormatManager.format(label.val , this._legend_options.formatString );
        }
        if (label.val1 !== undefined) {
          label.val1 = FormatManager.format(label.val1 , this._legend_options.formatString );
        }
      }
    }

    this._legend_chartData.labels = labels;
  };

  function _LabelLookupArray() {
    this.array = [];
    this.index = {};
  }

  _LabelLookupArray.prototype.push = function(label) {
    this.array.push(label);
    this.index[label.val] = this.array.length - 1;
  };

  _LabelLookupArray.prototype.lookupByValue = function(val) {
    var index = this.index[val];
    if(index !== undefined) {
      return this.array[index];
    } else {
      return null;
    }
  };
    
  Legend.prototype._legendfn_parseBubbleColorLegendFeeds = function(){
      var labels = new _LabelLookupArray(), title ='', tmpVal = '', i, j = 0, len, tmpLabel={
        'val' : undefined,
        'ctx' : {
          'path' : {}
        }
      }, dii, isContains, currLabel;
    this._legend_colorFeedLength = 0, this._legend_shapeFeedLength = 0;
    
    if(this._legend_colorFeeds && this._legend_colorFeeds.length > 0 && this._legend_colorFeeds[0].rows.length > 0){
      var firstColorFeed = this._legend_colorFeeds[0];
      title = handleNull(firstColorFeed.col.val);
      
      dii = 'dii_a'+(firstColorFeed.rows[0].ctx.path.aa+1);
      tmpLabel = {
        'val' : firstColorFeed.rows[0].val,
        'ctx' : {
          'path' : { }
        },
        'info' : firstColorFeed.rows[0].info
      };
      tmpLabel.ctx.path[dii] = [firstColorFeed.rows[0].ctx.path.dii];
      
      for(i = 1, len = firstColorFeed.rows.length; i < len; i++){
        tmpVal = firstColorFeed.rows[i].val;
        currLabel = labels.lookupByValue(tmpVal);
        if(tmpVal === tmpLabel.val){
          tmpLabel.ctx.path[dii].push(firstColorFeed.rows[i].ctx.path.dii);
        }else if(currLabel !== null){
          currLabel.ctx.path[dii].push(firstColorFeed.rows[i].ctx.path.dii);
        }else{
          currLabel = {};
          tmpLabel.val = resolveCustomLabel(tmpLabel);
          ObjectUtils.extend(true, currLabel, tmpLabel);
          //New color label. Add it to uniqueColorLabel and assign its new color
          tmpLabel.val = tmpVal;
          tmpLabel.ctx = {
            path : { }
          };
          tmpLabel.ctx.path[dii] = [firstColorFeed.rows[i].ctx.path.dii];
          labels.push(currLabel);
        }
      }
      //Add the last one
      currLabel = {};
      tmpLabel.val = resolveCustomLabel(tmpLabel);
      ObjectUtils.extend(true, currLabel, tmpLabel);
      labels.push(currLabel);
      
      this._legend_colorFeedLength = labels.length;
    }
    labels = labels.array;
    
    if(this._legend_shapeFeeds && this._legend_shapeFeeds.length > 0) {
      var firstShapeFeed = this._legend_shapeFeeds[0], shapeLabels=[];
      title = (title === '') ? handleNull(firstShapeFeed.col.val) : title + " / " + handleNull(firstShapeFeed.col.val);
      
      dii = 'dii_a'+(firstShapeFeed.rows[0].ctx.path.aa+1);
      tmpLabel = {
        'val' : firstShapeFeed.rows[0].val,
        'ctx' : {
          'path' : {}
        },
        'info' : firstShapeFeed.rows[0].info
      }, j = 0;
      tmpLabel.ctx.path[dii] = [firstShapeFeed.rows[0].ctx.path.dii];
      
      for(i = 1, len = firstShapeFeed.rows.length; i < len; i++){
        tmpVal = firstShapeFeed.rows[i].val;
        isContains = _containsVal(shapeLabels, tmpVal);
        if(tmpVal === tmpLabel.val){
          tmpLabel.ctx.path[dii].push(firstShapeFeed.rows[i].ctx.path.dii);
        } else if(isContains !== false){
          shapeLabels[isContains].ctx.path[dii].push(firstShapeFeed.rows[i].ctx.path.dii);
        }else{
          shapeLabels[j] = {};
          tmpLabel.val = resolveCustomLabel(tmpLabel);
          ObjectUtils.extend(true, shapeLabels[j++], tmpLabel);
          //New shape label. Add it to uniqueColorLabel and assign its new color
          tmpLabel.val = tmpVal;
          tmpLabel.ctx = {
            path : {}
          };
          tmpLabel.ctx.path[dii] = [firstShapeFeed.rows[i].ctx.path.dii];
        }
      }
      //Add the last one
      shapeLabels[j] = {};
      tmpLabel.val = resolveCustomLabel(tmpLabel);
      ObjectUtils.extend(true, shapeLabels[j], tmpLabel);

      this._legend_shapeFeedLength = shapeLabels.length;
      if(labels.length > 0){
        labels = getCartesian([labels, shapeLabels], ' / ');
      }else{
        labels = shapeLabels;
      }
    }
    
    if(labels.length === 0){
      this._legend_isVisible = false;
    }else{
      this._legend_isVisible = this._legend_options.visible;
    }
     
    this._legend_chartData = {
      'title' : title,
      'labels' : labels
    };
  };
    
  Legend.prototype._legendfn_parseColorLegendFeeds = function(){
    var title, labels = [];
    this._legend_colorFeedLength = 0;
    this._legend_shapeFeedLength = 0;
    var colorData = this._legendfn_parseLegendFeed(title, this._legend_colorFeeds, this._legend_colorFeedLength);
    this._legend_colorFeedLength = colorData.feedsLength;
    var shapeData = this._legendfn_parseLegendFeed(title, this._legend_shapeFeeds, this._legend_shapeFeedLength);
    this._legend_shapeFeedLength = shapeData.feedsLength;
    
    //Color and Shape Cartesian
    if(shapeData.labels.length > 0){
      if(colorData.labels.length > 0){
        if(colorData.MNDInfo.MNDIndex === undefined && shapeData.MNDInfo.MNDIndex === undefined){
          //Has color and shape feed and no MND. So use '/'
          labels = getCartesian([colorData.labels, shapeData.labels], ' / ');
          title = colorData.title + " / " + shapeData.title;
        }else {
          if((colorData.MNDInfo.MNDIndex !== undefined && !colorData.MNDInfo.hasOnlyMND) || (shapeData.MNDInfo.MNDIndex !== undefined && !shapeData.MNDInfo.hasOnlyMND)){
            labels = getCartesian([colorData.labels, shapeData.labels], ' - ');
            title = colorData.title + " - " + shapeData.title;
          } else if (colorData.MNDInfo.MNDIndex !== undefined && colorData.MNDInfo.hasOnlyMND){
            labels = shapeData.labels;
            title = shapeData.title;
          } else {
            labels = colorData.labels;
            title = colorData.title;
          }
            
        } 
      }else{
        labels = shapeData.labels;
        title = shapeData.title;
      }
    }else{
      labels = colorData.labels;
      title = colorData.title;
    }

    if(labels.length === 0){
      this._legend_isVisible = false;
    }else{
      this._legend_isVisible = this._legend_options.visible;
    }
    this._legend_chartData = {
      'title' : title,
      'labels' : labels
    };
  };
    
  Legend.prototype._legendfn_parseLegendFeed = function(title, feeds, feedsLength){
    var labels = [], rows = [], dimensionTag = ' / ', measureTag = ' - ';
    var MNDIndex, hasOnlyMND = false, i, j, len;
    //Handle colors feeds
    if(feeds && feeds.length > 0){
      for(i = 0, len = feeds.length; i < len; i++) {
        if(feeds[i].type !== 'MND') {
          if(title === undefined) {
            title = handleNull(feeds[i].col.val);
          } else {
            title = title + dimensionTag + handleNull(feeds[i].col.val);
          }
          
          rows = feeds[i].rows;
          for(j = 0; j < rows.length; j++) {
            if(labels[j] === undefined) {
              labels[j] = {};
              labels[j].val = resolveCustomLabel(rows[j]);
              if (rows[j].dataTransformInfo && rows[j].dataTransformInfo.autoBinning) {
                labels[j].val += ('(' + rows[j].dataTransformInfo.autoBinning.othersNum + ')');
              }
              labels[j].ctx = {
                path : _setPathByaa(rows[j].ctx.path)
              };
              //For hierarchical legend. Keep original value.
              labels[j].orignialVal = [];
              labels[j].orignialVal.push(handleNull(rows[j].val));
            } else {
              if (rows[j].val !== '') {
                labels[j].val = labels[j].val + dimensionTag + resolveCustomLabel(rows[j]);
                labels[j].orignialVal.push(handleNull(rows[j].val));
              }
            }
          }
        } else {
          MNDIndex = i;
        }
      }
      feedsLength = labels.length;
    }
    
    //Handle Colors with MND
    if(MNDIndex !== undefined) {
      //Save color feed with MND status.
      if(labels.length > 0){
        if(feeds[MNDIndex].rows.length > 1){
          if(MNDIndex === 0) {
            title = langManager.get('IDS_DEFAULTMND') + measureTag + title; 
            //MND is the first feed type. Legend label should be 'MND - A/B/C'
            labels = getCartesian([handleNullInArray(feeds[MNDIndex].rows), labels], measureTag);
            feedsLength = feedsLength * feeds[MNDIndex].rows.length;
          } else if(MNDIndex === feeds.length - 1) {
            title = title + measureTag + langManager.get('IDS_DEFAULTMND');
            //MND is the last feed type. Legend label should be 'A/B/C - MND'
            labels = getCartesian([labels, handleNullInArray(feeds[MNDIndex].rows)], measureTag);
            feedsLength = feedsLength * feeds[MNDIndex].rows.length;
          } 
        }
      }else{
        title = langManager.get('IDS_DEFAULTMND');
        rows = feeds[MNDIndex].rows;
        for(j = 0; j < rows.length; j++) {
          labels[j] = {};
          labels[j].val = resolveCustomLabel(rows[j]);
          labels[j].ctx = rows[j].ctx;
          //For hierarchical legend. Keep original value.
          labels[j].orignialVal = [];
          labels[j].orignialVal.push(handleNull(rows[j].val));
        }
        feedsLength = rows.length;
        if(rows.length === 1){
          hasOnlyMND = true;
        }
      }
    }
    
    return {
      'title' : title,
      'labels' : labels,
      'feedsLength' : feedsLength,
      'MNDInfo' : {
        'MNDIndex' : MNDIndex,
        'hasOnlyMND': hasOnlyMND //Only has MND, no cartesian
      }
    };
  };
    
    // Calculate legend row position and return legend max size.
  Legend.prototype._legendfn_calculateRowPosition = function () {
    var maxHeight = 0, 
        maxWidth = 0, 
        minWidth = 0, 
        minHeight = 0, 
        titleSize = { width : 0, height : 0 }, 
        legendAreaSize = {};
        
    var labelFont, xPos, yPos;

    if ( this._legend_isVisible && this._legend_legendArea.hasData()) {
      labelFont = "font-size:" + this._legend_titleFont.fontsize + 
                "; font-weight:" + this._legend_titleFont.fontweight + 
                "; font-family:" + this._legend_titleFont.fontfamily;
                
      this._legend_textHeight = parseInt(this._legend_valueLabelFont.fontsize, 10); //1em
      xPos = this._legend_margin.left * this._legend_textHeight, yPos = this._legend_margin.top * this._legend_textHeight;
      var startYPos = yPos,
        paddingRight = this._legend_margin.right * this._legend_textHeight,
        paddingBottom = this._legend_margin.bottom * this._legend_textHeight;
      
      // Measure title size
      if ( this._legend_options.isShowTitle && 
         ( ( typeof this._legend_options.titleText !== 'undefined' && this._legend_options.titleText !== null) || 
           (typeof this._legend_chartData.title !== 'undefined' && this._legend_chartData.title !== null ))) 
      {
        titleSize = TextRuler.fastMeasure( 
          typeof this._legend_options.titleText === 'undefined' || this._legend_options.titleText === null ? 
          this._legend_chartData.title : this._legend_options.titleText, this._legend_titleFont.fontsize,  this._legend_titleFont.fontweight, this._legend_titleFont.fontfamily);
          
//          if ( !this._legend_hideTitle ) {
          yPos = yPos + titleSize.height + this._legend_titleMarginBottom * this._legend_textHeight;
//          }
      }
      
      // Legend Area Position
      this._legend_legendAreaPos = { x : xPos, y: yPos};
      
      // TODO [Christy | 2013/2/26] change return value's name. width,height to maxWidth,maxHeight
      legendAreaSize = this._legend_legendArea.getPreferredSize();
      
      // Calculate legend's max and min size with title
      if ( this._legend_options.position === 'top' || this._legend_options.position === 'bottom' ) {
        maxWidth = xPos + ((titleSize.width > legendAreaSize.width) ? titleSize.width : legendAreaSize.width);
        maxHeight = yPos + legendAreaSize.height;
        
        minWidth = xPos + legendAreaSize.minWidth;
        minHeight = startYPos + legendAreaSize.minHeight;
      }else{
        maxWidth = xPos + ((titleSize.width > legendAreaSize.width) ? titleSize.width : legendAreaSize.width);
        maxHeight = yPos + legendAreaSize.height;
        
        minWidth = xPos + legendAreaSize.minWidth;
        minHeight = startYPos + legendAreaSize.minHeight;
      }
      
      //Smart layout legend title 
      if(this._legend_options.isShowTitle){
        var relLegendAreaSize = {
            width : this._legend_width - xPos - paddingRight,
            height : this._legend_height - yPos - paddingBottom
        };
        if (parseFloat(relLegendAreaSize.height.toFixed(1)) < parseFloat(legendAreaSize.minHeight.toFixed(1))) {
          // Hide legend title if it's shown.
          this._legend_hideTitle = true;
          this._legend_legendAreaPos = { x : xPos, y: startYPos};
          if( this._legend_height>0 && relLegendAreaSize.height<0 && (this._legend_options.position === 'top' || this._legend_options.position === 'bottom' )){
            maxHeight = legendAreaSize.height + startYPos;
          }
        }else{
          this._legend_hideTitle = false;
        }
      }
      maxWidth = maxWidth + paddingRight;
      minWidth = minWidth + paddingRight;
      maxHeight = maxHeight + paddingBottom;
      minHeight = minHeight + paddingBottom;
    }
     
      this._legend_preferenceSize = {
        width : maxWidth,
        height : maxHeight,
        maxWidth : maxWidth,
        maxHeight : maxHeight,
        minWidth : minWidth,
        minHeight : minHeight
    };
    return this._legend_preferenceSize;
  };
    
  var _setPathByaa = function(path){
    var pathObj = {};
    switch(path.aa){
      case 0:
        pathObj.dii_a1 = path.dii;
        break;
      case 1:
        pathObj.dii_a2 = path.dii;
        break;
      case 2:
        pathObj.dii_a3 = path.dii;
        break;
    }
    return pathObj;
  };
  
  var _containsVal = function(a, obj){
    for (var i = 0; i < a.length; i++) {
          if (a[i].val === obj) {
              return i;
          }
      }
      return false;
  };
  
  var getCartesian = function(arrays, symbol) {
    var result = arrays[0];
    var fff = function(arr) {
      var ar = result;
      result = [];
      for(var i = 0; i < ar.length; i++) {
        for(var j = 0; j < arr.length; j++) {
          var t1 = (ar[i].val === undefined) ? ar[i].val : ar[i].val, t2 = (arr[j].val === undefined) ? arr[j].val : arr[j].val;
          var ctx = {
            path : {}
          };
          ObjectUtils.extend(ctx.path, ar[i].ctx.path, arr[j].ctx.path);
          var res = {
            'val': t1 + symbol + t2, 
            'ctx': ctx,
            'orignialVal': []
          };
          if(ar[i].orignialVal === undefined){
            res.orignialVal.push(ar[i].val);
          }else{
            res.orignialVal = res.orignialVal.concat(ar[i].orignialVal);
          }
          
          if(arr[j].orignialVal === undefined){
            res.orignialVal.push(arr[j].val);
          }else{
            res.orignialVal = res.orignialVal.concat(arr[j].orignialVal);
          }
          
          result.push(res);
        }
      }
    };
    for(var i = 1; i < arrays.length; i++) {
      fff(arrays[i]);
    }

    return result;
  };
  
  var isColorFeeds = function(feedName){
    var result = false;
//      if(Manifest.feeds[feedName].semantic === 'COLOR'){
//        result = true;
//      }
    if(feedName.search('color') !== -1){
      result = true;
    }
    return result;
  };
  
  var isShapeFeeds = function(feedName){
    var result = false;
//      if(Manifest.feeds[feedName].semantic === 'SHAPE'){
//        result = true;
//      }
    if(feedName.search('shape') !== -1){
      result = true;
    }
    return result;
  };
  
  var isColorLegend = function(legendType){
    var result = false;
    if(legendType === 'ColorLegend'){
      result = true;
    }
    return result;  
  };
  
  var isSizeLegend = function(legendType){
    var result = false;
    if(legendType === 'SizeLegend'){
      result = true;
    }
    return result;  
  };
  
  var isBubbleColorLegend = function(legendType){
    var result = false;
    if(legendType === 'BubbleColorLegend'){
      result = true;
    }
    return result;  
  };
  
  var isMeasureBasedColoringLegend = function(legendType){
    var result = false;
    if(legendType === 'MeasureBasedColoringLegend'){
      result = true;
    }
    return result;  
  };
  
  var _isSizeAcceptable = function(){
    return (this._legend_width > 0 && this._legend_height > 0);
  };
  
  //alex su
  var handleNull = function(_){
    var defaultString = langManager.get('IDS_ISNOVALUE');
    if (_ === null || _ === undefined){
      return defaultString;
    }
    else{ 
      return _;
    }
  };
    
  var resolveCustomLabel = function(rawObj){
    var ret;
    if(rawObj.info){
      var clobj = rawObj.info.customlabel;
      if(clobj){
        if(clobj.type === 'url'){
          //Jimmy/12/27/2012 do we still need the orginal value in legend here?
          ret = rawObj.val;
        }else if(clobj.type === 'string'){
          ret = clobj.val;
        }
      }else{
        ret = rawObj.val;
      }
    }else{
      ret = rawObj.val;
    }
    ret = handleNull(ret);
    return ret;  
  };
  
  var handleNullInArray = function(array){
    var result = [];
    for (var i = 0; i < array.length; ++i){
      result[i] = {};
      ObjectUtils.extend(true, result[i], array[i]); 
      result[i].val = handleNull(array[i].val);
    }
    return result;
  };
  
  var getCurrentEvent = function() {
    if ( d3.event ) {
      return d3.event;
    } else {
      return window.event;
    }
  };
  return Legend;
});

define('sap/viz/modules/manifests/legend/Common',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/Constants',
  'sap/viz/modules/legend/common', 'sap/viz/base/UADetector'],
function Setup(Manifest, Constants, fn, UADetector) {
  var module = {
    'id' : 'sap.viz.modules.legend.common',
    'type' : Constants.Type.Supplementary,
    'name' : 'common legend',
    'description': 'Settings for the legend',
    'properties' : {
      'visible' : {
        'name' : 'visible',
        'supportedValueType' : 'Boolean',
        'defaultValue' : true,
        'description' : 'Set the visibility of the legend'
      },
      'title' : {
        'name' : 'title',
      'description' : 'Settings for the legend title',
        'supportedValueType' : 'Object',
        'supportedValues' : {
        'visible' : {
            'name' : 'visible',
            'supportedValueType' : 'Boolean',
            'defaultValue' :  false,
            'description' : 'Set the visibility of the legend title'
           }, 
          'text':{
            'name' : 'text',
            'supportedValueType' : 'String',
            'defaultValue' : null,
            'description' : 'Set the text of the legend title'
           }
        }
      },
      'formatString': {
        'name' : 'formatString',
        'supportedValueType': 'String',
        'defaultValue' : null,
        'description' : 'Set the format string for the legend. The following characters are reserved as tokens for format code: MDYHSAmdyhsa#?%0@.',
        'isExported': false
      },
      'isHierarchical' : {
        'name' : 'isHierarchical',
        'supportedValueType' : 'Boolean',
        'defaultValue' : false,
        'description' : 'Set whether the legend is hierarchical. This is only supported if the legend is located to the right of the chart.',
        'isExported': true,
        'example': "<a href='"+Constants.DocExample.SnippetUrl+"8742' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
      },
      'isScrollable' : {
        'name' : 'isScrollable',
        'supportedValueType' : 'Boolean',
        'defaultValue' : false,
        'description' : "Set whether the legend is scrollable. If this value is set to 'false', and there is not enough room to show the whole legend, an ellipsis (...) indicates the missing legend items.",
        'isExported': true
      },
      'position' : {
        'name' : 'position',
        'supportedValueType' : 'String',
        'supportedValues' : [ 'top', 'bottom', 'right', 'left'],
        'defaultValue' : 'right',
        'description' : 'It is a deprecated property. Please use "legendGroup.layout.position" property to set legend position. ',
        'isExported' : false
      },
      'type' : {
        'name' : 'type',
        'supportedValueType' : 'String',
        'supportedValues' : [ 'ColorLegend', 'BubbleColorLegend', 'SizeLegend', 'MeasureBasedColoringLegend' ],
        'defaultValue' : 'ColorLegend',
        'description' : 'Set legend type for Bubble charts. Non-bubble charts are not supported.',
        'isExported' : false
      },
      'alignment' : {
        'name' : 'alignment',
          'supportedValueType' : 'String',
          'supportedValues' : [ 'start', 'middle', 'end' ],
          'defaultValue' : 'start',
          'description' : 'Set the alignment of the legend',
          'isExported' : false
      },
      'drawingEffect':{
        'name' : 'drawingEffect',
         'supportedValueType' : 'String',
          'supportedValues' : [ 'normal', 'glossy' ],
          'defaultValue' : 'normal',
          'description' : "Set the drawing effect for colors in the legend. If this value is set to 'glossy', colors are glossy. If this value is set to 'normal', colors are matte.",
          'isExported' : true,
          'example': "<a href='"+Constants.DocExample.SnippetUrl+"9606' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
      }
    },
    'css' : {
      '.viz-legend-title.v-title' : {
        'description' : 'Define the style for the the legend title',
        'value' : {
          'fill' : '#000000',
          'font-family' : "'Open Sans', Arial, Helvetica, sans-serif",
          'font-size' :'14px',
          'font-weight' : 'bold',
          'font-style' : 'normal'
        }
      },
      '.viz-legend-valueLabel.v-label' : {
        'description' : 'Define the style for the legend label',
        'value' : {
          'fill' : '#000000',
          'font-family' : "'Open Sans', Arial, Helvetica, sans-serif",
          'font-size' :  '12px',
          'font-weight' : 'normal',
          'font-style' : 'normal'
        }
      },
        '.v-hovershadow' : {
            'description' : 'Define the style for the hovershadow in legend',
              'value' : {
                'fill' : '#cccccc'
              }
        },
        '.v-scrollbarThumb' : {
          'description' : "Define the style for the legend's scrollbar thumb",
          'value' : {
            'fill' : '#a6a6a6',
            'opacity' : 1
          }
        }
    },
    'configure' : null,
    fn : fn
  };

  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
});

define(
    'sap/viz/modules/manifests/Background',[ 'sap/viz/modules/manifests/Module', 'sap/viz/modules/Constants',
        'sap/viz/modules/background' ],
    function Setup(Manifest, Constants, fn) {
      var visibleObj = {
        'name' : 'visible',
        'supportedValueType' : 'Boolean',
        'defaultValue' : true,
        'description' : 'Set the visibility'
      };
      var module = {
        'id' : 'sap.viz.modules.background',
        'type' : Constants.Type.Supplementary,
        'name' : 'background',
        'description' : 'Settings for the background of the outer chart area',
        'properties' : {
          'visible' : visibleObj,
          'border' : {
            'name' : 'border',
            'cssClass' : '.v-background-border.viz-plot-background-border',
            'description' : 'Settings for the border',
            'supportedValueType' : 'Object',
            'supportedValues' : {
              'left' : {
                'name' : 'left',
                'description' : 'Settings for the left border',
                'supportedValueType' : 'Object',
                'supportedValues' : {
                  'visible' : visibleObj
                }
              },
              'right' : {
                'name' : 'right',
                'description' : 'Settings for the right border',
                'supportedValueType' : 'Object',
                'supportedValues' : {
                  'visible' : visibleObj
                }
              },
              'top' : {
                'name' : 'top',
                'description' : 'Settings for the top border',
                'supportedValueType' : 'Object',
                'supportedValues' : {
                  'visible' : visibleObj
                }
              },
              'bottom' : {
                'name' : 'bottom',
                'description' : 'Settings for the bottom border',
                'supportedValueType' : 'Object',
                'supportedValues' : {
                  'visible' : visibleObj
                }
              },
              'stroke' : {
                'name' : 'stroke',
                'cssStyle' : 'stroke',
                'supportedValueType' : 'String',
                'defaultValue' : '#d8d8d8',
                'description' : 'Settings for the color of the stroke.',
                'isExported' : false
              },
              'strokeWidth' : {
                'name' : 'strokeWidth',
                'cssStyle' : 'stroke-width',
                'supportedValueType' : "Int",
                'defaultValue' : 1,
                'description' : 'Settings for the width of the stroke.',
                'isExported' : false
              }
            }
          },
          'drawingEffect' : {
            'name' : 'drawingEffect',
            'description' : "Set the drawing effect for the background. If this value is set to 'glossy', the background is glossy. If this value is set to 'normal', the background is matte.",
            'supportedValueType' : 'String',
            'supportedValues' : [ 'normal', 'glossy' ],
            'defaultValue' : 'normal',
            'isExported' : true
          },
          'direction' : {
            'name' : 'direction',
            'description' : "Set the direction of the color gradient in the background. This only takes effect if the 'drawingEffect' value is set to 'glossy'.",
            'supportedValueType' : 'String',
            'supportedValues' : [ 'horizontal', 'vertical' ],
            'defaultValue' : 'vertical'
          },
          'color' : {
            'name' : 'color',
            'supportedValueType' : 'String',
            'cssClass' : '.v-background-body.viz-plot-background',
            'cssStyle' : 'fill',
            'description' : 'Define the color for the plot background body.',
            'defaultValue' : 'transparent',
            'isExported' : false
          }
        },
        'css' : {
          '.v-background-body.viz-plot-background' : {
            'description' : 'Define the style for the plot background body',
            'value' : {
              'fill' : 'transparent'
            }
          },
          '.v-background-border.viz-plot-background-border' : {
            'description' : 'Define the style for the plot background border',
            'value' : {
              'stroke' : '#d8d8d8',
              'stroke-width' : 1
            }
          }
        },
        'configure' : null,
        fn : fn
      };

      var manifests = {
        viz : [],
        module : [ module ],
        feeds : []
      };
      return manifests;
    });
define('sap/viz/modules/title',['sap/viz/base/utils/oo','sap/viz/modules/Base','sap/viz/util/TextUtils','sap/viz/lang/langManager','sap/viz/base/utils/Objects','sap/viz/modules/util/BoundUtil', 'sap/viz/base/UADetector'],
function Setup ( oo, Base, TextUtils, langManager, Objects, boundings, UADetector ) {

	var Title = function ( manifest, ctx ) {
		this._ttl_width = 0;
		this._ttl_height = 0; 
		this._ttl_titleStyle = null;
		this._ttl_options = manifest.props(null);
		this._ttl_size = { width : 500, height : 100 }, 
		this._ttl_titleText = '';
		this._ttl_ctx = ctx;
    this._ttl_elem_title = null;
	};

	oo.extend(Title,Base);

	Title.prototype.render = function ( selection ) {
      if ( this._ttl_options.visible ) {
        boundings.drawBound(selection, this._ttl_width, this._ttl_height, undefined, true);
        this._ttlfn_updateTitleStyle();
        
        var wrapper = selection.selectAll('text.v-title').data([this._ttl_titleText]);
        wrapper.exit().remove();
        wrapper
          .enter()
          .append('text')
          .attr('class', 'v-title viz-title-label')
          .attr('text-rendering', 'geometricPrecision');
        this._ttl_elem_title = wrapper;
          
        this._ttl_ctx.styleManager
          .queryDefault('v-title')
          .toAttrs(wrapper);
        var that = this;
          
        wrapper.attr('text-anchor', function () {
          if ( that._ttl_options.alignment === 'right' ) {
            return 'end';
          }
          else if ( that._ttl_options.alignment === 'left' ){
           return 'start';
          }
          else {
            return 'middle'; 
          }
        })
        .attr('x', function () {
          if ( that._ttl_options.alignment === 'right' ){
            return that._ttl_width;
          }
          else if (that._ttl_options.alignment === 'left'){
            return 0;
          }
          else {
            return that._ttl_width / 2; //"center" anyway
          }
        })
        .attr('y', this._ttl_height /2 )
        .attr('dominant-baseline', 'central');
        if(UADetector.isIE()){
          wrapper.attr('y', this._ttl_height ).attr('dominant-baseline', 'auto');
        }
        
        TextUtils.ellipsis(this._ttl_titleText, wrapper.node(), this._ttl_width, this._ttl_titleStyle.toString());
      }
      else
      {
        selection.selectAll('text.v-title').remove();
      }
    };

    Title.prototype.width = function ( value ) {
      if ( !arguments.length ) {
        return this._ttl_width;
      }
      this._ttl_width = value;
      return this;
    };

    Title.prototype.height = function ( value ) {
      if ( !arguments.length ) {
        return this._ttl_height;
      }
      this._ttl_height = value;
      return this;
    };
    
    Title.prototype.size = function ( value ) {
      if ( !arguments.length ) {
        return this._ttl_size;
      }
      this._ttl_size = value;
      return this;
    };
    
    Title.prototype.destroy = function() {
      //destroy ctx
      if(this._ttl_ctx){
        this._ttl_ctx.destroy();
        this._ttl_ctx = null;
      }
    };

    Title.prototype.properties = function ( properties ) {
      if ( !arguments.length ) {
        return this._ttl_options;
      }
      Objects.extend(true, this._ttl_options, properties);

      if ( this._ttl_options.text === '' || this._ttl_options.text === null) {
        this._ttl_titleText = langManager.get('IDS_DEFAULTCHARTTITLE');
      } else {
        this._ttl_titleText = this._ttl_options.text;
      }

      return this;
    };
    
    Title.prototype.getPreferredSize = function () {
      if ( this._ttl_options.visible ) {
        this._ttlfn_updateTitleStyle();
        var titleSize = TextUtils.fastMeasure(this._ttl_titleText, this._ttl_titleStyle['font-size'], this._ttl_titleStyle['font-weight'], this._ttl_titleStyle['font-family']);
        var minSize = TextUtils.fastMeasure('M...', this._ttl_titleStyle['font-size'], this._ttl_titleStyle['font-weight'], this._ttl_titleStyle['font-family']);
        return {
          hideOversize : true,
          maxSizeConstant : 1 / 3,
          'width' : titleSize.width,
          'height' : titleSize.height,
          minWidth : minSize.width,
          minHeight : minSize.height,
          maxWidth : titleSize.width,
          maxHeight : titleSize.height
        };
      }
      
      return { maxWidth : 0, maxHeight : 0, minWidth : 0, minHeight : 0, 'width' : 0, 'height' : 0 };      
    };

    Title.prototype.getPropertyZone = function() {
      var result = [], boundRect, bound;
      if ( this._ttl_options.visible ) {
        boundRect = this._ttl_elem_title.node().getBoundingClientRect();
        bound = [[]];
        bound[0].push([boundRect.left, boundRect.top]);
        bound[0].push([boundRect.right, boundRect.top]);
        bound[0].push([boundRect.right, boundRect.bottom]);
        bound[0].push([boundRect.left, boundRect.bottom]);
        result.push({
          "name": 'title',
          "bound": bound
        });
      }
      return result;
    };
    
    Title.prototype._ttlfn_updateTitleStyle = function () {
      this._ttl_titleStyle = this._ttl_ctx.styleManager.query('v-title');
    };

	return Title;
});

define('sap/viz/modules/manifests/Title',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/Constants',
  'sap/viz/modules/title'],
function Setup(Manifest, Constants, fn) {
  var module = {
    'id' : 'sap.viz.modules.title',
    'type' : Constants.Type.Supplementary,
    'name' : 'title',
    'description': "Settings for the main title",
    'properties' : {
      'visible' : {
        'name' : 'visible',
        'supportedValueType' : 'Boolean',
        'defaultValue' : false,
        'description' : 'Set the visibility of the main title'
      },
      'text' : {
        'name' : 'text',
        'supportedValueType' : 'String',
        'defaultValue' : null,
        'description' : 'Set the text of the main title'
      },
      'alignment' : {
        'name' : 'alignment',
        'supportedValueType' : 'String',
        'supportedValues' : [ 'left', 'center', 'right' ],
        'defaultValue' : 'center',
        'description' : 'Set the alignment of the main title'
      },
      'layout' : {
        'name' : 'layout',
        'supportedValueType' : 'Object',
        'supportedValues' : {
          'position' : {
            'name' : 'position',
            'supportedValueType' : 'String',
            'defaultValue' : 'right',
            'description' : 'Set the position of the title',
          },
          'priority' : {
            'name' : 'priority',
            'supportedValueType' : 'Int',
            'defaultValue' : 0,
            'description' : 'Set the priority of the position for the title',
            'isExported' : false
          },           
        },
        'description' : 'Settings for layout of title',
        'isExported' : false
       },
    },
    'css' : {
      '.viz-title-label.v-title' : {
        'description' : 'Define the style for the title label',
        'value' : {
          'font-family' : "'Open Sans', Arial, Helvetica, sans-serif",
          'font-size' : '16px',
          'font-weight' : 'bold',
          'fill' : '#333333',
          'font-style' : 'normal'
        }
      }
    },
    'configure' : null,
    fn : fn
  };

  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
});
define('sap/viz/modules/manifests/layout/Stack',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/layout/stack', 
  'sap/viz/modules/manifests/layout/Base'],
function Setup ( Manifest, fn, Base ) {
  var module = {
    'id' : "sap.viz.modules.layout.stack",
    'name' : "stack",
    'base' : "sap.viz.modules.layout.base",
    'description' : "The stack layout algorithm",
    'properties' : {},
    'configure' : null,
    'fn' : fn
  };
  var manifests = {
    viz: [],
    module: [module].concat(Base.module),
    feeds: [].concat(Base.feeds)
  }
  return manifests;
});
define('sap/viz/modules/layout',['sap/viz/base/utils/TypeUtils'],
function Setup(TypeUtils) {
  
  /*
   * Function set that represents a light-weight layout manager
   * who calculates optimal component layout data, rather than
   * operating on components directly.
   */
  var _ = function ( spec ) {
    
    var hideAxisTitleFirst = true;
    if(spec.hideAxisTitleFirst === false)
    {
        hideAxisTitleFirst = false;
    }

    var defaults = {
      resize : true,
      type : 'grid',
      padding : [0,0,0,0],
      hgap : 0,
      vgap : 0
    };  
  
    var hgap = spec.hgap || defaults.hgap,
        vgap = spec.vgap || defaults.vgap,
        padding = spec.padding || defaults.padding,
        bias = spec.bias || 'none';
    
    //Jimmy8/7/2012, different layout function may return different layoutSolution
    //so initialize it in each layout function
    var layoutSolution; // returning data
    
    /*
     * this is a simple border layout which items are position from north to east, then south to west, the center is the last.
     * so the preferred size of north, east, south and west will be considered while the center will be ignored.
     */
    function border2 (config){
      var spec = config.specs;
      var size = config.size;
      var metadata = {};
      for(var item in spec){
        if(spec.hasOwnProperty(item)){
          metadata[spec[item].info] = {
            size: spec[item].preferSize,
            key: item
          };
        }
      }
      border(metadata);
      var ret = {};
      for ( var i in layoutSolution ) {
        if ( layoutSolution.hasOwnProperty(i) ) {
          ret[metadata[i].key] = layoutSolution[i];
        }
      }
      layoutSolution = ret;
    }
    
    /**
     * Represents a border-docking layout method which assigns components
     * with spaces of omni-directional border insets. Padding is leaved
     * prior to layout. Component marked as a bias will be processed first
     * to embody the predominance of it. North and South parts are naturally
     * biased against other parts due to the nature of border layout. So
     * the bias attribute supports up to two values: 'west', 'east' or both
     * (in an array and order matters). The center part is under passive 
     * control and queued last to be processed.
     * 
     * ---------------------------------------
     * |               Padding               |
     * |   -------------------------------   |
     * |   |     |     North       |     |   |
     * |   -------------------------------   |
     * |   |     |                 |     |   |
     * |   |  W  |                 |  E  |   |
     * |   |  e  |     Center      |  a  |   |
     * |   |  s  |                 |  s  |   |
     * |   |  t  |                 |  t  |   |
     * |   |     |                 |     |   |
     * |   |     |                 |     |   |
     * |   -------------------------------   |
     * |   |     |     South       |     |   |
     * |   -------------------------------   |
     * |                                     |
     * ---------------------------------------
     */
    function border( options ) {
      layoutSolution = {};
      var packedSize = {}, // Size without paddings.
          autoResizing = true;
      packedSize.width = spec.size.width - padding[1] - padding[3];
      packedSize.height = spec.size.height - padding[0] - padding[2];
      
      // Enclosing dimension bounds
      var minX = padding[3],
          minY = padding[0],
          maxX = spec.size.width - padding[1],
          maxY = spec.size.height - padding[2];

      var queue = new Array(5);
      var i;
      
      // Layout ordering rule
      if ( bias instanceof Array ) {
        queue[0] = bias[0];
        queue[1] = bias[1];
        queue[2] = 'north';
        queue[3] = 'south';
      } else {
        switch ( bias ) {
        case 'west' :
          queue[0] = 'west';
          queue[1] = 'north';
          queue[2] = 'south';
          queue[3] = 'east';
          break;
        case 'east' :
          queue[0] = 'east';
          queue[1] = 'north';
          queue[2] = 'south';
          queue[3] = 'west';
          break;
        default :
          queue[0] = 'south';
          queue[1] = 'north';
          queue[3] = 'east';
          queue[2] = 'west';
        }
      }
      queue[4] = 'center';
      
      function doLayout( division ) {
        function getAvailableSpacings ( maxSize, minTruncateSize ) {
          if ( arguments.length < 3 ) {
              return 0;
          }
          var spacings = Array.prototype.slice.apply(arguments).slice(2);
          var spacingsByOrder = [];
          var i;
          for (i = 0; i < spacings.length; i++ ) {
            if ( spacings[i].length > 1 ) {
                if(hideAxisTitleFirst)
                {
                    spacingsByOrder[i] = spacings[i].slice(1);
                    spacingsByOrder[i].push(spacings[i][0]); 
                }
                else
                {
                    //we do not need to change the order of spacings, because we want to keep axis title
                    spacingsByOrder[i] = spacings[i].slice(0);
                }
            }
          }
          
          var availableSpacings = 0;
          var availableSpacingsSum = 0;
          
          //Use longest length 
          var j, spaceLength = spacingsByOrder[0].length;
          for (i = 1; i < spacingsByOrder.length; ++i){
            if (spaceLength < spacingsByOrder[i].length){
              spaceLength = spacingsByOrder[i].length;
            }
          }
          for ( i = 0; i < spaceLength; i++ ) {
            for ( j = 0; j < spacingsByOrder.length; j++ ) {
              if (spacingsByOrder[j][i] !== undefined){
                //omit those undefined value
                availableSpacingsSum += spacingsByOrder[j][i];
              }
            }
            if ( availableSpacingsSum > maxSize ) {
              if(hideAxisTitleFirst)
              {
                  if (i === 1 && minTruncateSize > 0) {
                    if (spacingsByOrder.length > 1 && minTruncateSize + spacingsByOrder[1][1] + spacingsByOrder[1][0] +  spacingsByOrder[0][0] <= maxSize) {
                      return maxSize - spacingsByOrder[1][1];
                    }
                    if (spacingsByOrder.length === 1 && minTruncateSize + spacingsByOrder[0][0] <= maxSize) {
                      return maxSize;
                    }
                  }
              }
              else
              {
                  if (i === 2 && minTruncateSize > 0) {
                    if (spacingsByOrder.length > 1 && minTruncateSize + spacingsByOrder[1][2] + spacingsByOrder[1][1] + spacingsByOrder[1][0] + spacingsByOrder[0][0] + spacingsByOrder[0][1] <= maxSize) {
                      return maxSize - spacingsByOrder[1][2] - spacingsByOrder[1][1] - spacingsByOrder[1][0];
                    }
                    if (spacingsByOrder.length === 1 && minTruncateSize + spacingsByOrder[0][0] + spacingsByOrder[0][1] <= maxSize) {
                      return maxSize;
                    }
                  }
              }
              return availableSpacings;
            }
            availableSpacings += spacingsByOrder[0][i];
          }
          return availableSpacings;
        }

        var node = {}, preferredSize = {};
        var nodeHeight, heightSum, nodeWidth, widthSum, maxHeight, maxWidth;
        if ( division === 'north' && options.north ) {
          node = layoutSolution.north = {};
          preferredSize = options.north.size;
          nodeHeight = preferredSize.height;
          heightSum = nodeHeight;
          
          if ( autoResizing ) {
            if ( preferredSize.spacings && options.south && options.south.size.spacings ) {
                heightSum += options.south.size.height;
            }
            
            if ( preferredSize.maxSizeConstant != null && heightSum > packedSize.height * preferredSize.maxSizeConstant ) {
              if ( preferredSize.hideOversize ) {
                  nodeHeight = 0;
              } else if ( preferredSize.spacings ) {
                if (options.south && options.south.size.spacings) {
                  //Special fix: BITSDC1-2077
                  //we usually hide both north and south axes at the same time. However,
                  //it is possible that north axis has axis title, and south axis does not have title.
                  //The fix is allowing the chart has north axis, but not has south axis.
                  //It breaks the rule of current layout. So hideAxisTitleFirst flag is used here.
                  //The issue may happen in other directions. Actually the fix of the bug introduce a new rule
                  //we may revert the fix if the new rule breaks layout.
                  if (layoutSolution.south === null && hideAxisTitleFirst) {
                    nodeHeight = 0;
                  } else if (preferredSize.minTruncateSize === 0) {
                    maxHeight = packedSize.height * preferredSize.maxSizeConstant;
                    if (layoutSolution.south) {
                      maxHeight -= layoutSolution.south.bounds.height;
                    }
                    nodeHeight = getAvailableSpacings(maxHeight, 
                        preferredSize.minTruncateSize, preferredSize.spacings);
                  } else {
                    nodeHeight = getAvailableSpacings(
                        packedSize.height * preferredSize.maxSizeConstant, 
                        preferredSize.minTruncateSize, preferredSize.spacings, 
                        options.south.size.spacings);
                  } 
                } else {
                    nodeHeight = getAvailableSpacings(packedSize.height * preferredSize.maxSizeConstant, 
                        preferredSize.minTruncateSize, preferredSize.spacings);
                }
              } else {
                nodeHeight = packedSize.height * preferredSize.maxSizeConstant;
              }
            }
          }
          node.bounds = { 
            x : minX, 
            y : minY,
            width  : maxX - minX,
            height : nodeHeight
          };
          minY += (node.bounds.height + hgap);
          if (node.bounds.height === 0) {
              layoutSolution.north = null;
          }
        }
        
        if ( division === 'east' && options.east ) {
          node = layoutSolution.east = {};
          preferredSize = options.east.size;
          nodeWidth = preferredSize.width;
          widthSum = nodeWidth;
          var x = 0;
          
          if ( autoResizing ) {
            if ( preferredSize.spacings && options.west && options.west.size.spacings ) {
              widthSum += options.west.size.width;
            }
            if ( preferredSize.maxSizeConstant != null && widthSum > packedSize.width * preferredSize.maxSizeConstant ) {
              if ( preferredSize.hideOversize ) {
                nodeWidth = 0;
              } else if ( preferredSize.spacings ) {
                if ( options.west && options.west.size.spacings ) {
                  //Special fix: BITSDC1-2077
                  //we usually hide both north and south axes at the same time. However,
                  //it is possible that north axis has axis title, and south axis does not have title.
                  //The fix is allowing the chart has north axis, but not has south axis.
                  //It breaks the rule of current layout. So hideAxisTitleFirst flag is used here.
                  //The issue may happen in other directions. Actually the fix of the bug introduce a new rule
                  //we may revert the fix if the new rule breaks layout.
                  if (layoutSolution.west === null && hideAxisTitleFirst) {
                      nodeWidth = 0;
                  } else if (preferredSize.minTruncateSize === 0) {
                    maxWidth = packedSize.width * preferredSize.maxSizeConstant;
                    if (layoutSolution.west) {
                      maxWidth -= layoutSolution.west.bounds.width;
                    }
                    nodeWidth = getAvailableSpacings(maxWidth, 
                        preferredSize.minTruncateSize, preferredSize.spacings);
                  } else {
                    nodeWidth = getAvailableSpacings(
                        packedSize.width * preferredSize.maxSizeConstant, preferredSize.minTruncateSize,
                        preferredSize.spacings, options.west.size.spacings);
                  }
                } else {
                  nodeWidth = getAvailableSpacings(
                    packedSize.width * preferredSize.maxSizeConstant, 
                    preferredSize.minTruncateSize, preferredSize.spacings);
                }
              } else {
                nodeWidth = packedSize.width * preferredSize.maxSizeConstant;
              }
            }
            if ( nodeWidth < preferredSize.minWidth ) { nodeWidth = 0; }
            x = maxX - nodeWidth;
          } else {
            x = layoutSolution.west.bounds.width + layoutSolution.south.bounds.width;
          }
          node.bounds = { 
            x : x,
            y : minY,
            width : nodeWidth,
            height : maxY - minY
          };
          
          if (node.bounds.height < preferredSize.minHeight) {
              node.bounds.width = 0;
          }
          
          maxX -= (node.bounds.width + vgap);
          if (node.bounds.width === 0) {
              layoutSolution.east = null;
          }
        }
        
        if ( division === 'south' && options.south ) {
          node = layoutSolution.south = {};
          preferredSize = options.south.size;
          autoResizing = !preferredSize.manual; // manual size enabled or disabled
          nodeHeight = preferredSize.height, nodeWidth = 0;
          heightSum = nodeHeight;
          
          if ( autoResizing ) {
            if ( preferredSize.spacings && options.north && options.north.size.spacings ) {
              heightSum += options.north.size.height;
            }
            if ( preferredSize.maxSizeConstant != null && heightSum > packedSize.height * preferredSize.maxSizeConstant ) {
              if ( preferredSize.hideOversize ) {
                  nodeHeight = 0;
              } else if ( preferredSize.spacings ) {
                if ( options.north && options.north.size.spacings ) {
                  if (layoutSolution.north === null) {
                    nodeHeight = 0;
                  } else if(preferredSize.minTruncateSize === 0) {
                    maxHeight = packedSize.height * preferredSize.maxSizeConstant;
                    if (layoutSolution.north) {
                      maxHeight -= layoutSolution.north.bounds.height;
                    }
                    nodeHeight = getAvailableSpacings(maxHeight, 
                        preferredSize.minTruncateSize, preferredSize.spacings);
                  } else {
                    nodeHeight = getAvailableSpacings(
                        packedSize.height * preferredSize.maxSizeConstant, 
                        preferredSize.minTruncateSize, preferredSize.spacings, 
                        options.north.size.spacings);
                  } 
                } else {
                  nodeHeight = getAvailableSpacings(
                    packedSize.height * preferredSize.maxSizeConstant, 
                    preferredSize.minTruncateSize, preferredSize.spacings);
                }
              } else {
                nodeHeight = packedSize.height * preferredSize.maxSizeConstant;
              }
            }
            nodeWidth = maxX - minX;
          } else {
            nodeWidth = preferredSize.width > packedSize.width ? 
                        packedSize.width : preferredSize.width;
            if ( nodeHeight > packedSize.height ) {
              nodeHeight = packedSize.height;
            }
          }
          
          node.bounds = {
            x : minX,
            y : (maxY - nodeHeight) < minY ? minY : (maxY - nodeHeight),
            width  : nodeWidth
          };
          node.bounds.height = nodeHeight;
          maxY -= (node.bounds.height + hgap);
          
          if ( node.bounds.height === 0 ) { layoutSolution.south = null; }
        }
        
        if ( division === 'west' && options.west ) {
          node = layoutSolution.west = {};
          preferredSize = options.west.size;
          nodeWidth = preferredSize.width;
          widthSum = nodeWidth;
          
          if ( autoResizing ) {
            if ( preferredSize.spacings && options.east && options.east.size.spacings ) {
              widthSum += options.east.size.width;
            }
            if ( preferredSize.maxSizeConstant != null && widthSum > packedSize.width * preferredSize.maxSizeConstant ) {
              if ( preferredSize.hideOversize ) {
                nodeWidth = 0;
              } else if (preferredSize.spacings) {
                if ( options.east && options.east.size.spacings ) {
                  if (layoutSolution.east === null) {
                    nodeWidth = 0;
                  } else if(preferredSize.minTruncateSize === 0) {
                    maxWidth = packedSize.width * preferredSize.maxSizeConstant;
                    if (layoutSolution.east) {
                      maxWidth -= layoutSolution.east.bounds.width;
                    }
                    nodeWidth = getAvailableSpacings(maxWidth, 
                        preferredSize.minTruncateSize, preferredSize.spacings);
                  } else {
                    nodeWidth = getAvailableSpacings(
                        packedSize.width * preferredSize.maxSizeConstant, 
                        preferredSize.minTruncateSize, preferredSize.spacings, options.east.size.spacings);
                  }
                } else {
                  nodeWidth = getAvailableSpacings(packedSize.width * preferredSize.maxSizeConstant, 
                      preferredSize.minTruncateSize, preferredSize.spacings);
                }
              } else {
                nodeWidth = packedSize.width * preferredSize.maxSizeConstant;
              }
            }
          }
          node.bounds = {
            x : minX,
            y : minY,
            width  : nodeWidth,
            height : (minY + preferredSize.height) > maxY ? maxY : (minY + preferredSize.height)
          };
          minX += (node.bounds.width + vgap);
          if (node.bounds.width === 0) {
              layoutSolution.west = null;
          }
        }
        
        if ( division === 'center' && options.center ) {
          node = layoutSolution.center = {};
          var w = !autoResizing && layoutSolution.south ? layoutSolution.south.bounds.width : maxX - minX,
              h = maxY - minY; 
          node.bounds = {
            x : minX,
            y : minY,
            width  : w,
            height : h
          };
        }
      }
            
      for ( i = 0; i < queue.length; i++ ) {
        doLayout(queue[i]);
      }
    }
    
    function grid( options ) {}
    
    /**
     * compared to HTML table, currently we only support cellpadding. we don't (need) support cellspacing 
     * @param {Object} options
     */
    function table( options ) {
      layoutSolution = [];//return layout solution by column * row
      //table layout options
      var columns = TypeUtils.isExist(spec.columns) ? spec.columns : 3;
      var rows = TypeUtils.isExist(spec.rows) ? spec.rows : 2;
      var cellpadding = TypeUtils.isExist(spec.cellpadding) ? spec.cellpadding : 5;
      var paddingThreshold = TypeUtils.isExist(spec.paddingThreshold) ? spec.paddingThreshold : 0.1;
      
      var packedSize = {}; // Size without paddings.
        packedSize.width = spec.size.width - padding[1] - padding[3];
        packedSize.height = spec.size.height - padding[0] - padding[2];
        
        var avgWidth = packedSize.width / columns;
        var avgHeight = packedSize.height / rows;
        //don't make the cellPadding too large
        if ( cellpadding > avgWidth * paddingThreshold || cellpadding > avgHeight * paddingThreshold ) {
          cellpadding = 2;
        }
        var cellWidth = ( packedSize.width - 2 * columns * cellpadding ) / columns;
        cellWidth = cellWidth > 0 ? cellWidth : 0;
        var cellHeight = ( packedSize.height - 2 * rows * cellpadding ) / rows;
        cellHeight = cellHeight > 0 ? cellHeight : 0;
      
        // Enclosing dimension bounds
        var minX = padding[3],
        minY = padding[0],
        maxX = spec.size.width - padding[1],
        maxY = spec.size.height - padding[2];
        
        for ( var col = 0; col < columns; col++ ) {
          var colia = [];//column iteration array
          for ( var row = 0; row < rows; row++ ) {
            var node = {};
            node.bounds = {
              x: col * avgWidth + avgWidth/2 - cellWidth/2,
              y: row * avgHeight + avgHeight/2 - cellHeight/2,
              width: cellWidth,
              height: cellHeight
            };
            colia.push(node);
          }
          layoutSolution.push(colia);
        }
        
    }
    
    switch ( spec.type ) {
        case 'border' : 
          border(spec.prefs);
          break;
        case 'grid' :
          grid(spec.prefs);
          break;
        case 'table' :
          //FIXME Elliott/Jimmy 8/7/2012, table layout has some special options
          //here we will read spec inside table layout function directly. consider
          //making it consistent with others 
          table();
          break;
        case 'border2' : 
          border2 (spec);
          break;
        default :
          grid(spec.prefs);
    }
    
    return layoutSolution;
  };
  
  return _;
  
});
define('sap/viz/modules/xycontainer',['sap/viz/base/utils/oo','sap/viz/modules/Base','sap/viz/modules/Constants','sap/viz/base/utils/TypeUtils','sap/viz/base/utils/Objects','sap/viz/base/utils/FunctionUtils',
'sap/viz/modules/layout','sap/viz/manifest','sap/viz/util/ignite','sap/viz/data/handler/SingleChartDataHandler',
'sap/viz/modules/dispatch','sap/viz/modules/util/BoundUtil','sap/viz/base/utils/log/Analyzer'],
function Setup (oo, Base, Constants, TypeUtils, Objects, Functions, layout, Manifest, ignite, SingleChartDataHandler, dispatch, boundUtil,Analyzer ) {
  
  var XYContainer = function (manifest, ctx) {
    this._xyc_width = 0; 
    this._xyc_height = 0; 
    this._xyc_properties = {};
    this._xyc_data = {};
    this._xyc_config = {};
    this._xyc_modules = {};
    this._xyc_selections = {};
    this._xyc_parent = null; // a d3 selection
    this._xyc_ctx = ctx;

    this._xyc_eDispatch = new dispatch('initialized', 'showTooltip', 'hideTooltip'); 
    this._xyc_initializedModules = 0;
    this._xyc_innerProperties = manifest.props(null);
    this._xyc_initializedCount = 0;
    this._xyc_needRelayout = true;
    this._fullData = null;

    this._xyc_dataCache = null; //it is saved to deal with memory leak of MultiAxesDataAdapter
  };
  
  oo.extend(XYContainer, Base);
  
  XYContainer.prototype.render = function( selection ) {
    this._xyc_relayout();

    this._xyc_initializedCount = 0;
    boundUtil.drawBound(selection, this._xyc_width, this._xyc_height);
    this._xyc_parent = selection;
    if ( TypeUtils.isEmptyObject(this._xyc_modules) ){
      this._xyc_initialize();
    }
    this._xyc_renderSub();
  };
  
  XYContainer.prototype._xyc_relayout = function(){
    this._xyc_needRelayout = false;
    var modules = this._xyc_modules;
    var width = this._xyc_width;
    var height = this._xyc_height;
    var selections = this._xyc_selections;
    
    if ( TypeUtils.isEmptyObject(modules) || !width || !height) { return; }
    
    width = width < 0 ? 0 : width;
    height = height < 0 ? 0 : height;
    var prefs = {};
    
    if ( modules.plot ) {
      prefs.center = {};
      if(modules.plot.size){
        modules.plot.size({width:width,height:height});
      }else{
        modules.plot.width(width).height(height);
      }
    }
  
    var lastPlotWidth = -1, 
        lastPlotHeight = -1,
        autoResizing = true; // smart layout enabled by default

    var iLayout;
    //try 3 times FIXME remove '3 times'
    for ( iLayout = 0; iLayout <= 2; iLayout++ ) {
      if ( modules.xAxis ) {
          modules.xAxis.drawable(true);
          modules.yAxis.otherAxisHidden(false);
          prefs.south = { size : modules.xAxis.getPreferredSize() };
          if ( prefs.south.manual ) { autoResizing = false; }
      }
      if ( modules.yAxis ) {
          modules.yAxis.drawable(true);
          if(modules.xAxis){
            modules.xAxis.otherAxisHidden(false);
          }
          prefs.west = { size : modules.yAxis.getPreferredSize() };
      }
      if ( modules.xAxis2 ) {
          modules.xAxis2.drawable(true);
          prefs.north = { size : modules.xAxis2.getPreferredSize() };
      }
      if ( modules.yAxis2 ) {
          modules.yAxis2.drawable(true);
          prefs.east = { size : modules.yAxis2.getPreferredSize() };
      }

      var hideAxisTitleFirst = true;
      if(this._xyc_properties.general && 
         this._xyc_properties.general.layout &&
         this._xyc_properties.general.layout.hideAxisTitleFirst !== undefined &&
         this._xyc_properties.general.layout.hideAxisTitleFirst !== null)
      {
          hideAxisTitleFirst = this._xyc_properties.general.layout.hideAxisTitleFirst;
      }
      
      var solution = layout({
        type : 'border',
        bias : 'none',
        size : { width : width, height : height },
        prefs : prefs,
        hideAxisTitleFirst : hideAxisTitleFirst
      });

      // adjust axes start and end padding
      // TODO add more padding
      var rightPadding = 0;
      var rightPaddingxAxis = 0;
      var rightPaddingxAxis2 = 0;
          
      var leftPadding = 0; 
      var leftPaddingxAxis = 0;
      var leftPaddingxAxis2 = 0;

      if ( !solution.west ) {
        if ( modules.xAxis && solution.south ) {
          leftPaddingxAxis = modules.xAxis.startPadding();
        }
        if ( modules.xAxis2 && solution.north ) {
          leftPaddingxAxis2 = modules.xAxis2.startPadding();
        }
        leftPadding = leftPaddingxAxis > leftPaddingxAxis2 ? leftPaddingxAxis : leftPaddingxAxis2;
      }

      if ( !solution.east ) {
        if ( modules.xAxis && solution.south ) {
          rightPaddingxAxis = modules.xAxis.endPadding();
        }
        if ( modules.xAxis2 && solution.north ) {
          rightPaddingxAxis2 = modules.xAxis2.endPadding();
        }
        rightPadding = rightPaddingxAxis > rightPaddingxAxis2 ? rightPaddingxAxis : rightPaddingxAxis2;
      }

      var bottomPadding = 0; 
      var bottomPaddingyAxis = 0;
      var bottomPaddingyAxis2 = 0;
          
      if ( !solution.south ) {
        if ( modules.yAxis && solution.west ) {
          bottomPaddingyAxis = modules.yAxis.startPadding();
        }
        if ( modules.yAxis2 && solution.east ) {
          bottomPaddingyAxis2 = modules.yAxis2.startPadding();
        }
        bottomPadding = bottomPaddingyAxis > bottomPaddingyAxis2 ? bottomPaddingyAxis : bottomPaddingyAxis2;
      }

      var topPadding = 0, yOffset = 0;

      if ( !solution.north ) {
        var topPaddingyAxis = 0, 
            topPaddingyAxis2 = 0;
            
        if ( modules.yAxis && solution.west ) {
          topPaddingyAxis = modules.yAxis.endPadding();
        }
        if ( modules.yAxis2 && solution.east ) {
          topPaddingyAxis2 = modules.yAxis2.endPadding();
        }

        topPadding = topPaddingyAxis2;
        if ( topPaddingyAxis > topPaddingyAxis2 ) {
          topPadding = topPaddingyAxis;
        }

        yOffset += topPadding;
      }

      if ( yOffset ) {
        if ( solution.east ) {
          solution.east.bounds.y += yOffset;
        }

        if ( solution.north ) {
          solution.north.bounds.y += yOffset;
        }

        if ( solution.west ) {
          solution.west.bounds.y += yOffset;
        }

        if ( solution.center ) {
          solution.center.bounds.y += yOffset;
        }
      }

      if ( leftPadding ) {

        if ( solution.north ) {
          solution.north.bounds.x += leftPadding;
        }

        if ( solution.south ) {
          solution.south.bounds.x += leftPadding;
        }

        if ( solution.west ) {
          solution.west.bounds.x += leftPadding;
        }

        if ( solution.center ) {
          solution.center.bounds.x += leftPadding;
        }
      }

      // we have to layout top and bottom axes firstly, because if you change the size of top or bottom axes, the 
      // height of the axis may be changed (vertical label). Left and right axes have no vertical labels.
      if ( solution.east ) {
        // Modifies yAxis height and coordinate to handle vertical offset
        // to ensure joints with xAxis.
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-yAxis2");
        var yAxis2Height = solution.east.bounds.height, yAxis2Y = 0;
        if ( solution.south ) {
          if ( !autoResizing ) { yAxis2Height = solution.east.bounds.height - solution.south.bounds.height; }
        }
        if ( solution.north ) {
          if ( !autoResizing ) { yAxis2Height = solution.east.bounds.height - solution.north.bounds.height; }
        }

        yAxis2Y = solution.east.bounds.y;
        
        selections.yAxis2.attr('transform', 
          'translate(' + solution.east.bounds.x + ',' + yAxis2Y + ')');
        
        modules.yAxis2
          .width(solution.east.bounds.width)
          .height(yAxis2Height);
          
        modules.yAxis2.gridlineLength(solution.center.bounds.width); 
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-yAxis2");
      } else if(modules.yAxis2) {
          modules.yAxis2.drawable(false);
      }

      if ( solution.north ) {
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-xAxis2");
        var xAxis2Width = solution.north.bounds.width, xAxis2X = 0;
        if ( solution.west ) {
          xAxis2X = solution.north.bounds.x + solution.west.bounds.width;
          xAxis2Width = solution.north.bounds.width - solution.west.bounds.width;
        } else {
            xAxis2X = leftPadding;
        }

        selections.xAxis2.attr('transform', 
          'translate(' + xAxis2X + 
          ',' + solution.north.bounds.y + ')');

        modules.xAxis2
          .width(xAxis2Width)
          .height(solution.north.bounds.height);
          
        modules.xAxis2.gridlineLength(solution.center.bounds.height);  
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-xAxis2");
      } else if (modules.xAxis2) {
          modules.xAxis2.drawable(false);
      }
            
      if ( solution.west ) {
        // Modifies yAxis height and coordinate to handle vertical offset
        // to ensure joints with xAxis.
        var yAxisHeight = solution.west.bounds.height, yAxisY = 0;
        
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-yAxis");
        if ( solution.south ) {
          if ( !autoResizing ) { yAxisHeight = solution.west.bounds.height - solution.south.bounds.height; }
        }
        if ( solution.north ) {
          if ( !autoResizing ) { yAxisHeight = solution.west.bounds.height - solution.north.bounds.height; }
        }
        yAxisY = solution.west.bounds.y;

        selections.yAxis.attr('transform', 'translate(' + solution.west.bounds.x + ',' + yAxisY + ')');
    
        modules.yAxis
          .width(solution.west.bounds.width)
          .height(yAxisHeight);
          
        modules.yAxis.gridlineLength(solution.center.bounds.width); 
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-yAxis"); 
      } else if(modules.yAxis) {
          modules.yAxis.drawable(false);
          if(modules.xAxis){
            modules.xAxis.otherAxisHidden(true);
          }
      }

      if ( solution.south ) {

        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-xAxis");
        var xAxisWidth = 0, xAxisX = 0;
        if ( solution.west ) {
            xAxisX = solution.south.bounds.x + solution.west.bounds.width;
        } else {
            xAxisX = leftPadding;
        }

        selections.xAxis.attr('transform', 
          'translate(' + xAxisX + 
          ',' + solution.south.bounds.y + ')');
          
        modules.xAxis
          .width(solution.south.bounds.width)
          .height(solution.south.bounds.height);
          
        modules.xAxis.gridlineLength(solution.center.bounds.height);
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-xAxis");
        
      } else if ( modules.xAxis ) {
        modules.xAxis.drawable(false);
        modules.yAxis.otherAxisHidden(true);
      }
      
      // if (!solution.south && modules.xAxis) {
          // modules.xAxis.drawable(false);
      // }
      // if (!solution.north && modules.xAxis2) {
          // modules.xAxis2.drawable(false);
      // }
            
      if ( solution.center ) {
       
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-plot");
        selections.plot.attr('transform', 
          'translate(' + solution.center.bounds.x + 
          ',' + solution.center.bounds.y + ')');
        var plotWidth = solution.center.bounds.width - rightPadding - leftPadding;
        var plotHeight = solution.center.bounds.height - topPadding - bottomPadding;
        if(modules.plot.size){
          modules.plot.size({width:(plotWidth > 0 ? plotWidth : 0),height:(plotHeight > 0 ? plotHeight : 0)});
        }else{
          modules.plot
            .width(plotWidth > 0 ? plotWidth : 0)
            .height(plotHeight > 0 ? plotHeight : 0);
        }

        if ( selections.background ) {
          // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-backgound");
          selections.background.attr('transform', 
            'translate(' + solution.center.bounds.x + 
            ',' + solution.center.bounds.y + ')');
          modules.background
            .width(plotWidth > 0 ? plotWidth : 0)
            .height(plotHeight > 0 ? plotHeight : 0);
         // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-backgound");
        }   
        // Analyzer.pnrProfiling("Render:drawing-layout-calculation-formatValue-main-plot");       
      }
      if ( solution.west ) {
        modules.yAxis.gridlineLength(solution.center.bounds.width - rightPadding - leftPadding); 
      }

      if ( solution.south ) {
        modules.xAxis.gridlineLength(solution.center.bounds.height - topPadding - bottomPadding); 
      }

      var currentPlotWidth = modules.plot.width();
      var currentPlotHeight = modules.plot.height();
      if ( lastPlotWidth === currentPlotWidth  && lastPlotHeight === currentPlotHeight ) {
        break;
      } else {
        lastPlotWidth = currentPlotWidth;
        lastPlotHeight = currentPlotHeight;
      }

      if( (iLayout >= 1) &&
          modules.yAxis && modules.yAxis.properties().type === "value" &&
          modules.xAxis && modules.xAxis.properties().type === "value" &&
          (prefs.west && !solution.west && prefs.south && solution.south) ) {
          //for scatter chart, if there is no enough sapce for left value axis, 
          //finish layout because value axis width does need smart layout. 
          break;
      }
      
      //[BigData] Call plot to reScale on the latest changed size if necessary.
      //Currently only line support this feature.
      if(modules.plot && modules.plot.reScale){
          modules.plot.reScale();
      }
    }
  };
  
  XYContainer.prototype._xyc_initialize = function(){
    var config = this._xyc_config;
    var modules = this._xyc_modules;
    var ctx = this._xyc_ctx;
    var data = this._xyc_data;
    var selections = this._xyc_selections;
    var parent = this._xyc_parent;
    
    if ( TypeUtils.isEmptyObject(config) ) { Functions.error('Container configuration missing'); }
    
    this._xyc_initializedModules = 0;
    
    this._xyc_initAxis('xAxis');
    this._xyc_initAxis('yAxis');
    this._xyc_initAxis('xAxis2');
    this._xyc_initAxis('yAxis2');
    this._xyc_initAxis('background');
    
    var plotConfig = config.modules.plot;
    if ( !plotConfig ) { return; }
    var plot = modules.plot = ignite(plotConfig.id, ctx, 
      Constants.CSS.CLASS.MODULEPREFIX + "plot");
    var dataHandler = new SingleChartDataHandler(data); 
    if(this._xyc_dataCache){
      this.dataCacheToDestroy();
    }
    this._xyc_dataCache = dataHandler.getDataAdapter();
    plot.data(this._xyc_dataCache);
    if(plot.fullData && this._fullData) {
        plot.fullData(this._fullData);
    }

    var props;
    if ( plotConfig.configure ) {
      props = this._xyc_resolveProperties(plotConfig.configure);
      if( this._xyc_properties.xyContainer && this._xyc_properties.xyContainer.yAngle ){
        plot.setyAngle(this._xyc_properties.xyContainer.yAngle);
      }
      plot.properties(props);
    }
    
    if ( plot.dispatch ) {
      var dis =  plot.dispatch();
      if ( dis.initialized ) { this._xyc_initializedModules++; dis.on('initialized.xycontainer', this._xyc_initialized.bind(this));}
      if ( dis.showTooltip ) { dis.on('showTooltip.xycontainer', this._xyc_showTooltip.bind(this));}
      if ( dis.hideTooltip ) { dis.on('hideTooltip.xycontainer', this._xyc_hideTooltip.bind(this));}
    }
    
    var dataLabelConfig =  config.modules.dataLabel;
    if ( TypeUtils.isExist(dataLabelConfig) && TypeUtils.isExist(plot.dataLabel) ) {
      var dataLabel = modules.dataLabel = ignite(dataLabelConfig.id, ctx, Constants.CSS.CLASS.MODULEPREFIX + "datalabel");
      if ( dataLabel.dispatch() ) { this._xyc_initializedModules++; dataLabel.dispatch().on('initialized.xycontainer', this._xyc_initialized.bind(this));}
      plot.dataLabel(dataLabel);
      dataLabel.plot(plot);
      if ( dataLabelConfig.configure ) {
        props = this._xyc_resolveProperties(dataLabelConfig.configure);
        dataLabel.properties(props);
      }
    }
    
    if ( modules.xAxis && !selections.xAxis ) {
      selections.xAxis = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'xAxis');
    }
    if ( modules.xAxis2 && !selections.xAxis2 ) {
      selections.xAxis2 = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'xAxis2');
    }
    if ( modules.yAxis && !selections.yAxis ) { 
      selections.yAxis = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'yAxis');
    }
    if ( modules.yAxis2 && !selections.yAxis2 ) { 
      selections.yAxis2 = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'yAxis2');
    }
    if ( modules.plot && !selections.plot ) { 
      selections.plot = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'plot');
    }
    if ( modules.background && !selections.background ) {
      selections.background = parent.insert('g', ':first-child')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'background');
    }
  };
  
  XYContainer.prototype._xyc_renderSub = function(){
    var selections = this._xyc_selections;
    var modules = this._xyc_modules;
    
    for ( var sel in selections ) {
      if ( selections.hasOwnProperty(sel) ) {
        Analyzer.pnrProfiling("Render:drawing-paint-chart-main-"+sel);
        selections[sel].datum(modules[sel].data()).call(modules[sel]);
        Analyzer.pnrProfiling("Render:drawing-paint-chart-main-"+sel);
      }
    }
    
    if(TypeUtils.isExist(modules.dataLabel)){
      modules.dataLabel();
    }
  };
  
  XYContainer.prototype._xyc_resolveProperties = function(nodeConfig, isContainer){
    var props = {}, // Empty properties basket
        propsCat,   // Property category node
        usrProps,   // User set properties
        sysProps;   // Predefined properties in configure node
    var properties = this._xyc_properties;
    
    if(isContainer){
      //Jimmy/8/15/2012 pay attention to the property structure, for container we will pass
      //all properties instead of properties under propsCat only.
      if ( nodeConfig ) {
        propsCat = nodeConfig.propertyCategory;
        usrProps = properties;
        sysProps = {};
        sysProps[propsCat] = nodeConfig.properties;
        Objects.extend( true, props, sysProps, usrProps ); 
      }else{
        props = properties;
      }
    }else{
      if ( nodeConfig ) {
        propsCat = nodeConfig.propertyCategory;
        usrProps = properties[ propsCat ];
        sysProps = nodeConfig.properties;
        // User properties will override predefined properties 
        Objects.extend( true, props, sysProps, usrProps );
      }
    }
    return props;
  };
  
  XYContainer.prototype._xyc_updateProperties = function(id, isContainer){
    var config = this._xyc_config;
    var modules = this._xyc_modules;
    var properties = this._xyc_properties;
    
    var moduleManifest = config.modules; // Module configurations
    var props, nodeConfig, propsCat;
    if ( moduleManifest[id] && modules[id] ) {
      nodeConfig = moduleManifest[id].configure;
      if (isContainer){
        props = properties;
      }
      else {
        if (nodeConfig){
          propsCat = nodeConfig.propertyCategory;
          props = Objects.extend(true, {}, properties[propsCat]);
        }
        else{
          props = {};
        }
      }
      this._xyc_mergeLayoutPropsToAxis(id, props);
      modules[id].properties(props);
    }
  };
  
  XYContainer.prototype._xyc_updateAxisData = function ( id ) {
    var modules = this._xyc_modules;
    var config = this._xyc_config;
    var data = this._xyc_data;
    
    if ( modules[id] ) {
      var axisConfig = config.modules[id];
      var axisDataConfig = axisConfig.data;
      if ( axisDataConfig ) {
        modules[id].data(data.createDataAdapterForModule(axisDataConfig));
      } 
    }  
  };
    
  XYContainer.prototype._xyc_initAxis = function ( id ) {
    var modules = this._xyc_modules;
    var config = this._xyc_config;
    var ctx = this._xyc_ctx;
    
    if ( !config.modules[id] ) { return; }
    
    var axisConfig = config.modules[id],
        axis = modules[id] = ignite(axisConfig.id, ctx, Constants.CSS.CLASS.MODULEPREFIX + id); // Saves references to axis function.
    
    this._xyc_updateAxisData(id);

    var props = this._xyc_resolveProperties(axisConfig.configure);
    this._xyc_mergeLayoutPropsToAxis(id, props);
    axis.properties(props);
    
    if(axis.dispatch && axis.dispatch()['initialized']){
      this._xyc_initializedModules++;
      axis.dispatch().on('initialized.xycontainer', this._xyc_initialized.bind(this));
    }
  };

  XYContainer.prototype._xyc_mergeLayoutPropsToAxis = function(id, axisProps)
  {
      var modules = this._xyc_modules;
      if(id === 'xAxis' ||
         id === 'yAxis' ||
         id === 'xAxis2'||
         id === 'yAxis2' )
      {
          //we have to set axis props, because hiding title must be done in axis module 
          if(axisProps.hideTitleFirst === undefined)
          {
              if(this._xyc_properties.general && 
                 this._xyc_properties.general.layout &&
                 this._xyc_properties.general.layout.hideAxisTitleFirst !== undefined &&
                 this._xyc_properties.general.layout.hideAxisTitleFirst !== null)
              {
                  axisProps.hideTitleFirst = this._xyc_properties.general.layout.hideAxisTitleFirst;
              }
              else
              {
                  axisProps.hideTitleFirst = true;
              }
          }
          //----------disable gridline for category axes---------------
          var axisType = axisProps.type;
          if(!axisType)
          {
              var axisOriginalProps = modules[id].properties();
              axisType = axisOriginalProps.type;
          }

          //we have to disable category axis gridline for single charts.
          if(axisType === "category" && (axisProps.gridline && axisProps.gridline.visible))
          {
              axisProps.gridline.disable = true;
          }
      }
  };
  
  XYContainer.prototype._xyc_initialized = function(){
    if ( this._xyc_initializedModules === ++ this._xyc_initializedCount ) {
      this._xyc_initializedCount = 0;
      this._xyc_eDispatch.initialized();
    }
  };
  
  XYContainer.prototype._xyc_showTooltip = function ( evt ) {
    this._xyc_eDispatch.showTooltip(evt);
  };
  
  XYContainer.prototype._xyc_hideTooltip = function ( evt ) {
    this._xyc_eDispatch.hideTooltip(evt);
  };
    
  XYContainer.prototype.width = function (_) {
    if ( !arguments.length ) { return this._xyc_width; }
    var sizeChange = this._xyc_width !== _;
    this._xyc_width = _;
    if ( this._xyc_height ) { this._xyc_relayout(); }
    return this;
  };
  
  XYContainer.prototype.height = function (_) {
    if ( !arguments.length ) { return this._xyc_height; }
    var sizeChange = this._xyc_height !== _;
    this._xyc_height = _;
    if ( this._xyc_width ) { this._xyc_relayout(); }
    return this;
  };
  
  XYContainer.prototype.size = function(_) {
    if ( !arguments.length ) { 
      return {
        'width' : this._xyc_width,
        'height' : this._xyc_height
      };
    }
    this._xyc_height = _.height;
    this._xyc_width = _.width;
    this._xyc_relayout();
    return this;
  };
  
  XYContainer.prototype.data = function (_, _fullData) {
    if ( !arguments.length ) { return this._xyc_data; }
    this._xyc_data = _;
    this._fullData = _fullData;
    
    if ( !TypeUtils.isEmptyObject(this._xyc_modules) && !TypeUtils.isEmptyObject(this._xyc_properties) ) {
      //plot exists, we need update its data
      var dataHandler = new SingleChartDataHandler(this._xyc_data); 
      this._xyc_modules['plot'].data(dataHandler.getDataAdapter());
      this._xyc_updateAxisData('xAxis');
      this._xyc_updateAxisData('yAxis');
      this._xyc_updateAxisData('xAxis2');
      this._xyc_updateAxisData('yAxis2');
    }
    
    return this;
  };
  
  XYContainer.prototype.properties = function (xs) {
    if ( !arguments.length ) { return this._xyc_properties.xyContainer; }
    this._xyc_properties = Objects.extend(true, {}, this._xyc_properties, xs);
    if ( !TypeUtils.isEmptyObject(this._xyc_modules) && !TypeUtils.isEmptyObject(this._xyc_data) ) {
      this._xyc_updateProperties('xAxis');
      this._xyc_updateProperties('xAxis2');
      this._xyc_updateProperties('yAxis');
      this._xyc_updateProperties('yAxis2');
      this._xyc_updateProperties('plot');
      this._xyc_updateProperties('dataLabel');
      this._xyc_updateProperties('background');
    }
    return this;
  };
  
  XYContainer.prototype.config = function (_) {
    if ( !arguments.length ) { return this._xyc_config; }
    this._xyc_config = _;
    if ( TypeUtils.isEmptyObject(this._xyc_modules) && 
        !TypeUtils.isEmptyObject(this._xyc_data) && 
        !TypeUtils.isEmptyObject(this._xyc_properties) && 
        this._xyc_parent !== null ) {
      this._xyc_initialize();
    }
    return this;
  };
  
  XYContainer.prototype.modules = function (xs) {
    if ( !arguments.length ) {
      if ( TypeUtils.isEmptyObject(this._xyc_modules) ) {
        this._xyc_initialize();
      } 
      return this._xyc_modules;
    }
    this._xyc_modules = xs;
    return this;
  };
  
  XYContainer.prototype.parent = function (_) {
    if ( !arguments.length ) { return this._xyc_parent; }
    this._xyc_parent = _;
    return this;
  };
  
  XYContainer.prototype.dispatch = function(_){
    if ( !arguments.length) { return this._xyc_eDispatch; }
    this._xyc_eDispatch = _;
    return this;
  };
  
  XYContainer.prototype.rotate = function(_) {
    var plot = this._xyc_modules['plot'];
    if (!arguments.length) { return plot.rotate(); }
    plot.rotate(_);
    this._xyc_properties.xyContainer.yAngle = _.yAngle;
    return this;
  };
  
  XYContainer.prototype.rotateEnd = function() {
    var plot = this._xyc_modules['plot'];
    if (plot.rotateEnd) { return plot.rotateEnd(); }
    return this;
  };
  
  XYContainer.prototype.getPropertyZone = function(_) {
    var result = [];
    var plot = this._xyc_selections.plot.select('.v-bound').node();
    if (plot === null) {
      plot = this._xyc_selections.plot.node();
    }
    var boundRect = plot.getBoundingClientRect();
    if (boundRect.width>1.5 && boundRect.height>1.5) {
      var bound = [[]];
      bound[0].push([boundRect.left, boundRect.top]);
      bound[0].push([boundRect.right, boundRect.top]);
      bound[0].push([boundRect.right, boundRect.bottom]);
      bound[0].push([boundRect.left, boundRect.bottom]);
      result.push({
        "name": 'plot',
        "bound": bound
      });      
    }
    return result;
  };
  
  XYContainer.prototype.retry = function() {
    var modules = this._xyc_modules;
    var selections = this._xyc_selections;
    var parent = this._xyc_parent;
    if ( modules.xAxis ) {
      if (selections.xAxis) {
        selections.xAxis.remove();
      }
      selections.xAxis = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'xAxis');
    }
    if ( modules.xAxis2 ) {
      if (selections.xAxis2) {
        selections.xAxis2.remove();
      }
      selections.xAxis2 = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'xAxis2');
    }
    if ( modules.yAxis ) {
      if (selections.yAxis) {
        selections.yAxis.remove();
      }
      selections.yAxis = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'yAxis');
    }
    if ( modules.yAxis2 ) {
      if (selections.yAxis2) {
        selections.yAxis2.remove();
      }
      selections.yAxis2 = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'yAxis2');
    }
    if ( modules.plot ) {
      if (selections.plot) {
        selections.plot.remove();
      } 
      selections.plot = parent.append('g')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'plot');
    }
    if ( modules.background ) {
      if (selections.background) {
        selections.background.remove();
      }
      selections.background = parent.insert('g', ':first-child')
        .attr('class', Constants.CSS.CLASS.MODULEPREFIX + 'background');
    }
  };

  XYContainer.prototype.dataCacheToDestroy = function(){ //to deal with memory leak caused by MultiAxesDataAdapter
    var i=0;
    var j=0;
    var k=0;

    if(this._xyc_dataCache){
      if(this._xyc_dataCache._aa){
        for(i=0; i< this._xyc_dataCache._aa.length; i++){
          if(this._xyc_dataCache._aa[i]){
            if(this._xyc_dataCache._aa[i].values){
              for(j=0; j< this._xyc_dataCache._aa[i].values.length;j++){
                if(this._xyc_dataCache._aa[i].values[j]){
                  this._xyc_dataCache._aa[i].values[j].rows = null;
                  this._xyc_dataCache._aa[i].values[j] = null; 
                }
              }
              this._xyc_dataCache._aa[i].values = null;
            }
            this._xyc_dataCache._aa[i] = null;
          }
        }
        this._xyc_dataCache._aa = null;
      }
      
      if(this._xyc_dataCache._mg){
        for(i=0; i< this._xyc_dataCache._mg.length; i++){
          if(this._xyc_dataCache._mg[i]){
            if(this._xyc_dataCache._mg[i].values){
              for(j=0; j< this._xyc_dataCache._mg[i].values.length;j++){
                if(this._xyc_dataCache._mg[i].values[j]){
                  if(this._xyc_dataCache._mg[i].values[j].rows){
                    for(k=0; k< this._xyc_dataCache._mg[i].values[j].rows.length;k++){
                      this._xyc_dataCache._mg[i].values[j].rows[k] = null;
                    }
                    this._xyc_dataCache._mg[i].values[j].rows = null;
                  }
                  this._xyc_dataCache._mg[i].values[j] = null;
                }
              }
              this._xyc_dataCache._mg[i].values = null;
            }
            this._xyc_dataCache._mg[i] = null;
          }
        }
        this._xyc_dataCache._mg = null;
      }

      if(this._xyc_dataCache._bindingInfo){
        this._xyc_dataCache._bindingInfo = null;
      }        
      this._xyc_dataCache = null;
    }
  };

  XYContainer.prototype.ctxRawdataToDestroy = function(){ //to deal with memory leak caused by CrosstableDataset
    var i=0;
    var j=0;
    var k=0;
    if(this._xyc_ctx.rawData){
      if(this._xyc_ctx.rawData._dataSet){
        if(this._xyc_ctx.rawData._dataSet.analysisAxis){
          for(i=0; i< this._xyc_ctx.rawData._dataSet.analysisAxis.length; i++){
            if(this._xyc_ctx.rawData._dataSet.analysisAxis[i]){
              if(this._xyc_ctx.rawData._dataSet.analysisAxis[i].data){
                for(j=0; j< this._xyc_ctx.rawData._dataSet.analysisAxis[i].data.length;j++){
                  if(this._xyc_ctx.rawData._dataSet.analysisAxis[i].data[j]){
                    this._xyc_ctx.rawData._dataSet.analysisAxis[i].data[j].values = null;
                    this._xyc_ctx.rawData._dataSet.analysisAxis[i].data[j] = null;
                  }
                }
                this._xyc_ctx.rawData._dataSet.analysisAxis[i].data = null;
              }
              this._xyc_ctx.rawData._dataSet.analysisAxis[i] = null;
            }
          }
          this._xyc_ctx.rawData._dataSet.analysisAxis = null;
        }

        if(this._xyc_ctx.rawData._dataSet.measureValuesGroup){
          for(i=0; i< this._xyc_ctx.rawData._dataSet.measureValuesGroup.length; i++){
            if(this._xyc_ctx.rawData._dataSet.measureValuesGroup[i]){
              if(this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data){
                for(j=0; j< this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data.length;j++){
                  if(this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data[j]){
                    if(this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data[j].values){
                      for(k=0; k< this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data[j].values.length;k++){
                        this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data[j].values[k] = null;
                      }
                      this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data[j].values = null;
                    }
                    this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data[j] = null;
                  }
                }
                this._xyc_ctx.rawData._dataSet.measureValuesGroup[i].data = null;
              }
              this._xyc_ctx.rawData._dataSet.measureValuesGroup[i] = null;
            }
          }
          this._xyc_ctx.rawData._dataSet.measureValuesGroup = null;
        }
        this._xyc_ctx.rawData._dataSet = null;
      }

      if(this._xyc_ctx.rawData._analysisAxis){
        for(i=0; i< this._xyc_ctx.rawData._analysisAxis.length; i++){
          if(this._xyc_ctx.rawData._analysisAxis[i]){
            if(this._xyc_ctx.rawData._analysisAxis[i]._dimensionLabels){
              for(j=0; j< this._xyc_ctx.rawData._analysisAxis[i]._dimensionLabels.length;j++){
                if(this._xyc_ctx.rawData._analysisAxis[i]._dimensionLabels[j]){
                  this._xyc_ctx.rawData._analysisAxis[i]._dimensionLabels[j]._values = null;
                  this._xyc_ctx.rawData._analysisAxis[i]._dimensionLabels[j] = null;
                }
              }
              this._xyc_ctx.rawData._analysisAxis[i]._dimensionLabels = null;
            }
            this._xyc_ctx.rawData._analysisAxis[i] = null;
          }
        }
        this._xyc_ctx.rawData._analysisAxis = null;
      }

      if(this._xyc_ctx.rawData._measureValuesGroup){
        for(i=0; i< this._xyc_ctx.rawData._measureValuesGroup.length; i++){
          if(this._xyc_ctx.rawData._measureValuesGroup[i]){
            if(this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues){
              for(j=0; j< this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues.length;j++){
                if(this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues[j]){
                  if(this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues[j]._values){
                    for(k=0; k< this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues[j]._values.length;k++){
                      this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues[j]._values[k] = null;
                    }
                    this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues[j]._values = null;
                  }
                  this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues[j] = null;
                }
              }
              this._xyc_ctx.rawData._measureValuesGroup[i]._measureValues = null;
            }
            this._xyc_ctx.rawData._measureValuesGroup[i] = null;
          }
        }
        this._xyc_ctx.rawData._measureValuesGroup = null;
      }

      if(this._xyc_ctx.rawData._dimensions){
        this._xyc_ctx.rawData._dimensions = null;
      }
      
      if(this._xyc_ctx.rawData._measures){
        this._xyc_ctx.rawData._measures = null;
      }
                
      this._xyc_ctx.rawData = null;
    }
  };
  
  XYContainer.prototype.destroy = function() {
    this.dataCacheToDestroy();
    this._xyc_parent = null;
    this._xyc_selections = null;
    var modules = this._xyc_modules;
    //remove listener
    for(var mkey in modules){
      if(modules.hasOwnProperty(mkey)){
        var m = modules[mkey];
        if(m.dispatch){
          var dis =  m.dispatch();
          if ( dis.initialized ) { dis.on('initialized.xycontainer', null);}
          if ( dis.showTooltip ) { dis.on('showTooltip.xycontainer', null);}
          if ( dis.hideTooltip ) { dis.on('hideTooltip.xycontainer', null);}
        }
      }
    }
    this._xyc_modules = null;
    this._xyc_data = null;
    this._fullData = null;
    //destroy ctx
    if(this._xyc_ctx){
      this._xyc_ctx.destroy();
      this.ctxRawdataToDestroy();
      this._xyc_ctx = null;
    }
  };
  
  return XYContainer;
});
define('sap/viz/modules/manifests/XYContainer',['sap/viz/modules/manifests/Module',
  'sap/viz/modules/Constants',
  'sap/viz/modules/xycontainer'],
function Setup(Manifest, Constants, fn) {
  var module = {
    'id' : 'sap.viz.modules.xycontainer',
    'type' : Constants.Type.Container,
    'name' : 'single container',
    'properties' : {
      'yAngle': {
         name: 'yAngle',
         supportedValueType: 'Number',
         defaultValue : 0,
         'isExported' : false,
         description : "Set the angle for the pie chart. This value should be between '-180' and '180'."
      },

    },
    'css' : null,
    'configure' : null,
    'events' : {
      'showTooltip' : Constants.Event.TooltipShow.desc,
      'hideTooltip' : Constants.Event.TooltipHide.desc
    },
    fn : fn
  };

  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
});
define('sap/viz/chart/elements/behaviors/BaseBehavior',['sap/viz/base/utils/oo','sap/viz/modules/Base'], function(oo, Base){
    var BaseBehavior = function(manifest, ctx){
        BaseBehavior.superclass.constructor.apply(this, arguments);
        this._decorations = {};
        //each trigger can have several handlers, we will call them one by one
        this._triggerHandlers = {};
    };
    
    oo.extend(BaseBehavior, Base);
    
    BaseBehavior.prototype.initialize = function(){
        //do nothing
    };
    //protected
    BaseBehavior.prototype.registerDecorations = function(){
        //do nothing
    };
    
    BaseBehavior.prototype.getTriggerHandler = function(triggerKey){
        return this._triggerHandlers[triggerKey];
    };
    
    //protected
    BaseBehavior.prototype.registerTriggerHandlers = function(){
        //do nothing
    };
    
    BaseBehavior.prototype.runDecoration = function(){
        var decoration, decorationName, paras;
        if(arguments.length > 0){
            decorationName = arguments[0];
            [].splice.call(arguments, 0, 1);
            paras = arguments;
        }else{
            return;
        }
        decoration = this._decorations[decorationName];
        if(decoration){
            decoration.forEach(function(fn, idx){
                //Jimmy/2013/9/13 we require outsider bind a properly this to the function
                //otherwise, we will use this <-> BehaviorManager as the scope
                //the binded scope can't be overrided
                fn.apply(this, paras); 
            });    
        }
    };
    
    return BaseBehavior;
});

define('sap/viz/modules/util/flattenModules',[], function() {
    //rootKey, rootModule, needExpand, joiner
    var flatten = function(args) {
        var token = args.joiner || '.', ret = {}, hierarchy = [{
            key : args.rootKey,
            value : args.rootNode
        }];

        // depth-first and exhaustively walk the tree
        (function walk(parentKey, node) {
            if (node.hasOwnProperty('modules')) {
                var children = node.modules(), layer, currentKey = parentKey;

                for (var k in children ) {
                    if (children.hasOwnProperty(k)) {
                        layer = {
                            key : parentKey + token + k,
                            value : children[k]
                        };
                        hierarchy.push(layer);

                        if (children[k].modules) {
                            walk(currentKey + token + k, children[k]);
                        }
                    }
                }
            }
        })(args.rootKey, args.rootNode);

        for (var i = 0; i < hierarchy.length; i++) {
            ret[hierarchy[i].key] = hierarchy[i].value;
        }
        
        //TODO JIMMY/2013/9/15  ADD EXPAND MODULES HERE AND REMOVE FLATTEN AND EXPAND IN CHARTCOMPONENT

        return ret;
    };
    
    return flatten;
});

define('sap/viz/chart/elements/utils/LassoDecoration',['sap/viz/base/UADetector'], function(UADetector){
   var LassoDecoration = function(parent){
       this._shape = null;
       this._shapeContainer = null; //if parent is div
       this._startPoint = null;
   };
   
   LassoDecoration.prototype.start = function(parent, point){
       if (this._shape) {
           this._shape.remove();
            if (this._shapeContainer) {
                this._shapeContainer.remove();
            }
       }
       var dParent = d3.select(parent);
       if (parent.tagName === 'DIV') { //for trellis charts
           dParent = this._shapeContainer = dParent.append('svg')
                .style({
                    "position": "absolute",
                    "left": "0px",
                    "top": "0px",
                    "width": dParent.style("width"),
                    "height": dParent.style("height"),
                    "pointer-events": "none"
                });
       }
       this._shape = dParent.append('rect')
       .attr('x', 0)
       .attr('y', 0)
       .attr('width', 0)
       .attr('height', 0)
       .attr('pointer-events', 'none')
       .attr('fill', 'rgba(64,176,240, 0.4)')
       .style('stroke-width', '2px')
       .attr('stroke', 'rgb(64, 176, 240)');
       this._startPoint = convertPointToParentCoordination(parent, point);
       this._shape.attr('x', this._startPoint.x).attr('y', this._startPoint.y);
   };
   
   function convertPointToParentCoordination(parent, point){
       if(UADetector.isFirefox()){
         parent = parent.getElementsByClassName('v-eventLayer')[0];
       }
       var rect = parent.getBoundingClientRect();
       var x = point.x - rect.left;
       var y = point.y - rect.top;
       return {
           'x' : x,
           'y' : y
       };
   }
   
   LassoDecoration.prototype.moveTo = function(parent, point){
       if(this._startPoint && this._shape){
           var startPoint = this._startPoint;
           var convertedPoint = convertPointToParentCoordination(parent, point);
           var x = Math.min(convertedPoint.x, startPoint.x);
           var y = Math.min(convertedPoint.y, startPoint.y);
           var w = Math.abs(convertedPoint.x - startPoint.x); 
           var h = Math.abs(convertedPoint.y - startPoint.y);
           this._shape.attr('x', x).attr('y', y).attr('width', w).attr('height', h);
       }
   };
   
   LassoDecoration.prototype.end = function(parent, point){
       this._shape.remove();
       if (this._shapeContainer) {
           this._shapeContainer.remove();
       }
   };
   
   LassoDecoration.prototype.getNode = function(){
       return this._shape.node();
   };
   
   LassoDecoration.prototype.destroy = function(){
       this._shape = null;
       this._startPoint = null;
   };
   
   return LassoDecoration;
});

define('sap/viz/util/BoundingBox',[],

function Setup() {
  var boundingbox = {};
  boundingbox.getBBox = function (node, rootNode) {
    var matrix;
    if (arguments.length === 1) {
      matrix = node.getCTM();
    } else {
      matrix = node.getTransformToElement(rootNode);
    }
    return boundingbox.getBBoxHelp(node, matrix);
  };

  boundingbox.getBBoxHelp = function (node, matrix) {
    var box = node.getBBox();
    var corners = [];
    var point = d3.select('svg')[0][0].createSVGPoint();
    point.x = box.x;
    point.y = box.y;
    corners.push(point.matrixTransform(matrix));
    point.x = box.x + box.width;
    point.y = box.y;
    corners.push(point.matrixTransform(matrix));
    point.x = box.x + box.width;
    point.y = box.y + box.height;
    corners.push(point.matrixTransform(matrix));
    point.x = box.x;
    point.y = box.y + box.height;
    corners.push(point.matrixTransform(matrix));
    var minX = corners[0].x;
    var maxX = corners[0].x;
    var minY = corners[0].y;
    var maxY = corners[0].y;
    for (var i = 1; i < corners.length; i++) {
      var x = corners[i].x;
      var y = corners[i].y;
      if (x < minX) {
        minX = x;
      } else if (x > maxX) {
        maxX = x;
      }
      if (y < minY) {
        minY = y;
      } else if (y > maxY) {
        maxY = y;
      }
    }

    return {
      x: minX,
      y: minY,
      width: maxX - minX,
      height: maxY - minY
    };
  };

  // return true if the two boxes intersect
  boundingbox.intersects = function(a, b) {
    return (a.x <= (b.x + b.width) &&
        b.x <= (a.x + a.width) &&
        a.y <= (b.y + b.height) &&
        b.y <= (a.y + a.height));
  };

  // returns a box representing the intersection of box1 and box2 if it exists, otherwise null
  boundingbox.intersection = function(box1, box2) {
    if (boundingbox.intersects(box1, box2)) {
      var x1 = Math.max(box1.x, box2.x),
          x2 = Math.min(box1.x + box1.width, box2.x + box2.width),
          y1 = Math.max(box1.y, box2.y),
          y2 = Math.min(box1.y + box1.height, box2.y + box2.height);

      return {
        x: x1,
        y: y1,
        width: x2 - x1,
        height: y2 - y1
      };
    }

    return null;
  };
  
  boundingbox.contains = function(box, point) {
    /*jshint laxbreak:true*/
      return point.x >= box.x && point.x <= (box.x + box.width) 
        && point.y >= box.y && point.y <= (box.y + box.height);
  };

  return boundingbox;
});

define('sap/viz/chart/elements/utils/runtimeSelectionDataHandler',['sap/viz/base/utils/Objects', 'sap/viz/base/utils/TypeUtils', 'sap/viz/base/utils/ObjectUtils'],

function Setup(Objects, TypeUtils, ObjectUtils){
  
  var runtimeSelectionDataHandler = {
    
    arrayCtx: function (ctx) {
        // convert ctx: {path: {}} to ctx: [{path: {}}]
        var ret = [];
        ret.push(ctx);
        return ret;
    },
    
    unpackData: function (tableData) {
        // convert tableData: {dimension: {Country: China}, measure: {Revenue: 20}} to tableData: {Country: China, Revenue: 20}
        var ret = {};
        if (tableData.hasOwnProperty('dimension')) {
            for (var key in tableData.dimension) {
                ret[key] = tableData.dimension[key];
            }
        }
        if (tableData.hasOwnProperty('measure')) {
            for (var key in tableData.measure) {
                ret[key] = tableData.measure[key];
            }
        }
        return ret;
    },

    buildCtxItems : function(selectedItems) {
        var ctxs = [];
        for (var i = 0; i < selectedItems.length; i++) {
            var data = d3.select(selectedItems[i]).data();
            if (data) {
                data = data[0];
            }
            if (data && data.ctx) {
                ctxs.push(data.ctx);
            } else if (data && TypeUtils.isArray(data)) {
                for (var j = 0; j < data.length; j++) {
                    ctxs.push(data[j].ctx);
                }
            }
        }
        return ctxs;
    },

    buildInfoArray : function(selectedItems) {
        var dataItems = [];
        for(var i = 0; i < selectedItems.length; i++)
        {
            var oneDataPointItem = [];
            var data = d3.select(selectedItems[i]).data();
            if(data){
                data = data[0];
            }
            if(data.info instanceof Array)
            {
                //val is an array as well
                var j;
                for(j = 0; j < data.info.length; j++)
                {
                    if(data.info[j] !== null)
                    {
                        var oneInfoItem;
                        oneInfoItem = Objects.extend(true, {}, data.info[j]);
                    
                        //just return additionalData
                        if(oneInfoItem)
                        {
                            oneInfoItem = oneInfoItem.additionalData;
                        }
                        oneDataPointItem.push(oneInfoItem);
                    }
                }
            }
            else
            {
                if(data.info !== null)
                {
                    var oneInfoItemS;
                    oneInfoItemS = Objects.extend(true, {}, data.info);

                    //just return additionalData
                    if(oneInfoItemS)
                    {
                        oneInfoItemS = oneInfoItemS.additionalData;
                    }
                    oneDataPointItem.push(oneInfoItemS);
                }
            }

            dataItems.push(oneDataPointItem);
        }
        return dataItems;
    },
    
    getSelectedObjArray : function(data, selectedItems, withDataCtx, withInfo) {
        //returned obj array is like
        //[
        //  {
        //    data: {"key":"value",...}
        //    ctx: [{"mi":0, ...}, {...}, ...]
        //    info: [{obj},null,... }//optional
        //  },
        //
        //  {
        //    data: {"key":"value",...}
        //    ctx: [{"mi":0, ...}, {...}, ...]
        //    info: [{obj},null,... }//optional
        //  },
        //  ...
        //]
        //build dataArray
        var ctxItems = this.buildCtxItems(selectedItems);
        var dataArray = [];
        for (var i = 0; i < ctxItems.length; i++) {
            var tableData = data.ctx2TableData(ctxItems[i]);
            var dataObj = Objects.extend(true, {}, tableData.dimension);
            dataObj = Objects.extend(true, dataObj, tableData.measure);
            dataArray.push(dataObj);
        }
        // var dataArray = this.ctxArrayToObjArray(data, ctxItems);
        
        var ctxArray;
        if(withDataCtx){
            //build ctxArray
            ctxArray = [];
            var i;
            var j;
            for(i = 0; i < ctxItems.length; i++)
            {
                var oneDataPointCtx = [];
                if (TypeUtils.isArray(ctxItems[i])) {
                    var temp = [];
                    for (var j = 0; j < ctxItems[i].length; j++) {
                        if (ctxItems[i][j] && ctxItems[i][j].path) {
                            temp.push(ctxItems[i][j].path);
                        }
                    }
                    ctxArray.push(temp);
                } else if (TypeUtils.isPlainObject(ctxItems[i])) {
                    var temp = [];
                    temp.push(ctxItems[i].path);
                    ctxArray.push(temp);
                }
            }
        }
        
        var infoArray;
        if(withInfo){
            //buildInfoArray
            infoArray = this.buildInfoArray(selectedItems);
        }

        //merge to reArray
        var reArray = [];
        for(i = 0; i < dataArray.length; i++)
        {
            var item = {};
            item.data = dataArray[i];
            if(withDataCtx)
            {
                item.ctx = ctxArray[i];
            }
            if(withInfo)
            {
                item.info = infoArray[i];
            }
            reArray.push(item);
        }

        return reArray;
    },
    
    matchSelection: function (targetCtx, items, crosstable) {
        // function for comparing each single ctx or data
        var compareDatapoint = function (base, target) {
            var ret = false;
            for (var key in base) {
                if (base[key] === target[key]) {
                    ret = true;
                } else if (target.hasOwnProperty(key) && base[key] === '*') {// select this key's all values
                    ret = true;
                }else {
                    ret = false;
                    break;
                }
            }
            return ret;
        };
        // function to check whether ctxObj has all of dii_a1, dii_a2, mg and mi
        var hasCompleteCtx = function (ctxObj) {
            if (ctxObj.hasOwnProperty('dii_a1') && ctxObj.hasOwnProperty('dii_a2')
                && ctxObj.hasOwnProperty('mg') && ctxObj.hasOwnProperty('mi')) {
                return true;
            }
            return false;
        }
        
        for (var j = 0; j < items.length; j++) {
            if (!items[j]) {
                continue;
            }
            var baseData;
            if (items[j].hasOwnProperty('ctx')) {
                var copyCtx = ObjectUtils.clone(items[j].ctx);
                for (var k = 0; k < copyCtx.length; k++) {
                    if (!hasCompleteCtx(copyCtx[k])) {
                        copyCtx.splice(k,1);
                    }
                }
                var allMatch = false;
                if (!TypeUtils.isArray(targetCtx)) {
                    targetCtx = this.arrayCtx(targetCtx);
                }
                for (var k = 0; k < copyCtx.length; k++) {
                    allMatch = false;
                    for (var l = 0; l < targetCtx.length; l++) {
                        if (targetCtx[l] && targetCtx[l].path && compareDatapoint(copyCtx[k], targetCtx[l].path)) {
                            allMatch = true;
                            break;
                        }
                    }
                    if (!allMatch) {
                        break;
                    }
                }
                if (allMatch) {
                    return true;
                }
            } else if (items[j].hasOwnProperty('data')) {
                baseData = items[j].data;
                var targetData = crosstable.ctx2TableData(targetCtx);
                targetData = this.unpackData(targetData);
                if (!compareDatapoint(baseData, targetData)) {
                    continue;
                }
                return true;
            }
        }
        return false;
    }
    
  };
  
  return runtimeSelectionDataHandler;
});

define('sap/viz/chart/elements/behaviors/InteractionHelper',[
],
function(){
    
    var BEHAVIOR_EXTENSION_PROPERTY = "extensionPoints";
    
    var iHelper = {};
    
    iHelper.getBoundingBox = function(node){
        var rect = node.getBoundingClientRect();
        return { x: rect.left, y: rect.top, height: rect.height, width: rect.width, right : rect.right, bottom: rect.bottom };
    };    
    
    iHelper.concatByPush = function(arr1, arr2) {
        Array.prototype.push.apply(arr1, arr2);
    }; 
    
    iHelper.hasClass = function(node, clz) {
        if (!node || !node.getAttribute) return false;
        var nodeClz = node.getAttribute('class') || "";
        return (' ' + nodeClz + ' ').indexOf(' ' + clz + ' ') >= 0;
    };
    
    iHelper.addClass = function(node, clz) {
        if (this.hasClass(node, clz)) {
            return false;
        }
        var nodeClz = node.getAttribute('class') || "";
        nodeClz += ' ' + clz;
        node.setAttribute("class", nodeClz);
        return true;
    };
    
    iHelper.removeClass = function(node, clz) {
        if (!this.hasClass(node, clz)) {
            return false;
        }
        var nodeClz = ' ' + node.getAttribute('class') + ' ';
        nodeClz = nodeClz.replace(' ' + clz + ' ', ' ');
        node.setAttribute("class", nodeClz);
        return true;
    };
    
    iHelper.findAncestor = function(clz, startIncl, EndExcl) {
        var node = startIncl;
        while (node !== EndExcl && !iHelper.hasClass(node, clz) && (node = node.parentNode));
        return node === EndExcl ? null : node;
    };    
    
    
    function removeDuplicatedDataPoints(dataPoints) {
      for (var i = dataPoints.length - 1; i > 0; i--) {
        for (var j = i - 1; j >= 0; j--) {
          if (dataPoints[i] === dataPoints[j]) {
            dataPoints.splice(i, 1);
            break;
          }
        }
      }
    }
    
    iHelper.findSeriesForLabel = function(ctxes, dataPoints) {
        var targets = [], 
            dataPoint,
            datum,
            dpCtxes,
            dpCtx,
            dpPath,
            belongTo;
        dataPoints = dataPoints[0].slice(0, dataPoints[0].length);
        ctxes.forEach(function(ctx, idx){
            if (!ctx) { //multiple geo chart set null ctx for empty plot
                return;
            }
            var path = ctx.path;
            var i, j, k;
            for (i = -1; ++i < dataPoints.length;) {
                dataPoint = dataPoints[i];
                dpCtxes = [];
                datum = d3.select(dataPoint).datum();
                if (!(datum instanceof Array)) {
                    datum = [datum];
                }
                for (j = -1; ++j < datum.length; ) {
                    if (datum[j].ctx instanceof Array) {
                        Array.prototype.push.apply(dpCtxes, datum[j].ctx);
                    } else {
                        dpCtxes.push(datum[j].ctx);
                    }
                }
//                dpCtxes = dataPoint.datum().ctx;
//                if (!(dpCtxes instanceof Array)) {
//                    dpCtxes = [dpCtxes];
//                }
                for (j = -1; ++j < dpCtxes.length;) {
                    dpCtx = dpCtxes[j];
                    if (!dpCtx) continue; //bubble could have one null context of its 4 contexts
                    dpPath = dpCtx.path || dpCtx[0].path; //the latter is for Multi measures. For bubble or tagcloud.  
                    belongTo = true;
                    //compare path
                    if (path === undefined || dpPath === undefined) {
                        belongTo = false;
                    } else {
                        //dii_ax (a1 or a2)
                        if (path.aa === undefined) {
                            if ((path.dii_a1 !== undefined && path.dii_a1 !== dpPath.dii_a1)
                                || (path.dii_a2 !== undefined && path.dii_a2 !== dpPath.dii_a2)) {
                                belongTo = false;
                            }
                        } else {
                            if ((path.aa === 0 && path.dii !== dpPath.dii_a1)
                                || (path.aa === 1 && path.dii !== dpPath.dii_a2)) {
                                belongTo = false;
                            }
                        }
                        //mg
                        if (belongTo && path.mg !== undefined && path.mg !== dpPath.mg) {
                            belongTo = false;
                        }
                        //mi
                        if (belongTo && path.mi !== undefined && path.mi !== dpPath.mi) {
                            belongTo = false;
                        }
                    }  
                    if (belongTo) {
                        targets.push(dataPoint);
                        break;
                    }
                }

            }
        }.bind(this));
        removeDuplicatedDataPoints(targets);
        return targets;
    };
    
    iHelper.findSeriesForLegend = function(ctx, dataPoints) {
        var targets = [], 
            dataPoint,
            dpCtxes,
            dpCtx,
            paths = ctx.path, path,
            dpPath,
            datum,
            belongTo,
            i, j, k, len
            ;
        if (!(paths instanceof Object)) {
            return [];
        }
        if (!(paths instanceof Array)) {//for mbc legend, ctx.path is array of datapoints' paths.
            paths = [paths];
        }
        if (!paths.length) {
            return [];
        }
        for(i = 0, len = dataPoints[0].length; i < len; i++){
			/*
            if(FlatTableDataTransformUtil.matchDataContext(this._selb_rawData, ctx1, allDatapoints[0][i].__data__)){  
                targets.push(allDatapoints[0][i]);
            }*/
            /* TODO: don't simply uncomment the above code to support flat table
             *      because Interaction is supposed not to know what data model
             *      is being used. An option is to add an abstract class for
             *      flat & crosstable util
             */
            //only deal with cross table data model here:
            dataPoint = dataPoints[0][i];
            dpCtxes = [];
            datum = d3.select(dataPoint).datum();
            if (!(datum instanceof Array)) {
                datum = [datum];
            }
            for (j = -1; ++j < datum.length; ) {
                if (datum[j].ctx instanceof Array) { //for Multi measures. For bubble or tagcloud.   
                    Array.prototype.push.apply(dpCtxes, datum[j].ctx);
                } else {
                    dpCtxes.push(datum[j].ctx);
                }
            }  
            for (j = -1; ++j < dpCtxes.length;) {     
                dpCtx = dpCtxes[j];
                if (!dpCtx) continue; //bubble could have one null context of its 4 contexts
                dpPath = dpCtx.path;
                for (k = -1; ++k < paths.length;) {
                    belongTo = true;
                    path = paths[k];
                    for (var key in path) {
                        if (path[key] instanceof Array) { //bubble legend could use path array (i.e.[2,5,3,...]) :-0
                            if (path[key].indexOf(dpPath[key]) < 0) {
                                belongTo = false;
                            }
                        } else {
                            if (dpPath[key] !== path[key]) {
                                belongTo = false;
                            }
                        }
                    }
                    if (belongTo) {
                        targets.push(dataPoints[0][i]);
                        break;
                    }                     
                }
                if (belongTo) {
                    break;
                }
               
            }
        }        
        removeDuplicatedDataPoints(targets);
        return targets;
    };   
    

    
    iHelper.findPlotNodeContainingNode = function(node) {
        var plotDOMNode = null;
        var classNames;
        while( (node = node.parentNode) ) {
            if ( (plotDOMNode = node.querySelector('.v-m-plot')) ) { //node is from axis
                break;
            }
            classNames = ' ' + node.getAttribute('class') + ' ';
            if (classNames.indexOf(" v-m-root ") >= 0) {
                break;
            }
            if (classNames.indexOf(" v-m-plot") >= 0) { //start with v-m-plot, trellis use v-m-plotxxx while all other charts use v-m-plot
                plotDOMNode = node.querySelector('.v-m-plot') || node;
                break;
            }
        }
        return plotDOMNode;
    };
    
    iHelper.findPlotModuleByNode = function(plots, node) {
        var plotDOMNode = iHelper.findPlotNodeContainingNode(node);
        if (plotDOMNode) {
            for (var name in plots) {
                if (plots.hasOwnProperty(name)) {
                    var module = plots[name];
                    var moduleParent = undefined;
                    if ( module.parent && (moduleParent = module.parent()) )  {
                        var moduleNode = moduleParent.node();
                        if (moduleNode === plotDOMNode) return module;
                    }
                } 
            }
        }
    };    
    
    
    iHelper.callExtensionPoint = function(props, name, context) {
        var ep, 
            result = {
                called: false,
                ret: undefined
            };
        if(props[BEHAVIOR_EXTENSION_PROPERTY]){
            ep = props[BEHAVIOR_EXTENSION_PROPERTY][name];   
        }
        if(ep){
            result.called = true;
            var params = Array.prototype.splice.call(arguments, 3);
            result.ret = ep.apply(context, params);
        }    
        return result;
    };
    
    iHelper.extensionPoint = function(props, name) {
        return props[BEHAVIOR_EXTENSION_PROPERTY] && props[BEHAVIOR_EXTENSION_PROPERTY][name];
    };    
    
    
    return iHelper;
});

define('sap/viz/chart/elements/behaviors/Interaction',[
    'sap/viz/base/utils/oo',
    'sap/viz/chart/elements/behaviors/BaseBehavior',
    'sap/viz/behaviors/BehaviorManager',
    'sap/viz/base/utils/ObjectUtils',
    'sap/viz/modules/Constants', 
    'sap/viz/util/Constants',
    'sap/viz/modules/util/flattenModules',
    'sap/viz/chart/elements/utils/LassoDecoration', 
    'sap/viz/util/BoundingBox', 
    'sap/viz/chart/elements/utils/runtimeSelectionDataHandler', 
    'sap/viz/base/utils/TypeUtils',
    'sap/viz/base/UADetector',
    'sap/viz/base/utils/FunctionUtils',
    'sap/viz/chart/elements/behaviors/InteractionHelper'
],
function(oo, BaseBehavior, BehaviorManager, ObjectUtils, Constants, SDKConstants, flattenModules,
        /*FlatTableDataTransformUtil,*/ LassoDecoration, BoundingBox, runtimeSelectionDataHandler, TypeUtils, UADetector, FunctionUtils, iHelper){
    //Jimmy/2013/9/26 this behavior is actually a BIG behavior which contains
    //all interactions for our charts. 
    //we use this kind of BIG behavior because
    //in current stage, we are not ready to compose multiple behaviors in composition
    //framework. 
    //but it's always possible. the best practice would be separating different behaviors
    //into different elements so that clients have the chance to choose behaviors (like
    //selection only without any tooltip etc.) during composition
    //
    //20131205_JohnWen: until now 3 extension points are supported
    //1. processTarget: process selections
    //2. convertData: return data of a data point so that tooltip can show it
    //3. getBoundingBoxes: return bounding box(es) of a data point. needed by lasso.
    //4. isEqual: checked if the two data points are equal to each other (if data points share same context, you should use this extension point)
    var BehaviorConstants = SDKConstants.BEHAVIOR;
    var Interaction = function(manifest, ctx){
        Interaction.superclass.constructor.apply(this, arguments);
        this._selb_props = ObjectUtils.extend(true , {}, manifest.props(null));
        this._selb_selectionMode = Constants.SELECTION_MODE.EXCLUSIVE;//by default exclusive
		this._selb_lassoWithCtrlKey = false;
        this._selb_holdSelection = false;
        this._selb_preserveSelectionWhenDragging = false;
        this._selb_m = null;
        this._selb_plots = {};  
        this._selb_dispatch = d3.dispatch('selectData', 'deselectData', 'showTooltip', 'hideTooltip','lassoStart', 'lassoEnd', 'contextualData');
        this._selb_ctx = ctx; //keep ref to ctx instead of ctx.rawData because chart.data(..) could change rawData
//        this._selb_rawData = ctx.rawData;
        
        //Protected
        this._rootNode = null;
        this._lastSelected = [];
        this._hoveringDataPoint = null;/*added by John Wen: what data point mouse is hovering 
         - when user deselect a data point, and move in the data point, 
         tooltip should be showed, any other actions should NOT be taken, 
        please refer to Interaction.prototype._selb_hoverOnDataPointHandler
        */
        this._hoveringDeselectedDataPoint = false; /*the hovering data point was deselected
        - when a data point is deselected, moving on it should not bring up tooltip
        until moving out and in again.
        so when it's deselected, this variable become true, and then become false when moving out.
         */
        this._lastEventPoint = null;/* added by Keaton Sun: on mobile, when user de-select some 
        data points by tap on point/axis label/legend label, the tooltip will display at the position
        it was before.
        */
        //Jimmy/11/5/2013, why we need isClickLike since we already have inclusive/exclusive mode?
        //according to UX design, when user performs a clickLike action to trigger selection, like
        //legend click, point click or label click (the oppsite is lasso/API which is not click like),we will
        //deselect those targets when all targets are included in lastSelected, it's not related to selection mode.
        this._clickLikeTriggers = [];
        this._behaviorManager = ctx.behaviorManager;
        this._lassoDecoration = new LassoDecoration();
        this._lassoStartPoint = null;
        this._lassoEndPoint = null;
        this._ongoingOperation = null; //'lasso' or 'pan', for others use null/undefined
//        this._showingTooltip = false;
        this._showingDetailMode = null; //[info|action|null/undefined], what mode of tooltip is being showed.
        this._mainPlots = null; //all plot area modules
        this._mainPlotBoundRects = null;//store rect of v-bound node of all main plots, inited and used by findLassoCoveredDatapoints. for performance fix.
        //data point comparing functions
        this._dpFnCompare = null;
        this._dpFnIndexOf = null;
    };
    oo.extend(Interaction, BaseBehavior);
    
    //this method will be called after root initialized, configured in manifest
    Interaction.prototype.initialize = function(){
        Interaction.superclass.initialize.apply(this, arguments);
        
        if (this._selb_ctx.rawData.hasFakeData()) {
            return;
        }
        
        if (!this._selb_holdSelection) {
            this._lastSelected = [];
        }
        
        this._mainPlotBoundRects = null;
        
        //init data point comparing functions
        if (!this._dpFnCompare) {
            this._dpFnCompare = iHelper.extensionPoint(this._selb_props, "isEqual");
            this._dpFnIndexOf = this._dpFnCompare ? function(dps, dp) {
                for (var i = -1; ++i < dps.length; ) {
                    if (this._dpFnCompare.call(this, dps[i], dp)) {
                        return i;
                    }
                }
                return -1;
            } : function(dps, dp) {
                return dps.indexOf(dp);
            };     

            this._dpFnCompare = this._dpFnCompare || function(dp1, dp2){
                return dp1 === dp2;
            };        
        }
        
        //read trigger definition from property in case user want to add
        //own trigger or change our trigger
        var props = this._selb_props;
        var dataPointPattern = '(\\s+|^)(v-datapoint|v-datalabel)(\\s+|$)',
            eventLayerPattern = '(\\s+|^)v-m-root(\\s+|$)';
        var triggers = {
            'click_on_datapoint': {
                'key' : 'click_on_datapoint',
                'event' : 'click',
                //it's not finalized how to define selector here
                //currently we use css class names, with regular expression
                //set it to null will match nodes without any class
                //it's global search, case insensitive.
                //be noted that the expression is inside a string, so make sure
                //you are using two backslashes when you need one backslash
                'target': dataPointPattern//'(\\s+|^)(v-datapoint|v-datalabel)(\\s+|$)'
            },
            'click_on_non_datapoint': {
                'key' : 'click_on_non_datapoint',
                'event' : 'click',
                //any class that doesn't contain v-datapoint(space)
                //FIXME, it's not that accurate, for class like xxx-v-datapoint(space)
                //will be filtered out. but currently all of our css should be started
                //with 'v-'
                'target': '(\\s+|^)(v-datapoint|v-datalabel|v-legend-item|v-axis-item)(\\s+|$)',
                //Jimmy/9/27/2013 sometimes we may put classes in g element which results
                //we can't decide whether the trigger is activated simply by comparing the
                //class name of event target.
                //for positive match mode, starting from event target, itself or any of its ancestor
                //matches the target expression can be treated as 'Match'
                //for negative match mode, starting from event target, itself or any of its ancestor
                //matches the target expression will be treated as 'UnMatch'  
                'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE 
            },
            'hover_on_datapoint': {
                'key' : 'hover_on_datapoint',
                'event' : 'hover',
                'target': dataPointPattern//'(\\s+|^)v-datapoint(\\s+|$)'
            },
            'hover_on_non_datapoint': {
                'key' : 'hover_on_non_datapoint',
                'event' : 'hover',
                'target': dataPointPattern,//'(\\s+|^)v-datapoint(\\s+|$)',
                'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE
            },
            'hover_on_legend':{
                'key': 'hover_on_legend',
                'event': 'hover',
                'target': '(\\s+|^)v-legend-item(\\s+|$)'
            },
            'hover_on_non_legend': {
                'key' : 'hover_on_non_legend',
                'event' : 'hover',
                'target': '(\\s+|^)v-legend-item(\\s+|$)',
                'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE
            },
            'click_on_legend': {
                'key': 'click_on_legend',
                'event': 'click',
                'target': '(\\s+|^)v-legend-item(\\s+|$)'
            },
            'mousedown_on_legend': {
                'key': 'mousedown_on_legend',
                'event': 'mousedown',
                'target': '(\\s+|^)v-legend-item(\\s+|$)'  
            },
            'mousedown_on_legend_overflow': {
                'key': 'mousedown_on_legend_overflow',
                'event': 'mousedown',
                'target': '(\\s+|^)v-overflow(\\s+|$)'  
            },
            'mouseup_on_legend': {
                'key': 'mouseup_on_legend',
                'event': 'mouseup',
                'target': '(\\s+|^)v-legend-item(\\s+|$)'  
            },
            'mouseup_on_non_legend': {
              'key': 'mouseup_on_non_legend',
              'event': 'mouseup',
              'target': '(\\s+|^)v-legend-item(\\s+|$)',
              'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE
            },
            'pan_start_on_legend' : {
              'key' : 'pan_start_on_legend',
              'event' : 'panstart',
              'target' : '(\\s+|^)v-legend-item(\\s+|$)'
            },
            'pan_move_on_legend' : {
              'key' : 'pan_move_on_legend',
              'event' : 'panmove',
              'target' : '(\\s+|^)v-legend-item(\\s+|$)'
            },
            'pan_end_on_legend' : {
              'key' : 'pan_end_on_legend',
              'event' : 'panend',
              'target' : '(\\s+|^)v-legend-item(\\s+|$)'
            },
            'pan_end_non_legend' : {
              'key' : 'pan_end_non_legend',
              'event' : 'panend',
              'target' : '(\\s+|^)v-legend-item(\\s+|$)',
              'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE
            },
            'hover_on_axis_label':{
                'key': 'hover_on_axis_label',
                'event': 'hover',
                'target': '(\\s+|^)v-axis-item(\\s+|$)'
            },
            'hover_on_non_axis_label': {
                'key' : 'hover_on_non_axis_label',
                'event' : 'hover',
                'target': '(\\s+|^)v-axis-item(\\s+|$)',
                'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE
            },
            'hover_on_radar_axis_label':{
                'key': 'hover_on_radar_axis_label',
                'event': 'hover',
                'target': '(\\s+|^)v-radar-axis-item(\\s+|$)'
            },
            'hover_on_non_radar_axis_label': {
                'key' : 'hover_on_non_radar_axis_label',
                'event' : 'hover',
                'target': '(\\s+|^)v-radar-axis-item(\\s+|$)',
                'matchMode' : BehaviorConstants.TRIGGER.CSS.MATCHMODE.NEGATIVE
            },
            'click_on_axis_label': {
                'key': 'click_on_axis_label',
                'event': 'click',
                'target': '(\\s+|^)v-axis-item(\\s+|$)'
            },
            'mousedown_on_axis_label': {
                'key': 'mousedown_on_axis_label',
                'event': 'mousedown',
                'target': '(\\s+|^)v-axis-item(\\s+|$)'  
            },
            'mouseup_on_axis_label': {
                'key': 'mouseup_on_axis_label',
                'event': 'mouseup',
                'target': '(\\s+|^)v-axis-item(\\s+|$)'  
            },
            'mousedown_on_radar_axis_label': {
                'key': 'mousedown_on_radar_axis_label',
                'event': 'mousedown',
                'target': '(\\s+|^)v-radar-axis-item(\\s+|$)'  
            },
            'mouseup_on_radar_axis_label': {
                'key': 'mouseup_on_radar_axis_label',
                'event': 'mouseup',
                'target': '(\\s+|^)v-radar-axis-item(\\s+|$)'  
            },
	        'lasso_start_on_eventLayer': {
                'key': 'lasso_start_on_eventLayer',
                'event': 'lassostart',
                'target': eventLayerPattern //anywhere inside root can trigger lasso start
            },
            'lasso_move_on_eventLayer': {
                'key': 'lasso_move_on_eventLayer',
                'event': 'lassomove',
                'target': eventLayerPattern //anywhere inside root can trigger lasso move
            },
            'lasso_end_on_eventLayer': {
                'key': 'lasso_end_on_eventLayer',
                'event': 'lassoend',
                'target': eventLayerPattern //anywhere inside root can trigger lasso end
            },
	         'pan_start_on_eventLayer': {
                'key': 'pan_start_on_eventLayer',
                'event': 'panstart',
                'target': eventLayerPattern //anywhere inside root can trigger lasso start
            },
            'pan_move_on_eventLayer': {
                'key': 'pan_move_on_eventLayer',
                'event': 'panmove',
                'target': eventLayerPattern //anywhere inside root can trigger lasso move
            },
            'pan_end_on_eventLayer': {
                'key': 'pan_end_on_eventLayer',
                'event': 'panend',
                'target': eventLayerPattern //anywhere inside root can trigger lasso end
            },
            'pinch_start_on_eventLayer': {
              'key': 'pinch_start_on_eventLayer',
              'event': 'pinchstart',
              'target': eventLayerPattern //anywhere inside root can trigger lasso start
          },
          'pinch_move_on_eventLayer': {
              'key': 'pinch_move_on_eventLayer',
              'event': 'pinchmove',
              'target': eventLayerPattern //anywhere inside root can trigger lasso move
          },
          'pinch_end_on_eventLayer': {
              'key': 'pinch_end_on_eventLayer',
              'event': 'pinchend',
              'target': eventLayerPattern //anywhere inside root can trigger lasso end
          },
          'contextmenu_on_plot' : {
              'key' : 'contextmenu_on_plot',
              'event': 'contextmenu',
              'target': '(\\s+|^)(v-bound|v-datalines|v-dataline-group|v-areasbg|v-geo-container)(\\s+|$)'
          },
          'contextmenu_on_legend_area': {
                'key': 'contextmenu_on_legend_area',
                'event': 'contextmenu',
                'target': '(\\s+|^)v-m-legends(\\s+|$)'
          },
          'contextmenu_on_title': {
                'key': 'contextmenu_on_title',
                'event': 'contextmenu',
                'target': '(\\s+|^)v-m-title(\\s+|$)'
          },
          'contextmenu_on_axis_label' : {
                'key': 'contextmenu_on_axis_label',
                'event': 'contextmenu',
                'target': '(\\s+|^)v-axis-item(\\s+|$)'
          },
          'contextmenu_on_axis': {
                'key': 'contextmenu_on_axis',
                'event': 'contextmenu',
                'target': '(\\s+|^)(v-m-xAxis|v-m-xAxis2|v-m-yAxis|v-m-yAxis2|v-m-zAxis|v-valueaxis)(\\s+|$)'
          },
          'contextmenu_on_datapoint' : {
                'key' : 'contextmenu_on_datapoint',
                'event' : 'contextmenu',
                'target': dataPointPattern
          },
          'contextmenu_on_chartarea' : {
                'key' : 'contextmenu_on_chartarea',
                'event' : 'contextmenu',
                'target': '(\\s+|^)(v-backgroundutil|v-subtitle)(\\s+|$)',
          }
        };
        
        ///////////////////API Trigger////////////////////////////
        triggers[BehaviorConstants.TRIGGER.KEY.API.GET_SELECTION] = {
            'key': BehaviorConstants.TRIGGER.KEY.API.GET_SELECTION,
            //Jimmy/10/30/2013 though we don't have an API named getSelection, instead we have an 'selection'
            //API with different parameters means get or set, here we want to specify the directly purpose of
            //the API, it's not the real viz instance API but more straight forward.
            //In API level, we will split viz instance API to get or set internal calling, the triggle handler(s)
            //register under this trigger will be called with parameters of those internal calling.
            'api': 'getSelection',
            'type': BehaviorManager.API_TRIGGER
        },
        triggers[BehaviorConstants.TRIGGER.KEY.API.SET_SELECTION] = {
            'key': BehaviorConstants.TRIGGER.KEY.API.SET_SELECTION,
            'api': 'setSelection',
            'type': BehaviorManager.API_TRIGGER
        };
        
        if(props['triggers']){
            props['triggers'].forEach(function(itr, idx){
                //extend or new
                if(itr.event === null){
                    //delete this trigger
                    delete triggers[itr.key];
                }else{
//                    if(triggers[itr.key]){
//                        ObjectUtils.extend(true, triggers[itr.key], itr);
//                    }else{
//                        triggers[itr.key] = itr;    
//                    }    
                    //20140106_JohnWen: replace instead of merge because it fits all cases until now.
                    triggers[itr.key] = itr; 
                }
            });
        }
        
        this._clickLikeTriggers.push(triggers['click_on_datapoint'], triggers['click_on_legend'], 
                triggers['click_on_axis_label'], triggers['mouseup_on_legend'], triggers['mouseup_on_axis_label']);
        
        this._behaviorManager.removeBehavior('selectionBehavior');
        
        this._behaviorManager.registerNewBehavior({
            'name': 'selectionBehavior',
            'rootNode': this._rootNode,
            'triggers': triggers,
            'logic': this._selb_logic.bind(this)
        });
        
        this._behaviorManager.setProperties({
          'enablePan' : this._selb_props.pan.enable
        });
        
        //get operation targets
        //Jimmy/9/11/2013, it's not necessary if we compose behavior in manifest
        //in that case, we can get target in manifest directly
        var m = this._selb_m;
        var allModules = this._selb_plots;
        for ( var key in m ) {
            if ( m.hasOwnProperty(key)) {
              var flattened = flattenModules({
                  'rootKey': key,
                  'rootNode': m[key]});
              for(var fkey in flattened){
                  if(flattened.hasOwnProperty(fkey)){
                      allModules[fkey] = flattened[fkey];
                  }
              }
            }
        }
        
        this.registerDecorations();
        this.registerTriggerHandlers();      
        //hide tooltip for resizing case
        this.hideDetail('actionMode');      
    };
    
    Interaction.prototype.registerTriggerHandlers = function(){
        Interaction.superclass.registerTriggerHandlers.apply(this, arguments);
        //clear all triggerHandlers
        for(var th in this._triggerHandlers){
            if(this._triggerHandlers.hasOwnProperty(th)){
                delete(this._triggerHandlers[th]);
            }
        }
        //user can provide own trigger handlers to override ours or for its own trigger
        //default
        this._triggerHandlers['click_on_datapoint'] = [];
        this._triggerHandlers['click_on_datapoint'].push(this._selb_clickOnDataPointHandler.bind(this));
        this._triggerHandlers['click_on_non_datapoint'] = [];
        this._triggerHandlers['click_on_non_datapoint'].push(this._selb_clickOnNonDataPointHandler.bind(this));
        this._triggerHandlers['hover_on_datapoint'] = [];
        this._triggerHandlers['hover_on_datapoint'].push(this._selb_hoverOnDataPointHandler.bind(this));
        this._triggerHandlers['hover_on_non_datapoint'] = [];
        this._triggerHandlers['hover_on_non_datapoint'].push(this._selb_hoverOnNonDataPointHandler.bind(this));
        this._triggerHandlers['hover_on_legend'] = [];
        this._triggerHandlers['hover_on_legend'].push(this._selb_hoverOnLegendHandler.bind(this));
        this._triggerHandlers['hover_on_non_legend'] = [];
        this._triggerHandlers['hover_on_non_legend'].push(this._selb_cleanLegendHandler.bind(this));
        this._triggerHandlers['click_on_legend'] = [];
        this._triggerHandlers['click_on_legend'].push(this._selb_clickOnLegendHandler.bind(this));
        this._triggerHandlers['mousedown_on_legend'] = [];
        this._triggerHandlers['mousedown_on_legend'].push(this._selb_mouseDownOnLegendHandler.bind(this));
        this._triggerHandlers['mousedown_on_legend_overflow'] = [];
        this._triggerHandlers['mousedown_on_legend_overflow'].push(this._selb_mouseDownOnLegendOverflowHandler.bind(this));
        this._triggerHandlers['mouseup_on_legend'] = [];
        this._triggerHandlers['mouseup_on_legend'].push(this._selb_mouseUpOnLegendHandler.bind(this));
        this._triggerHandlers['mouseup_on_non_legend'] = [];
        this._triggerHandlers['mouseup_on_non_legend'].push(this._selb_cleanLegendHandler.bind(this));
        this._triggerHandlers['pan_start_on_legend'] = [];
        this._triggerHandlers['pan_start_on_legend'].push(this._selb_panStartOnLegendHandler.bind(this));
        this._triggerHandlers['pan_move_on_legend'] = [];
        this._triggerHandlers['pan_move_on_legend'].push(this._selb_panMoveOnLegendHandler.bind(this));
        this._triggerHandlers['pan_end_on_legend'] = [];
        this._triggerHandlers['pan_end_on_legend'].push(this._selb_panEndOnLegendHandler.bind(this));
        this._triggerHandlers['pan_end_non_legend'] = [];
        this._triggerHandlers['pan_end_non_legend'].push(this._selb_panEndOnLegendHandler.bind(this));
        this._triggerHandlers['hover_on_axis_label'] = [];
        this._triggerHandlers['hover_on_axis_label'].push(this._selb_hoverOnAxisLabelHandler.bind(this));
        this._triggerHandlers['hover_on_non_axis_label'] = [];
        this._triggerHandlers['hover_on_non_axis_label'].push(this._selb_cleanAxisLabelHandler.bind(this));
        this._triggerHandlers['click_on_axis_label'] = [];
        this._triggerHandlers['click_on_axis_label'].push(this._selb_clickOnAxisLabelHandler.bind(this));
        this._triggerHandlers['mousedown_on_axis_label'] = [];
        this._triggerHandlers['mousedown_on_axis_label'].push(this._selb_mouseDownAxisLabelHandler.bind(this));
        this._triggerHandlers['mouseup_on_axis_label'] = [];
        this._triggerHandlers['mouseup_on_axis_label'].push(this._selb_mouseUpAxisLabelHandler.bind(this));
		this._triggerHandlers['lasso_start_on_eventLayer'] = [];
        this._triggerHandlers['lasso_start_on_eventLayer'].push(this._selb_lassoStartOnEventLayer.bind(this));
        this._triggerHandlers['lasso_move_on_eventLayer'] = [];
        this._triggerHandlers['lasso_move_on_eventLayer'].push(this._selb_lassoMoveOnEventLayer.bind(this));
        this._triggerHandlers['lasso_end_on_eventLayer'] = [];
        this._triggerHandlers['lasso_end_on_eventLayer'].push(this._selb_lassoEndOnEventLayer.bind(this));
		this._triggerHandlers['pan_start_on_eventLayer'] = [];
        this._triggerHandlers['pan_start_on_eventLayer'].push(this._selb_panStartOnEventLayer.bind(this));
        this._triggerHandlers['pan_move_on_eventLayer'] = [];
        this._triggerHandlers['pan_move_on_eventLayer'].push(this._selb_panMoveOnEventLayer.bind(this));
        this._triggerHandlers['pan_end_on_eventLayer'] = [];
        this._triggerHandlers['pan_end_on_eventLayer'].push(this._selb_panEndOnEventLayer.bind(this));
        
        this._triggerHandlers['hover_on_radar_axis_label'] = [];
        this._triggerHandlers['hover_on_radar_axis_label'].push(this._selb_hoverOnRadarAxisLabelHandler.bind(this));
        this._triggerHandlers['hover_on_non_radar_axis_label'] = [];
        this._triggerHandlers['hover_on_non_radar_axis_label'].push(this._selb_cleanRadarAxisLabelHandler.bind(this));
        this._triggerHandlers['mousedown_on_radar_axis_label'] = [];
        this._triggerHandlers['mousedown_on_radar_axis_label'].push(this._selb_mouseDownRadarAxisLabelHandler.bind(this));
        this._triggerHandlers['mouseup_on_radar_axis_label'] = [];
        this._triggerHandlers['mouseup_on_radar_axis_label'].push(this._selb_mouseUpRadarAxisLabelHandler.bind(this));
        
        ////////////////////////API TRIGGER/////////////////////////
        this._triggerHandlers[BehaviorConstants.TRIGGER.KEY.API.SET_SELECTION] = [];
        this._triggerHandlers[BehaviorConstants.TRIGGER.KEY.API.SET_SELECTION].push(this._selb_set_selection_api.bind(this));
        this._triggerHandlers[BehaviorConstants.TRIGGER.KEY.API.GET_SELECTION] = [];
        this._triggerHandlers[BehaviorConstants.TRIGGER.KEY.API.GET_SELECTION].push(this._selb_get_selection_api.bind(this));
        
        this._triggerHandlers['contextmenu_on_datapoint'] = [];
        this._triggerHandlers['contextmenu_on_datapoint'].push(this._selb_mouseUpOnDataPoint.bind(this));
        this._triggerHandlers['contextmenu_on_plot'] = [];
        this._triggerHandlers['contextmenu_on_plot'].push(this._selb_mouseUpOnPlot.bind(this));
        this._triggerHandlers['contextmenu_on_legend_area'] = [];
        this._triggerHandlers['contextmenu_on_legend_area'].push(this._selb_mouseUpOnLegendArea.bind(this));
        this._triggerHandlers['contextmenu_on_title'] = [];
        this._triggerHandlers['contextmenu_on_title'].push(this._selb_mouseUpOnTitle.bind(this));
        this._triggerHandlers['contextmenu_on_axis_label'] = [];
        this._triggerHandlers['contextmenu_on_axis_label'].push(this._selb_contextMenuOnAxisLabel.bind(this));
        this._triggerHandlers['contextmenu_on_axis'] = [];
        this._triggerHandlers['contextmenu_on_axis'].push(this._selb_mouseUpOnAxis.bind(this));
        this._triggerHandlers['contextmenu_on_chartarea'] = [];
        this._triggerHandlers['contextmenu_on_chartarea'].push(this._selb_contextMenuOnChartarea.bind(this));
        
        
        var props = this._selb_props;
        //parse properties
        //[
        //    triggerKey : 'xxxx',
        //    fn : fn  
        //]
        if(props['handlers']){
           props['handlers'].forEach(function(handler, idx){
               //TODO Jimmy/2013/9/13 we can enhance here to allow insert handlers
               //or stop handlers chain etc.
               //or we allow only one handler for one trigger?
//               if(!this._triggerHandlers[handler.triggerKey]){
//                   this._triggerHandlers[handler.triggerKey] = [];
//               }
//               this._triggerHandlers[handler.triggerKey].push(handler.fn.bind(this));

               //20140106_JohnWen: replace instead of merge because it fits all cases until now.
               this._triggerHandlers[handler.triggerKey] = [handler.fn.bind(this)];
           }.bind(this));     
        }
        
        
        //interpret all handlers to apply options defined in selectability
        var selectability = this._selb_props.selectability;
        var mode = this._selb_selectionMode;
        var that = this;
        function canInvoke(type, event) {
            var notNone = mode !== Constants.SELECTION_MODE.NONE;
            var notSingle = mode !== Constants.SELECTION_MODE.SINGLE;
            switch(type) {
                case 'click_on_datapoint':
                    return selectability.plotStdSelection && notNone;
                case 'lasso_start_on_eventLayer':
                case 'lasso_move_on_eventLayer':
                case 'lasso_end_on_eventLayer':{
                    if((lassoIsPan.call(that, event) || (selectability.plotLassoSelection && notNone && notSingle)) === false){
                        that._lassoStartPoint = false;
                    }                        
                    return lassoIsPan.call(that, event) || (selectability.plotLassoSelection && notNone && notSingle);
                }
                case 'click_on_axis_label':
                case 'hover_on_axis_label':
                case 'mousedown_on_axis_label':
                case 'mouseup_on_axis_label':
                    return selectability.axisLabelSelection && notNone && notSingle;
                case 'mousedown_on_legend':
                case 'mouseup_on_legend':
                case 'click_on_legend':
                case 'hover_on_legend':
                    return selectability.legendSelection && notNone && notSingle;
            }
            return true;
        }
        for (var type in this._triggerHandlers) {
            if (this._triggerHandlers.hasOwnProperty(type)) {
                var handlers = this._triggerHandlers[type];
                for (var i = -1; ++i < handlers.length; ) {
                    handlers[i] = (function(type, origHandler) {
                        return function() {
                            var event = arguments[0];
                            //Handle the cases of lasso/pan/rotate broken.
                            //According to email from PO & UX: Discussed with Catherine and we chose the behavior as below:
                            //For 3D chart, if user starts lasso and releases ctrl during lasso, we still keep the lasso(as ctrl not released), the rotate won't start.
                            //If user starts rotate / pan and presses ctrl during rotate / pan, we keep the rotate / pan(as ctrl not pressed), the lasso won't start.
                            var tgtType;
                            switch(type) {
                                case 'lasso_start_on_eventLayer':
                                    if (lassoIsPan.call(this, event)) {
                                        tgtType = 'pan_start_on_eventLayer';
                                    }
                                    break;
                                case 'lasso_move_on_eventLayer':
                                    if (this._ongoingOperation === 'pan') {
                                        tgtType = 'pan_move_on_eventLayer';
                                        break;
                                    }
                                case 'lasso_end_on_eventLayer':
                                    if (!this._ongoingOperation) {
                                        return;
                                    }
                                    if (this._ongoingOperation === 'pan') {
                                        tgtType = 'pan_end_on_eventLayer';
                                    } else if (this._ongoingOperation !== 'lasso') {
                                        throw 'Unknown operation found: ' + this._ongoingOperation;
                                    }
                                    break;
                                case 'pan_move_on_eventLayer':
                                    if (this._ongoingOperation === 'lasso') {
                                        tgtType = 'lasso_move_on_eventLayer';
                                        break;
                                    }
                                case 'pan_end_on_eventLayer':
                                    if (!this._ongoingOperation) {
                                        return;
                                    }
                                    if (this._ongoingOperation === 'lasso') {
                                        tgtType = 'lasso_end_on_eventLayer';
                                    } else if (this._ongoingOperation !== 'pan') {
                                        throw 'Unknown operation found: ' + this._ongoingOperation;
                                    }
                                    break;
                            }
                            if (tgtType) {
                                var args = [tgtType];
                                iHelper.concatByPush(args, arguments);
                                return runHandler.apply(this, args);
                            }
                            if (!canInvoke(type, event)) {
                                return;
                            }
                            
                            //restrict lasso/pan start area to main area only
                            // if (type === 'lasso_start_on_eventLayer' || type === 'pan_start_on_eventLayer') {
                                // var bbox = iHelper.getBoundingBox( this._rootNode.select(".v-m-main > .v-bound").node() );
                                // if (!BoundingBox.contains(bbox, event.data.point)) {
                                    // return;
                                // }                            
                            // }                            
                            if(type == "hover_on_non_radar_axis_label" && selectability.plotLassoSelection === false)
                                this._lassoStartPoint = null;
                            switch(type) {
                                case 'lasso_start_on_eventLayer':
                                    this._ongoingOperation = 'lasso';
                                    break;
                                case 'pan_start_on_eventLayer':
                                    this._ongoingOperation = 'pan';
                                    break;
                                case 'pinch_start_on_eventLayer':
                                     this._ongoingOperation = 'pinch';
                                     break;
                                case 'lasso_end_on_eventLayer':
                                case 'pan_end_on_eventLayer':
                                case 'pinch_end_on_eventLayer':
                                    this._ongoingOperation = null;
                                    break;
                            }                            
                            return origHandler.apply(undefined, arguments);
                        }.bind(this);
                    }.bind(this))(type, handlers[i]);
                }
            }
        }        
    };
    
    //all decorations that can be used in any behavior's logic
    //it should be defined in manifest in the future   
    Interaction.prototype.registerDecorations = function(){
        Interaction.superclass.registerDecorations.apply(this, arguments);
         //clear all triggerHandlers
        for(var th in this._decorations){
            if(this._decorations.hasOwnProperty(th)){
                delete(this._decorations[th]);
            }
        }
        
        var plots = this._selb_plots;
        //return all named decorations, logic can decide when to call
        //note this definition should be in manifest in the future
        //for now, we can't specify which specific dtarget(s) should
        //run the specified decoration. so we hard code it.
        //it should be able to define in manifest, see wiki page for behavior definition
        
        //add decoration with same name will override existing decoration
        this._decorations['clearPlot'] = [];
        if(plots['main.plot']){
            var mainPlots = this.getMainPlots(plots).filter(function(plot){ //filter out those "faked" plots
                    return plot.parent && plot.parent();
                }), 
                mainPlot;
            this._mainPlots = mainPlots;
            
            this._decorations['clearPlot'] = [];
//            this._decorations['highlightByHover'] = [];
//            this._decorations['highlightBySelecting'] = [];
//            this._decorations['unhighlight'] = [];
            this._decorations['panStart'] = [];
            this._decorations['panMove'] = [];
            this._decorations['panEnd'] = [];    
            
            var highlightByHovers = {plots: [], methods: []},
                highlightBySelectings = {plots: [], methods: []},
                unhighlights = {plots: [], methods: []};
            function pushPlotNMethod(collection, plot, method) {
                collection.plots.push(plot);
                collection.methods.push(method);
            }
            
            function wrapHighlightFn(highlightFn) {
                return [
                    function(target, selected) {
                            highlightFn(target, true, selected);
                    },
                    function(target) {
                            highlightFn(target, false, true);
                    }
                ];
            }
            for (var i = -1; ++i < mainPlots.length; ) {
                mainPlot = mainPlots[i];
                if(mainPlot['clear']){
                    this._decorations['clearPlot'].push( mainPlot['clear'].bind(mainPlot) );
                }
                if(mainPlot['highlight']){
                    /*
                     * highlight function is provided by each plot
                     * @param dataPoints data points to be highlighted
                     * @param hover whether or not to show hovering effect, true - hovering effect, false - selecting effect
                     * @param selected whether or not the data points in dataPoints param are being selected
                     */
                    var highlightFn = mainPlot['highlight'].bind(mainPlot);
                    var fns = wrapHighlightFn(highlightFn);
//                    this._decorations['highlightByHover'].push( fns[0] );
//                    this._decorations['highlightBySelecting'].push( fns[1] );
                    pushPlotNMethod(highlightByHovers, mainPlot, fns[0]);
                    pushPlotNMethod(highlightBySelectings, mainPlot, fns[1]);
                }
                if(mainPlot['unhighlight']){
                    /*
                     * unhighlight function is provided by each plot
                     * @param dataPoints data points to be unhighlighted
                     * @param selected whether or not the data points in dataPoints param are being selected
                     * @param normalMode whether or not no datapoint is being selected, 
                     *          true - no data point is being selected on plot area,
                     *          false - at lease one data point is being selected on plot area
                     */
//                    this._decorations['unhighlight'].push( mainPlot['unhighlight'].bind(mainPlot) );
                    pushPlotNMethod(unhighlights, mainPlot, mainPlot['unhighlight'].bind(mainPlot));
                }      
                if(mainPlot['panStart']) {
                    /*
                     * panStart function is provided by each plot, {x: .., y: ..}
                     * @param position mouse/touch position
                     */                    
                    this._decorations['panStart'].push ( mainPlot['panStart'].bind(mainPlot) );
                }    
                if(mainPlot['panMove']) {
                    /*
                     * panMove function is provided by each plot, {x: .., y: ..}
                     * @param position mouse/touch position
                     */    
                    this._decorations['panMove'].push ( mainPlot['panMove'].bind(mainPlot) );
                }    
                if(mainPlot['panEnd']) {
                    /*
                     * panEnd function is provided by each plot, {x: .., y: ..}
                     * @param position mouse/touch position
                     */    
                    this._decorations['panEnd'].push ( mainPlot['panEnd'].bind(mainPlot) );
                }
            }

            this._decorations['highlightByHover'] = [ decorationHelper.mainPlot(highlightByHovers.plots, highlightByHovers.methods) ];
            this._decorations['highlightBySelecting'] = [ decorationHelper.mainPlot(highlightBySelectings.plots, highlightBySelectings.methods) ];      
            this._decorations['unhighlight'] = [ decorationHelper.mainPlot(unhighlights.plots, unhighlights.methods) ];             
            
        }
        
        if(plots['tooltip']){
            if(plots['tooltip']['showTooltip']){
                this._decorations['showDetail'] = [plots['tooltip']['showTooltip'].bind(plots['tooltip'])];
            }
            if (plots['tooltip']['hideTooltip']) {
                this._decorations['hideDetail'] = [plots['tooltip']['hideTooltip'].bind(plots['tooltip'])];
            }
        }

        if(plots['legends.legend']){
            if(plots['legends.legend']['highlight']){
                this._decorations['highlightLegendItem'] = [ plots['legends.legend']['highlight'].bind(plots['legends.legend']) ];
            }
            if(plots['legends.legend']['unhighlight']){
                this._decorations['unhighlightLegendItem'] = [ plots['legends.legend']['unhighlight'].bind(plots['legends.legend']) ];
            }
            if(plots['legends.legend']['selected']){
                this._decorations['selectedLegendItem'] = [ plots['legends.legend']['selected'].bind(plots['legends.legend']) ];
            }
            if(plots['legends.legend']['panStart']) {                  
                this._decorations['panStartOnLegend'] = [ plots['legends.legend']['panStart'].bind(plots) ];
            }    
            if(plots['legends.legend']['panMove']) {
                this._decorations['panMoveOnLegend'] = [ plots['legends.legend']['panMove'].bind(plots) ];
            }    
            if(plots['legends.legend']['panEnd']) {
                this._decorations['panEndOnLegend'] = [ plots['legends.legend']['panEnd'].bind(plots) ];
            }
        }
        
        //register decorations for every axis
        var axes = this.getAxes(plots);
        if (axes.length > 0) {
            this._decorations['unhoverOnAxisLabel'] = [];
            var hoverOnAxisLabels = [],
                focusAxisLabels = [],
                defocusAxisLabels = [];
            for (var i = -1; ++i < axes.length; ) {
                var axis = axes[i];
                if (!axis.parent || !axis.parent()) { //filter out faked axes
                    continue;
                }
                if(axis['mouseover']){
                    hoverOnAxisLabels.push(axis);
                }
                if(axis['cleanLabelAreas']){
                    this._decorations['unhoverOnAxisLabel'].push( axis['cleanLabelAreas'/*'unhoverOn'*/].bind(axis) );
                }
                if(axis['mousedown']){
                    focusAxisLabels.push(axis);
                }
                if(axis['mouseup']){
                    defocusAxisLabels.push(axis);
                }
            }
            this._decorations['hoverOnAxisLabel'] = [ decorationHelper.axisLabel(hoverOnAxisLabels, 'mouseover') ];
            this._decorations['focusAxisLabel'] = [ decorationHelper.axisLabel(focusAxisLabels, 'mousedown') ];
            this._decorations['defocusAxisLabel'] = [ decorationHelper.axisLabel(defocusAxisLabels, 'mouseup') ];
        }
    
        if(this._lassoDecoration){
            this._decorations['lassostart'] = [ this._lassoDecoration['start'].bind(this._lassoDecoration) ];
            this._decorations['lassomove'] = [ this._lassoDecoration['moveTo'].bind(this._lassoDecoration) ];
            this._decorations['lassoend'] = [ this._lassoDecoration['end'].bind(this._lassoDecoration) ];
        }
 
        //read external decorations
        var props = this._selb_props;
        if(props['decorations']){
           props['decorations'].forEach(function(decoration, idx){
//               if(!this._decorations[decoration.name]){
//                   this._decorations[decoration.name] = [];
//               }
//               this._decorations[decoration.name].push(decoration.fn);

               //20140106_JohnWen: replace instead of merge because it fits all cases until now.
               this._decorations[decoration.name] = [decoration.fn];
           }.bind(this));
        }
    };
    
    //create decorations for different decoration types
    var decorationHelper = {};
    decorationHelper.axisLabel = function(axes, methodName) {
        var axisNodes = axes.map(function(axis){
            var parent = axis.parent();
            return  parent ? parent.node() : undefined;
        });
        return function(eventTarget) {
            var axisNode = eventTarget;
            while ( !iHelper.hasClass(axisNode, "v-axis") && (axisNode = axisNode.parentNode) );
            if (axisNode && (axisNode = axisNode.parentNode)) {
                var idx = axisNodes.indexOf(axisNode);
                if (idx >= 0) {
                    var axis = axes[idx];
                    axis[methodName].apply(axis, arguments);
                }
            }
        };
    };
    
    decorationHelper.mainPlot = function(mainPlots, methods) {
        var func;
        switch (mainPlots.length) {
            case 0: //never happen 
                func = function(){};
                break;
            case 1: //single chart
                func = methods[0];
                break;
            default: //multiple or trellis chart
                func = function(eventTargets) {
                    var params = Array.prototype.slice.call(arguments, 1);
                    if (!(eventTargets instanceof Array)) {
                        eventTargets = [eventTargets];
                    }
                    var targetsPerPlot = [], target, plotModule, plotIdx;
                    for (var i = -1; ++i < eventTargets.length; ) {
                        target = eventTargets[i];
                        plotModule = iHelper.findPlotModuleByNode(mainPlots, target);
                        plotIdx = mainPlots.indexOf(plotModule);
                        if (plotIdx < 0) {
                            continue;
                        }
                        targetsPerPlot[plotIdx] = targetsPerPlot[plotIdx] || [];
                        targetsPerPlot[plotIdx].push(target);
                    }
                    for (var i = -1; ++i < targetsPerPlot.length; ) {
                        if (targetsPerPlot[i]) {
                            methods[i].apply(mainPlots[i], [targetsPerPlot[i]].concat(params));
                        }
                    }
                };
                break;
        }
        return func;
    };
    
    ///////////Overrideable Methods/////////////
    //if your chart has specific layout and can't be handled by this Interaction,
    //you can subclass this Interaction and override the following methods
    //an example is Trellis charts, you can refer to TrellisInteraction class
    Interaction.prototype.getAxes = function(plots) { //get axes
        //collect all axes: x, x2, y1, y2, axes of all small charts in multiple chart
        var axisNames = ['xAxis', 'xAxis2', 'yAxis', 'yAxis2', 'zAxis'];
        var axes = [];
        axisNames.forEach(function(name, idx) {
            name = 'main.' + name;
            if (plots[name]) {
                axes.push(plots[name]);
            }
        });
        if (plots['main.plot'] instanceof Array) {
            for (var i = -1; ++i < plots['main.plot'].length; ) {
                axisNames.forEach(function(name, idx) {
                    var axis = plots['main.plot[' + i + '].' + name];
                    if (axis) {
                        axes.push(axis);
                    }
                });                
            }
        }
        return axes;
    };
    
    Interaction.prototype.getMainPlots = function(plots) { //get plot areas
        var mainPlots = [];
        if (plots['main.plot'] instanceof Array) {
            for (var i = -1; ++i < plots['main.plot'].length; ) {
                mainPlots.push( plots['main.plot[' + i + "].plot"] );
            }
        } else {
            mainPlots.push(plots['main.plot']);
        }    
        return mainPlots;
    };
    
   
    ///////////Behavior Definitions/////////////
    //logic will execute all trigger handlers registered for this trigger and
    //return the output of the last trigger handler as the output of this logic
    Interaction.prototype._selb_logic = function(data, trigger){
        var triggerKey = trigger.key;
        var ret;
        if(this._triggerHandlers[triggerKey]){
            for(var i = 0, len = this._triggerHandlers[triggerKey].length; i < len; i++){
                if(trigger.type === BehaviorManager.DOM_TRIGGER){
                    this._triggerHandlers[triggerKey][i](data, trigger, this._selb_plots);
                }else if(trigger.type === BehaviorManager.API_TRIGGER){
                    //data is arguments
                    [].push.call(data, trigger);
                    ret = this._triggerHandlers[triggerKey][i].apply(this, data);
                }
                
            }
        }
        return ret;
    };
    
    //////////////API TRIGGER HANDLERS/////////////////
    Interaction.prototype._selb_set_selection_api = function(items, options, trigger){
        //Jimmy/11/4/2013, according to PO, actually we want to enable client to set an instant selection mode here
        //so we need add a new variable like selectionMode.
        //here the legacy clearFlag is equal to exclusive selectionMode. and (items is empty and clearFlag is true)
        //actually means clear all selections
        //Zimo/11/15/2013, in new selection API, old argument 'clearSelection' is removed
        //new argument 'selectionMode' is added for change selectionMode instantly and restore selectionMode after API selection executed
        //Zimo/12/11/2013, for backward-compatibility, parameter 'clearSelection' cannot be totally replaced by parameter 'selectionMode'
        //if 'selectionMode' in chart option is 'none', 'clearSelection' will always not work
        var savedSelectionMode = this._selb_selectionMode;
        
        var clearSelectionFlag,selectionMode;
        // support clearSelection for backward-compacibility
        if (TypeUtils.isPlainObject(options)) {
            clearSelectionFlag = options.clearSelection;
            selectionMode = options.selectionMode;
        }
        if (selectionMode === undefined && clearSelectionFlag !== undefined && savedSelectionMode !== Constants.SELECTION_MODE.NONE) {
            if (clearSelectionFlag === true) {
                selectionMode = 'exclusive';
            } else if (clearSelectionFlag === false) {
                selectionMode = 'inclusive';
            }
        }
        if (selectionMode === 'inclusive' || selectionMode === 'exclusive') {
            this._selb_selectionMode = selectionMode.toUpperCase();
        }
        var isSuccessful = false;
        // targets are the datapoints would be selected
        var targets = [];
        
        if (TypeUtils.isArray(items) && items.length === 0) {
            this.processTargetsSelection(targets, trigger);
            isSuccessful = true;
        } else if (TypeUtils.isEmptyObject(items)) {
            this.processTargetsSelection(targets, trigger);
            isSuccessful = true;
        } else if (this._selb_selectionMode === Constants.SELECTION_MODE.NONE) {
            isSuccessful = false;
        } else {
            
            var allDatapoints = this._rootNode.selectAll('.v-datapoint');
            // targets are the datapoints would be selected
            var targets = [];
            try {
                // compare ctx and pick out responding datapoints to make UI realization
                for(var i = 0, len = allDatapoints[0].length; i < len; i++){
                    var found = false;
                    var ctx = d3.select(allDatapoints[0][i]).data()[0].ctx;
                    if (!ctx && TypeUtils.isArray(d3.select(allDatapoints[0][i]).data()[0])) {// handle boxplot chart
                        // boxplot has a different datapoints structure from other charts
                        // so a special handle is needed
                        var points = d3.select(allDatapoints[0][i]).data()[0];
                        for (var m = 0; m < points.length; m++) {
                            found = runtimeSelectionDataHandler.matchSelection(points[m].ctx, items, this._selb_ctx.rawData);
                            if (found) {
                                break;
                            }
                        }
                    } else {
                        found = runtimeSelectionDataHandler.matchSelection(ctx, items, this._selb_ctx.rawData);
                    }
                    if (found) {
                        targets.push(allDatapoints[0][i]);
                    }
                }
                if (targets.length > 0) {
                    isSuccessful = true;
                }
            } catch (e) {
                isSuccessful = false;
            }
            
            if (this._selb_selectionMode === Constants.SELECTION_MODE.SINGLE && targets.length > 1) {
                isSuccessful = false;
                //restore selectionMode
                this._selb_selectionMode = savedSelectionMode;
                FunctionUtils.error("Invalid selection in current selectionMode.");
            }
            if (isSuccessful) {
                this.processTargetsSelection(targets, trigger);
            }
            
        }
        //restore selectionMode
        this._selb_selectionMode = savedSelectionMode;
        return isSuccessful;
    };
    
    Interaction.prototype._selb_get_selection_api = function(withDataCtx, withInfo, trigger){
        var reArray = runtimeSelectionDataHandler.getSelectedObjArray(this._selb_ctx.rawData, this._lastSelected,
                withDataCtx, withInfo);
        return reArray;
    };
    //////////////End of API TRIGGER HANDLERS/////////////////
    /*
     * 20131230_JohnWen: this method is used to call pan series handlers from lasso series handlers
     * because mouse monitor can't distinguish pan from lasso.
     * NOTE: this is a temporary solution, please remove it once logic event layer is introduced. 
     */
    function runHandler() {
        var trigger, triggerName, paras;
        if(arguments.length > 0){
            triggerName = arguments[0];
            [].splice.call(arguments, 0, 1);
            paras = arguments;
        }else{
            return;
        }
        trigger = this._triggerHandlers[triggerName];
        if(trigger){
            trigger.forEach(function(fn, idx){
                fn.apply(this, paras); 
            });    
        }
    }
    
    function lassoIsPan(event) {
        return !UADetector.isMobile() && !event.data.ctrlKey && this._selb_lassoWithCtrlKey;
    }
    
    Interaction.prototype._selb_lassoStartOnEventLayer = function(event){
        //lasso can start only in bound of v-m-main
        //TODO: v-bound of trellis charts returns incorrect box, it should be fixed
        //so the following code can work. Currently lasso can't work on trellis charts.
        var bbox = iHelper.getBoundingBox( this._rootNode.select(".v-eventLayer").node() );
        if(event.data.target.getAttribute('class') === 'v-m-scrollBar'){
          this._lassoStartPoint = false;
          return;
        }
        if (!BoundingBox.contains(bbox, event.data.point)) {
            this.runDecoration('unhighlightLegendItem', event.data.currentTarget);
            this._lassoStartPoint = false;
            return;
        }
        //start lasso
        var target = event.data.currentTarget;
        var point = event.data.point;
        this._lassoStartPoint = point;
        this.runDecoration('lassostart', target, point);
        this._selb_dispatch.lassoStart(point);
        this.hideDetail('infoMode');
        this.hideDetail('actionMode');
    };
    
    Interaction.prototype._selb_lassoMoveOnEventLayer = function(event, trigger, plots){
        if (!this._lassoStartPoint) {
            return;
        }
        var currentTarget = event.data.currentTarget;
        var point = event.data.point;
        this.runDecoration('lassomove', currentTarget, point);
        this.runDecoration('unhoverOnAxisLabel', currentTarget, plots);
        this.runDecoration('unhighlightLegendItem', currentTarget);
    };
    
    Interaction.prototype._selb_lassoEndOnEventLayer = function(event, trigger){
        if (!this._lassoStartPoint) {
            this._lassoStartPoint = null;
            return;
        }
        var lassoTarget = event.data.currentTarget;
        var point = event.data.point;
        this._lassoEndPoint = point;
        var includedTargets = findLassoCoveredDatapoints.call(this);
        this.processTargetsSelection(includedTargets, trigger, event.data.ctrlKey);
        this.runDecoration('lassoend', lassoTarget, point);
        this._selb_dispatch.lassoEnd(point);
        if (this._lastSelected.length > 0 && includedTargets.length > 0) {
            this._lastEventPoint = event.data.point;
          
            if (UADetector.isMobile()) {
                if (this._lastSelected.length === 1) {
                    showDetail.call(this, this._lastSelected[0], "actionMode", event.data.point);
                } else {
                    showDetail.call(this, undefined, "actionMode", event.data.point);
                }
                this._lassoStartPoint = null;
                return;
            }
          
            var dpTarget = event.data.target;
            while(dpTarget) {
                if (dpTarget.getAttribute) {
                    if ( iHelper.hasClass(dpTarget, "v-datapoint") ) {
                        this._hoveringDataPoint = dpTarget;
                        break;
                    }
                    dpTarget = dpTarget.parentNode;
                } else {
                    dpTarget = undefined;
                }
            }
            if (!dpTarget && this._lastSelected.length === 1) {
                //if user lasso only one data point and ends on non data point area
                //then show data of the data point
                dpTarget = this._lastSelected[0];
            }
            showDetail.call(this, dpTarget, "actionMode", event.data.point);
        } else {
            this.hideDetail('actionMode');
        }
        
        this._lassoStartPoint = null;
    };
    
    Interaction.prototype._selb_panStartOnEventLayer = function(event){
      this.runDecoration('unhoverOnAxisLabel');
      if(this._selb_props.pan.enable){
        //pan can start only in bound of v-m-main
        var bbox = iHelper.getBoundingBox( this._rootNode.select(".v-m-main > .v-bound").node() );
        if (!BoundingBox.contains(bbox, event.data.point)) {
          this._ongoingOperation = null;
          return;
        }
        this.runDecoration('panStart', event.data.point);
        this.hideDetail('infoMode');
        this.hideDetail('actionMode');
      }
    };
    
    Interaction.prototype._selb_panMoveOnEventLayer = function(event){
      if(this._selb_props.pan.enable){
        this.runDecoration('panMove', event.data.point);
      }
    };
    
    Interaction.prototype._selb_panEndOnEventLayer = function(event, trigger){
      if(this._selb_props.pan.enable){
        this.runDecoration('panEnd', event.data.point);
      }
    };
    
    function extractData(ds, node) {
        var d3Datum = d3.select(node).datum();
        var data = null;
        if (d3Datum && d3Datum.ctx) {
            var ctxes = d3Datum.ctx;
            var datum = ds.ctx2ArrayData(ctxes);
            datum.context = ctxes;
            datum.timeMeasure = d3Datum.timeMeasure;
            data = [datum];
        }
        return data;
    }
    

    
    function constructMainPlotBoundRects(plots) {
        var plotNode, plotBoundNode;
        var res = {
            plotModules: plots,
            dataPoints: [],//data points of all main plots
            boundaries: [],//boundary of data points of each main plot. for instance, 3 plots, each one has 100 data points, then boundaries is [99, 199, 299]
            boundRects: [] 
        };
        var dps, lastBoundary = -1;
        for (var i = -1; ++i < plots.length; ) {
            plotNode = plots[i].parent().node();
            dps = plotNode.querySelectorAll(".v-datapoint");
            for(var j = 0; j < dps.length; j++){
                res.dataPoints.push(dps[j]);
            }
            lastBoundary += dps.length;
            res.boundaries.push(lastBoundary);
            plotBoundNode = d3.select(plotNode).select(".v-bound").node();
            res.boundRects.push( plotBoundNode ? iHelper.getBoundingBox(plotBoundNode) : undefined );
        }
        return res;
    }
    
    function findLassoCoveredDatapoints(){
        var rootNode = this._rootNode;
        var lassoBBox = iHelper.getBoundingBox(this._lassoDecoration.getNode());
        var lsp = this._lassoStartPoint;
        var lep = this._lassoEndPoint;
        // find the intersection of the plot rectangle with the lasso rectangle
        var that = this;
        if(rootNode && lsp && lep){
            var res = [];
            if (!that._mainPlotBoundRects || !that._selb_props["dataPointsCacheable"]) {
                that._mainPlotBoundRects = constructMainPlotBoundRects(that._mainPlots);
            }
            var boundRects = that._mainPlotBoundRects;
            var allDatapoints = boundRects.dataPoints;
            var plotModule, plotBoundRect, dataPoint;
            var plotIdx = -1, boundary;
            var ep = iHelper.extensionPoint(that._selb_props, 'getBoundingBoxes');
            for (var q = -1; ++q < allDatapoints.length; ) {
                dataPoint = allDatapoints[q];
                if (q === 0 || q > boundary) {
                    plotIdx++;
                    plotModule = boundRects.plotModules[plotIdx];
                    plotBoundRect = boundRects.boundRects[plotIdx];
                    boundary = boundRects.boundaries[plotIdx];
                }
                var epResult = ep ? iHelper.callExtensionPoint(that._selb_props, 'getBoundingBoxes', plotModule, dataPoint) : undefined; //no need to use plot, so pass undefined
                var rects;
                if (epResult && epResult.called) {
                    rects = epResult.ret;
                } else {
                    rects = [iHelper.getBoundingBox(dataPoint)];
                }
                for (var i = -1; ++i < rects.length; ) {
                    var rect = {
                        bottom : Math.ceil(rects[i].bottom),                        
                        right : Math.ceil(rects[i].right),                        
                        x : Math.floor(rects[i].x),
                        y : Math.floor(rects[i].y),
                        width : Math.ceil(rects[i].right) - Math.floor(rects[i].x),
                        height : Math.ceil(rects[i].bottom) - Math.floor(rects[i].y),
                    };
                    //Jimmy/10/29/2013, here we don't consider pinch case
                    //where there are points out of plot area.
                    //we prefer those data points to have a special property or
                    //have visibility=false so that we can filter them out of allDatapoints.
                    if(BoundingBox.intersects(rect , lassoBBox)){
                        //20131204_John: however, currently the property is not available,
                        //so we determine if a data point is visible by checking if it's in v-bound
                        if (plotBoundRect) {
                            plotBoundRect = BoundingBox.intersection(lassoBBox, plotBoundRect);
                            if (plotBoundRect && BoundingBox.intersects(rect, plotBoundRect)) {
                              res.push(dataPoint);
                              break;
                            }
                        } else { //3D chart has no .v-bound node
                            res.push(dataPoint);
                            break;
                        }
                    }                       
                }             
            }

            return res;
        }
    };
    
    function clearSelection(){
        var lastSelected = this._lastSelected;
        var runDecoration = this.runDecoration.bind(this);
        var deselectDatas=[];
        
        runDecoration('unhighlight', lastSelected, false, true);
        runDecoration('clearPlot');
        this.hideDetail('actionMode');
        
        deselectDatas = deselectDatas.concat(lastSelected);
        lastSelected.splice(0, lastSelected.length);
        
        if(deselectDatas.length > 0){
            this._selb_fireDeselectDataEvent(deselectDatas);
        } 
    }
    
    //*this* must reference to Interaction
    function showDetail(node, mode, position) {
        var data = undefined, selectedNumber = this._lastSelected.length;
        if (node) {
            /////////inject extension point/////////
            var plotModule = iHelper.findPlotModuleByNode(this._selb_plots, node);
            var epResult = iHelper.callExtensionPoint(this._selb_props, 'convertData', this, plotModule, node);
            if (epResult.called && epResult.ret) {
                data = [epResult.ret];
            } else {
                data = extractData(this._selb_ctx.rawData, node);
            }
            //convert data to new format
            if (data && data.length) {
                var newData = [];
                if(TypeUtils.isArray(data[0].measure)){
                    [data[0].dimension, data[0].measure].forEach(function(valArr, idx) {
                        for (var element in valArr) {
                            if (valArr.hasOwnProperty(element)) {
                                newData.push({
                                    name: valArr[element].key,
                                    value: valArr[element].value,
                                    type: idx > 0 ? "measure" : "dimension"
                                });
                            }
                        }
                    });
                }
                else{
                    [data[0].dimension, data[0].measure].forEach(function(valObj, idx) {
                    for (var key in valObj) {
                        if (valObj.hasOwnProperty(key)) {
                            newData.push({
                                name: key,
                                value: valObj[key],
                                type: idx > 0 ? "measure" : "dimension"
                            });
                        }
                    }
                    });
                }                
                newData._context = data[0].context;
                newData.timeMeasure = data[0].timeMeasure;
                data = newData;
            }
        }
        var compareFunc = iHelper.extensionPoint(this._selb_props, "isEqual");
        if (compareFunc && selectedNumber) {
            selectedNumber = 1;
            for (var i = 0; ++i < this._lastSelected.length; ) {
                for (var j = -1; ++j < i; ) {
                    if (compareFunc.call(this, this._lastSelected[i], this._lastSelected[j])) {
                        break;
                    }
                }
                if (j >= i) {
                    selectedNumber++;
                }
            }
        }
        /////////inject extension point/////////   
        var containerNode = this._rootNode.node();
        while( !iHelper.hasClass(containerNode, 'v-viz') && (containerNode = containerNode.parentNode) ); //find UIComp_1 - parent of v-m-root
        var tooltipData = {
            "data": data,
            "selectedNumber":selectedNumber,
            "mode": mode,
            "position": position,
            "container": containerNode
        };
        this.runDecoration('showDetail', ObjectUtils.extend(true, {}, tooltipData) );
        this._showingDetailMode = mode;
        this._selb_fireShowTooltipEvent(tooltipData, plotModule);
    }  
    
    //*this* must reference to Interaction
    Interaction.prototype.hideDetail = function(mode) {
        if (!this._showingDetailMode || mode !== this._showingDetailMode) {
            return;
        }
        this.runDecoration('hideDetail', mode);
        this._selb_fireHideTooltipEvent();
        this._showingDetailMode = null;
    };
    
    Interaction.prototype._selb_clickOnNonDataPointHandler = function(event){
        clearSelection.call(this);
    };
    
    /*
     * TODO: this method is added temporarily to meet UI5 requirement of selection on data label
     * please remove it later
     */
    function getDataPoint4DataPointEvent(event) {
        var target = event.data.currentTarget;
        if ( iHelper.hasClass(target, 'v-datalabel') ) {
            target = d3.select(event.data.target).datum().dataShape;
        }
        return target;
    }

    
    Interaction.prototype._selb_clickOnDataPointHandler = function(event, trigger){
        var target = getDataPoint4DataPointEvent(event);
        var selectedBefore = this._dpFnIndexOf( this._lastSelected, target ) >= 0;
        this.processTargetsSelection(target, trigger, event.data.ctrlKey);
        
        if (this._dpFnIndexOf( this._lastSelected, target ) >= 0) {
            if (UADetector.isMobile() && this._lastSelected.length > 1) {
                showDetail.call(this, undefined, "actionMode", event.data.point);
            } else {
                showDetail.call(this, target, "actionMode", event.data.point);
            }
            this._lastEventPoint = event.data.point;
        } else {
            if (UADetector.isMobile() && this._dpFnIndexOf( this._lastSelected, target ) < 0) {
                if (this._lastSelected.length > 0) {
                    showDetail.call(this, undefined, "actionMode", this._lastEventPoint);
                } else {
                    this.hideDetail("actionMode");
                }
            } else {
                this.hideDetail("actionMode");
                this._hoveringDeselectedDataPoint = selectedBefore;
            }
        }
    };
    
    Interaction.prototype._selb_mouseUpOnDataPoint = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        var targets = getDataPoint4DataPointEvent(event);
        if(!Array.isArray(targets)){
           targets = [targets];
        }
        this._selb_fireContextualDataEvent(targets, 'datapoint', event);
    };
    
    Interaction.prototype._selb_mouseUpOnPlot = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        
        var target = event.data.target;
        if (iHelper.hasClass(target, 'v-areabg') || iHelper.hasClass(target, 'v-lines') || iHelper.hasClass(target, 'v-dataline') || 
            iHelper.hasClass(target.parentNode, 'v-m-plot') || iHelper.hasClass(target.parentNode, 'v-m-main')||
            iHelper.hasClass(target.parentNode, 'v-datashapesgroup') || iHelper.hasClass(target.parentNode, 'v-geopath')) {
            this._selb_fireContextualDataEvent([], 'plot', event);
        }
    };
    
    Interaction.prototype._selb_mouseUpOnAxis = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        
        if (this._rightClickOnAxisLabel) {
            this._rightClickOnAxisLabel = false;
            return;
        }
        var target = event.data.currentTarget;
        var type;
        if (iHelper.hasClass(target, 'v-m-xAxis')) {
            type = 'xAxis';
        } else if (iHelper.hasClass(target, 'v-m-xAxis2')) {
            type = 'xAxis2';
        } else if (iHelper.hasClass(target, 'v-m-yAxis')) {
            type = 'yAxis';
        } else if (iHelper.hasClass(target, 'v-m-yAxis2')) {
            type = 'yAxis2';
        } else if (iHelper.hasClass(target, 'v-m-zAxis')) {
            type = 'zAxis';
        } else if (iHelper.hasClass(target, 'v-valueaxis')) { 
            type = 'valueaxis';
        } else {
            return;
        }
        this._selb_fireContextualDataEvent([], type, event);
    };
    
    Interaction.prototype._selb_mouseUpOnLegendArea = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        this._selb_fireContextualDataEvent([], 'legend', event);
    };
    
    Interaction.prototype._selb_mouseUpOnTitle = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        this._selb_fireContextualDataEvent([], 'title', event);
    };
    
    Interaction.prototype._selb_contextMenuOnAxisLabel = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        
        var axisNode = event.data.target;
        //filter out those points not in the same chart of axis
        var plotDOMNode = iHelper.findPlotNodeContainingNode(axisNode);
        var allDatapoints = d3.select(plotDOMNode).selectAll('.v-datapoint');
        var targets = iHelper.findSeriesForLabel(axisNode.labelContexts, allDatapoints);
 
        // handle left mouse up only
        this._rightClickOnAxisLabel = true;
        this._selb_fireContextualDataEvent(targets, 'axisLabel', event);

    };
    
    Interaction.prototype._selb_contextMenuOnChartarea = function(event, trigger) {
        if (event.data.button !== 2) {
            // handle right mouse up only
            return;
        }
        this._selb_fireContextualDataEvent([], 'chartarea', event);
    };
    
    Interaction.prototype._selb_hoverOnDataPointHandler = function(event){
        if (UADetector.isMobile()) {
            // on mobile, no response to hover event
            return;
        }
        var target = getDataPoint4DataPointEvent(event);
        if ( this._hoveringDataPoint && this._dpFnCompare(this._hoveringDataPoint, target) ) {
            //for large data points like bar, probably you can stay on the data point
            //and move inside it after you click to de-select it. in this case, we still
            //want to show the tooltip but without highlighting it.
            //confirmed with UX, in this case tooltip should not be shown.
            if ( this._dpFnIndexOf(this._lastSelected, target ) < 0 && !this._hoveringDeselectedDataPoint) {
                showDetail.call(this, target, "infoMode", event.data.point);         
            }
            return;
        } else if (this._hoveringDataPoint) {
            //sometimes we can move from one data point directly to another data point
            //then we need first unhighlight previous highlighed data point
            var selected = this._dpFnIndexOf( this._lastSelected, this._hoveringDataPoint ) >= 0;
            this.runDecoration('unhighlight', this._hoveringDataPoint, selected, this._lastSelected.length === 0);
        }
        if (this._hoveringDataPoint !== target) {
            this._hoveringDeselectedDataPoint = false;
        }
        this._hoveringDataPoint = target;
        var selected = this._dpFnIndexOf(this._lastSelected, target) >= 0;
        this.runDecoration('highlightByHover', target, selected);
        
        showDetail.call(this, target, (selected ? "actionMode" : "infoMode"), event.data.point);
    };
    
    Interaction.prototype._selb_hoverOnNonDataPointHandler = function(event){
        this._hoveringDeselectedDataPoint = false;
        if(this._hoveringDataPoint){
            var selected = this._dpFnIndexOf( this._lastSelected, this._hoveringDataPoint ) >= 0;
            this.runDecoration('unhighlight', this._hoveringDataPoint, selected, this._lastSelected.length === 0);
            this._hoveringDataPoint = null;
        }
        //if tooltip is in action mode, we don't want to hide it until we are required to show another tooltip
        this.hideDetail('infoMode');
    };
    
    Interaction.prototype._selb_hoverOnLegendHandler = function(event){
        if(!UADetector.isMobile()){
            this.runDecoration('highlightLegendItem', event.data.currentTarget);
        }
    };

    Interaction.prototype._selb_cleanLegendHandler = function(event){
        this.runDecoration('unhighlightLegendItem', event.data.currentTarget, true);  
    };  
    
    Interaction.prototype._selb_panStartOnLegendHandler = function(event){
      this.runDecoration('unhighlightLegendItem', event.data.currentTarget);
      if(this._selb_props.pan.enable){
        this.runDecoration('panStartOnLegend', event.data.point);
        this.hideDetail('infoMode');
        this.hideDetail('actionMode');
      }
    };
    
    Interaction.prototype._selb_panMoveOnLegendHandler = function(event){
      if(this._selb_props.pan.enable){  
        this.runDecoration('panMoveOnLegend', event.data.point);
      }
    };
    
    Interaction.prototype._selb_panEndOnLegendHandler = function(event, trigger){
      if(this._selb_props.pan.enable){ 
        this.runDecoration('panEndOnLegend', event.data.point);
      }
    };

    Interaction.prototype._selb_clickOnLegendHandler = function(event, trigger){
    };

    Interaction.prototype._selb_mouseDownOnLegendHandler = function(event, trigger) {
        this.runDecoration('selectedLegendItem', event.data.currentTarget);
    };

    Interaction.prototype._selb_mouseDownOnLegendOverflowHandler = function(event, trigger) {
      this.hideDetail('actionMode');
    };
    
    Interaction.prototype._selb_mouseUpOnLegendHandler = function(event, trigger) {
        if (event.data.button === 2) {
            // handle left mouse up only
            return;
        }
      
        if (this._lassoStartPoint || this._lassoStartPoint === false) {
            if(this._selb_props.selectability.plotLassoSelection === false){
                this._lassoStartPoint = null;
            }                
            return;
        }
        
        var allDatapoints = this._rootNode.selectAll('.v-datapoint');
        var ctx = event.data.currentTarget.__data__.ctx || event.data.currentTarget.parentNode.__data__.ctx; //the former is mbc, the latter is color legend
        if(ctx){var targets = iHelper.findSeriesForLegend(ctx, allDatapoints);
        this.processTargetsSelection(targets, trigger, event.data.ctrlKey);
        if (UADetector.isMobile()) {
            this.runDecoration('unhighlightLegendItem', event.data.currentTarget);
        } else {
            this.runDecoration('highlightLegendItem', event.data.currentTarget);
        }
        if (this._lastSelected.length && (this._lastSelected.indexOf(targets[0]) >= 0 || UADetector.isMobile())) {
            //show tooltip only for selecting if on desktop
            if (this._lastSelected.indexOf(targets[0]) >= 0) {
                this._lastEventPoint = event.data.point;
            }
            if (this._lastSelected.indexOf(targets[0]) < 0 || this._lastSelected.length > 1) {
                showDetail.call(this, undefined, "actionMode", this._lastEventPoint);
            } else {
                showDetail.call(this, this._lastSelected[0], "actionMode", this._lastEventPoint);
            }
        } else {
            this.hideDetail('actionMode');
        }}
    };

    Interaction.prototype._selb_hoverOnAxisLabelHandler = function(event, trigger, plots){
        this.runDecoration('unhoverOnAxisLabel', event.data.target, plots);  
        this.runDecoration('hoverOnAxisLabel', event.data.target);
    };

    Interaction.prototype._selb_cleanAxisLabelHandler = function(event, trigger, plots){
        this.runDecoration('unhoverOnAxisLabel', event.data.target, plots);  
    };
    
    Interaction.prototype._selb_mouseDownAxisLabelHandler = function(event, trigger, plots) {
        this.runDecoration('focusAxisLabel', event.data.target, plots);
    };
    
    Interaction.prototype._selb_mouseUpAxisLabelHandler = function(event, trigger, plots) {
        if (event.data.button === 2) {
          return;
        }
        if (this._lassoStartPoint || this._lassoStartPoint === false) {
            if(this._selb_props.selectability.plotLassoSelection === false){
                this._lassoStartPoint = null;
            } 
            return;
        }
        
        var axisNode = event.data.target;
        //filter out those points not in the same chart of axis
        var plotDOMNode = iHelper.findPlotNodeContainingNode(axisNode);
        var allDatapoints = d3.select(plotDOMNode).selectAll('.v-datapoint');
        var targets = iHelper.findSeriesForLabel(axisNode.labelContexts, allDatapoints);
              
        this.processTargetsSelection(targets, trigger, event.data.ctrlKey);
        if (UADetector.isMobile()) {
            this.runDecoration('unhoverOnAxisLabel', event.data.target, plots);
        } else {
            this.runDecoration('defocusAxisLabel', event.data.target, plots);
        }
        
        if (this._lastSelected.length && (this._lastSelected.indexOf(targets[0]) >= 0 || UADetector.isMobile())) {
            //show tooltip only for selecting if on desktop
            if (this._lastSelected.indexOf(targets[0]) >= 0) {
                this._lastEventPoint = event.data.point;
            }
            if (this._lastSelected.indexOf(targets[0]) < 0 || this._lastSelected.length > 1) {
                showDetail.call(this, undefined, "actionMode", this._lastEventPoint);
            } else {
                showDetail.call(this, this._lastSelected[0], "actionMode", this._lastEventPoint);
            }
        } else {
            this.hideDetail('actionMode');
        }
    };

    Interaction.prototype._selb_clickOnAxisLabelHandler = function(event, trigger){
    };
    
    Interaction.prototype._selb_hoverOnRadarAxisLabelHandler = function(event, trigger, plots) {
        for (var i = -1; ++i < this._mainPlots.length; ) {
            this._mainPlots[i].cleanLabelAreas();
        }
        var plot = iHelper.findPlotModuleByNode(this._selb_plots, event.data.target);
        plot.mouseover(event.data.target);
    };
    
    Interaction.prototype._selb_cleanRadarAxisLabelHandler = function(event) {
        for (var i = -1; ++i < this._mainPlots.length; ) {
            if (this._mainPlots[i].cleanLabelAreas && !this._mainPlots[i].getPreferredSize) {
                this._mainPlots[i].cleanLabelAreas();
            }
        }
    };
    
    Interaction.prototype._selb_mouseDownRadarAxisLabelHandler = function(event) {
        var plot = iHelper.findPlotModuleByNode(this._selb_plots, event.data.target);
        plot.mousedown(event.data.target);
    };
    
    Interaction.prototype._selb_mouseUpRadarAxisLabelHandler = function(event) {
        for (var i = -1; ++i < this._mainPlots.length; ) {
            this._mainPlots[i].cleanLabelAreas();
        }
        var plot = iHelper.findPlotModuleByNode(this._selb_plots, event.data.target);
        plot.mouseover(event.data.target);
    };


    /*
     * @return{boolean}: true if de-select points but no selected points added.
     */
    Interaction.prototype.processTargetsSelection = function(targets, trigger, ctrlKey){
        var isClickLike = (this._clickLikeTriggers.indexOf(trigger) > -1);
        
        var concatByPush = iHelper.concatByPush;
        //convert targets to array if it's not
        if(!Array.isArray(targets)){
           targets = [targets];
        }        
        
        /////////inject extension point/////////
        var epResult = iHelper.callExtensionPoint(this._selb_props, 'processTarget', this, targets, trigger, ctrlKey);
        if (epResult.called) {
            targets.splice(0);
            if (epResult.ret) {
                concatByPush(targets, epResult.ret);
            }
        }
        /////////inject extension point/////////
        
        var runDecoration = this.runDecoration.bind(this);
        var lastSelected = this._lastSelected;
        var selectionMode = this._selb_selectionMode;
        
        var selectDatas = [], deselectDatas=[];
        if(selectionMode !== Constants.SELECTION_MODE.NONE){
            if(lastSelected.length === 0){
                runDecoration('clearPlot', true);
            }
            //rule 1: ctrl is NOT pressed, 
            //        in inclusive mode, both lasso and click always add selected one(s) to current selection
            //        in exclusive mode, both lasso and click always clear current selection, and create new selection with selected one(s)
            //        in single mode, only clicking on single data point is supported, which switch selection of the data point
            //        in multiple mode, according to released version, same as inclusive mode with ctrl pressed
            //rule 2: ctrl + lasso (only on datapoints is supported), always add selected ones to current selection, never deselect
            //rule 3: ctrl + single click on datapoint, label, legend, 
            //        if a series is not *all* selected, add all points of the series to current selection
            //        else remove all points of the series from current selection
            //note: in single and multiple modes, it does NOT matter whether or not user presses ctrl key.
            
            //design: 3 factors - mode, ctrl & clicklike should be taken into consideration
            var pureLastSelection = [], pureNewSelection = [], interSelection = [];
            for(var i = -1; ++i < lastSelected.length; ){
                var find = false;
                for(var j = -1; ++j < targets.length; ){
                    if( this._dpFnCompare(targets[j], lastSelected[i]) ){
                        find = true;
                        break;
                    }
                }
                (find ? interSelection : pureLastSelection).push(lastSelected[i]);
            }   
            
            for (var i = -1; ++i < targets.length; ) {
                if (this._dpFnIndexOf(interSelection, targets[i]) < 0) {
                    pureNewSelection.push(targets[i]);
                }
            } 
            
            lastSelected.splice(0, lastSelected.length); 
            function logicWithCtrl() {
                //inter: decided by clicklike
                if (!isClickLike) { //lasso: into new selection
                    concatByPush(lastSelected, interSelection);
                } else { //click: decided by whether selected points are all in inter
                    //has new points: into new selection
                    //no new points: into deselectDatas
                    concatByPush((pureNewSelection.length > 0 ? lastSelected : deselectDatas), interSelection);
                }
                //pure last: always into new selection
                concatByPush(lastSelected, pureLastSelection);
            }

            //handle pure new: always into new selection and selectDatas
            concatByPush(lastSelected, pureNewSelection); 
            concatByPush(selectDatas, pureNewSelection); 
            //handle inter and pure last
            switch(selectionMode) {
                case Constants.SELECTION_MODE.EXCLUSIVE:
                    if (!ctrlKey) { //not press ctrl
                        //inter: always into new selection
                        concatByPush(lastSelected, interSelection);
                        //pure last: always into deselectDatas
                        concatByPush(deselectDatas, pureLastSelection);
                    } else { //pressed ctrl
                        logicWithCtrl();
                    }
                    break;
                case Constants.SELECTION_MODE.MULTIPLE:
                    ctrlKey = true;
                case Constants.SELECTION_MODE.INCLUSIVE:
                    if (!ctrlKey) {
                        concatByPush(lastSelected, interSelection);
                        concatByPush(lastSelected, pureLastSelection);
                    } else {
                        logicWithCtrl();
                    }
                    break;
                case Constants.SELECTION_MODE.SINGLE:
                    concatByPush(deselectDatas, interSelection);
                    concatByPush(deselectDatas, pureLastSelection);
                    break;
            }
            
            if(deselectDatas.length > 0){
                runDecoration('unhighlight', deselectDatas, false, lastSelected.length === 0);
            }
            //highlight lastSelected instead of selectDatas
//            if(selectDatas.length > 0){
//                runDecoration('highlightBySelecting', selectDatas);
//            }
            if(lastSelected.length === 0){
                runDecoration('clearPlot');
            } else {
                runDecoration('highlightBySelecting', lastSelected);
            }
            if(selectDatas.length > 0){
                this._selb_fireSelectDataEvent(selectDatas);
            }
            if(deselectDatas.length > 0){
                this._selb_fireDeselectDataEvent(deselectDatas);
            }
        }
    };
    
    Interaction.prototype._selb_fireSelectDataEvent = function(selectedShapes){
      var selectData = [];
      for(var i=0, len= selectedShapes.length; i < len; i++){
        var tarData = [], value = selectedShapes[i].__data__;
        if(value.val instanceof Array){
          for(var j=0, jlen= value.val.length; j< jlen; j++ ){
            tarData.push({
              val: value.val[j],
              ctx: value.ctx[j]
            });
          }
        }else if(value instanceof Array){
            for(var j=0, jlen= value.length; j< jlen; j++ ){
            tarData.push({
              val: value[j].val,
              ctx: value[j].ctx
            });
          }          
        }else{
          tarData.push({
            val: selectedShapes[i].__data__.val,
            ctx: selectedShapes[i].__data__.ctx
          });
        }
        selectData.push({
          target: selectedShapes[i],
          data: tarData
        });
      }
      //since d3 dispatch is sychronous, this causes some strange 
      //issue on windows Chrome if listener contains alert clause, 
      //so use setTimeout to make it asychronous
      setTimeout(function() {
      this._selb_dispatch.selectData({
        name: Constants.Event.SelectData.name,
        data: selectData
      });
      }.bind(this), 1);
    };
    
    Interaction.prototype._selb_fireDeselectDataEvent = function(deselectShapes){
      var deselectData = [];
      for(var i=0, len= deselectShapes.length; i < len; i++){
        var tarData = [], value = deselectShapes[i].__data__;
        if(value.val instanceof Array){
          for(var j=0, jlen=value.val.length; j< jlen; j++ ){
            tarData.push({
              val: value.val[j],
              ctx: value.ctx[j]
            });
          }
        }else{
          tarData.push({
            val: deselectShapes[i].__data__.val,
            ctx: deselectShapes[i].__data__.ctx
          });
        }
        deselectData.push({
          target: deselectShapes[i],
          data: tarData
        });
      }
      
      //since d3 dispatch is sychronous, this causes some strange 
      //issue on windows Chrome if listener contains alert clause, 
      //so use setTimeout to make it asychronous
      setTimeout(function() {      
      this._selb_dispatch.deselectData({
        name: Constants.Event.DeSelectData.name,
        data: deselectData
      });
      }.bind(this), 1);
    };
    
    
    Interaction.prototype._selb_fireShowTooltipEvent = function(tooltipData, plotModule) {
        var bbox = plotModule? iHelper.getBoundingBox( plotModule.parent().node() ) : undefined;
        var evtData = {
            body: [],
            footer: [],
            point: tooltipData.position,
            selectedValues: tooltipData.selectedNumber
        };
        //plot area
        if ( plotModule ) {
            var bbox = iHelper.getBoundingBox( plotModule.parent().node() );
            evtData.plotArea = {
                x: bbox.x,
                y: bbox.y,
                width: bbox.width,
                height: bbox.height
            };
        }
        
        //data
        var datum = tooltipData.data;
        if (datum && datum.length) {
            for (var i = -1; ++i < datum.length; ) {
                var item = datum[i];
                if (item.type === 'measure') {
                    evtData.body.push({
                        name: item.name,
                        val: [{
                            value: item.value
                        }]
                    });
                } else if (item.type === 'dimension') {
                    evtData.footer.push({
                        label: {val: item.name},
                        value: {val: item.value}
                    });
                }
            };
        }
        
        //emit:
        //since d3 dispatch is sychronous, this causes some strange 
        //issue on windows Chrome if listener contains alert clause, 
        //so use setTimeout to make it asychronous
        setTimeout(function() {        
        this._selb_dispatch.showTooltip({
            name: Constants.Event.TooltipShow.name,
            data: evtData
        });        
        }.bind(this), 1);
    };
    

    Interaction.prototype._selb_fireHideTooltipEvent = function() {   
        //since d3 dispatch is sychronous, this causes some strange 
        //issue on windows Chrome if listener contains alert clause, 
        //so use setTimeout to make it asychronous
        setTimeout(function() {        
        this._selb_dispatch.hideTooltip({
            name: Constants.Event.TooltipHide.name
        });      
        }.bind(this), 1);
    };
    
    Interaction.prototype._selb_fireContextualDataEvent = function(shapes, type, event){
      var selectData = [];
      for(var i=0, len= shapes.length; i < len; i++){
        var tarData = [], value = shapes[i].__data__;
        if(value.val instanceof Array){
          for(var j=0, jlen= value.val.length; j< jlen; j++ ){
            tarData.push({
              val: value.val[j],
              ctx: value.ctx[j]
            });
          }
        }else if(value instanceof Array){
            for(var j=0, jlen= value.length; j< jlen; j++ ){
            tarData.push({
              val: value[j].val,
              ctx: value[j].ctx
            });
          }          
        }else{
          tarData.push({
            val: shapes[i].__data__.val,
            ctx: shapes[i].__data__.ctx
          });
        }
        selectData.push({
          target: shapes[i],
          data: tarData
        });
      }
      //since d3 dispatch is sychronous, this causes some strange 
      //issue on windows Chrome if listener contains alert clause, 
      //so use setTimeout to make it asychronous
      setTimeout(function() {
      this._selb_dispatch.contextualData({
        name: Constants.Event.contextualData.name,
        type: type,
        data: selectData,
        point: event.data.point
      });
      }.bind(this), 1);
    };
    
    Interaction.prototype.setRootNode = function(_rootNode){
        this._rootNode = _rootNode;
        this._rootNode.style("cursor", 'default');//for lasso cursor
        return Interaction;
    };
    
    //======================== End of Behavior ======================//
    
    Interaction.prototype._selb_parseOptions = function(){
        var props = this._selb_props;
		if (!props.selectability) {
			props.selectability = {};
		}
        var selMode = (props.selectability.mode || '').toUpperCase();
        switch (selMode) {
            case Constants.SELECTION_MODE.SINGLE:
            case Constants.SELECTION_MODE.MULTIPLE:
            case Constants.SELECTION_MODE.INCLUSIVE:
            case Constants.SELECTION_MODE.EXCLUSIVE:
            case Constants.SELECTION_MODE.NONE: 
                this._selb_selectionMode = selMode;
                break;
            default:
                this._selb_selectionMode = Constants.SELECTION_MODE.INCLUSIVE;
                break;
        }
		this._selb_lassoWithCtrlKey = !!props.selectability.lassoWithCtrlKey;
        this._selb_holdSelection = props.holdSelection;
        this._selb_preserveSelectionWhenDragging = props.preserveSelectionWhenDragging;
    };
    
    Interaction.prototype.properties = function(_){
      if(!arguments.length){
        return this._selb_props;
      }
      
      //FIXME: As selection module didn't be executed, so append deselect event here. 
      //Clear selection info when updating properties
      //var selectedItems = this._lastSelected;
      //if( selectedItems.length > 0){
      //  fireDeselectDataEvent(selectedItems);
      //}
      this._lastSelected = [];
      
      ObjectUtils.extend(true, this._selb_props, _);
      this._selb_parseOptions();
    };
    
    Interaction.prototype.reset = function(){
      plots = [];
      this._lastSelected.splice(0, this._lastSelected.length);
      //lastHovered.splice(0, lastHovered.length);
      //lastOvered.splice(0, lastOvered.length);
    };
    
    Interaction.prototype.module = function(_){
      if(!arguments.length){
        return this._selb_m;
      }
      this.reset();//clear flag to have another chance to register event
      this._selb_m = _;
      return Interaction;
    };
    
    //[2012/09/11 Christy] Get selection mode for legend.
    Interaction.prototype.getSelectionMode = function(){
      return this._selb_selectionMode;
    };
    
    Interaction.prototype.highlightedByLegend = function(event){
        //TODO
        //console.log("highlightedByLegend in new Interaction is called, please check your manifest.");
    };
    
    Interaction.prototype.defaultSelection = function(event){
        //TODO
    };
    
    Interaction.prototype.dispatch = function(){
        return this._selb_dispatch;
    };
    
    Interaction.prototype.destroy = function(){
      this.hideDetail('infoMode');
      this.hideDetail('actionMode');
      this.reset();
      this._selb_m = null;
      this._selb_plots = null;
      this._behaviorManager = null;
      this._selb_ctx = null;
      this._rootNode = null;
      if(this._lassoDecoration){
          this._lassoDecoration.destroy();
          this._lassoDecoration = null;
      }
      this._lassoStartPoint = null;
      this._lassoEndPoint = null;
      this._clickLikeTriggers = null;
      this._mainPlots = null;
      this._mainPlotBoundRects = null;
    };
    
    
    return Interaction;
});

define('sap/viz/modules/manifests/controller/Base',['sap/viz/modules/manifests/Module','sap/viz/modules/Constants'],
function Setup(Manifest, Constants) {
  var module = {
    'id' : 'sap.viz.modules.controller.base',
    'abstract' : true,
    'type' : Constants.Type.Controller,
    'renderto' : Constants.RenderTo.NONE,
    'name' : 'controller base module',
    'properties' : null,
    'events' : null,
    'feeds' : null
  };

  var manifests = {
    viz: [],
    module: [module],
    feeds: []
  }
  return manifests;
});

define('sap/viz/chart/elements/manifests/controller/Interaction',['sap/viz/modules/manifests/Module','sap/viz/modules/Constants','sap/viz/chart/elements/behaviors/Interaction','sap/viz/modules/manifests/controller/Base'],
function Setup(Manifest, Constants, fn, Base) {
  var module = {
    'id' : 'sap.viz.modules.controller.interaction',
    'name' : 'selection',
    'base' : "sap.viz.modules.controller.base",
    'type' : Constants.Type.Behavior,
    'description': 'Settings for user interaction with the chart',
    'properties' : {
      'selectability' : {
        'name' : 'selectability',
        'supportedValueType': 'Object',
        'supportedValues': {
          mode: {
             'name' : 'mode',
            'supportedValueType' : 'String',
            'supportedValues' : [ 'exclusive', 'inclusive', 'single', 'multiple', 'none' ],
            'defaultValue' : 'inclusive',
            'description' : "Set the selection mode. If this value is set to 'exclusive' or 'single', only one set of data points can be selected at once. If this value is set to 'inclusive' or 'multiple', multiple sets of data points can be selected at once. If this value is set to 'none', no sets of data points can be selected. The values 'single' and 'multiple' are deprecated; please remove them from your chart.",
            'example': "<a href='"+Constants.DocExample.SnippetUrl+"3138' target='_blank'>"+Constants.DocExample.TryThisValue+"</a>"
          },
          axisLabelSelection: {
            name: "axisLabelSelection",
            supportedValueType: "Boolean",
            defaultValue: true,
            description: "Set whether axis labels can be selected"
          },
          legendSelection: {
            name: "legendSelection",
            supportedValueType: "Boolean",
            defaultValue: true,
            description: "Set whether the legend can be selected"
          },
          plotLassoSelection: {
            name: "plotLassoSelection",
            supportedValueType: "Boolean",
            defaultValue: true,
            description: "Set whether lasso selection can be used in the plot area"
          },
          plotStdSelection: {
            name: "plotStdSelection",
            supportedValueType: "Boolean",
            defaultValue: true,
            description: "Set whether selection can be done in the plot area by clicking and tapping"
          },
          lassoWithCtrlKey: {
            name:"lassoWithCtrlKey",
            supportedValueType:"Boolean",
            defaultValue: false,
            description: "Set whether the user must hold the ctrl key to use lasso selection",
            isExported: false
          },
          dataPointsCacheable: {
            name: "dataPointsCacheable",
            supportedValueType:"Boolean",
            defaultValue: true,
            description: "Set whether data points can be cached. If it's true, data points might be cached by Interaction for better performance.",
            isExported: false
          }
        },
        'description': 'Settings for selectability'
      },
      pan : {
        name : 'pan',
        'supportedValueType': 'Object',
        'supportedValues': {
          'enable': {
          'name' : 'enable',
            'supportedValueType' : 'Boolean',
            'defaultValue' : true,
            'description' : 'Enable/disable pan',
            'isExported': true    
          },
          'orientation': {
            'name' : 'orientation',
            'supportedValueType' : 'String',
            'supportedValues' : ['horizontal', 'vertical', 'both'],
            'defaultValue' : 'both',
            'description' : 'Set orientation of pan',
            'isExported' : false
          }     
        },
        'isExported' : false
      },
      supportedEventNames:{
        name: "supportedEventNames",
        supportedValueType: "StringArray",
        supportedValues: ['mouseup','mousedown','mousemove','mouseout','mouseover','touchstart'],
        defaultValue:['mouseup', 'mousedown', 'mousemove', 'mouseout', 'mouseover','touchstart'],
        description: "Set supported event names",
        isExported: false
      },
      enableMouseMove:{
        name: "enableMouseMove",
        supportedValueType: "Boolean",
        defaultValue:true,
        description: "Set whether mouse move is enabled",
        isExported: false
     },
      enableMouseOver:{
        name: "enableMouseOver",
        supportedValueType: "Boolean",
        defaultValue:true,
        description: "Set whether mouse over is enabled",
        isExported: false
      },
      enableMouseOut:{
        name: "enableMouseOut",
        supportedValueType: "Boolean",
        defaultValue:true,
        description: "Set whether mouse out is enabled",
        isExported: false
      },
      supportLassoEvent:{
        name: "supportLassoEvent",
        supportedValueType: "Boolean",
        defaultValue:true,
        description: "Set whether support lasso event is enabled",
        isExported: false
      },
      holdSelection:{
        name: "holdSelection",
        supportedValueType: "Boolean",
        defaultValue:false,
        description: "Set whether hold selection is enabled",
        isExported: false
      },
      preserveSelectionWhenDragging:{
        name: "preserveSelectionWhenDragging",
        supportedValueType: "Boolean",
        defaultValue:false,
        description: "Set whether preserve selection when dragging is enabled",
        isExported: false
      },
      decorations: {
        name: "decorations",
        supportedValueType: "ObjectArray",
        defaultValue: undefined,
        description:"Set decorations relating to interaction. Each item \n\
                that is an object of {name: 'decoration name', fn: 'decoration callback function'} is a decoration. \n\
                Currently two decorations are supported: showDetail and hideDetail. \n\
                These two decorations can be used to create a user-defined tooltip. \n\
                    \nIf these 2 decorations are used, the default tooltip is not used, \n\
                and the user should implement a custom tooltip. \n\
                The showDetail decoration is called when the tooltip is shown, \n\
                and the hideDetail decoration is called when the tooltip is hidden.\n\
                    \nThe arguments of showDetail are one object of {mode: 'tooltip mode', \n\
                data: 'data of hovering selected data point', position: 'mouse position', \n\
                container: 'chart container dom element', selectedNumber: 'number of selected data points'}. \n\
                'tooltip mode' is either 'infoMode' or 'actionMode'. Hovering over an unselected data point displays the infoMode tooltip, \n\
                while hovering over a selected data point displays the actionMode tooltip.\n\
                'data' is an array of dimensions and measures, where each item is an object of \n\
                {name: 'dimension name or measure name', value: 'dimension member or measure value',\n\
                type: 'literal string of dimension or measure'}. For instance, \n\
                {name: 'Country', value: 'China', type: 'dimension'}, or \n\
                {name: 'Profit', value: 159, type: 'measure'}.\n\
                    \nThe arguments of hideDetail are a string representing tooltip mode, \n\
                i.e. what kind of tooltip should be hidden.",
        isExported: true
      },
      triggers: {
        name: "triggers",
        supportedValueType: "ObjectArray",
        defaultValue: undefined,
        description:"Set triggers for behavior decration.",
        isExported: false
      },
      handlers: {
        name: "handlers",
        supportedValueType: "ObjectArray",
        defaultValue: undefined,
        description:"Set handlers for behavior decration.",
        isExported: false
      }
    },
    'fn' : fn
  };
  var manifests = {
    viz: [],
    module: [module].concat(Base.module),
    feeds: [].concat(Base.feeds)
  };
  return manifests;
});

define('sap/viz/impls/Common',[
    'sap/viz/modules/manifests/DivContainer',
    'sap/viz/modules/manifests/RootContainer',
    'sap/viz/modules/manifests/layout/Dock',
    'sap/viz/modules/manifests/Legend',
    'sap/viz/modules/manifests/legend/Common',
    'sap/viz/modules/manifests/Background',
    'sap/viz/modules/manifests/Title',
    'sap/viz/modules/manifests/layout/Stack',
    'sap/viz/modules/manifests/XYContainer',
    'sap/viz/chart/elements/manifests/controller/Interaction'
], function() {

    var viz = [];
    var modules = [];
    var feeds = [];

    for(var i = 0; i < arguments.length; ++i){
        var item = arguments[i];
        viz = viz.concat(item.viz);
        modules = modules.concat(item.module);
        feeds = feeds.concat(item.feeds);
    }

    var manifests = {
        viz: viz,
        module: modules,
        feeds: feeds
    };
    return manifests;
});

define('sap/bi/framework/BundleLoader/ServicePlugin',[], function() {
    

    /**
     * RequireJS plugin that loads services from the kernel.
     * Example usage: "service!sap.bi.myservice".
     */
    function ServicePlugin(kernel) {
        this._kernel = kernel;
    }

    ServicePlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ServicePlugin is loading '" + name + "'");
        }
        onload(this.getService(name));
    };

    ServicePlugin.prototype.getService = function(name) {
        //parse the name
        var cardinality;
        if (name[0] === "*") {
            cardinality = "multiple";
            name = name.slice(1);
            return this._kernel.getAllInstances(name);
        }
        else {
            cardinality = "single";
            return this._kernel.getInstance(name);
        }
    };

    ServicePlugin.prototype.getServiceForBundle = function(bundle, service) {
        return this.getService(service);
    };

    ServicePlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ServicePlugin;
});
define('sap/bi/framework/BundleLoader/ServiceMetadataPlugin',[], function() {
    

    /**
     * RequireJS plugin that loads service metadata from the kernel.
     * Example usage: "serviceMetadata!sap.bi.myservice".
     */
    function ServiceMetadataPlugin(kernel) {
        this._kernel = kernel;
    }

    ServiceMetadataPlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ServiceMetadataPlugin is loading '" + name + "'");
        }
        onload(this.getServiceMetadata(name));
    };

    ServiceMetadataPlugin.prototype.getServiceMetadata = function(name) {
        // Component exported metadata should always exist as this bag contains required component attributes
        if (name[0] === "*") {
            name = name.slice(1);
            return this._kernel.getAll(name).map(function(component) {
                return component.exportedMetadata;
            });
        } else {
            var service = this._kernel.get(name);
            return service ? service.exportedMetadata : undefined;
        }
    };

    ServiceMetadataPlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ServiceMetadataPlugin;
});
define('sap/bi/framework/BundleLoader/ImportPlugin',[], function() {
    

    /**
     * RequireJS plugin that loads imports from a given source bundle.
     * Example usage: "import!source.bundle.id:Some/Module".
     */
    function ImportPlugin(kernel) {
        this._kernel = kernel;
    }

    ImportPlugin.prototype.load = function(name, parentRequire, onload, config) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger("ImportPlugin is loading '" + name + "'");
        }

        var bundleLoaderHelpers = this._kernel.getInstance("bundleLoader.getHelpers");
        var nameComponents = name.split(":");
        nameComponents[1] = bundleLoaderHelpers.stripLeading(nameComponents[1], "/");

        Q(bundleLoaderHelpers.getBundlePromise(nameComponents[0])).then(function(sourceBundleMetadata) {

            if (!sourceBundleMetadata) {
                throw new Error("Error importing " + nameComponents[1] + " from non-existent bundle " + nameComponents[0]);
            }

            if (!sourceBundleMetadata.exports ||
                !(sourceBundleMetadata.exports.some(function(exported) {
                    return bundleLoaderHelpers.startsWith(nameComponents[1], exported);
                }))) {
                throw new Error("Attempting to import " + nameComponents[1] + " which is not exported by " + nameComponents[0]);
            }

            bundleLoaderHelpers.getRequireContext(nameComponents[0])([nameComponents[1]], onload, onload.error);
        }).fail(function(err) {
            onload.error(err);
        });
    };

    ImportPlugin.load = function(name, req, onload, config) {
        onload({});
    };

    return ImportPlugin;
});
/**
 * A requirejs CSS module.
 */
define('sap/bi/framework/BundleLoader/CssPlugin',[], function() {
    
    
    function CssPlugin(resourceLoaderFunction, log) {
        this._resourceLoaderFunction = resourceLoaderFunction;
        this._log = log;
    }
    
    // Compatibility functions:

    // Gets the document head in a cross-browser manner  
    var getHead = function () {
        return document.head || document.getElementsByTagName("head")[0] || document.documentElement;
    };
    
    // Convert a url into a fully qualified url.
    var qualifyUrl = function(url) {
        if(/^http[s]?:\/\//.test(url)) {
            return url;
        } else {
            var a = document.createElement('a');
            a.href = url;
            return a.href;
        }
    };

    // Convert any relative urls within the css to absolute urls.
    var convertRelativeUrlsToAbsolute = function(log, absoluteCssUrl, css) {
        // The relative url's are all relative to the css file.  Strip the css file name
        // off of its absolute url to use as a base for building our new urls.
        // Base url should look like "http://machine:port/sap/bi/bundles/sap/bi/va/common/stylesheets/"
        var idx = absoluteCssUrl.lastIndexOf("/");
        var baseUrl = absoluteCssUrl.substring(0, idx + 1);

        // Matches something like: url('../images/foo.png')
        var URL_REGEX = /url ?\((\"|\')?([a-zA-Z0-9\.\/\-\_]*)(\"|\')?\)/gm;
        var result = css.replace(URL_REGEX, function(fullMatch, openQuote, relUrl, closeQuote, offset, fullString){
            if (relUrl && relUrl.length > 0) {
                // Should produce a full url like this:
                // "http://machine:port/sap/bi/bundles/sap/bi/va/common/stylesheets/../images/foo.png"
                log("Converting " + relUrl + " to " + (baseUrl + relUrl));
                return "url(" + baseUrl + relUrl + ")";
            }
        });
        return result;
    };

    //The RequireJS module methods
    CssPlugin.prototype.normalize = function(name, normalizer) {
        if (!/\.css$/.test(name)) {
            name = name + ".css";
        }

        return normalizer(name);
    };

    CssPlugin.prototype.load = function (name, req, load, config) {
        
        var cssUrl = (req.toUrl ? req.toUrl(name) : name);
        var originalUrl;
        if (this._resourceLoaderFunction) {
            // A resource loader function has been provided - see if it can load the content for this css url.
            var cssContent = this._resourceLoaderFunction(cssUrl);
            if(cssContent) {
                // We do have content for the css!  Make sure it doesn't have any relative urls as they will be broken.
                var absoluteCssUrl = qualifyUrl(cssUrl);
                cssContent = convertRelativeUrlsToAbsolute(this._log, absoluteCssUrl, cssContent);
                
                // Add source url to help with debugging
                cssContent += "\n/*# sourceURL="+ absoluteCssUrl + " */";
               
                // Create an object url for it so it can be linked into
                // the html doc just like it was a remote resource.
                this._log("CssPlugin.load() returning cached content for url: " + cssUrl);
                originalUrl = cssUrl;
                var URLFactory = window.URL || window.webkitURL;
                var cssBlob = new Blob([cssContent], {type: 'text/css'});
                cssUrl = URLFactory.createObjectURL(cssBlob);
            } else {
                this._log("CssPlugin.load() loading from network for url: " + cssUrl);
            }
        }
        
        var link = document.createElement("link");
        
        link.type = "text/css";
        link.rel = "stylesheet";
        link.href = cssUrl;
        
        if (originalUrl) {
            link.setAttribute("bundle_cache_src", originalUrl);
        }

        link.onload = function(e) {
            load(this.sheet);
            this.onerror = this.onload = null;
        };
        link.onerror = function(e) {
            load.error(new Error("Failed to load " + this.href));
            this.onerror = this.onload = null;
        };

        getHead().appendChild(link);

        if (window.navigator.userAgent.indexOf("PhantomJS") !== -1) {
            /*
             * PhantomJS (the headless browser we use for unit testing) is based on an old version of
             * Webkit that doesn't fire load/error events on stylesheet links. So we simulate them by
             * polling the document.styleSheets collections (which is not updated until the stylsheet
             * finishes loading).
             */
            
            var href = link.href;
            var intervalId = window.setInterval(function() {
                var stylesheets = Array.prototype.slice.call(document.styleSheets); //convert to proper array
                var matchingStylesheets = stylesheets.filter(function(styleSheet) {
                    return styleSheet.href === href;
                });
                
                if (matchingStylesheets.length > 0) {
                    window.clearInterval(intervalId);
                    link.sheet = matchingStylesheets[0];
                    if (link.onload) {
                        link.onload();
                    }
                }
            }, 10);
        }
    };
    
    CssPlugin.prototype.pluginBuilder = "cssBuilder";
        
    return CssPlugin;
});

/*
 * Override the default XMLHttpRequest object so that we can intercept outbound calls
 * going through it and try to satisfy them with resources loaded in some other way (like from RequireJS).
 */
define('sap/bi/framework/BundleLoader/XHRInterceptor',['require'],function(require) {
    

    function createInterceptor(resourceLoaderFunction, originalXmlHttpRequestConstructor, log) {

        function qualifyURL(url) {
            if(/^http[s]?:\/\//.test(url)) {
                return url;
            } else {
                var a = document.createElement('a');
                a.href = url;
                var origin = window.location.origin ? window.location.origin : (window.location.protocol + "//" + window.location.host);
                var absoluteHref = a.href.slice(origin.length);
                return absoluteHref;
            }
        }

        var XMLHttpRequest = function() {
            this.originalXHRConstructor = originalXmlHttpRequestConstructor;
            this.originalXHR = new this.originalXHRConstructor();
            var myXHR = this;
            this.originalXHR.onreadystatechange = function(){myXHR.onreadystatechangefunction();};
            return this;
        };

        XMLHttpRequest.prototype.isXHRInterceptor = true;

        XMLHttpRequest.prototype.getOriginalXmlHttpRequestConstructor = function () {
            return this.originalXHRConstructor;
        };

        XMLHttpRequest.prototype.open = function (method, url, async, user, password) {
            this.url = qualifyURL(url);
            return this.originalXHR.open(method, url, async, user, password); //send it on
        };

        XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
            this.originalXHR.setRequestHeader(header, value);
        };

        XMLHttpRequest.prototype.send = function(postBody) {

            var contentForUrl = this.url && resourceLoaderFunction(this.url);

            if(contentForUrl !== undefined && contentForUrl !== null) {
                log("XHRInterceptor.send() returning cached content for url: " + this.url);
                this.wasIntercepted = true;

                this.response = contentForUrl;
                this.responseText = this.response;
                this.readyState = 4;
                this.responseXML = null;
                this.status = 200;
                this.statusText = "OK";

                if(this.onreadystatechange) {
                    this.onreadystatechange();
                }

                return;
            }

            try {
                log("XHRInterceptor.send() using original xhr for url: " + this.url);
                return this.originalXHR.send(postBody);
            } catch(e) {
// TODO - double check that this is still a problem.  Maybe I can get rid of this catch block?
                // The default XHR behaviour seemed to be to throw an error and then fire the readyStateChangedEvent.
                // This seemed to break with the interceptor so try to fix it by manually firing
                // the event here and then re-throw the error.
                this.onreadystatechangefunction();
                throw e;
            }

        };

        // overrideMimeType is not supported in IE
        if ((new originalXmlHttpRequestConstructor()).overrideMimeType) {
            XMLHttpRequest.prototype.overrideMimeType = function() {
                return this.originalXHR.overrideMimeType.call(this.originalXHR, arguments);
            };
        }

        XMLHttpRequest.prototype.getAllResponseHeaders = function() {
            if(this.wasIntercepted) {
                if(this.url.match(/\.js$/)) {
                    return "Content-Type: application/x-javascript";
                } else {
                    return "";
                }
            } else {
                return this.originalXHR.getAllResponseHeaders.call(this.originalXHR, arguments);
            }

        };

        XMLHttpRequest.prototype.getResponseHeader = function() {
            return this.originalXHR.getResponseHeader.call(this.originalXHR, arguments);
        };

        XMLHttpRequest.prototype.onreadystatechangefunction = function() {
            this.readyState = this.originalXHR.readyState;
            if (this.readyState === 4) {
                // The request has completed so we should have valid status and response values.
                this.responseText = this.originalXHR.responseText;
                this.responseXML = this.originalXHR.responseXML;
                this.status = this.originalXHR.status;
                this.statusText = this.originalXHR.statusText;
            } else {
                this.responseText = undefined;
                this.responseXML = undefined;
                this.status = undefined;
                this.statusText = undefined;
            }

            if(this.onreadystatechange) {
                this.onreadystatechange();
            }
        };

        return XMLHttpRequest;
    }

    function uninstallInterceptor() {
        var origXHR = new window.XMLHttpRequest();
        if (origXHR && origXHR.isXHRInterceptor) {
            // The default XmlHttpRequest has already been overridden by an interceptor.  We need to remove that interceptor instance
            // and restore the default XHR.
            window.XMLHttpRequest = origXHR.getOriginalXmlHttpRequestConstructor();
        }
    }

    function installInterceptor(resourceLoaderFunction, log) {
        // Try to uninstall the interceptor to remove any copies that might have previously been installed.
        uninstallInterceptor();

        log("Installing XHRInterceptor...");
        var interceptor = createInterceptor(resourceLoaderFunction, window.XMLHttpRequest, log);
        window.XMLHttpRequest = interceptor;
    }


    return {
        installInterceptor: installInterceptor,
        uninstallInterceptor: uninstallInterceptor
    };
});
/**
 * This bundle loader uses promises extensively. The overall workflow is described below where each step is 'blocked' waiting on the
 * promise provided in the previous step:
 * - Loop through the config to determine the root bundles to load. For each bundle
 *     - Construct bundle-specific require context
 *     - Attempt to load a bundle
 *         - Resolve bundle - involves loading bundle manifest with bundle-specific require to read contents
 *         - Load all the dependent bundles (a promise which blocks loading of the current bundle)
 *           ** this step (utilizing loadAfter property) is to be deprecated **
 *         - For each component in bundle, construct component factory and place into data structure
 *           that maps service ID -> factories of components implementing service
 * - Once all bundles are loaded the components need to be activated (registered with the kernel)
 *     - For each service
 *           - For each component factory for service
 *               - Activate dependent providers
 *               - Activate component by registering it's factory with kernel
 *                 (Places it into kernel datastructure that maps from service ID -> component)
 *                 If the component is provided by a 'module', its factory is constructed via
 *                 loading the module's file using requireJS.
 * - Finally call the completion callback provided
 *
 * After all this, consumers of kernel services can utilize the service plugin(s) to obtain instances
 * of component(s) providing a particular service.
 */
define('sap/bi/framework/BundleLoader/BundleLoader',["require", "./ServicePlugin", "./ServiceMetadataPlugin", "./ImportPlugin", "./CssPlugin", "./XHRInterceptor"],
function(parentRequire, ServicePlugin, ServiceMetadataPlugin, ImportPlugin, CssPlugin, XHRInterceptor) {
    

    var log = function(msg) {
        var logger = this._kernel.getInstance("core.logger");
        if (logger) {
            logger(msg);
        }
    };

    var notify = function(eventType, event) {
        var listeners = this._kernel.getAllInstances("core.listener");
        if (listeners) {
            listeners.forEach( function(listener) {
               listener(eventType, event);
            });
        }
    };

    var convertBundleIdToPath = function(bundleId) {
        return bundleId.replace(/\./g, "/");
    };

    var convertBundleIdToModuleId = function(bundleId) {
        var lastDot = bundleId.lastIndexOf(".");
        var bundleClass = bundleId.substr(lastDot + 1, bundleId.length);
        return bundleClass + "-bundle";
    };

    var processUI5Metadata = function(ui5Metadata, bundleId, bundleFullUrl) {
        // Helper to detect duplicate registrations and produce warning
        var registerUI5ModulePath = function(ui5Module, path) {
            if (this._registeredUI5ModulePaths[ui5Module]) {
                log.apply(this, ["Warning: UI5 module '" + ui5Module + "' bound to path '" + this._registeredUI5ModulePaths[ui5Module] +
                                 "' is being replaced by '" + path + "' by bundle '" + bundleId + "'"]);
            }
            window.$.sap.registerModulePath(ui5Module, path);
        }.bind(this);
        // Register UI5 module paths
        if (window.$ && window.$.sap && window.$.sap.registerModulePath) {
            // Default path to set for every bundle
            registerUI5ModulePath(bundleId, bundleFullUrl);
            // User-specified mappings
            if (ui5Metadata && ui5Metadata.moduleMapping) {
                var mappings = Object.keys(ui5Metadata.moduleMapping);
                mappings.forEach(function(key) {
                    registerUI5ModulePath(key, bundleFullUrl + "/" + ui5Metadata.moduleMapping[key]);
                });
            }
        }
    };

    /**
     * Extend a given base require config with settings from a given ext require config.
     * Settings from ext will only be applied to base if they don't already exist, OR overwirte flag is true.
     * Note: Use of user-defined require config is discouraged. There are likely ways to get around
     *       any problems you have without having to specify require config settings.
     *       If you need to specify such settings, your bundle isn't portable (and it should be),
     *       as it is now tied to the execution environment.
     */
    var extendRequireConfig = function(base, ext, overwrite) {
        if (!ext) {
            ext = this._requireConfig;
        }
        for (var key in ext) {
            if (ext.hasOwnProperty(key)) {
                if (!base[key] || overwrite === true) {
                    base[key] = ext[key];
                }
            }
        }
        return base;
    };

    var startsWith = function(str, prefix) {
        return str.indexOf(prefix) === 0;
    };

    var endsWith = function(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };

    var stripLeading = function(str, prefix) {
        if (startsWith(str, prefix)) {
            str = str.substring(prefix.length);
        }
        return str;
    };

    var stripTrailing = function(str, suffix) {
        if (endsWith(str, suffix)) {
            str = str.substring(0, str.length - suffix.length);
        }
        return str;
    };

    /**
     * It's not clear what the best way to determine the base Url currently being used by the application.
     * However, we need that URL so we can use the same base when creating a new RequireJS context for each
     * bundle implementation being loaded. This function encapsulates the magic by which we determine the baseUrl.
     *
     * Note: only reason bundle ID is needed here is due to the potential usage of requireJS 'paths',
     *       which need the full path to the bundle root to know when to re-direct.
     */
    var getRequireJSBaseUrl = function(bundleId) {
        var url = parentRequire.toUrl("").split("?")[0];
        if (bundleId) {
            var dummyFileName = convertBundleIdToPath(bundleId) + "/foo";
            url = parentRequire.toUrl(dummyFileName).split("?")[0];
            url = stripTrailing(url, ".js");
            url = stripTrailing(url, dummyFileName);
        }
        return stripTrailing(url, "/");
    };

    /**
    * Given a bundle's require context, obtain a url (if specified) based on the bundle's root URL.
    */
    var getBundleUrl = function(requireContext, url) {
        url = url || "";
        var bundleBaseUrl = requireContext.toUrl(url).split("?")[0];
        return stripTrailing(bundleBaseUrl, "/");
    };

    /**
    * Given a bundle's require context, attempt to resolve the bundle ID.
    */
    var getBundleId = function(requireContext) {
        return this._bundlePaths[getBundleUrl(requireContext)];
    };

    /**
    * Given a bundle ID, return its promise.
    */
    var getBundlePromise = function(bundleId) {
        return this._bundles[bundleId];
    };

    /**
    * Given a bundle ID, obtain the require context.
    */
    var getRequireContext = function(bundleId) {
        return this._bundleRequires[bundleId];
    };

    /**
     * Gets full URL of a URL that is relative to bundle base.
     */
    var getFullUrl = function(bundleBaseUrl, urlRelativeToBundleBase, bundleId) {
        var fullUrl = getRequireJSBaseUrl(bundleId);
        fullUrl += (bundleBaseUrl ? "/" + bundleBaseUrl : "");
        fullUrl += (urlRelativeToBundleBase ? "/" + urlRelativeToBundleBase : "");
        return fullUrl;
    };

    /**
    * Clean-up bundle loader state that should not persist across sessions of bundle loading.
    * This includes component factories. Without cleaning this, subsequent bundle loading sessions will hit the
    * already-processed component factories for a given service and not bother loading any new components implementing said service.
    */
    var cleanupState = function() {
        this._componentFactories = {};
    };

    /**
     * Create a resource loader function that can be used by the XHRInterceptor to load resources from requirejs 
     * rather than calling out over the network.  This assumes that the resource was defined as a module in the 
     * bundle.js file which has already been loaded and defined by requirejs.
     */
    var createResourceLoaderFunction = function(bundleLoader) {
        var resourceLoaderFunction = function(url) {
            // Figure out if this url points into one of the bundles we have loaded.
            // Some example values to try to help explain what is going on...
            // incoming url="/C:/p4/dt_hanabi/src/BIFramework/test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor/resources/strings_en.properties"
            // bundleLoader._config.baseurl="test/sap/bi/framework/BundleLoader/bundles"
            // bundleLoader._bundlePaths={"../../../../test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor":"XHRInterceptor"}
            
            // If there is a base url (as in the examples above) we need to adjust the url to account for the requirejs configurations
            // both inside and outside the bundleloader.
            var currPath = url;
            if (bundleLoader._config.baseUrl) {
                var matchIdx = currPath.indexOf(bundleLoader._config.baseUrl);
                if (matchIdx === -1) {
                    // The url is aimed somewhere else so it must not be a bundle resource
                    return undefined;
                }
                
                if (matchIdx !== 0) {
                    // There is something in the url before the baseUrl - strip it off and build our own requirejs url.
                    currPath = url.substring(matchIdx);
                    currPath = getFullUrl(currPath);
                }
            }
            
            // At this point we should have something that looks like "../../../../test/sap/bi/framework/BundleLoader/bundles/XHRInterceptor/resources/strings_en.properties"
            // Go thru the bundlePaths to find the one that matches this path - specifically we want the LONGEST match.
            var matchingBundlePath = "";
            Object.keys(bundleLoader._bundlePaths).forEach(function(existingPath){
                if (currPath.indexOf(existingPath) === 0) {
                    // We found a match - see if it is longer than any previous matches.
                    if (existingPath.length > matchingBundlePath.length) {
                        matchingBundlePath = existingPath;
                    }
                }
            });
            
            if (matchingBundlePath.length > 0) {
                // It looks like the url is pointing into one of our bundles.  Get the requirejs context and see if the module exists.
                var matchingBundleId = bundleLoader._bundlePaths[matchingBundlePath];
                var matchingBundleRequireContextId = bundleLoader._id + "_" + matchingBundleId;
                var matchingBundleRequireContext = window.requirejs.s.contexts[matchingBundleRequireContextId];
                if (matchingBundleRequireContext) {
                    // Strip the original url to just the parts internal to the bundle and make sure it is
                    // a module that requirejs knows about.
                    var bundlePathPart = convertBundleIdToPath(matchingBundleId);
                    var bundlePathIdx = url.indexOf(bundlePathPart);
                    if (bundlePathIdx !== -1) {
                        var bundleInternalPath = "resource:" + url.substring(bundlePathIdx + bundlePathPart.length + 1); // +1 to get rid of the slash after the bundle id.

                        // Remove any url parameters if they exist.
                        var urlParamIdx = bundleInternalPath.indexOf("?");
                        if (urlParamIdx > 0) {
                            bundleInternalPath = bundleInternalPath.substring(0, urlParamIdx);
                        }
                        
                        // Check if requirejs knows about this url and if so, get the contents.
                        if (matchingBundleRequireContext.require.specified(bundleInternalPath)) {
                            // Trick the requirejs context into being synch rather than asynch and get the resource's module.
                            var origNextTick = matchingBundleRequireContext.nextTick;
                            var retVal;
                            try {
                                matchingBundleRequireContext.nextTick = function(fn) { fn(); };
                                matchingBundleRequireContext.require([bundleInternalPath], function(content){
                                    retVal = content;
                                });
                            } finally {
                                matchingBundleRequireContext.nextTick = origNextTick;
                            }
                            
                            if (retVal) {
                                return retVal;
                            }
                        }
                    }
                }
            }
            return undefined;
        };
        return resourceLoaderFunction;
    };
    
    var initializeRequirePlugins = function (bundleLoader) {
        var result = {};
        
        // Register a "service!" requirejs plugin for bundle loader instance
        var servicePlugin = new ServicePlugin(bundleLoader._kernel);
        define("service", servicePlugin);
        result.servicePlugin = servicePlugin;

        // Register a "serviceMetadata!" requirejs plugin for bundle loader instance
        var serviceMetadataPlugin = new ServiceMetadataPlugin(bundleLoader._kernel);
        define("serviceMetadata", serviceMetadataPlugin);
        result.serviceMetadataPlugin = serviceMetadataPlugin;

        // Register a "import!" requirejs plugin for bundle loader instance
        var importPlugin = new ImportPlugin(bundleLoader._kernel);
        define("import", importPlugin);
        result.importPlugin = importPlugin;

        // Register a "css!" requirejs plugin for bundle loader instance
        var resourceLoader;
        if (bundleLoader._config.enableXHRInterceptor) {
            resourceLoader = createResourceLoaderFunction(bundleLoader);
        }

        var logger = bundleLoader._kernel.getInstance("core.logger");
        var cssPlugin = new CssPlugin(resourceLoader, logger);
        define("css", cssPlugin);
        result.cssPlugin = cssPlugin;
        
        return result;
    };


    /**
     *  Constructor for the Bundle Loader
     */
    function BundleLoader(kernel, config) {
        var requireConfig = config.requireConfig || {};
        requireConfig.context = requireConfig.context || (new Date()).getTime();
        this._id = requireConfig.context;
        this._kernel = kernel;
        this._config = config;
        this._requireConfig = requireConfig;

        config.repoPath = config.repoPath || "";
        config.repoPath = startsWith(config.repoPath, "http") ? config.repoPath :
                          getFullUrl(config.baseUrl, config.repoPath);

        // Declare new require context for this instance of bundle loader
        this._require = require.config(extendRequireConfig.apply(this, [{
            baseUrl: getFullUrl(config.baseUrl)
        }]));

        // Immediately associate loader plugins to the bundle loader's require context
        var requirePlugins = initializeRequirePlugins(this);
        this._require([]);

        window.sap = window.sap || {};
        window.sap.bi = window.sap.bi || {};
        window.sap.bi.framework = window.sap.bi.framework || {};

        // Global to store bundle IDs that have been loaded into require framework.
        // Used by bundle loader afterwards to register bundles with kernel.
        window.sap.bi.framework.contexts = window.sap.bi.framework.contexts || {};

        // Register "service!" and "serviceMetadata!" as a global variables for access outside of AMD code
        // TODO: Using these global calls will fail in the case where multiple BundleLoader instances
        // exist as they will overwrite each other. These need to be deprecated and removed.
        window.sap.bi.framework.getService = window.sap.bi.framework.getService || function(bundleId, serviceId) {
            return requirePlugins.servicePlugin.getServiceForBundle(bundleId, serviceId);
        };
        window.sap.bi.framework.getServiceMetadata = window.sap.bi.framework.getServiceMetadata || function(serviceId) {
            return requirePlugins.serviceMetadataPlugin.getServiceMetadata(serviceId);
        };
        // This function is really here to make it easier to find the metadata json inside bundle.js file, especially when minified
        window.sap.bi.framework.declareBundle = window.sap.bi.framework.declareBundle || function(bundle) {
            // Just return the bundle without doing anything.
            return bundle;
        };

        // Define provided capabilities
        window.sap.bi.framework.capabilities = window.sap.bi.framework.capabilities || {};
        window.sap.bi.framework.capabilities.bundleLoading = window.sap.bi.framework.capabilities.bundleLoading || {};
        window.sap.bi.framework.capabilities.bundleLoading.hostBundle = true;

        // This holds the bundles (or promises of bundles) that have been loaded. Used to only load a bundle once.
        // This is a map from bundleID to bundle (string to bundle object)
        this._bundles = {};

        // This holds the component factories (or promises for them) that have been loaded. Used to resolve dependencies
        // before the parent factory.
        // This is a map from 'provide' id to array of component factories implementing the component.  If there are
        // multiple implementations they are ordered in reverse dependency order (activate first, then second, ...)
        this._componentFactories = {};

        // This holds a new RequireJS instance (context) for each bundle being loaded. By loading each bundle in a
        // separate context we can ensure there are no name collisions and potentially verify that bundles are not
        // attempting to load files from other bundles.
        this._bundleRequires = {};

        // Hash to track UI5 module paths that have been registered. Used to detect duplicate registrations.
        this._registeredUI5ModulePaths = {};

        // map a bundle's base path URL to the bundle's ID, to make it easier to reverse-lookup an ID from the path
        this._bundlePaths = {};
        
        // Check the config property to see if the XHRInterceptor should be enabled.
        if (this._config.enableXHRInterceptor) {
            var resourceLoaderFunction = createResourceLoaderFunction(this);
            XHRInterceptor.installInterceptor(resourceLoaderFunction, this._kernel.getInstance("core.logger"));
        }
    }
    
    // This function is used by a BundleLoader service to uninstall the interceptor for unit test cleanup.
    // Although potentially it could be used by other fwk clients.
    BundleLoader.prototype._uninstallInterceptor = function() {
        XHRInterceptor.uninstallInterceptor();
    };

    BundleLoader.prototype._loadBundles = function(bundleIds, onCompleteCallback, onErrorCallback) {
        // HACK: Clearing the component factories is a hack to enable us to reuse the bundle loader.  Without
        // it services for which an implementation already exists wil lnot be loaded (ie. new extensions to
        // an extension point won't load if one already exists).
        // We should do something more complex, like create a new BundleLoader entirely.  This method
        // is not thread safe (having 2 loads simultaneously will break!
        this._componentFactories = {};

        var bundleBaseUrl = this._config.baseUrl; // This could be undefined if no base is specified

        var getBundleContextPromises = function() {
            var bundleContextPromises = [];
            bundleIds.forEach(function(bundleId) {
                bundleContextPromises.push(this._createBundleContext(bundleId, bundleBaseUrl));
            }.bind(this));
            return Q.all(bundleContextPromises);
        }.bind(this);

        var getBundleContentPromises = function() {
            var bundleContentPromises = [];
            bundleIds.forEach(function(bundleId) {
                bundleContentPromises.push(this._loadBundle(bundleId, bundleBaseUrl));
            }.bind(this));
            return Q.all(bundleContentPromises);
        }.bind(this);

        var callback = function(promiseResult) {
            cleanupState.apply(this);
            onCompleteCallback();
        };

        getBundleContextPromises()
        .then(getBundleContentPromises.bind(this))
        .then(this._activateAllProviders.bind(this, bundleBaseUrl))
        .then(callback.bind(this))
        .fail(onErrorCallback)
        .done();
    };

    BundleLoader.prototype._createBundleContext = function(bundleId, bundleBaseUrl) {

        // If the bundle context is already created then return the promise that represents it
        if (this._bundleRequires[bundleId]) {
            log.apply(this, ["Shortcut creating context: " + bundleId]);
            return this._bundleRequires[bundleId];
        }

        log.apply(this, ["Creating context: " + bundleId]);

        var deferred = Q.defer();

        var fullBaseUrl = getFullUrl(bundleBaseUrl, convertBundleIdToPath(bundleId), bundleId);
        this._bundlePaths[fullBaseUrl] = bundleId;

        // Load the bundle in a new RequireJS context thereby creating a level of isolation for each bundle
        // so that for example, identically named modules in two bundles do not conflict.
        // The new context is uniquely identified by this bundle loader's ID plus this bundle's ID.
        var bundleRequire = require.config(extendRequireConfig.apply(this, [{
            baseUrl: fullBaseUrl,
            context: this._id + "_" + bundleId
        }]));

        initializeRequirePlugins(this);
        
        // Immediately associate loader plugins to the bundle's require context
        bundleRequire([], function() {
            // Hold onto the require context as it will be used to load implementation files for this bundle later.
            this._bundleRequires[bundleId] = bundleRequire;
            log.apply(this, ["Context created: " + bundleId]);
            deferred.resolve();
        }.bind(this), function(err) {
            log.apply(this, ["Error creating context: " + bundleId]);
            deferred.reject();
        });

        return deferred.promise;
    };

    BundleLoader.prototype._resolveBundle = function(bundleId) {

        // Load bundle contents
        var deferred = Q.defer();
        var currentBundleRequire = this._bundleRequires[bundleId];
        var currentModuleId = convertBundleIdToModuleId(bundleId);

        var boundLogger = log.bind(this);
        currentBundleRequire([currentModuleId],
           function(result) {
            deferred.resolve(result);
        }, function(result) {
            // The bundle could not be loaded.  Log an error, but resolve the promise anyways so that loading will continue
            // Failure to load a bundle should be non-fatal (only the missing bundle is skipped)
            boundLogger("Failed to load bundle with id: " + bundleId);
            deferred.resolve(undefined);
        });
        return deferred.promise;
    };

    BundleLoader.prototype._parseBundle = function(bundle, bundleBaseUrl) {
        // Hold onto the component factories so they can be resolved once all bundles are known
        var previouslyDeclaredServiceIds = [];

        // Url of bundle relative to host root
        var bundleFullUrl = getFullUrl(bundleBaseUrl, convertBundleIdToPath(bundle.id), bundle.id);

        // The framework property is reserved and bundle developers should not provide it
        var framework = {
             bundleId: bundle.id,
             bundleUrl: bundleFullUrl,
             bundleVersion: bundle.version
        };

        // Process any UI5-specific metadata in bundle manifest
        processUI5Metadata.apply(this, [bundle.ui5, bundle.id, bundleFullUrl]);

        var that = this;
        (bundle.components || []).forEach(function(component) {
            // Add framework metadata into component (will be exposed to consumers with call to get component metadata)
            component.framework = framework;
            component.bundleId = bundle.id;

            // If there is an explicit set of included dependencies declared for the component then use it, otherwise assume that this
            // component could have access to any of the dependencies declared for the bundle.  Additionally, components have
            // an implicit dependency on any component declared previously in the bundle (unless explicitly set for the component)
            component.dependencies = component.includedDependencies;
            if (!component.dependencies) {
                component.dependencies = bundle.dependencies || [];
                component.dependencies = component.dependencies.concat(previouslyDeclaredServiceIds);
            }
            previouslyDeclaredServiceIds.push(component.provide);

            // If the component lacks an ID, create a default ID using the bundle name and component provided
            component.id = component.id || bundle.id + "." + component.provide;

            that._componentFactories[component.provide] = that._componentFactories[component.provide] || [];
            that._componentFactories[component.provide].push(component);
        });

        // This allows bundles to cause code to be executed after they are loaded
        if(typeof bundle.onLoaded === "function"){
            bundle.onLoaded.apply(this);
        }
    };

    BundleLoader.prototype._loadBundle = function(bundleId, bundleBaseUrl) {
        // If the bundle is already loading then return the promise that represents it
        if (this._bundles[bundleId]) {
            log.apply(this, ["Shortcut loading: " + bundleId]);
            return this._bundles[bundleId];
        }

        log.apply(this, ["Loading: " + bundleId]);
        notify.call(this, "loadBundle", { bundleId: bundleId });

        var that = this;
        var promise = this._resolveBundle(bundleId);
        promise = promise.then(function(bundle) {
            // The bundle may not have resolved.  We don't want to abort loading entirely so the promise is resolved with 'undefined'
            // rather than rejected.  Handle the undefined bundle here, again without failure (error message was logged earlier in promise stack)
            if (!bundle) {
                return;
            }
            
            var depPromise = that._loadDependentBundles(bundle, bundleBaseUrl);

            if (bundle.imports) {
                var mapConfig = {"*": {}};
                bundle.imports.forEach(function(importMetadata) {
                    mapConfig["*"][importMetadata.localPath] = "import!" + importMetadata.bundle + ":" + (importMetadata.remotePath ? importMetadata.remotePath : "");
                });
                require.config({
                    context: that._id + "_" + bundle.id,
                    map: mapConfig
                });
            }

            // If this bundle has a host bundle then we need to reload this bundle in the correct context.
            var reloadedPromise;
            if (bundle.hostBundle) {
                // Clear the existing bundle being loaded, update the context, and reload
                // The updated context will use the 'context' of the host bundle and the baseUrl of the extension bundle
                that._bundles[bundleId] = "ReloadingInHost";

                // CVOM Hack
                var paths = {};
                if (bundleId === "sap.viz.geo.all") {
                    paths["all-bundle"] = "../../../sap/viz/geo/all/all-bundle";
                    paths["sap.viz.geo.all"] = "../../../sap/viz/geo/all/sap.viz.geo.all";
                    paths["resources/libs/jslinq"] = "../../../sap/viz/geo/all/resources/libs/jslinq";
                    paths["resources/libs/dojo.has"] = "../../../sap/viz/geo/all/resources/libs/dojo.has";
                    paths["resources/libs/dojo.i18n"] = "../../../sap/viz/geo/all/resources/libs/dojo.i18n";
                    paths["resources/styles/esri"] = "../../../sap/viz/geo/all/resources/styles/esri";
                    paths["resources/styles/map"] = "../../../sap/viz/geo/all/resources/styles/map";
                }

                var hostBundleRequire = require.config(extendRequireConfig.apply(that, [{
                    context: that._id + "_" + bundle.hostBundle,
                    paths: paths
                }]));
                that._bundleRequires[bundleId] = hostBundleRequire;
                reloadedPromise = that._resolveBundle(bundleId);
                reloadedPromise.then(function(bundle) {
                    that._parseBundle(bundle, bundleBaseUrl);
                });
                return reloadedPromise.then(function() {
                    return bundle;
                });
            } else {
                depPromise.then(function(bundleDeps) {
                    that._parseBundle(bundle, bundleBaseUrl);
                });
                return depPromise.then(function() {
                    return bundle;
                });
            }
        });
        this._bundles[bundleId] = promise;
        return promise;
    };

    /**
     * Bundle dependencies force the ordering of bundles.  This is dangerous as it leads to performance problems
     * due to the serial nature in which the bundles must be processed.
     */
    BundleLoader.prototype._loadDependentBundles = function(bundle, bundleBaseUrl) {
        var allDepPromises = [];

        notify.call(this, "loadDependentBundles", { bundleId: bundle.id, bundle: bundle });

        // The 'loadAfter' property introduces a bundle dependency
        var dependentBundles = (bundle && bundle.loadAfter) || [];
        var that = this;
        var depPromise;
        for (var i = 0; i < dependentBundles.length; i++) {
            var depBundleId = dependentBundles[i];
            log.apply(that, ["Loading dep '" + depBundleId + "' for '" + bundle.id + "'"]);
            if (!this._bundleRequires[depBundleId]) {
                var bundleCtxtPromise = this._createBundleContext(depBundleId, bundleBaseUrl);
                depPromise = bundleCtxtPromise.then(that._loadBundle.bind(this, depBundleId));
            }
            else {
                depPromise = that._loadBundle(depBundleId);
            }
            allDepPromises.push(depPromise);
        }

        // The 'hostBundle' indirectly introduces a bundle dependency as the host bundle must be loaded first
        // The specific workflow is when the host is minified.  The host bundle must be loaded as a single request
        // for the minified bundle, not as individual files as would be referenced by the 'extension' bundle.
        if (bundle.hostBundle) {
            // Check that the hostBundle is one of the bundles the loader knows about.  It's an error if the host doesn't exist.
            if (!that._bundleRequires[bundle.hostBundle]) {
                throw "Bundle '" + bundle.id + "' specified an invalid hostBundle of '" + bundle.hostBundle + "'";
            }

            log.apply(that, ["Loading host bundle '" + bundle.hostBundle + "' for '" + bundle.id + "'"]);
            depPromise = that._loadBundle(bundle.hostBundle);
            allDepPromises.push(depPromise);
        }

        return Q.all(allDepPromises);
    };

    var GOVERNATOR_PROVIDER_NAME = "sap.bi.gdd.governator";
    BundleLoader.prototype._activateAllProviders = function(bundleBaseUrl) {
        var govProviderPromise = (this._componentFactories[GOVERNATOR_PROVIDER_NAME] !== undefined)
                               ? this._activateProvider(GOVERNATOR_PROVIDER_NAME, bundleBaseUrl)
                               : undefined;

        // activate governator provider first, so that we can use it to govern activation of other components
        var that = this;
        return Q(govProviderPromise).then(function() {
            var providerPromises = [];
            for (var provideId in that._componentFactories) {
                if (that._componentFactories.hasOwnProperty(provideId) && provideId !== GOVERNATOR_PROVIDER_NAME) {
                    providerPromises.push(that._activateProvider(provideId, bundleBaseUrl));
                }
            }

            return Q.all(providerPromises);
        });
    };


    BundleLoader.prototype._activateProvider = function(provideId, bundleBaseUrl) {
        // Strip off the leading '*' used to indicate dependency on all implementations rather than last implementation
        if (provideId[0] === "*") {
            provideId = provideId.slice(1);
        }

        // If there are no providers (this is a valid case that occurs when a dependency is expressed but no
        // implementation of the dependency is present in the current deployment) then return
        if (!this._componentFactories[provideId]) {
            return;
        }

        // If the provider has already been resolved then return
        if (this._componentFactories[provideId].activatedProviders) {
            return this._componentFactories[provideId].activatedProviders;
        }

        // Should we add a check for infinite loops?
        if (this._componentFactories[provideId].activateInProgress) {
            throw "Infinity and beyond!";
        }
        this._componentFactories[provideId].activateInProgress = true;

        // Ensure all the dependencies have been resolved
        var activatedDeps = [];
        var that = this;
        var components = this._componentFactories[provideId];
        // Loop over components that provide service
        components.forEach(function(component) {
            (component.dependencies || []).forEach(function(dep) {
                // Components can depend on 'themselves' which just means that the previously provided implementation
                // must be evaluated before this one.  In this case the components are activated in the order they
                // exist in the _componentFactories array and there is no need to recurse (which would lead to an infinite loop)
                if (dep !== provideId) {
                    activatedDeps.push(that._activateProvider(dep, bundleBaseUrl));
                }
            });
        });

        // Once the dependencies have been activated, activate this factory
        var providers = Q.all(activatedDeps).then(function() {
            // Components need to be activated in order to preserve dependencies in the ordering
            var activationPromise;
            components.map(function(component) {
                if (activationPromise) {
                    activationPromise = activationPromise.then(function() {
                        return that._activateComponent(component, bundleBaseUrl);
                    });
                } else {
                    activationPromise = that._activateComponent(component, bundleBaseUrl);
                }
            });
            return activationPromise;
        });
        this._componentFactories[provideId].activatedProviders = providers;
        this._componentFactories[provideId].activateInProgress = false;
        return providers;
    };

    var REQUIRE_KEY = "require:";

    var getRequireDependencies = function(instance, dependencies) {
        dependencies = dependencies || [];
        if (typeof instance === "string") {
            if (instance.indexOf(REQUIRE_KEY) === 0) {
                dependencies.push(instance.substring(REQUIRE_KEY.length));
            }
        } else if (typeof instance === "object" && instance !== null) {
            if (Array.isArray(instance)) {
                instance.forEach(function(arrayElement) {
                    getRequireDependencies(arrayElement, dependencies);
                });
            } else {
                Object.keys(instance).forEach(function(key) {
                    getRequireDependencies(instance[key], dependencies);
                });
            }
        }
        return dependencies;
    };

    var replaceRequireDepencencies = function(instance, dependencyMap) {
        if (typeof instance === "string") {
            if (instance.indexOf(REQUIRE_KEY) === 0) {
                var moduleId = instance.substring(REQUIRE_KEY.length);
                return dependencyMap[moduleId];
            }
        } else if (typeof instance === "object") {
            if (Array.isArray(instance)) {
                return instance.map(function(arrayElement) {
                    return replaceRequireDepencencies(arrayElement, dependencyMap);
                });
            } else {
                Object.keys(instance).forEach(function(key) {
                    instance[key] = replaceRequireDepencencies(instance[key], dependencyMap);
                });
            }
        }
        return instance;
    };

    BundleLoader.prototype._registerComponent = function(component) {
        log.apply(this, ["Registering: " + component.provide + " | " + component.id]);
        this._kernel.register(component);
        if (component.provide === GOVERNATOR_PROVIDER_NAME) {
            var governator = sap.bi.framework.getService(null, GOVERNATOR_PROVIDER_NAME);
            return governator.init();
        }
    };

    BundleLoader.prototype._activateComponent = function(component, bundleBaseUrl) {
        var governator = sap.bi.framework.getService(null, GOVERNATOR_PROVIDER_NAME);
        if (governator && !governator.isComponentEnabled(component)) {
            return;
        }
        
        log.apply(this, ["Activating: " + component.provide + " | " + component.id]);
        if (component.module) {
            component.instance = REQUIRE_KEY + component.module;
        }

        if (component.instance) {
            var requireDependencies = getRequireDependencies(component.instance);
            if (requireDependencies.length > 0) {
                var deferred = Q.defer();
                var onSuccess = function() {
                    deferred.resolve(Array.prototype.slice.call(arguments));
                };
                var onFailure = function(result) {
                    deferred.reject(result);
                };

                var bundleRequire = this._bundleRequires[component.bundleId];
                bundleRequire(requireDependencies, onSuccess, onFailure);

                var that = this;
                var activatedComponent = deferred.promise.then(function(modules) {
                    var dependencyMap = {};
                    requireDependencies.forEach(function(dep, index) {
                        dependencyMap[requireDependencies[index]] = modules[index];
                    });
                    component.instance = replaceRequireDepencencies(component.instance, dependencyMap);
                    return that._registerComponent(component);
                });
                return activatedComponent;
            }
        }

        if (component.factory || component.instance){
            return this._registerComponent(component);
        } else {
            var id = component.id || "unknown";
            throw new Error("component " + id + " cannot be registered - valid module, factory, or instance not provided");
        }
    };

    BundleLoader.prototype._getMetadata = function() {
        return {
            id: this._id,
            config: this._config,
            require: this._require
        };
    };

    BundleLoader.prototype._getHelpers = function() {
        return {
            getBundleUrl: getBundleUrl.bind(this),
            getBundleId: getBundleId.bind(this),
            getBundlePromise: getBundlePromise.bind(this),
            getRequireContext: getRequireContext.bind(this),
            extendRequireConfig: extendRequireConfig.bind(this),
            startsWith: startsWith,
            endsWith: endsWith,
            stripLeading: stripLeading,
            stripTrailing: stripTrailing
        };
    };

    return {
        init: function (kernel, config) {
            var bundleLoader = new BundleLoader(kernel, config);

            kernel.register({
                provide: "bundleLoader.loadBundles",
                instance: bundleLoader._loadBundles.bind(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.getMetadata",
                instance: bundleLoader._getMetadata.apply(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.getHelpers",
                instance: bundleLoader._getHelpers.apply(bundleLoader)
            });

            kernel.register({
                provide: "bundleLoader.uninstallInterceptor",
                instance: bundleLoader._uninstallInterceptor.bind(bundleLoader)
            });
        }
    };
});

define('sap/bi/framework/kernel/DIKernel',[], function() {
    

    function DIKernel() {
        this._componentsByService = {};

        var kernel = this;
        this.register({
            provide: "kernel",
            instance: kernel
        });
    }

    DIKernel.prototype._getComponentsForService = function(service) {
        var components = this._componentsByService[service];
        if (components === undefined) {
            components = [];
            this._componentsByService[service] = components;
        }

        return components;
    };

    DIKernel.prototype.register = function(component) {
        var service = component.provide;
        var componentToRegister = {service: service};

        if (component.factory) {
            componentToRegister.factory = component.factory;
        } else if (component.instance) {
            componentToRegister.instance = component.instance;
        }

        if (!componentToRegister.factory && !componentToRegister.instance) {
            throw new Error("component " + component.id + " cannot be registered - valid instance or factory not provided");
        }

        componentToRegister.dependencies = (component.dependencies || []).map(function(dependency) {
            if (dependency[0] === "*") {
                return {
                    service: dependency.slice(1),
                    cardinality: "multiple"
                };
            }
            else {
                return {
                    service: dependency,
                    cardinality: "single"
                };
            }
        });

        componentToRegister.exportedMetadata = {
            id: component.id,
            framework: component.framework,
            customProperties: component.customProperties
        };

        this._getComponentsForService(service).push(componentToRegister);
    };

    DIKernel.prototype._getDependency = function(dependency) {
        if (dependency.cardinality === "single") {
            return this.getInstance(dependency.service);
        } else if (dependency.cardinality === "multiple") {
            return this.getAllInstances(dependency.service);
        } else {
            throw new Exception("Unrecognized cardinality: " + dependency.cardinality);
        }
    };

    DIKernel.prototype._getInstance = function(component) {
        var instance = component.instance;

        if (instance === undefined) {
            component.constructing = true;

            var resolvedDependecies = component.dependencies.map(this._getDependency.bind(this));

            instance = component.factory.apply(null, resolvedDependecies);

            component.instance = instance;

            delete component.constructing;
        }

        return instance;
    };

    DIKernel.prototype.get = function(service) {
        var components = this._getComponentsForService(service);

        var validComponents = components.filter(function(component) {
            return !component.constructing;
        });

        if (validComponents.length === 0) {
            return undefined;
        }

        return validComponents[validComponents.length - 1];
    };

    DIKernel.prototype.getAll = function(service) {
        var components = this._getComponentsForService(service);

        return components.filter(function(component) {
            return !component.constructing;
        });
    };

    DIKernel.prototype.getInstance = function(service) {
        var component = this.get(service);
        return component ? this._getInstance(component) : component;
    };

    DIKernel.prototype.getAllInstances = function(service) {
        var components = this.getAll(service);
        return components ? components.map(this._getInstance.bind(this)) : components;
    };

    return DIKernel;
});

// only included in sap.viz.js standalone mode

// fake sap.viz.aio for sap.viz.aio-bundle in sap.viz.js standalone mode
// because sap.viz.js already includes all the contents of sap.viz.aio
define("sap.viz.aio", [], function(){return {};});

// TODO workaround here for ONLY standalone mode
// to provide sap.bi.framework.declareBundle for sap.viz.aio-bundle instead of waiting BundleLoader.init()
window.sap = window.sap || {};
window.sap.bi = window.sap.bi || {};
window.sap.bi.framework = window.sap.bi.framework || {};
window.sap.bi.framework.declareBundle = function(bundle) {
    // Just return the bundle without doing anything.
    // This function is really here to make it easier to find the metadata json inside bundle.js file.
    return bundle;
};

// for release version
define( 'sap.viz.vizsdk-bundle',[ "sap.viz.aio" ], function() {
    return sap.bi.framework.declareBundle( {
        "id" : "sap.viz.aio",
        "components" : [ {
            "id" : "sap.viz.api",
            "provide" : "sap.viz.api",
            "instance" : sap.viz.api
        }, {
            "id" : "sap.viz.extapi",
            "provide" : "sap.viz.extapi",
            "instance" : sap.viz.extapi
        }, {
            "id" : "sap.viz.common",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/Common"
        }/*, {
            "id" : "sap.viz.modules.rootContainer",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/modules/manifests/RootContainer"
        }, {
            "id" : "viz/area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/AreaChart",
            "customProperties" : {
                "name" : "Area Chart",
                "description" : "Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/3d_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/Bar3DChart",
            "customProperties" : {
                "name" : "3D Bar Chart",
                "description" : "3D Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/BarChart",
            "customProperties" : {
                "name" : "Bar Chart",
                "description" : "Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/bubble",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/BubbleChart",
            "customProperties" : {
                "name" : "Bubble Chart",
                "description" : "Bubble Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/3d_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/Column3DChart",
            "customProperties" : {
                "name" : "3D Column Chart",
                "description" : "3D Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/combination",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/CombinationChart",
            "customProperties" : {
                "name" : "Combined Column Line Chart",
                "description" : "Combined Column Line Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/donut",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DonutChart",
            "customProperties" : {
                "name" : "Donut Chart",
                "description" : "Donut Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/donut_with_depth",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DonutWithDepthChart",
            "customProperties" : {
                "name" : "Donut with Depth Chart",
                "description" : "Donut with Depth Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualBarChart",
            "customProperties" : {
                "name" : "Bar Chart with 2 X-Axes",
                "description" : "Bar Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_combination",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualCombinationChart",
            "customProperties" : {
                "name" : "Combined Column Line Chart with 2 Y-Axes",
                "description" : "Combined Column Line Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_horizontal_combination",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualHorizontalCombinationChart",
            "customProperties" : {
                "name" : "Combined Bar Line Chart with 2 X-Axes",
                "description" : "Combined Bar Line Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_horizontal_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualHorizontalLineChart",
            "customProperties" : {
                "name" : "Horizontal Line Chart with 2 X-Axes",
                "description" : "Horizontal Line Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualLineChart",
            "customProperties" : {
                "name" : "Line Chart with 2 Y-Axes",
                "description" : "Line Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_dual_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualPercentageStackedBarChart",
            "customProperties" : {
                "name" : "100% Stacked Bar Chart with 2 X-Axes",
                "description" : "100% Stacked Bar Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_dual_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualPercentageStackedVerticalBarChart",
            "customProperties" : {
                "name" : "100% Stacked Column Chart with 2 Y-Axes",
                "description" : "100% Stacked Column Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualStackedBarChart",
            "customProperties" : {
                "name" : "Stacked Bar Chart with 2 X-Axes",
                "description" : "Stacked Bar Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualStackedVerticalBarChart",
            "customProperties" : {
                "name" : "Stacked Column Chart with 2 Y-Axes",
                "description" : "Stacked Column Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/dual_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/DualVerticalBarChart",
            "customProperties" : {
                "name" : "Column Chart with 2 Y-Axes",
                "description" : "Column Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/heatmap",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HeatMapChart",
            "customProperties" : {
                "name" : "Heat Map",
                "description" : "Heat Map",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalAreaChart",
            "customProperties" : {
                "name" : "Horizontal Area Chart",
                "description" : "Horizontal Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_boxplot",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalBoxplotChart",
            "customProperties" : {
                "name" : "Horizontal Box Plot",
                "description" : "Horizontal Box Plot",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_combination",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalCombinationChart",
            "customProperties" : {
                "name" : "Combined Bar Line Chart",
                "description" : "Combined Bar Line Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalLineChart",
            "customProperties" : {
                "name" : "Horizontal Line Chart",
                "description" : "Horizontal Line Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_mekko",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalMekkoChart",
            "customProperties" : {
                "name" : "Horizontal Mekko Chart",
                "description" : "Horizontal Mekko Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_stacked_waterfall",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalStackedWaterfallChart",
            "customProperties" : {
                "name" : "Horizontal Stacked Waterfall Chart",
                "description" : "Horizontal Stacked Waterfall Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/horizontal_waterfall",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/HorizontalWaterfallChart",
            "customProperties" : {
                "name" : "Horizontal Waterfall Chart",
                "description" : "Horizontal Waterfall Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/LineChart",
            "customProperties" : {
                "name" : "Line Chart",
                "description" : "Line Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/mekko",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MekkoChart",
            "customProperties" : {
                "name" : "Mekko chart",
                "description" : "Mekko chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiAreaChart",
            "customProperties" : {
                "name" : "Multiple Area Chart",
                "description" : "Multiple Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiBarChart",
            "customProperties" : {
                "name" : "Multiple Bar Chart",
                "description" : "Multiple Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_bubble",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiBubbleChart",
            "customProperties" : {
                "name" : "Multiple Bubble Chart",
                "description" : "Multiple Bubble Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_donut",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDonutChart",
            "customProperties" : {
                "name" : "Multiple Donut Chart",
                "description" : "Multiple Donut Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_donut_with_depth",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDonutWithDepthChart",
            "customProperties" : {
                "name" : "Multiple Donut with Depth Chart",
                "description" : "Multiple Donut with Depth Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_dual_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualBarChart",
            "customProperties" : {
                "name" : "Multiple Bar Chart with 2 X-Axes",
                "description" : "Multiple Bar Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_dual_horizontal_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualHorizontalLineChart",
            "customProperties" : {
                "name" : "Multiple Horizontal Line Chart with 2 X-Axes",
                "description" : "Multiple Horizontal Line Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_dual_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualLineChart",
            "customProperties" : {
                "name" : "Multiple Line Chart with 2 Y-Axes",
                "description" : "Multiple Line Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_100_dual_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualPercentageStackedBarChart",
            "customProperties" : {
                "name" : "Multiple 100% Stacked Bar Chart with 2 X-Axes",
                "description" : "Multiple 100% Stacked Bar Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_100_dual_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualPercentageStackedVerticalBarChart",
            "customProperties" : {
                "name" : "Multiple 100% Stacked Column Chart with 2 Y-Axes",
                "description" : "Multiple 100% Stacked Column Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_dual_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualStackedBarChart",
            "customProperties" : {
                "name" : "Multiple Stacked Bar Chart with 2 X-Axes",
                "description" : "Multiple Stacked Bar Chart with 2 X-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_dual_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualStackedVerticalBarChart",
            "customProperties" : {
                "name" : "Multiple Stacked Column Chart with 2 Y-Axes",
                "description" : "Multiple Stacked Column Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_dual_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiDualVerticalBarChart",
            "customProperties" : {
                "name" : "Multiple Column Chart with 2 Y-Axes",
                "description" : "Multiple Column Chart with 2 Y-Axes",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_horizontal_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiHorizontalAreaChart",
            "customProperties" : {
                "name" : "Multiple Horizontal Area Chart",
                "description" : "Multiple Horizontal Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_horizontal_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiHorizontalLineChart",
            "customProperties" : {
                "name" : "Multiple Horizontal Line Chart",
                "description" : "Multiple Horizontal Line Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_line",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiLineChart",
            "customProperties" : {
                "name" : "Multiple Line Chart",
                "description" : "Multiple Line Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_100_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiPercentageAreaChart",
            "customProperties" : {
                "name" : "Multiple 100% Area Chart",
                "description" : "Multiple 100% Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_100_horizontal_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiPercentageHorizontalAreaChart",
            "customProperties" : {
                "name" : "Multiple 100% Horizontal Area Chart",
                "description" : "Multiple 100% Horizontal Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_100_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiPercentageStackedBarChart",
            "customProperties" : {
                "name" : "Multiple 100% Stacked Bar Chart",
                "description" : "Multiple 100% Stacked Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_100_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiPercentageStackedVerticalBarChart",
            "customProperties" : {
                "name" : "Multiple 100% Stacked Column Chart",
                "description" : "Multiple 100% Stacked Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_pie",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiPieChart",
            "customProperties" : {
                "name" : "Multiple Pie Chart",
                "description" : "Multiple Pie Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_pie_with_depth",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiPieWithDepthChart",
            "customProperties" : {
                "name" : "Multiple Pie with Depth Chart",
                "description" : "Multiple Pie with Depth Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_radar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiRadarChart",
            "customProperties" : {
                "name" : "Multiple Radar Chart",
                "description" : "Multiple Radar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_scatter",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiScatterChart",
            "customProperties" : {
                "name" : "Multiple Scatter Plot",
                "description" : "Multiple Scatter Plot",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiStackedBarChart",
            "customProperties" : {
                "name" : "Multiple Stacked Bar Chart",
                "description" : "Multiple Stacked Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiStackedVerticalBarChart",
            "customProperties" : {
                "name" : "Multiple Stacked Column Chart",
                "description" : "Multiple Stacked Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/multi_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/MultiVerticalBarChart",
            "customProperties" : {
                "name" : "Multiple Column Chart",
                "description" : "Multiple Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/network",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/NetworkChart",
            "customProperties" : {
                "name" : "Network Chart",
                "description" : "Network Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PercentageAreaChart",
            "customProperties" : {
                "name" : "100% Area Chart",
                "description" : "100% Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_horizontal_area",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PercentageHorizontalAreaChart",
            "customProperties" : {
                "name" : "100% Horizontal Area Chart",
                "description" : "100% Horizontal Area Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_horizontal_mekko",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PercentageHorizontalMekkoChart",
            "customProperties" : {
                "name" : "100% Horizontal Mekko Chart",
                "description" : "100% Horizontal Mekko Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_mekko",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PercentageMekkoChart",
            "customProperties" : {
                "name" : "100% Mekko Chart",
                "description" : "100% Mekko Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PercentageStackedBarChart",
            "customProperties" : {
                "name" : "100% Stacked Bar Chart",
                "description" : "100% Stacked Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/100_stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PercentageStackedVerticalBarChart",
            "customProperties" : {
                "name" : "100% Stacked Column Chart",
                "description" : "100% Stacked Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/pie",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PieChart",
            "customProperties" : {
                "name" : "Pie Chart",
                "description" : "Pie Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/pie_with_depth",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/PieWithDepthChart",
            "customProperties" : {
                "name" : "Pie with Depth Chart",
                "description" : "Pie with Depth Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/radar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/RadarChart",
            "customProperties" : {
                "name" : "Radar Chart",
                "description" : "Radar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/scatter",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/ScatterChart",
            "customProperties" : {
                "name" : "Scatter Plot",
                "description" : "Scatter Plot",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/scatter_matrix",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/ScatterMatrixChart",
            "customProperties" : {
                "name" : "Scatter Matrix Chart",
                "description" : "Scatter Matrix Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "riv/simple",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/SimpleChart",
            "customProperties" : {
                "name" : "Simple Chart",
                "description" : "Simple Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/stacked_bar",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/StackedBarChart",
            "customProperties" : {
                "name" : "Stacked Bar Chart",
                "description" : "Stacked Bar Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/stacked_column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/StackedVerticalBarChart",
            "customProperties" : {
                "name" : "Stacked Column Chart",
                "description" : "Stacked Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/stacked_waterfall",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/StackedWaterfallChart",
            "customProperties" : {
                "name" : "Stacked Waterfall Chart",
                "description" : "Stacked Waterfall Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/tagcloud",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/TagCloudChart",
            "customProperties" : {
                "name" : "Tag Cloud",
                "description" : "Tag Cloud",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/tree",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/TreeChart",
            "customProperties" : {
                "name" : "Tree",
                "description" : "Tree",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/treemap",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/TreeMapChart",
            "customProperties" : {
                "name" : "Tree Map",
                "description" : "Tree Map",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/column",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/VerticalBarChart",
            "customProperties" : {
                "name" : "Column Chart",
                "description" : "Column Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/boxplot",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/VerticalBoxplotChart",
            "customProperties" : {
                "name" : "Box Plot",
                "description" : "Box Plot",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/waterfall",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/WaterfallChart",
            "customProperties" : {
                "name" : "Waterfall Chart",
                "description" : "Waterfall Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/bullet",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/BulletChart",
            "customProperties" : {
                "name" : "Bullet Chart",
                "description" : "Bullet Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/time_value_bubble",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/TimeValueBubbleChart",
            "customProperties" : {
                "name" : "Time Value Bubble Chart",
                "description" : "Time Value Bubble Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }, {
            "id" : "viz/number",
            "provide" : "sap.viz.impls",
            "instance" : "sap/viz/impls/NumberChart",
            "customProperties" : {
                "name" : "Number Chart",
                "description" : "Number Chart",
                "resources" : [ {
                    "key" : "sap.viz.api.env.Template.loadPaths",
                    "path" : "./resources/chart/templates"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/chart/langs"
                }, {
                    "key" : "sap.viz.api.env.Language.loadPaths",
                    "path" : "./resources/framework/langs"
                } ]
            }
        }*/]
    });
});

define('sap.viz.vizsdk-bundleloader',[
    "sap/bi/framework/BundleLoader/BundleLoader",
    "sap/bi/framework/kernel/DIKernel",
    "sap/bi/framework/BundleLoader/CssPlugin",
    "sap.viz.vizsdk-bundle",
    'require'
], function(BundleLoader, DIKernel, CssPlugin, aioBundle) {
    if (sap === undefined || sap.bi === undefined || sap.bi.framework === undefined || sap.bi.framework.getService === undefined) {
        if(!window._cvom_kernel) {
            window._cvom_kernel = new DIKernel();
        }
        BundleLoader.init(window._cvom_kernel, {});
    }

    aioBundle.components.forEach(function(component) {
        if (!component.instance) {
            component.instance = {};
        }
    });

    (aioBundle.components || []).forEach(window._cvom_kernel.register.bind(window._cvom_kernel));

    window.sap = window.sap || {};
    window.sap.viz = window.sap.viz || {};
    window.sap.viz.extapi = window.sap.viz.extapi || {};
    window.sap.viz.extapi.core = window.sap.viz.extapi.core || {};
    window.sap.viz.extapi.core.registerBundle = function(bundle) {
        (bundle.components || []).forEach(window._cvom_kernel.register.bind(window._cvom_kernel));
    };

    // define css plug-in in the standalone require context.
    define("css", new CssPlugin());

    return null;
});
(function(){
    var list = define && define.__autoLoad;
    if(list && list.length){
        define.__autoLoad = [];
        require(list);
    }
})();
(function(){
    //create proxy to load all manifests before invoking the legacy manifest api for build-in manifest object to make
    // api 1.0 compatible to the extension framework.
    var ManifestRegister = sap && sap.viz && sap.viz.manifests && 
                sap.viz.manifests.util && sap.viz.manifests.util.ManifestRegister;
    function createManifestCategoryProxy(category) {
        if (!category) {
            return category;
        }
        var proxy = {}, func;
        for (func in category) {
            if (category.hasOwnProperty(func) && (typeof category[func]) === 'function') {
                if (func === "get" || func === "each") {
                    proxy[func] = function(delegate) {
                        return function() {
                            if (ManifestRegister) {
                                ManifestRegister.registerAll();
                            }
                            return category[delegate].apply(this, arguments);
                        };
                    }(func);
                } else {
                    proxy[func] = function(delegate) {
                        return function() {
                            return category[delegate].apply(this, arguments);
                        };
                    }(func);
                }
            }
        }
        return proxy;
    }
    
    if (sap && sap.viz && sap.viz.manifest) {
        var sap_viz_manifest = {};
        sap_viz_manifest.feeds = createManifestCategoryProxy(sap.viz.manifest.feeds);
        sap_viz_manifest.module = createManifestCategoryProxy(sap.viz.manifest.module);
        sap_viz_manifest.viz = createManifestCategoryProxy(sap.viz.manifest.viz);
        sap.viz.manifest = sap_viz_manifest;
    }
})();
(function(global){
    var sap = global.sap;
    var root = sap && sap.viz;
    if(root){
        global.__sap_v2 = {};
        for(var i in root){
            if(i==='api'||i==='extapi'){
                if(jQuery && jQuery.extend){
                    global.__sap_v2[i] = jQuery.extend(true,{},root[i]);
                }else{
                    global.__sap_v2[i] = root[i];
                }
            }else{
                global.__sap_v2[i] = root[i];
            }
        }
        global.__sap_v2.extapi.manifest._queue = root.extapi.manifest._queue;
        if(global.__sap_metadata){
            sap.viz.api.metadata = global.__sap_metadata;
        }
    }
})(this);

(function(global){
    var root = sap.viz;
    var v2 = global.__sap_v2;
    var v3 = global.__sap_v3;

    function mergedCallback(cb, err){
        // handle callback for both versions
        var args;
        var errArgs;
        var flag = 1;
        var versions = {
            v2: 2, // v2 and v3 must be relatively prime numbers
            v3: 3
        };
        return function(version, isErr){
            // This is the real callback handler
            return function(){
                flag *= versions[version];
                // save arguments to use the correct one in callback
                errArgs = isErr ? arguments : errArgs;
                args = isErr ? args : arguments;
                if(flag % (versions.v2 * versions.v3) === 0){
                    // both versions have returned, so call callback.
                    // call err as long as one version fails.
                    var callback = errArgs && err ? err : cb;
                    if(callback){
                        callback.apply(this, callback === err ? errArgs : args);
                    }
                    // once successful, reset this flag.
                    flag = 1;
                }

                
            };
        };
    }

    if(v2 && v3){

        root.api = jQuery.extend(true, {}, v2.api, v3.api);
        root.extapi = jQuery.extend(true, {}, v2.extapi, v3.extapi);
        
        root.v2 = v2;
        root.v3 = v3;
        root.extapi.manifest._queue = v2.extapi.manifest._queue;
        root.extapi.env.template._queue = v3.extapi.env.template._queue;
        root.extapi.env.language._queue = v3.extapi.env.language._queue;
        root.extapi.Flow = v2.extapi.Flow;
        root.api.data.CrosstableDataset = v2.api.data.CrosstableDataset;
        root.api.data.FlatTableDataset = v2.api.data.FlatTableDataset;
        if(v3.extapi.env.Resource && v3.extapi.env.Resource.path){
            var resourcePath = v3.extapi.env.Resource.path();
            for(var i in resourcePath){
                v2.extapi.env.Resource.path(i, resourcePath[i]);
            }           
        }

        var LocaleListenerCache = {};
        var TemplateListenerCache = {};
        var LanguageListenerCache = {};
        if(v3.api.env.Format && v3.api.env.Format.numericFormatter){
            var formatter = v3.api.env.Format.numericFormatter();
                v2.api.env.Format.numericFormatter(formatter);          
        }
        
        if(v3.api.env.Format && v3.api.env.Format.useDefaultFormatter){
            var useDefaultFormatter = v3.api.env.Format.useDefaultFormatter();
                v2.api.env.Format.useDefaultFormatter(useDefaultFormatter);          
        }

        root.api.core.createViz = function (param) {
            var version = sap.viz.api.manifest.Viz.get(param.type)[0]? 'v2' : 'v3';
            return root[version].api.core.createViz(param);
        };
        
        root.api.core.loadViz = function (vizJSON, container) {
            var chartJSON = JSON.parse(JSON.stringify(vizJSON));
            var version = sap.viz.api.manifest.Viz.get(vizJSON.type)[0]? 'v2' : 'v3';
            return root[version].api.core.loadViz(vizJSON, container);
        };

        root.api.env.Language.set = function(lang, callback, errCallback){
            var cb = mergedCallback(callback, errCallback);
            root.v2.api.env.Language.set(lang, cb('v2'), cb('v2', true));
            root.v3.api.env.Language.set(lang, cb('v3'), cb('v3', true));
        };

        root.api.env.Locale.set = function(value, callback){
            var cb = mergedCallback(callback);
            root.v2.api.env.Locale.set(value, cb('v2'));
            root.v3.api.env.Locale.set(value, cb('v3'));
        };

        root.api.env.Format.numericFormatter = function(value){
            root.v2.api.env.Format.numericFormatter(value);
            root.v3.api.env.Format.numericFormatter(value);
        };

        root.api.env.Format.useDefaultFormatter = function(value){
            root.v2.api.env.Format.useDefaultFormatter(value);
            root.v3.api.env.Format.useDefaultFormatter(value);
        };

        root.api.env.Resource.path = function(id, path){
            root.v2.api.env.Resource.path.apply(root.v2.api.env.Resource, arguments);
            return root.v3.api.env.Resource.path.apply(root.v3.api.env.Resource, arguments);
        };

        root.api.env.Template.set = function(value, callback, errCallback){
            var cb = mergedCallback(callback, errCallback);
            root.v2.api.env.Template.set(value, cb('v2'), cb('v2', true));
            root.v3.api.env.Template.set(value, cb('v3'), cb('v3', true));
        };

        root.extapi.env.Language.register = function(v){
            root.v2.extapi.env.Language.register(v);
            root.v3.extapi.env.Language.register(v);
        };
        root.extapi.env.Language.get = function(){
            root.v2.extapi.env.Language.get();
            return root.v3.extapi.env.Language.get();
        };
        root.extapi.env.Language.addListener = function(v) {
            var cb = mergedCallback(v);
            var v2cb = cb('v2');
            var v3cb = cb('v3');
            LanguageListenerCache[v] = {
                v2:v2cb,
                v3:v3cb
            }; 
            root.v2.extapi.env.Language.addListener(v2cb);
            return root.v3.extapi.env.Language.addListener(v3cb);
        };
        root.extapi.env.Language.removeListener = function(v) {
            if(LanguageListenerCache[v]){
                root.v2.extapi.env.Language.removeListener(LanguageListenerCache[v].v2);
                return root.v3.extapi.env.Language.removeListener(LanguageListenerCache[v].v3);                
            }
        };
        root.extapi.env.Language.getErrorMessage = function(v) {
            root.v2.extapi.env.Language.getErrorMessage(v);
            return root.v3.extapi.env.Language.getErrorMessage(v);
        };
        root.extapi.env.Language.getResourceString = function(v) {
            root.v2.extapi.env.Language.getResourceString(v);
            return root.v3.extapi.env.Language.getResourceString(v);
        };
        root.extapi.env.Locale.get = function() {
            root.v2.extapi.env.Locale.get();
            return root.v3.extapi.env.Locale.get();
        };
        root.extapi.env.Locale.addListener = function(v) {
            var cb = mergedCallback(v);
            var v2cb = cb('v2');
            var v3cb = cb('v3');
            LocaleListenerCache[v] = {
                v2:v2cb,
                v3:v3cb
            }; 
            root.v2.extapi.env.Locale.addListener(v2cb);
            return root.v3.extapi.env.Locale.addListener(v3cb);
        };
        root.extapi.env.Locale.removeListener = function(v) {
            if(LocaleListenerCache[v]){
                root.v2.extapi.env.Locale.removeListener(LocaleListenerCache[v].v2);
                return root.v3.extapi.env.Locale.removeListener(LocaleListenerCache[v].v3);                
            }
        };
        root.extapi.env.Template.get = function() {
            root.v2.extapi.env.Template.get();
            return root.v3.extapi.env.Template.get();
        };
        root.extapi.env.Template.current = function() {
            root.v2.extapi.env.Template.current();
            return root.v3.extapi.env.Template.current();
        };
        root.extapi.env.Template.addListener = function(v) {
            var cb = mergedCallback(v);
            var v2cb = cb('v2');
            var v3cb = cb('v3');
            TemplateListenerCache[v] = TemplateListenerCache[v] || [];
            TemplateListenerCache[v].push({
                v2:v2cb,
                v3:v3cb,
                v: v
            }); 
            root.v2.extapi.env.Template.addListener(v2cb);
            return root.v3.extapi.env.Template.addListener(v3cb);
        };
        root.extapi.env.Template.register = function(v){
            root.v2.extapi.env.Template.register(v);
            root.v3.extapi.env.Template.register(v);
        };        
        root.api.env.Template.addListener = function (v) {
            var cb = mergedCallback(v);
            var v2cb = cb('v2');
            var v3cb = cb('v3');
            TemplateListenerCache[v] = TemplateListenerCache[v] || [];
            TemplateListenerCache[v].push({
                v2:v2cb,
                v3:v3cb,
                v: v
            }); 
            root.v2.api.env.Template.addListener(v2cb);
            return root.v3.api.env.Template.addListener(v3cb);
        };
        root.api.env.Template.removeListener = function (v) {
            var ret,
                cache = TemplateListenerCache[v];
            if(cache){
                for (var i = 0; i < cache.length; i++) {
                    if (cache[i].v === v) {
                        root.v2.api.env.Template.removeListener(cache[i].v2);
                        ret = root.v3.api.env.Template.removeListener(cache[i].v3);
                        cache.splice(i, 1);
                        break;
                    }
                }
            }
            return ret;
        };
        root.extapi.env.Template.removeListener = function(v) {
            var ret,
                cache = TemplateListenerCache[v];
            if(cache){
                for (var i = 0; i < cache.length; i++) {
                    if (cache[i].v === v) {
                        root.v2.extapi.env.Template.removeListener(cache[i].v2);
                        ret = root.v3.extapi.env.Template.removeListener(cache[i].v3);
                        cache.splice(i, 1);
                        break;
                    }
                }
            }
            return ret;
        };
        root.extapi.core.registerBundle = function(v){
            root.v2.extapi.core.registerBundle(v);
            return root.v3.extapi.core.registerBundle(v);
        };
    }
})(this);
sap.viz.extapi.env.Language.register({id:'language',value: {IDS_ERROR_NOT_DETERMINE_AXIS_INDEX:"Could not determine measure value axis index",IDS_ERROR_WRONG_MEASURE_AXIS_INDEX:"The measure axis index in the feed definition {0} is incorrect.",IDS_ERROR_WRONG_TYPE:"Data type is incorrect.",IDS_ERROR_FLATTABLE_MANNUAL_FEED_WRONG_BINDING:"Field IDs in manual feeding are missing or are not in array format.",IDS_ERROR_NOT_CHILD_NODE_INSERT:"The node to be inserted is not a child of this node.",IDS_ERROR_DIMENSION_NOT_ZERO:"Length of dimension cannot be zero.",IDS_ERROR_NOT_ACCEPT:"Could not accept {0}",IDS_ERROR_NOT_SUPPORTED:"Not supported",IDS_ERROR_WRONG_VALUES_COUNT_IN_AA2:"The values count {0} in the second analysis axis (aa2) should be {1}.",IDS_ERROR_NOT_DETERMINE_DEMENSION:"Cannot determine the dimension after transform is applied",IDS_ERROR_NOT_MEET_NUMBER_OF_FEED:"{0} : does not meet the minimum or maximum number of feeds definition.",IDS_ERROR_WRONG_VALUES_COUNT_IN_AA1:"The values count {0} in the first analysis axis (aa1) should be {1}.",IDS_ERROR_UNKNOWN_STATE:"Unknown state",IDS_ERROR_CATEGORY_NAME_NOT_EMPTY:"The category name must be a non-empty string.",IDS_ERROR_NOT_CREATE_CHAIN_FOR_NON_FUNCTION_OBJECT:"Could not create a call chain for a non-function object.",IDS_ERROR_NO_FEED_ID:"Invalid feeding: no feed ID",IDS_FEED:"feed",IDS_ERROR_NOT_REGISTER_WITHOUT_VALID_ID:"Cannot register without a valid ID.",IDS_ERROR_FLATTABLE_FEED_DEF_FIELD_INDEX_MISSING:"The field index in feed definition {0} is missing.",IDS_ERROR_DIMENSION_WRONG_COUNT:"{0} is an incorrect dimension count.",IDS_ERROR_NODE_DIV_IN_SVG:"Cannot add <div> tag under <svg> tag.",IDS_ERROR_INVALID_FEEDING:"Invalid feeding: the feed {0} has exceeded the maximum stacked dimension number.",IDS_ERROR_INVALID_PATH_DEFINITION:"Invalid path definition: {0}.",IDS_ERROR_NOT_FIND_FEED_DEFINITION:"Could not find the feed definition of {0}.",IDS_ERROR_NODE_IS_NOT_CHILD_OF_THIS_NODE:"Node is not a child of this node",IDS_ERROR_DIMENSIONS_INCOMPLETE_BINDING:"Incomplete dimensions binding.",IDS_ERROR_NOT_ACCEPT_2_OR_MORE_AXES:"Could not accept more than 2 axes",IDS_ERROR_DIMENSIONS_OR_MEASURES_DUPLICATED_BINDING:"The dimensions/measures binding is duplicated.",IDS_ERROR_CUSTOMIZATION_ID:"Customization ID does not support the current chart type.",IDS_ERROR_AXIS_INDEX_SHOULD_BE_1_OR_2:"Axis index should be 1 or 2",IDS_ERROR_WRONG_FEED_TYPE:"The feed type of {0} is incorrect.",IDS_ERROR_CATEGORY_FACTORY_MUST_BE_FUNCTION:"The category factory must be a function.",IDS_ERROR_NEED_SPECIFY_OPTIONS_TO_INITIALIZE:"You must specify the chart or component options to initialize.",IDS_ERROR_NOT_INITIALIZE_WITHOUT_UICONTROLLER:"Cannot initialize without a root UIController <DIV>.",IDS_ERROR_CAN_NOT_FIND_CATEGORY:"Cannot find {0} in category {1}.",IDS_WARN_PARAMETER_NOT_CORRECT:"Input parameter is not correct.",IDS_ERROR_NOT_REGISTER_UNDEFINED_OBJECT:"Cannot register a undefined object.",IDS_ERROR_WRONG_AXIS_INDEX:"The analysis axis index in the feed definition {0} is incorrect.",IDS_ERROR_WRONG_FEED_TYPE_IN_DEFINTION:"The feed type in the feed definition {0} is incorrect.",IDS_ALREADY_EXISTS:"{0} already exists",IDS_ERROR_NOT_FIND_JQUERY:"Cannot find 'jQuery' library",IDS_ERROR_NEED_SPECIFY_HOLDER_FOR_VISUALIZATION:"The target <DIV> is not specified for rendering the visualization.",IDS_ERROR_EXIST_CATEGORY_NAME:"A category named {0} already exists.",IDS_ERROR_UNKNOWN_ERROR:"Unknown error.",IDS_ERROR_AXIS_ALREADY_EXIST:"Axis {0} already exists.",IDS_ERROR_DIMENSION_WRONG_LABELS_COUNT:"{0} is an incorrect dimension labels count.",IDS_ERROR_INVALID_FEEDING_NUMBER:"Invalid feeding: the correct number  is {0} feed.",IDS_ERROR_LOADING_TEMPLATE_FAIL:"Loading template {0} failed.",IDS_ERROR_PARSE_ERROR_EXPECT_TO:"An error occurred when parsing {0}; it should be: {1}.",IDS_ERROR_FEED_NOT_ACCEPT_DATA:"Feed {0} could not accept more data containers.",IDS_ERROR_NO_AXIS:"Could not find axis {0} in the dataset {1} feed.",IDS_ERROR_NEED_PROVIDE_CONTAINER_FOR_FRAME:"You must provide a container <DIV> for the visualization.",IDS_ERROR_FLATTABLE_INVALID_DATA_PARAM:"Invalid parameter, parameter must have metadata and data.",IDS_ERROR_ALREADY_EXIST_IN_CATEGORY:"There is already an item named {0} in category {1}.",IDS_WARN_LOCALE_NOT_CORRECT:"Input locale is not correct.",IDS_ERROR_NOT_ADD_SELF_AS_CHILD:"An ID cannot add itself as a child.",IDS_ERROR_NODE_NOT_IN_SAME_ROOT:"Node is not in the same root.",IDS_ERROR_NOT_ADD_ANCESTOR_AS_CHILD:"Cannot add ancestor as a child",IDS_ERROR_INVALID_BINDING:"Invalid data binding",IDS_ERROR_NOT_FIND_MEASURE_GROUP:"Could not find measure values group {0} in the dataset {1} feed.",IDS_ERROR_SELECTOR_NOT_NULL:"Selector string cannot be null.",}});sap.viz.extapi.env.Language.register({id:'language',value: {IDS_BASESINGLECHART:"Base Single Chart",IDS_MULTIDUALLINECHART:"Multiple Line Chart with 2 Y-Axes",IDS_HORIZONTALAREACHART:"Horizontal Area Chart",IDS_TRELLISPERCENTAGEHORIZONTALAREACHART:"Trellis 100% Horizontal Area Chart",IDS_ANIMATION:"animation",IDS_INVALID_DATE:"Invalid date",IDS_MULTIHORIZONTALAREACHART:"Multiple Horizontal Area Chart",IDS_GRIDVISIBLE:"gridVisible",IDS_ENABLEROUNDCORNER:"enableRoundCorner",IDS_TREECHART:"Tree",IDS_TRELLISHORIZONTALLINECHART:"Trellis Horizontal Line Chart",IDS_MULTISTACKEDBARCHART:"Multiple Stacked Bar Chart",IDS_RADARAXESVALUE:"Radar Axes Values",IDS_MULTIPIEWITHDEPTHCHART:"Multiple Pie with Depth Chart",IDS_TRELLISBARCHART:"Trellis Bar Chart",IDS_PIESECTORCOLORNAME:"Sector Color",IDS_TRELLISDUALPERCENTAGESTACKEDBARCHART:"Trellis 100% Stacked Bar Chart with 2 X-Axes",IDS_TIMEVALUEBUBBLECHART:"Time Bubble Chart",IDS_FORMAT:"Format",IDS_SECONDARYAXISLABELNAME:"Secondary Category Axis",IDS_LABEL:"Label",IDS_TRELLISPERCENTAGESTACKEDBARCHART:"Trellis 100% Stacked Bar Chart",IDS_SECONDARYVALUES:"Secondary Values",IDS_DATA_FRAME:"Data Frame",IDS_SEMANTIC_DEFAULT_TITLE:"Semantic Rules",IDS_TIMEBUBBLECHART:"Time Bubble Chart",IDS_NETLINK:"Network Link",IDS_MULTIPIECHART:"Multiple Pie Chart",IDS_VARIANTBARCHART:"Variant Bar Chart (POC)",IDS_MULTISTACKEDVERTICALBARCHART:"Multiple Stacked Column Chart",IDS_TRELLISAREACHART:"Trellis Area Chart",IDS_MULTIVERTICALBARCHART:"Multiple Column Chart",IDS_STACKEDVERTICALBARCHART:"Stacked Column Chart",IDS_MULTIPERCENTAGESTACKEDBARCHART:"Multiple 100% Stacked Bar Chart",IDS_VALUE_AXIS:"Value Axis",IDS_MULTIDUALSTACKEDVERTICALBARCHART:"Multiple Stacked Column Chart with 2 Y-Axes",IDS_TRELLISHORIZONTALCOMBINATIONCHART:"Trellis Combined Bar Line Chart",IDS_SCATTERMATRIXCHART:"Scatter Matrix Chart",IDS_ENDCOLUMN:"endColumn",IDS_DUALSTACKEDVERTICALBARCHART:"Stacked Column Chart with 2 Y-Axes",IDS_DEFAULTMND:"All Measures",IDS_MARKERS:"Markers",IDS_TAGFAMILY:"Tags Family",IDS_PRIMARYVALUES:"Primary Values",IDS_DONUTWITHDEPTHCHART:"Donut with Depth Chart",IDS_TREENODE:"Tree Node",IDS_VERTICALBULLETCHART:"Vertical Bullet Chart",IDS_CATEGORY_AXIS2:"Category Axis 2",IDS_MULTIDUALHORIZONTALLINECHART:"Multiple Horizontal Line Chart with 2 X-Axes",IDS_TRELLISBULLETCHART:"Trellis Bullet Chart",IDS_MULTIDUALPERCENTAGESTACKEDVERTICALBARCHART:"Multiple 100% Stacked Column Chart with 2 Y-Axes",IDS_MULTIDONUTWITHDEPTHCHART:"Multiple Donut with Depth Chart",IDS_AUTOBINNINGOTHERS:"Others",IDS_PIESECTORSIZE:"Sector Size",IDS_COMBINATIONCHART:"Combined Column Line Chart",IDS_COLUMNCONFIG:"columnConfig",IDS_MULTIDUALBARCHART:"Multiple Bar Chart with 2 X-Axes",IDS_TAGNAME:"Tags Name",IDS_STARTCOLOR:"startcolor",IDS_PERCENTAGESTACKEDBARCHART:"100% Stacked Bar Chart",IDS_STARTCOLUMN:"startColumn",IDS_TYPE:"Type",IDS_DUALHORIZONTALLINECHART:"Horizontal Line Chart with 2 X-Axes",IDS_NUMBERCHART_VALUE:"Value",IDS_TRELLISSTACKEDCOLUMNCHART:"Trellis Stacked Column Chart",IDS_SHAPE:"Shape",IDS_VERTICALBOXPLOTCHART:"Box Plot",IDS_BASEHORIZONTALCHART:"Base horizontal XY Chart",IDS_TOOLTIPVISIBLE:"tooltipVisible",IDS_SCATTERCHART:"Scatter Plot",IDS_PERCENTAGEAREACHART:"100% Area Chart",IDS_SEMANTICCOLOROTHERS:"Others",IDS_REGIONCOLOR:"Region Color",IDS_HORIZONTALCOMBINATIONCHART:"Combined Bar Line Chart",IDS_BORDER:"Border",IDS_MULTIPERCENTAGEAREACHART:"Multiple 100% Area Chart",IDS_REFERENCEVALUES:"Reference Values",IDS_WATERFALLCHART:"Waterfall Chart",IDS_TRELLISHORIZONTALAREACHART:"Trellis Horizontal Area Chart",IDS_HORIZONTALSTACKEDWATERFALL:"Horizontal Stacked Waterfall Chart",IDS_STACKEDWATERFALLCHART:"Stacked Waterfall Chart",IDS_VISIBLE:"visible",IDS_GRIDLINE:"Gridline",IDS_SECONDARYVALUESCOLORPALETTE:"secondaryValuesColorPalette",IDS_SIZE:"size",IDS_MULTIBARCHART:"Multiple Bar Chart",IDS_DUALPERCENTAGESTACKEDVERTICALBARCHART:"100% Stacked Column Chart with 2 Y-Axes",IDS_TRELLISSCATTERCHART:"Trellis Scatter Chart",ID_FORECAST_VALUES:"Forecast Values",IDS_TAGCLOUDCHART:"Tag Cloud",IDS_TARGETVALUES:"Target Values",IDS_LOWCOLUMN:"lowColumn",IDS_MULTIBUBBLECHART:"Multiple Bubble Chart",IDS_FILLVISIBLE:"fillVisible",IDS_TRELLISDUALPERCENTAGESTACKEDCOLUMNCHART:"Trellis 100% Stacked Column Chart with 2 Y-Axes",IDS_STACKEDBARCHART:"Stacked Bar Chart",IDS_PIECHART:"Pie Chart",IDS_VERTICALBARCHART:"Column Chart",IDS_SPARKLINECHART:"Spark Line Chart (POC)",IDS_TRELLISPERCENTAGESTACKEDCOLUMNCHART:"Trellis 100% Stacked Column Chart",IDS_ISNOVALUE:"No value",IDS_BUBBLEWIDTH:"Bubble Width",IDS_BUBBLESIZE:"Bubble Size",IDS_HORIZONTALWATERFALLCHART:"Horizontal Waterfall Chart",IDS_VALUEFORMAT:"valueFormat",IDS_PIEWITHDEPTHCHART:"Pie with Depth Chart",IDS_BASEBUBBLECHART:"Base Scatter Chart",IDS_REFINEVISIBLE:"reflineVisible",IDS_TRELLISSTACKEDBARCHART:"Trellis Stacked Bar Chart",IDS_HEATMAPCHART:"Heat Map",IDS_DUALLINECHART:"Line Chart with 2 Y-Axes",IDS_WIDTH:"Width",IDS_HOVERLINEVISIBLE:"hoverlineVisible",IDS_MEKKOCHART:"Marimekko chart",IDS_HORIZONTALMEKKOCHART:"Horizontal Marimekko Chart",IDS_BUBBLECHART:"Bubble Chart",IDS_BASEMULTIPLEXYCHART:"Base Multiple XY Chart",IDS_HEADERVISIBLE:"headerVisible",IDS_TRELLISVERTICALBULLETCHART:"Trellis Vertical Bullet Chart",IDS_LINECHART:"Line Chart",IDS_BUBBLEHEIGHT:"Bubble Height",IDS_NUMBERCHART:"Numeric Point",IDS_PERCENTAGEHORIZONTALMEKKOCHART:"100% Horizontal Marimekko Chart",IDS_MARKER:"Marker",IDS_PERCENTAGESTACKEDVERTICALBARCHART:"100% Stacked Column Chart",IDS_BASEVERTICALCHART:"Base Vertical XY Chart",IDS_DIUALLINECHART:"Line Chart with 2 Y-Axes",IDS_TRELLIS_COLUMN:"Trellis Column",IDS_BASEMULTIPLECHART:"Base Multiple Chart",IDS_PERCENTAGEMEKKOCHART:"Marimekko Chart",IDS_MULTIDUALVERTICALBARCHART:"Multiple Column Chart with 2 Y-Axes",IDS_DUALCOMBINATIONCHART:"Combined Column Line Chart with 2 Y-Axes",IDS_RADARCHART:"Radar Chart",IDS_TRELLISCOMBINATIONCHART:"Trellis Combined Column Line Chart",IDS_DUALSTACKEDBARCHART:"Stacked Bar Chart with 2 X-Axes",IDS_TRELLISPERCENTAGEAREACHART:"Trellis 100% Area Chart",IDS_TRELLISDUALSTACKEDCOLUMNCHART:"Trellis Stacked Column Chart with 2 Y-Axes",IDS_SELECTABILITY:"Selectability",IDS_AXISVISIBLE:"axisVisible",IDS_DEFAULTCHARTTITLE:"Title of Chart",IDS_MULTIPERCENTAGESTACKEDVERTICALBARCHART:"Multiple 100% Stacked Column Chart",IDS_AXISLABELS:"Axis Labels",IDS_MULTIDUALSTACKEDBARCHART:"Multiple Stacked Bar Chart with 2 X-Axes",IDS_MULTIRADARCHART:"Multiple Radar Chart",IDS_TRELLIS_ROW:"Trellis Row",IDS_MULTILINECHART:"Multiple Line Chart",IDS_BARCHART:"Bar Chart",IDS_3D_BAR:"3D Bar Chart",IDS_TRELLISCOLUMNCHART:"Trellis Column Chart",IDS_DATAUPDATING:"dataUpdating",IDS_3D_COLUMN:"3D Column Chart",IDS_TRELLISPIECHART:"Trellis Pie Chart",IDS_HORIZONTALLINECHART:"Horizontal Line Chart",IDS_NETWORKCHART:"Network Chart",IDS_DUALVERTICALBARCHART:"Column Chart with 2 Y-Axes",IDS_RECTANGLEWEIGHT:"Rectangle Weight",IDS_PIEDEPTHSIZE:"Depth Size",IDS_MULTIHORIZONTALLINECHART:"Multiple Horizontal Line Chart",IDS_DUALHORIZONTALSTACKEDCOMBINATIONCHART:"Horizontal Combined Stacked Line Chart with 2 X-Axes",IDS_COLOR:"color",IDS_TEXT:"Text",IDS_DUALBARCHART:"Bar Chart with 2 X-Axes",IDS_TRELLISLINECHART:"Trellis Line Chart",IDS_DATALOADING:"dataLoading",IDS_BASECHART:"Base Chart",IDS_HORIZONTALBOXPLOTCHART:"Horizontal Box Plot",IDS_TRELLISDUALCOLUMNCHART:"Trellis Column Chart with 2 Y-Axes",IDS_LINECONFIG:"lineConfig",IDS_VALUES_SELECTED:"values selected",IDS_DUALHORIZONTALCOMBINATIONCHART:"Combined Bar Line Chart with 2 X-Axes",IDS_PRIMARYVALUECOLORPALETTE:"primaryValuesColorPalette",IDS_TRELLISDONUTCHART:"Trellis Donut Chart",IDS_PERCENTAGEHORIZONTALAREACHART:"100% Horizontal Area Chart",IDS_HIGHCOLUMN:"highColumn",IDS_TREEMAPCHART:"Tree Map",IDS_MULTISCATTERCHART:"Multiple Scatter Plot",IDS_SEMANTICCOLORRANGE:"Semantic Range",IDS_MODE:"Mode",IDS_TRELLISDUALLINECHART:"Trellis Line Chart with 2 Y-Axes",IDS_BULLETCHART:"Bullet Chart",IDS_AREACHART:"Area Chart",IDS_FORECAST_VALUES:"Forecast Values",IDS_LINE:"Line",IDS_ENDCOLOR:"endcolor",IDS_CATEGORY_AXIS:"Category Axis",IDS_DUALPERCENTAGESTACKEDBARCHART:"100% Stacked Bar Chart with 2 X-Axes",IDS_VALUE_AXIS2:"Value Axis 2",IDS_WEIGHT:"weight",IDS_REGIONSHAPE:"Region Shape",IDS_DONUTCHART:"Donut Chart",IDS_TITLE:"Title",IDS_MULTIPERCENTAGEHORIZONTALAREACHART:"Multiple 100% Horizontal Area Chart",IDS_RECTANGLECOLOR:"Rectangle Color",IDS_CATEGORYAXIS:"Axis Labels Category",IDS_COLUMNSEQUENCE:"columnSequence",IDS_MAINLABELAXISNAME:"Main Category Axis",IDS_RADARAXES:"Radar Axes",IDS_HORIZONTALSTACKEDCOMBINATIONCHART:"Horizontal Combined Stacked Line Chart",IDS_DRAWINGEFFECT:"drawingEffect",IDS_SHOWFIRSTLINE:"showFirstLine",IDS_MULTIDUALPERCENTAGESTACKEDBARCHART:"Multiple 100% Stacked Bar Chart with 2 X-Axes",IDS_TRELLISBUBBLECHART:"Trellis Bubble Chart",IDS_TRELLISDUALBARCHART:"Trellis Bar Chart with 2 X-Axes",IDS_TRELLISDUALHORIZONTALLINECHART:"Trellis Horizontal Line Chart with 2 X-Axes",IDS_TAGWEIGHT:"Tags Weight",IDS_BAR:"Bar",IDS_STACKEDCOMBINATIONCHART:"Combined Stacked Line Chart",IDS_POSITION:"Position",IDS_TRELLISDUALSTACKEDBARCHART:"Trellis Stacked Bar Chart with 2 X-Axes",IDS_MULTIAREACHART:"Multiple Area Chart",IDS_DUALSTACKEDCOMBINATIONCHART:"Combined Stacked Line Chart with 2 Y-Axes",IDS_MULTIDONUTCHART:"Multiple Donut Chart",IDS_RECTANGLETITLE:"Rectangle Title",}});Object.defineProperty(sap.viz.api, 'VERSION', { value: '5.10.0', writable: false });
Object.defineProperty(sap.viz.extapi, 'VERSION', { value: '5.10.0', writable: false });if (window.__sap_viz_internal_requirejs_nextTick__ !== undefined) {
    if (requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._) {
        requirejs.s.contexts._.nextTick = window.__sap_viz_internal_requirejs_nextTick__;
        if (requirejs.s.contexts._.definedTmp) {
            for (var i in requirejs.s.contexts._.definedTmp) {
                if (requirejs.s.contexts._.definedTmp.hasOwnProperty(i) && !requirejs.s.contexts._.defined[i]) {
                    requirejs.s.contexts._.defined[i] = requirejs.s.contexts._.definedTmp[i];
                }
            }
            requirejs.s.contexts._.definedTmp = undefined;
        }
    }
    window.__sap_viz_internal_requirejs_nextTick__ = undefined;
}if(define && define.__exportNS){
    define = define.__exportNS;
}